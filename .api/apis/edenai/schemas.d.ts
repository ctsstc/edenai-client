declare const AudioSpeechToTextAsyncCreate: {
  readonly body: {
    readonly type: 'object';
    readonly properties: {
      readonly providers: {
        readonly type: 'string';
        readonly minLength: 1;
        readonly description: "It can be one (ex: **'amazon'** or **'google'**) or multiple provider(s) (ex: **'amazon,microsoft,google'**)             that the data will be redirected to in order to get the processed results.";
        readonly examples: readonly [
          'assembly,deepgram,google,openai,speechmatics,microsoft,voci,symbl,revai,gladia,ibm,neuralspace,oneai,amazon'
        ];
      };
      readonly fallback_providers: {
        readonly type: 'string';
        readonly minLength: 1;
        readonly description: "Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.\n    To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.\n\nThey will be tried in the same order they are input, and it will stop to the first provider who doesn't fail.\n\n\n*Doesn't work with async subfeatures.*\n    ";
      };
      readonly show_original_response: {
        readonly type: 'boolean';
        readonly default: false;
        readonly description: 'Optional : Shows the original response of the provider.<br>\n        When set to **true**, a new attribute *original_response* will appear in the response object.';
      };
      readonly webhook_receiver: {
        readonly type: 'string';
        readonly format: 'uri';
        readonly minLength: 1;
        readonly description: 'Webhook receiver should be a valid https URL (ex : https://your.listner.com/endpoint).             After the processing is done, the webhook endpoint will receive a POST request with the result.';
      };
      readonly users_webhook_parameters: {
        readonly type: 'object';
        readonly additionalProperties: true;
        readonly description: "Json data that contains of additional parameters that will be sent back to the webhook receiver             (ex: api key for security or client's data ID to link the result internally).             Will only be used when webhook_receiver is set.";
      };
      readonly settings: {
        readonly type: readonly ['object', 'null'];
        readonly additionalProperties: {
          readonly type: 'string';
          readonly minLength: 1;
          readonly description: 'The model id/name specified for the provider';
          readonly maxLength: 50;
        };
        readonly description: "A dictionnary or a json object to specify specific models to use for some providers. <br>                     It can be in the following format: {'google' : 'google_model', ibm': 'ibm_model'...}.\n                     **Caution**: setting models can be done only with `Content-Type` : `application/json`.\n                     ";
      };
      readonly file: {
        readonly type: 'string';
        readonly format: 'binary';
        readonly description: 'File to analyse in binary format to be used with *content-type*: **multipart/form-data** <br> **Does not work with application/json !**';
      };
      readonly file_url: {
        readonly type: readonly ['string', 'null'];
        readonly format: 'uri';
        readonly description: 'File **URL** to analyse to be used with with *content-type*: **application/json**.';
        readonly examples: readonly ['http://edenai-resource-example.mp3'];
      };
      readonly language: {
        readonly type: readonly ['string', 'null'];
        readonly description: 'Language code expected (ex: en, fr)';
        readonly examples: readonly ['en'];
      };
      readonly speakers: {
        readonly type: readonly ['integer', 'null'];
        readonly default: 2;
        readonly description: 'Number of speakers in the file audio';
        readonly examples: readonly [2];
      };
      readonly profanity_filter: {
        readonly type: readonly ['boolean', 'null'];
        readonly default: false;
        readonly description: 'Boolean value to specify weather or not the service will filter profanity and replace inappropriate words with a series of asterisks';
      };
      readonly custom_vocabulary: {
        readonly type: 'string';
        readonly minLength: 1;
        readonly description: 'List of words or composed words to be detected by the speech to text engine. (Ex: Word, Mike, Draw, Los Angeles,...)';
      };
      readonly convert_to_wav: {
        readonly type: readonly ['boolean', 'null'];
        readonly default: false;
        readonly description: 'Boolean value to specify weather to convert the audio/video file to wav format to be accepted by a majority of the providers';
      };
    };
    readonly required: readonly ['providers'];
    readonly $schema: 'http://json-schema.org/draft-04/schema#';
  };
  readonly response: {
    readonly '200': {
      readonly type: 'object';
      readonly properties: {
        readonly public_id: {
          readonly type: 'string';
          readonly format: 'uuid';
        };
      };
      readonly required: readonly ['public_id'];
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
  };
};
declare const AudioSpeechToTextAsyncRetrieve: {
  readonly response: {
    readonly '200': {
      readonly type: 'object';
      readonly properties: {
        readonly jobs: {
          readonly type: 'array';
          readonly items: {
            readonly type: 'object';
            readonly properties: {
              readonly providers: {
                readonly type: 'string';
              };
              readonly nb: {
                readonly type: 'integer';
              };
              readonly nb_ok: {
                readonly type: 'integer';
              };
              readonly public_id: {
                readonly type: 'string';
                readonly format: 'uuid';
              };
              readonly state: {
                readonly enum: readonly ['finished', 'failed', 'Timeout error', 'processing'];
                readonly type: 'string';
                readonly description: '* `finished` - finished\n* `failed` - failed\n* `Timeout error` - Timeout error\n* `processing` - processing\n\n`finished` `failed` `Timeout error` `processing`';
              };
              readonly created_at: {
                readonly type: 'string';
                readonly format: 'date-time';
              };
            };
            readonly required: readonly [
              'created_at',
              'nb',
              'nb_ok',
              'providers',
              'public_id',
              'state'
            ];
          };
        };
      };
      readonly required: readonly ['jobs'];
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
  };
};
declare const AudioSpeechToTextAsyncRetrieve2: {
  readonly metadata: {
    readonly allOf: readonly [
      {
        readonly type: 'object';
        readonly properties: {
          readonly public_id: {
            readonly type: 'string';
            readonly $schema: 'http://json-schema.org/draft-04/schema#';
          };
        };
        readonly required: readonly ['public_id'];
      },
      {
        readonly type: 'object';
        readonly properties: {
          readonly response_as_dict: {
            readonly type: 'boolean';
            readonly default: true;
            readonly $schema: 'http://json-schema.org/draft-04/schema#';
          };
          readonly show_original_response: {
            readonly type: 'boolean';
            readonly default: false;
            readonly $schema: 'http://json-schema.org/draft-04/schema#';
          };
        };
        readonly required: readonly [];
      }
    ];
  };
  readonly response: {
    readonly '200': {
      readonly properties: {
        readonly results: {
          readonly properties: {
            readonly gladia: {
              readonly required: readonly ['text', 'diarization', 'id', 'final_status'];
              readonly title: 'audiospeech_to_text_asyncSpeechToTextAsyncDataClass';
              readonly type: 'object';
              readonly properties: {
                readonly text: {
                  readonly title: 'Text';
                  readonly type: 'string';
                };
                readonly diarization: {
                  readonly required: readonly ['total_speakers'];
                  readonly title: 'SpeechDiarization';
                  readonly type: 'object';
                  readonly properties: {
                    readonly total_speakers: {
                      readonly title: 'Total Speakers';
                      readonly type: 'integer';
                    };
                    readonly entries: {
                      readonly title: 'Entries';
                      readonly type: 'array';
                      readonly items: {
                        readonly required: readonly [
                          'segment',
                          'start_time',
                          'end_time',
                          'speaker',
                          'confidence'
                        ];
                        readonly title: 'SpeechDiarizationEntry';
                        readonly type: 'object';
                        readonly properties: {
                          readonly segment: {
                            readonly title: 'Segment';
                            readonly type: 'string';
                          };
                          readonly start_time: {
                            readonly title: 'Start Time';
                            readonly type: 'string';
                          };
                          readonly end_time: {
                            readonly title: 'End Time';
                            readonly type: 'string';
                          };
                          readonly speaker: {
                            readonly title: 'Speaker';
                            readonly type: 'integer';
                          };
                          readonly confidence: {
                            readonly title: 'Confidence';
                            readonly type: 'integer';
                          };
                        };
                      };
                    };
                    readonly error_message: {
                      readonly default: any;
                      readonly title: 'Error Message';
                      readonly type: 'string';
                    };
                  };
                };
                readonly original_response: {
                  readonly default: any;
                  readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
                  readonly title: 'Original Response';
                };
                readonly id: {
                  readonly title: 'Id';
                  readonly type: 'string';
                };
                readonly final_status: {
                  readonly title: 'Final Status';
                  readonly enum: readonly ['sucess', 'fail'];
                  readonly type: 'string';
                  readonly description: '`sucess` `fail`';
                };
                readonly error: {
                  readonly title: 'Error';
                  readonly type: 'object';
                  readonly additionalProperties: true;
                };
              };
            };
            readonly revai: {
              readonly required: readonly ['text', 'diarization', 'id', 'final_status'];
              readonly title: 'audiospeech_to_text_asyncSpeechToTextAsyncDataClass';
              readonly type: 'object';
              readonly properties: {
                readonly text: {
                  readonly title: 'Text';
                  readonly type: 'string';
                };
                readonly diarization: {
                  readonly required: readonly ['total_speakers'];
                  readonly title: 'SpeechDiarization';
                  readonly type: 'object';
                  readonly properties: {
                    readonly total_speakers: {
                      readonly title: 'Total Speakers';
                      readonly type: 'integer';
                    };
                    readonly entries: {
                      readonly title: 'Entries';
                      readonly type: 'array';
                      readonly items: {
                        readonly required: readonly [
                          'segment',
                          'start_time',
                          'end_time',
                          'speaker',
                          'confidence'
                        ];
                        readonly title: 'SpeechDiarizationEntry';
                        readonly type: 'object';
                        readonly properties: {
                          readonly segment: {
                            readonly title: 'Segment';
                            readonly type: 'string';
                          };
                          readonly start_time: {
                            readonly title: 'Start Time';
                            readonly type: 'string';
                          };
                          readonly end_time: {
                            readonly title: 'End Time';
                            readonly type: 'string';
                          };
                          readonly speaker: {
                            readonly title: 'Speaker';
                            readonly type: 'integer';
                          };
                          readonly confidence: {
                            readonly title: 'Confidence';
                            readonly type: 'integer';
                          };
                        };
                      };
                    };
                    readonly error_message: {
                      readonly default: any;
                      readonly title: 'Error Message';
                      readonly type: 'string';
                    };
                  };
                };
                readonly original_response: {
                  readonly default: any;
                  readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
                  readonly title: 'Original Response';
                };
                readonly id: {
                  readonly title: 'Id';
                  readonly type: 'string';
                };
                readonly final_status: {
                  readonly title: 'Final Status';
                  readonly enum: readonly ['sucess', 'fail'];
                  readonly type: 'string';
                  readonly description: '`sucess` `fail`';
                };
                readonly error: {
                  readonly title: 'Error';
                  readonly type: 'object';
                  readonly additionalProperties: true;
                };
              };
            };
            readonly voxist: {
              readonly required: readonly ['text', 'diarization', 'id', 'final_status'];
              readonly title: 'audiospeech_to_text_asyncSpeechToTextAsyncDataClass';
              readonly type: 'object';
              readonly properties: {
                readonly text: {
                  readonly title: 'Text';
                  readonly type: 'string';
                };
                readonly diarization: {
                  readonly required: readonly ['total_speakers'];
                  readonly title: 'SpeechDiarization';
                  readonly type: 'object';
                  readonly properties: {
                    readonly total_speakers: {
                      readonly title: 'Total Speakers';
                      readonly type: 'integer';
                    };
                    readonly entries: {
                      readonly title: 'Entries';
                      readonly type: 'array';
                      readonly items: {
                        readonly required: readonly [
                          'segment',
                          'start_time',
                          'end_time',
                          'speaker',
                          'confidence'
                        ];
                        readonly title: 'SpeechDiarizationEntry';
                        readonly type: 'object';
                        readonly properties: {
                          readonly segment: {
                            readonly title: 'Segment';
                            readonly type: 'string';
                          };
                          readonly start_time: {
                            readonly title: 'Start Time';
                            readonly type: 'string';
                          };
                          readonly end_time: {
                            readonly title: 'End Time';
                            readonly type: 'string';
                          };
                          readonly speaker: {
                            readonly title: 'Speaker';
                            readonly type: 'integer';
                          };
                          readonly confidence: {
                            readonly title: 'Confidence';
                            readonly type: 'integer';
                          };
                        };
                      };
                    };
                    readonly error_message: {
                      readonly default: any;
                      readonly title: 'Error Message';
                      readonly type: 'string';
                    };
                  };
                };
                readonly original_response: {
                  readonly default: any;
                  readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
                  readonly title: 'Original Response';
                };
                readonly id: {
                  readonly title: 'Id';
                  readonly type: 'string';
                };
                readonly final_status: {
                  readonly title: 'Final Status';
                  readonly enum: readonly ['sucess', 'fail'];
                  readonly type: 'string';
                  readonly description: '`sucess` `fail`';
                };
                readonly error: {
                  readonly title: 'Error';
                  readonly type: 'object';
                  readonly additionalProperties: true;
                };
              };
            };
            readonly symbl: {
              readonly required: readonly ['text', 'diarization', 'id', 'final_status'];
              readonly title: 'audiospeech_to_text_asyncSpeechToTextAsyncDataClass';
              readonly type: 'object';
              readonly properties: {
                readonly text: {
                  readonly title: 'Text';
                  readonly type: 'string';
                };
                readonly diarization: {
                  readonly required: readonly ['total_speakers'];
                  readonly title: 'SpeechDiarization';
                  readonly type: 'object';
                  readonly properties: {
                    readonly total_speakers: {
                      readonly title: 'Total Speakers';
                      readonly type: 'integer';
                    };
                    readonly entries: {
                      readonly title: 'Entries';
                      readonly type: 'array';
                      readonly items: {
                        readonly required: readonly [
                          'segment',
                          'start_time',
                          'end_time',
                          'speaker',
                          'confidence'
                        ];
                        readonly title: 'SpeechDiarizationEntry';
                        readonly type: 'object';
                        readonly properties: {
                          readonly segment: {
                            readonly title: 'Segment';
                            readonly type: 'string';
                          };
                          readonly start_time: {
                            readonly title: 'Start Time';
                            readonly type: 'string';
                          };
                          readonly end_time: {
                            readonly title: 'End Time';
                            readonly type: 'string';
                          };
                          readonly speaker: {
                            readonly title: 'Speaker';
                            readonly type: 'integer';
                          };
                          readonly confidence: {
                            readonly title: 'Confidence';
                            readonly type: 'integer';
                          };
                        };
                      };
                    };
                    readonly error_message: {
                      readonly default: any;
                      readonly title: 'Error Message';
                      readonly type: 'string';
                    };
                  };
                };
                readonly original_response: {
                  readonly default: any;
                  readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
                  readonly title: 'Original Response';
                };
                readonly id: {
                  readonly title: 'Id';
                  readonly type: 'string';
                };
                readonly final_status: {
                  readonly title: 'Final Status';
                  readonly enum: readonly ['sucess', 'fail'];
                  readonly type: 'string';
                  readonly description: '`sucess` `fail`';
                };
                readonly error: {
                  readonly title: 'Error';
                  readonly type: 'object';
                  readonly additionalProperties: true;
                };
              };
            };
            readonly assembly: {
              readonly required: readonly ['text', 'diarization', 'id', 'final_status'];
              readonly title: 'audiospeech_to_text_asyncSpeechToTextAsyncDataClass';
              readonly type: 'object';
              readonly properties: {
                readonly text: {
                  readonly title: 'Text';
                  readonly type: 'string';
                };
                readonly diarization: {
                  readonly required: readonly ['total_speakers'];
                  readonly title: 'SpeechDiarization';
                  readonly type: 'object';
                  readonly properties: {
                    readonly total_speakers: {
                      readonly title: 'Total Speakers';
                      readonly type: 'integer';
                    };
                    readonly entries: {
                      readonly title: 'Entries';
                      readonly type: 'array';
                      readonly items: {
                        readonly required: readonly [
                          'segment',
                          'start_time',
                          'end_time',
                          'speaker',
                          'confidence'
                        ];
                        readonly title: 'SpeechDiarizationEntry';
                        readonly type: 'object';
                        readonly properties: {
                          readonly segment: {
                            readonly title: 'Segment';
                            readonly type: 'string';
                          };
                          readonly start_time: {
                            readonly title: 'Start Time';
                            readonly type: 'string';
                          };
                          readonly end_time: {
                            readonly title: 'End Time';
                            readonly type: 'string';
                          };
                          readonly speaker: {
                            readonly title: 'Speaker';
                            readonly type: 'integer';
                          };
                          readonly confidence: {
                            readonly title: 'Confidence';
                            readonly type: 'integer';
                          };
                        };
                      };
                    };
                    readonly error_message: {
                      readonly default: any;
                      readonly title: 'Error Message';
                      readonly type: 'string';
                    };
                  };
                };
                readonly original_response: {
                  readonly default: any;
                  readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
                  readonly title: 'Original Response';
                };
                readonly id: {
                  readonly title: 'Id';
                  readonly type: 'string';
                };
                readonly final_status: {
                  readonly title: 'Final Status';
                  readonly enum: readonly ['sucess', 'fail'];
                  readonly type: 'string';
                  readonly description: '`sucess` `fail`';
                };
                readonly error: {
                  readonly title: 'Error';
                  readonly type: 'object';
                  readonly additionalProperties: true;
                };
              };
            };
            readonly speechmatics: {
              readonly required: readonly ['text', 'diarization', 'id', 'final_status'];
              readonly title: 'audiospeech_to_text_asyncSpeechToTextAsyncDataClass';
              readonly type: 'object';
              readonly properties: {
                readonly text: {
                  readonly title: 'Text';
                  readonly type: 'string';
                };
                readonly diarization: {
                  readonly required: readonly ['total_speakers'];
                  readonly title: 'SpeechDiarization';
                  readonly type: 'object';
                  readonly properties: {
                    readonly total_speakers: {
                      readonly title: 'Total Speakers';
                      readonly type: 'integer';
                    };
                    readonly entries: {
                      readonly title: 'Entries';
                      readonly type: 'array';
                      readonly items: {
                        readonly required: readonly [
                          'segment',
                          'start_time',
                          'end_time',
                          'speaker',
                          'confidence'
                        ];
                        readonly title: 'SpeechDiarizationEntry';
                        readonly type: 'object';
                        readonly properties: {
                          readonly segment: {
                            readonly title: 'Segment';
                            readonly type: 'string';
                          };
                          readonly start_time: {
                            readonly title: 'Start Time';
                            readonly type: 'string';
                          };
                          readonly end_time: {
                            readonly title: 'End Time';
                            readonly type: 'string';
                          };
                          readonly speaker: {
                            readonly title: 'Speaker';
                            readonly type: 'integer';
                          };
                          readonly confidence: {
                            readonly title: 'Confidence';
                            readonly type: 'integer';
                          };
                        };
                      };
                    };
                    readonly error_message: {
                      readonly default: any;
                      readonly title: 'Error Message';
                      readonly type: 'string';
                    };
                  };
                };
                readonly original_response: {
                  readonly default: any;
                  readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
                  readonly title: 'Original Response';
                };
                readonly id: {
                  readonly title: 'Id';
                  readonly type: 'string';
                };
                readonly final_status: {
                  readonly title: 'Final Status';
                  readonly enum: readonly ['sucess', 'fail'];
                  readonly type: 'string';
                  readonly description: '`sucess` `fail`';
                };
                readonly error: {
                  readonly title: 'Error';
                  readonly type: 'object';
                  readonly additionalProperties: true;
                };
              };
            };
            readonly voci: {
              readonly required: readonly ['text', 'diarization', 'id', 'final_status'];
              readonly title: 'audiospeech_to_text_asyncSpeechToTextAsyncDataClass';
              readonly type: 'object';
              readonly properties: {
                readonly text: {
                  readonly title: 'Text';
                  readonly type: 'string';
                };
                readonly diarization: {
                  readonly required: readonly ['total_speakers'];
                  readonly title: 'SpeechDiarization';
                  readonly type: 'object';
                  readonly properties: {
                    readonly total_speakers: {
                      readonly title: 'Total Speakers';
                      readonly type: 'integer';
                    };
                    readonly entries: {
                      readonly title: 'Entries';
                      readonly type: 'array';
                      readonly items: {
                        readonly required: readonly [
                          'segment',
                          'start_time',
                          'end_time',
                          'speaker',
                          'confidence'
                        ];
                        readonly title: 'SpeechDiarizationEntry';
                        readonly type: 'object';
                        readonly properties: {
                          readonly segment: {
                            readonly title: 'Segment';
                            readonly type: 'string';
                          };
                          readonly start_time: {
                            readonly title: 'Start Time';
                            readonly type: 'string';
                          };
                          readonly end_time: {
                            readonly title: 'End Time';
                            readonly type: 'string';
                          };
                          readonly speaker: {
                            readonly title: 'Speaker';
                            readonly type: 'integer';
                          };
                          readonly confidence: {
                            readonly title: 'Confidence';
                            readonly type: 'integer';
                          };
                        };
                      };
                    };
                    readonly error_message: {
                      readonly default: any;
                      readonly title: 'Error Message';
                      readonly type: 'string';
                    };
                  };
                };
                readonly original_response: {
                  readonly default: any;
                  readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
                  readonly title: 'Original Response';
                };
                readonly id: {
                  readonly title: 'Id';
                  readonly type: 'string';
                };
                readonly final_status: {
                  readonly title: 'Final Status';
                  readonly enum: readonly ['sucess', 'fail'];
                  readonly type: 'string';
                  readonly description: '`sucess` `fail`';
                };
                readonly error: {
                  readonly title: 'Error';
                  readonly type: 'object';
                  readonly additionalProperties: true;
                };
              };
            };
            readonly deepgram: {
              readonly required: readonly ['text', 'diarization', 'id', 'final_status'];
              readonly title: 'audiospeech_to_text_asyncSpeechToTextAsyncDataClass';
              readonly type: 'object';
              readonly properties: {
                readonly text: {
                  readonly title: 'Text';
                  readonly type: 'string';
                };
                readonly diarization: {
                  readonly required: readonly ['total_speakers'];
                  readonly title: 'SpeechDiarization';
                  readonly type: 'object';
                  readonly properties: {
                    readonly total_speakers: {
                      readonly title: 'Total Speakers';
                      readonly type: 'integer';
                    };
                    readonly entries: {
                      readonly title: 'Entries';
                      readonly type: 'array';
                      readonly items: {
                        readonly required: readonly [
                          'segment',
                          'start_time',
                          'end_time',
                          'speaker',
                          'confidence'
                        ];
                        readonly title: 'SpeechDiarizationEntry';
                        readonly type: 'object';
                        readonly properties: {
                          readonly segment: {
                            readonly title: 'Segment';
                            readonly type: 'string';
                          };
                          readonly start_time: {
                            readonly title: 'Start Time';
                            readonly type: 'string';
                          };
                          readonly end_time: {
                            readonly title: 'End Time';
                            readonly type: 'string';
                          };
                          readonly speaker: {
                            readonly title: 'Speaker';
                            readonly type: 'integer';
                          };
                          readonly confidence: {
                            readonly title: 'Confidence';
                            readonly type: 'integer';
                          };
                        };
                      };
                    };
                    readonly error_message: {
                      readonly default: any;
                      readonly title: 'Error Message';
                      readonly type: 'string';
                    };
                  };
                };
                readonly original_response: {
                  readonly default: any;
                  readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
                  readonly title: 'Original Response';
                };
                readonly id: {
                  readonly title: 'Id';
                  readonly type: 'string';
                };
                readonly final_status: {
                  readonly title: 'Final Status';
                  readonly enum: readonly ['sucess', 'fail'];
                  readonly type: 'string';
                  readonly description: '`sucess` `fail`';
                };
                readonly error: {
                  readonly title: 'Error';
                  readonly type: 'object';
                  readonly additionalProperties: true;
                };
              };
            };
            readonly microsoft: {
              readonly required: readonly ['text', 'diarization', 'id', 'final_status'];
              readonly title: 'audiospeech_to_text_asyncSpeechToTextAsyncDataClass';
              readonly type: 'object';
              readonly properties: {
                readonly text: {
                  readonly title: 'Text';
                  readonly type: 'string';
                };
                readonly diarization: {
                  readonly required: readonly ['total_speakers'];
                  readonly title: 'SpeechDiarization';
                  readonly type: 'object';
                  readonly properties: {
                    readonly total_speakers: {
                      readonly title: 'Total Speakers';
                      readonly type: 'integer';
                    };
                    readonly entries: {
                      readonly title: 'Entries';
                      readonly type: 'array';
                      readonly items: {
                        readonly required: readonly [
                          'segment',
                          'start_time',
                          'end_time',
                          'speaker',
                          'confidence'
                        ];
                        readonly title: 'SpeechDiarizationEntry';
                        readonly type: 'object';
                        readonly properties: {
                          readonly segment: {
                            readonly title: 'Segment';
                            readonly type: 'string';
                          };
                          readonly start_time: {
                            readonly title: 'Start Time';
                            readonly type: 'string';
                          };
                          readonly end_time: {
                            readonly title: 'End Time';
                            readonly type: 'string';
                          };
                          readonly speaker: {
                            readonly title: 'Speaker';
                            readonly type: 'integer';
                          };
                          readonly confidence: {
                            readonly title: 'Confidence';
                            readonly type: 'integer';
                          };
                        };
                      };
                    };
                    readonly error_message: {
                      readonly default: any;
                      readonly title: 'Error Message';
                      readonly type: 'string';
                    };
                  };
                };
                readonly original_response: {
                  readonly default: any;
                  readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
                  readonly title: 'Original Response';
                };
                readonly id: {
                  readonly title: 'Id';
                  readonly type: 'string';
                };
                readonly final_status: {
                  readonly title: 'Final Status';
                  readonly enum: readonly ['sucess', 'fail'];
                  readonly type: 'string';
                  readonly description: '`sucess` `fail`';
                };
                readonly error: {
                  readonly title: 'Error';
                  readonly type: 'object';
                  readonly additionalProperties: true;
                };
              };
            };
            readonly openai: {
              readonly required: readonly ['text', 'diarization', 'id', 'final_status'];
              readonly title: 'audiospeech_to_text_asyncSpeechToTextAsyncDataClass';
              readonly type: 'object';
              readonly properties: {
                readonly text: {
                  readonly title: 'Text';
                  readonly type: 'string';
                };
                readonly diarization: {
                  readonly required: readonly ['total_speakers'];
                  readonly title: 'SpeechDiarization';
                  readonly type: 'object';
                  readonly properties: {
                    readonly total_speakers: {
                      readonly title: 'Total Speakers';
                      readonly type: 'integer';
                    };
                    readonly entries: {
                      readonly title: 'Entries';
                      readonly type: 'array';
                      readonly items: {
                        readonly required: readonly [
                          'segment',
                          'start_time',
                          'end_time',
                          'speaker',
                          'confidence'
                        ];
                        readonly title: 'SpeechDiarizationEntry';
                        readonly type: 'object';
                        readonly properties: {
                          readonly segment: {
                            readonly title: 'Segment';
                            readonly type: 'string';
                          };
                          readonly start_time: {
                            readonly title: 'Start Time';
                            readonly type: 'string';
                          };
                          readonly end_time: {
                            readonly title: 'End Time';
                            readonly type: 'string';
                          };
                          readonly speaker: {
                            readonly title: 'Speaker';
                            readonly type: 'integer';
                          };
                          readonly confidence: {
                            readonly title: 'Confidence';
                            readonly type: 'integer';
                          };
                        };
                      };
                    };
                    readonly error_message: {
                      readonly default: any;
                      readonly title: 'Error Message';
                      readonly type: 'string';
                    };
                  };
                };
                readonly original_response: {
                  readonly default: any;
                  readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
                  readonly title: 'Original Response';
                };
                readonly id: {
                  readonly title: 'Id';
                  readonly type: 'string';
                };
                readonly final_status: {
                  readonly title: 'Final Status';
                  readonly enum: readonly ['sucess', 'fail'];
                  readonly type: 'string';
                  readonly description: '`sucess` `fail`';
                };
                readonly error: {
                  readonly title: 'Error';
                  readonly type: 'object';
                  readonly additionalProperties: true;
                };
              };
            };
            readonly faker: {
              readonly required: readonly ['text', 'diarization', 'id', 'final_status'];
              readonly title: 'audiospeech_to_text_asyncSpeechToTextAsyncDataClass';
              readonly type: 'object';
              readonly properties: {
                readonly text: {
                  readonly title: 'Text';
                  readonly type: 'string';
                };
                readonly diarization: {
                  readonly required: readonly ['total_speakers'];
                  readonly title: 'SpeechDiarization';
                  readonly type: 'object';
                  readonly properties: {
                    readonly total_speakers: {
                      readonly title: 'Total Speakers';
                      readonly type: 'integer';
                    };
                    readonly entries: {
                      readonly title: 'Entries';
                      readonly type: 'array';
                      readonly items: {
                        readonly required: readonly [
                          'segment',
                          'start_time',
                          'end_time',
                          'speaker',
                          'confidence'
                        ];
                        readonly title: 'SpeechDiarizationEntry';
                        readonly type: 'object';
                        readonly properties: {
                          readonly segment: {
                            readonly title: 'Segment';
                            readonly type: 'string';
                          };
                          readonly start_time: {
                            readonly title: 'Start Time';
                            readonly type: 'string';
                          };
                          readonly end_time: {
                            readonly title: 'End Time';
                            readonly type: 'string';
                          };
                          readonly speaker: {
                            readonly title: 'Speaker';
                            readonly type: 'integer';
                          };
                          readonly confidence: {
                            readonly title: 'Confidence';
                            readonly type: 'integer';
                          };
                        };
                      };
                    };
                    readonly error_message: {
                      readonly default: any;
                      readonly title: 'Error Message';
                      readonly type: 'string';
                    };
                  };
                };
                readonly original_response: {
                  readonly default: any;
                  readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
                  readonly title: 'Original Response';
                };
                readonly id: {
                  readonly title: 'Id';
                  readonly type: 'string';
                };
                readonly final_status: {
                  readonly title: 'Final Status';
                  readonly enum: readonly ['sucess', 'fail'];
                  readonly type: 'string';
                  readonly description: '`sucess` `fail`';
                };
                readonly error: {
                  readonly title: 'Error';
                  readonly type: 'object';
                  readonly additionalProperties: true;
                };
              };
            };
            readonly ibm: {
              readonly required: readonly ['text', 'diarization', 'id', 'final_status'];
              readonly title: 'audiospeech_to_text_asyncSpeechToTextAsyncDataClass';
              readonly type: 'object';
              readonly properties: {
                readonly text: {
                  readonly title: 'Text';
                  readonly type: 'string';
                };
                readonly diarization: {
                  readonly required: readonly ['total_speakers'];
                  readonly title: 'SpeechDiarization';
                  readonly type: 'object';
                  readonly properties: {
                    readonly total_speakers: {
                      readonly title: 'Total Speakers';
                      readonly type: 'integer';
                    };
                    readonly entries: {
                      readonly title: 'Entries';
                      readonly type: 'array';
                      readonly items: {
                        readonly required: readonly [
                          'segment',
                          'start_time',
                          'end_time',
                          'speaker',
                          'confidence'
                        ];
                        readonly title: 'SpeechDiarizationEntry';
                        readonly type: 'object';
                        readonly properties: {
                          readonly segment: {
                            readonly title: 'Segment';
                            readonly type: 'string';
                          };
                          readonly start_time: {
                            readonly title: 'Start Time';
                            readonly type: 'string';
                          };
                          readonly end_time: {
                            readonly title: 'End Time';
                            readonly type: 'string';
                          };
                          readonly speaker: {
                            readonly title: 'Speaker';
                            readonly type: 'integer';
                          };
                          readonly confidence: {
                            readonly title: 'Confidence';
                            readonly type: 'integer';
                          };
                        };
                      };
                    };
                    readonly error_message: {
                      readonly default: any;
                      readonly title: 'Error Message';
                      readonly type: 'string';
                    };
                  };
                };
                readonly original_response: {
                  readonly default: any;
                  readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
                  readonly title: 'Original Response';
                };
                readonly id: {
                  readonly title: 'Id';
                  readonly type: 'string';
                };
                readonly final_status: {
                  readonly title: 'Final Status';
                  readonly enum: readonly ['sucess', 'fail'];
                  readonly type: 'string';
                  readonly description: '`sucess` `fail`';
                };
                readonly error: {
                  readonly title: 'Error';
                  readonly type: 'object';
                  readonly additionalProperties: true;
                };
              };
            };
            readonly oneai: {
              readonly required: readonly ['text', 'diarization', 'id', 'final_status'];
              readonly title: 'audiospeech_to_text_asyncSpeechToTextAsyncDataClass';
              readonly type: 'object';
              readonly properties: {
                readonly text: {
                  readonly title: 'Text';
                  readonly type: 'string';
                };
                readonly diarization: {
                  readonly required: readonly ['total_speakers'];
                  readonly title: 'SpeechDiarization';
                  readonly type: 'object';
                  readonly properties: {
                    readonly total_speakers: {
                      readonly title: 'Total Speakers';
                      readonly type: 'integer';
                    };
                    readonly entries: {
                      readonly title: 'Entries';
                      readonly type: 'array';
                      readonly items: {
                        readonly required: readonly [
                          'segment',
                          'start_time',
                          'end_time',
                          'speaker',
                          'confidence'
                        ];
                        readonly title: 'SpeechDiarizationEntry';
                        readonly type: 'object';
                        readonly properties: {
                          readonly segment: {
                            readonly title: 'Segment';
                            readonly type: 'string';
                          };
                          readonly start_time: {
                            readonly title: 'Start Time';
                            readonly type: 'string';
                          };
                          readonly end_time: {
                            readonly title: 'End Time';
                            readonly type: 'string';
                          };
                          readonly speaker: {
                            readonly title: 'Speaker';
                            readonly type: 'integer';
                          };
                          readonly confidence: {
                            readonly title: 'Confidence';
                            readonly type: 'integer';
                          };
                        };
                      };
                    };
                    readonly error_message: {
                      readonly default: any;
                      readonly title: 'Error Message';
                      readonly type: 'string';
                    };
                  };
                };
                readonly original_response: {
                  readonly default: any;
                  readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
                  readonly title: 'Original Response';
                };
                readonly id: {
                  readonly title: 'Id';
                  readonly type: 'string';
                };
                readonly final_status: {
                  readonly title: 'Final Status';
                  readonly enum: readonly ['sucess', 'fail'];
                  readonly type: 'string';
                  readonly description: '`sucess` `fail`';
                };
                readonly error: {
                  readonly title: 'Error';
                  readonly type: 'object';
                  readonly additionalProperties: true;
                };
              };
            };
            readonly google: {
              readonly required: readonly ['text', 'diarization', 'id', 'final_status'];
              readonly title: 'audiospeech_to_text_asyncSpeechToTextAsyncDataClass';
              readonly type: 'object';
              readonly properties: {
                readonly text: {
                  readonly title: 'Text';
                  readonly type: 'string';
                };
                readonly diarization: {
                  readonly required: readonly ['total_speakers'];
                  readonly title: 'SpeechDiarization';
                  readonly type: 'object';
                  readonly properties: {
                    readonly total_speakers: {
                      readonly title: 'Total Speakers';
                      readonly type: 'integer';
                    };
                    readonly entries: {
                      readonly title: 'Entries';
                      readonly type: 'array';
                      readonly items: {
                        readonly required: readonly [
                          'segment',
                          'start_time',
                          'end_time',
                          'speaker',
                          'confidence'
                        ];
                        readonly title: 'SpeechDiarizationEntry';
                        readonly type: 'object';
                        readonly properties: {
                          readonly segment: {
                            readonly title: 'Segment';
                            readonly type: 'string';
                          };
                          readonly start_time: {
                            readonly title: 'Start Time';
                            readonly type: 'string';
                          };
                          readonly end_time: {
                            readonly title: 'End Time';
                            readonly type: 'string';
                          };
                          readonly speaker: {
                            readonly title: 'Speaker';
                            readonly type: 'integer';
                          };
                          readonly confidence: {
                            readonly title: 'Confidence';
                            readonly type: 'integer';
                          };
                        };
                      };
                    };
                    readonly error_message: {
                      readonly default: any;
                      readonly title: 'Error Message';
                      readonly type: 'string';
                    };
                  };
                };
                readonly original_response: {
                  readonly default: any;
                  readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
                  readonly title: 'Original Response';
                };
                readonly id: {
                  readonly title: 'Id';
                  readonly type: 'string';
                };
                readonly final_status: {
                  readonly title: 'Final Status';
                  readonly enum: readonly ['sucess', 'fail'];
                  readonly type: 'string';
                  readonly description: '`sucess` `fail`';
                };
                readonly error: {
                  readonly title: 'Error';
                  readonly type: 'object';
                  readonly additionalProperties: true;
                };
              };
            };
            readonly neuralspace: {
              readonly required: readonly ['text', 'diarization', 'id', 'final_status'];
              readonly title: 'audiospeech_to_text_asyncSpeechToTextAsyncDataClass';
              readonly type: 'object';
              readonly properties: {
                readonly text: {
                  readonly title: 'Text';
                  readonly type: 'string';
                };
                readonly diarization: {
                  readonly required: readonly ['total_speakers'];
                  readonly title: 'SpeechDiarization';
                  readonly type: 'object';
                  readonly properties: {
                    readonly total_speakers: {
                      readonly title: 'Total Speakers';
                      readonly type: 'integer';
                    };
                    readonly entries: {
                      readonly title: 'Entries';
                      readonly type: 'array';
                      readonly items: {
                        readonly required: readonly [
                          'segment',
                          'start_time',
                          'end_time',
                          'speaker',
                          'confidence'
                        ];
                        readonly title: 'SpeechDiarizationEntry';
                        readonly type: 'object';
                        readonly properties: {
                          readonly segment: {
                            readonly title: 'Segment';
                            readonly type: 'string';
                          };
                          readonly start_time: {
                            readonly title: 'Start Time';
                            readonly type: 'string';
                          };
                          readonly end_time: {
                            readonly title: 'End Time';
                            readonly type: 'string';
                          };
                          readonly speaker: {
                            readonly title: 'Speaker';
                            readonly type: 'integer';
                          };
                          readonly confidence: {
                            readonly title: 'Confidence';
                            readonly type: 'integer';
                          };
                        };
                      };
                    };
                    readonly error_message: {
                      readonly default: any;
                      readonly title: 'Error Message';
                      readonly type: 'string';
                    };
                  };
                };
                readonly original_response: {
                  readonly default: any;
                  readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
                  readonly title: 'Original Response';
                };
                readonly id: {
                  readonly title: 'Id';
                  readonly type: 'string';
                };
                readonly final_status: {
                  readonly title: 'Final Status';
                  readonly enum: readonly ['sucess', 'fail'];
                  readonly type: 'string';
                  readonly description: '`sucess` `fail`';
                };
                readonly error: {
                  readonly title: 'Error';
                  readonly type: 'object';
                  readonly additionalProperties: true;
                };
              };
            };
            readonly amazon: {
              readonly required: readonly ['text', 'diarization', 'id', 'final_status'];
              readonly title: 'audiospeech_to_text_asyncSpeechToTextAsyncDataClass';
              readonly type: 'object';
              readonly properties: {
                readonly text: {
                  readonly title: 'Text';
                  readonly type: 'string';
                };
                readonly diarization: {
                  readonly required: readonly ['total_speakers'];
                  readonly title: 'SpeechDiarization';
                  readonly type: 'object';
                  readonly properties: {
                    readonly total_speakers: {
                      readonly title: 'Total Speakers';
                      readonly type: 'integer';
                    };
                    readonly entries: {
                      readonly title: 'Entries';
                      readonly type: 'array';
                      readonly items: {
                        readonly required: readonly [
                          'segment',
                          'start_time',
                          'end_time',
                          'speaker',
                          'confidence'
                        ];
                        readonly title: 'SpeechDiarizationEntry';
                        readonly type: 'object';
                        readonly properties: {
                          readonly segment: {
                            readonly title: 'Segment';
                            readonly type: 'string';
                          };
                          readonly start_time: {
                            readonly title: 'Start Time';
                            readonly type: 'string';
                          };
                          readonly end_time: {
                            readonly title: 'End Time';
                            readonly type: 'string';
                          };
                          readonly speaker: {
                            readonly title: 'Speaker';
                            readonly type: 'integer';
                          };
                          readonly confidence: {
                            readonly title: 'Confidence';
                            readonly type: 'integer';
                          };
                        };
                      };
                    };
                    readonly error_message: {
                      readonly default: any;
                      readonly title: 'Error Message';
                      readonly type: 'string';
                    };
                  };
                };
                readonly original_response: {
                  readonly default: any;
                  readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
                  readonly title: 'Original Response';
                };
                readonly id: {
                  readonly title: 'Id';
                  readonly type: 'string';
                };
                readonly final_status: {
                  readonly title: 'Final Status';
                  readonly enum: readonly ['sucess', 'fail'];
                  readonly type: 'string';
                  readonly description: '`sucess` `fail`';
                };
                readonly error: {
                  readonly title: 'Error';
                  readonly type: 'object';
                  readonly additionalProperties: true;
                };
              };
            };
          };
          readonly title: 'audiospeech_to_text_asyncModel';
          readonly type: 'object';
        };
        readonly error: {
          readonly title: 'Error';
          readonly type: 'string';
        };
        readonly public_id: {
          readonly format: 'uuid';
          readonly title: 'Public Id';
          readonly type: 'string';
        };
        readonly status: {
          readonly title: 'Status';
          readonly type: 'string';
        };
      };
      readonly required: readonly ['results', 'error', 'public_id', 'status'];
      readonly title: 'asyncaudiospeech_to_text_asyncResponseModel';
      readonly type: 'object';
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '400': {
      readonly type: 'object';
      readonly properties: {
        readonly error: {
          readonly type: 'object';
          readonly properties: {
            readonly type: {
              readonly type: 'string';
            };
            readonly message: {
              readonly type: 'object';
              readonly properties: {
                readonly '<parameter_name>': {
                  readonly type: 'array';
                  readonly items: {
                    readonly type: 'string';
                  };
                };
              };
              readonly required: readonly ['<parameter_name>'];
            };
          };
          readonly required: readonly ['message', 'type'];
        };
      };
      readonly required: readonly ['error'];
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '403': {
      readonly type: 'object';
      readonly properties: {
        readonly error: {
          readonly type: 'object';
          readonly properties: {
            readonly type: {
              readonly type: 'string';
            };
            readonly message: {
              readonly type: 'string';
            };
          };
          readonly required: readonly ['message', 'type'];
        };
      };
      readonly required: readonly ['error'];
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '404': {
      readonly type: 'object';
      readonly properties: {
        readonly details: {
          readonly type: 'string';
          readonly default: 'Not Found';
        };
      };
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '500': {
      readonly type: 'object';
      readonly properties: {
        readonly error: {
          readonly type: 'object';
          readonly properties: {
            readonly type: {
              readonly type: 'string';
            };
            readonly message: {
              readonly type: 'string';
            };
          };
          readonly required: readonly ['message', 'type'];
        };
      };
      readonly required: readonly ['error'];
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
  };
};
declare const AudioTextToSpeechAsyncCreate: {
  readonly body: {
    readonly type: 'object';
    readonly properties: {
      readonly providers: {
        readonly type: 'string';
        readonly minLength: 1;
        readonly description: "It can be one (ex: **'amazon'** or **'google'**) or multiple provider(s) (ex: **'amazon,microsoft,google'**)             that the data will be redirected to in order to get the processed results.";
      };
      readonly fallback_providers: {
        readonly type: 'string';
        readonly minLength: 1;
        readonly description: "Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.\n    To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.\n\nThey will be tried in the same order they are input, and it will stop to the first provider who doesn't fail.\n\n\n*Doesn't work with async subfeatures.*\n    ";
      };
      readonly show_original_response: {
        readonly type: 'boolean';
        readonly default: false;
        readonly description: 'Optional : Shows the original response of the provider.<br>\n        When set to **true**, a new attribute *original_response* will appear in the response object.';
      };
      readonly webhook_receiver: {
        readonly type: 'string';
        readonly format: 'uri';
        readonly minLength: 1;
        readonly description: 'Webhook receiver should be a valid https URL (ex : https://your.listner.com/endpoint).             After the processing is done, the webhook endpoint will receive a POST request with the result.';
      };
      readonly users_webhook_parameters: {
        readonly type: 'object';
        readonly additionalProperties: true;
        readonly description: "Json data that contains of additional parameters that will be sent back to the webhook receiver             (ex: api key for security or client's data ID to link the result internally).             Will only be used when webhook_receiver is set.";
      };
      readonly settings: {
        readonly type: readonly ['object', 'null'];
        readonly additionalProperties: {
          readonly type: 'string';
          readonly minLength: 1;
          readonly description: 'The model id/name specified for the provider';
          readonly maxLength: 50;
        };
        readonly description: "A dictionnary or a json object to specify specific models to use for some providers. <br>                     It can be in the following format: {'google' : 'google_model', ibm': 'ibm_model'...}.\n                     **Caution**: setting models can be done only with `Content-Type` : `application/json`.\n                     ";
      };
      readonly text: {
        readonly type: 'string';
        readonly minLength: 1;
        readonly description: 'Text to analyze';
        readonly examples: readonly ["Bonjour Je m'appelle Jane"];
      };
      readonly language: {
        readonly type: readonly ['string', 'null'];
        readonly description: 'Language code expected (ex: en, fr)';
        readonly examples: readonly ['fr'];
      };
      readonly option: {
        readonly oneOf: readonly [
          {
            readonly enum: readonly ['FEMALE', 'MALE'];
            readonly type: 'string';
            readonly description: '* `FEMALE` - Female\n* `MALE` - Male';
          },
          {
            readonly enum: readonly [''];
          }
        ];
        readonly examples: readonly ['FEMALE'];
      };
      readonly rate: {
        readonly type: readonly ['integer', 'null'];
        readonly maximum: 100;
        readonly minimum: -100;
        readonly default: 0;
        readonly description: 'Increase or decrease the speaking rate by expressing a positif or negatif number ranging between             100 and -100 (a relative value as percentage varying from -100% to 100%)';
      };
      readonly pitch: {
        readonly type: readonly ['integer', 'null'];
        readonly maximum: 100;
        readonly minimum: -100;
        readonly default: 0;
        readonly description: 'Increase or decrease the speaking pitch by expressing a positif or negatif number ranging between             100 and -100 (a relative value as percentage varying from -100% to 100%)';
      };
      readonly volume: {
        readonly type: readonly ['integer', 'null'];
        readonly maximum: 100;
        readonly minimum: -100;
        readonly default: 0;
        readonly description: 'Increase or decrease the audio volume by expressing a positif or negatif number ranging between             100 and -100 (a relative value as percentage varying from -100% to 100%)';
      };
      readonly audio_format: {
        readonly type: readonly ['string', 'null'];
        readonly description: 'Optional parameter to specify the audio format in which the audio will be generated. By default,             audios are encoded in MP3, except for lovoai which use the wav container.';
      };
      readonly sampling_rate: {
        readonly type: readonly ['integer', 'null'];
        readonly maximum: 200000;
        readonly minimum: 0;
        readonly default: 0;
        readonly description: 'Optional. The synthesis sample rate (in hertz) for this audio. When this is specified, the audio will be converted             either to the right passed value, or to a the nearest value acceptable by the provider';
      };
    };
    readonly required: readonly ['providers', 'text'];
    readonly $schema: 'http://json-schema.org/draft-04/schema#';
  };
  readonly response: {
    readonly '200': {
      readonly type: 'object';
      readonly properties: {
        readonly public_id: {
          readonly type: 'string';
          readonly format: 'uuid';
        };
      };
      readonly required: readonly ['public_id'];
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
  };
};
declare const AudioTextToSpeechAsyncRetrieve: {
  readonly response: {
    readonly '200': {
      readonly type: 'object';
      readonly properties: {
        readonly jobs: {
          readonly type: 'array';
          readonly items: {
            readonly type: 'object';
            readonly properties: {
              readonly providers: {
                readonly type: 'string';
              };
              readonly nb: {
                readonly type: 'integer';
              };
              readonly nb_ok: {
                readonly type: 'integer';
              };
              readonly public_id: {
                readonly type: 'string';
                readonly format: 'uuid';
              };
              readonly state: {
                readonly enum: readonly ['finished', 'failed', 'Timeout error', 'processing'];
                readonly type: 'string';
                readonly description: '* `finished` - finished\n* `failed` - failed\n* `Timeout error` - Timeout error\n* `processing` - processing\n\n`finished` `failed` `Timeout error` `processing`';
              };
              readonly created_at: {
                readonly type: 'string';
                readonly format: 'date-time';
              };
            };
            readonly required: readonly [
              'created_at',
              'nb',
              'nb_ok',
              'providers',
              'public_id',
              'state'
            ];
          };
        };
      };
      readonly required: readonly ['jobs'];
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
  };
};
declare const AudioTextToSpeechAsyncRetrieve2: {
  readonly metadata: {
    readonly allOf: readonly [
      {
        readonly type: 'object';
        readonly properties: {
          readonly public_id: {
            readonly type: 'string';
            readonly $schema: 'http://json-schema.org/draft-04/schema#';
          };
        };
        readonly required: readonly ['public_id'];
      },
      {
        readonly type: 'object';
        readonly properties: {
          readonly response_as_dict: {
            readonly type: 'boolean';
            readonly default: true;
            readonly $schema: 'http://json-schema.org/draft-04/schema#';
          };
          readonly show_original_response: {
            readonly type: 'boolean';
            readonly default: false;
            readonly $schema: 'http://json-schema.org/draft-04/schema#';
          };
        };
        readonly required: readonly [];
      }
    ];
  };
  readonly response: {
    readonly '200': {
      readonly properties: {
        readonly results: {
          readonly properties: {
            readonly lovoai: {
              readonly required: readonly [
                'audio',
                'voice_type',
                'audio_resource_url',
                'id',
                'final_status'
              ];
              readonly title: 'audiotext_to_speech_asyncTextToSpeechAsyncDataClass';
              readonly type: 'object';
              readonly properties: {
                readonly audio: {
                  readonly title: 'Audio';
                  readonly type: 'string';
                };
                readonly voice_type: {
                  readonly title: 'Voice Type';
                  readonly type: 'integer';
                };
                readonly audio_resource_url: {
                  readonly title: 'Audio Resource Url';
                  readonly type: 'string';
                };
                readonly original_response: {
                  readonly default: any;
                  readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
                  readonly title: 'Original Response';
                };
                readonly id: {
                  readonly title: 'Id';
                  readonly type: 'string';
                };
                readonly final_status: {
                  readonly title: 'Final Status';
                  readonly enum: readonly ['sucess', 'fail'];
                  readonly type: 'string';
                  readonly description: '`sucess` `fail`';
                };
                readonly error: {
                  readonly title: 'Error';
                  readonly type: 'object';
                  readonly additionalProperties: true;
                };
              };
            };
          };
          readonly title: 'audiotext_to_speech_asyncModel';
          readonly type: 'object';
        };
        readonly error: {
          readonly title: 'Error';
          readonly type: 'string';
        };
        readonly public_id: {
          readonly format: 'uuid';
          readonly title: 'Public Id';
          readonly type: 'string';
        };
        readonly status: {
          readonly title: 'Status';
          readonly type: 'string';
        };
      };
      readonly required: readonly ['results', 'error', 'public_id', 'status'];
      readonly title: 'asyncaudiotext_to_speech_asyncResponseModel';
      readonly type: 'object';
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '400': {
      readonly type: 'object';
      readonly properties: {
        readonly error: {
          readonly type: 'object';
          readonly properties: {
            readonly type: {
              readonly type: 'string';
            };
            readonly message: {
              readonly type: 'object';
              readonly properties: {
                readonly '<parameter_name>': {
                  readonly type: 'array';
                  readonly items: {
                    readonly type: 'string';
                  };
                };
              };
              readonly required: readonly ['<parameter_name>'];
            };
          };
          readonly required: readonly ['message', 'type'];
        };
      };
      readonly required: readonly ['error'];
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '403': {
      readonly type: 'object';
      readonly properties: {
        readonly error: {
          readonly type: 'object';
          readonly properties: {
            readonly type: {
              readonly type: 'string';
            };
            readonly message: {
              readonly type: 'string';
            };
          };
          readonly required: readonly ['message', 'type'];
        };
      };
      readonly required: readonly ['error'];
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '404': {
      readonly type: 'object';
      readonly properties: {
        readonly details: {
          readonly type: 'string';
          readonly default: 'Not Found';
        };
      };
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '500': {
      readonly type: 'object';
      readonly properties: {
        readonly error: {
          readonly type: 'object';
          readonly properties: {
            readonly type: {
              readonly type: 'string';
            };
            readonly message: {
              readonly type: 'string';
            };
          };
          readonly required: readonly ['message', 'type'];
        };
      };
      readonly required: readonly ['error'];
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
  };
};
declare const AudioTextToSpeechCreate: {
  readonly body: {
    readonly type: 'object';
    readonly properties: {
      readonly providers: {
        readonly type: 'string';
        readonly minLength: 1;
        readonly description: "It can be one (ex: **'amazon'** or **'google'**) or multiple provider(s) (ex: **'amazon,microsoft,google'**)             that the data will be redirected to in order to get the processed results.";
        readonly examples: readonly ['microsoft,lovoai,google,ibm,amazon'];
      };
      readonly fallback_providers: {
        readonly type: 'string';
        readonly minLength: 1;
        readonly description: "Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.\n    To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.\n\nThey will be tried in the same order they are input, and it will stop to the first provider who doesn't fail.\n\n\n*Doesn't work with async subfeatures.*\n    ";
      };
      readonly response_as_dict: {
        readonly type: 'boolean';
        readonly default: true;
        readonly description: "Optional : When set to **true** (default), the response is an object of responses with providers names as keys : <br> \n                  ``` {'google' : { 'status': 'success', ... }, } ``` <br>\n                When set to **false** the response structure is a list of response objects : <br> \n                   ``` [{'status': 'success', 'provider': 'google' ... }, ] ```. <br> \n                  ";
      };
      readonly attributes_as_list: {
        readonly type: 'boolean';
        readonly default: false;
        readonly description: "Optional : When set to **false** (default) the structure of the extracted items is list of objects having different attributes : <br>\n     ```{'items': [{'attribute_1': 'x1','attribute_2': 'y2'}, ... ]}``` <br>\n     When it is set to **true**, the response contains an object with each attribute as a list : <br>\n     ```{ 'attribute_1': ['x1','x2', ...], 'attribute_2': [y1, y2, ...]}``` ";
      };
      readonly show_original_response: {
        readonly type: 'boolean';
        readonly default: false;
        readonly description: 'Optional : Shows the original response of the provider.<br>\n        When set to **true**, a new attribute *original_response* will appear in the response object.';
      };
      readonly settings: {
        readonly type: readonly ['object', 'null'];
        readonly additionalProperties: {
          readonly type: 'string';
          readonly minLength: 1;
          readonly description: 'The model id/name specified for the provider';
          readonly maxLength: 50;
        };
        readonly description: "A dictionnary or a json object to specify specific models to use for some providers. <br>                     It can be in the following format: {'google' : 'google_model', ibm': 'ibm_model'...}.\n                     **Caution**: setting models can be done only with `Content-Type` : `application/json`.\n                     ";
      };
      readonly text: {
        readonly type: 'string';
        readonly minLength: 1;
        readonly description: 'Text to analyze';
        readonly examples: readonly ["Bonjour Je m'appelle Jane"];
      };
      readonly language: {
        readonly type: readonly ['string', 'null'];
        readonly description: 'Language code expected (ex: en, fr)';
        readonly examples: readonly ['fr'];
      };
      readonly option: {
        readonly oneOf: readonly [
          {
            readonly enum: readonly ['FEMALE', 'MALE'];
            readonly type: 'string';
            readonly description: '* `FEMALE` - Female\n* `MALE` - Male';
          },
          {
            readonly enum: readonly [''];
          }
        ];
        readonly examples: readonly ['FEMALE'];
      };
      readonly rate: {
        readonly type: readonly ['integer', 'null'];
        readonly maximum: 100;
        readonly minimum: -100;
        readonly default: 0;
        readonly description: 'Increase or decrease the speaking rate by expressing a positif or negatif number ranging between             100 and -100 (a relative value as percentage varying from -100% to 100%)';
      };
      readonly pitch: {
        readonly type: readonly ['integer', 'null'];
        readonly maximum: 100;
        readonly minimum: -100;
        readonly default: 0;
        readonly description: 'Increase or decrease the speaking pitch by expressing a positif or negatif number ranging between             100 and -100 (a relative value as percentage varying from -100% to 100%)';
      };
      readonly volume: {
        readonly type: readonly ['integer', 'null'];
        readonly maximum: 100;
        readonly minimum: -100;
        readonly default: 0;
        readonly description: 'Increase or decrease the audio volume by expressing a positif or negatif number ranging between             100 and -100 (a relative value as percentage varying from -100% to 100%)';
      };
      readonly audio_format: {
        readonly type: readonly ['string', 'null'];
        readonly description: 'Optional parameter to specify the audio format in which the audio will be generated. By default,             audios are encoded in MP3, except for lovoai which use the wav container.';
      };
      readonly sampling_rate: {
        readonly type: readonly ['integer', 'null'];
        readonly maximum: 200000;
        readonly minimum: 0;
        readonly default: 0;
        readonly description: 'Optional. The synthesis sample rate (in hertz) for this audio. When this is specified, the audio will be converted             either to the right passed value, or to a the nearest value acceptable by the provider';
      };
    };
    readonly required: readonly ['providers', 'text'];
    readonly $schema: 'http://json-schema.org/draft-04/schema#';
  };
  readonly response: {
    readonly '200': {
      readonly properties: {
        readonly lovoai: {
          readonly required: readonly ['audio', 'voice_type', 'audio_resource_url', 'status'];
          readonly title: 'audiotext_to_speechTextToSpeechDataClass';
          readonly type: 'object';
          readonly properties: {
            readonly audio: {
              readonly title: 'Audio';
              readonly type: 'string';
            };
            readonly voice_type: {
              readonly title: 'Voice Type';
              readonly type: 'integer';
            };
            readonly audio_resource_url: {
              readonly title: 'Audio Resource Url';
              readonly type: 'string';
            };
            readonly original_response: {
              readonly default: any;
              readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
              readonly title: 'Original Response';
            };
            readonly status: {
              readonly title: 'Status';
              readonly enum: readonly ['sucess', 'fail'];
              readonly type: 'string';
              readonly description: '`sucess` `fail`';
            };
          };
        };
        readonly microsoft: {
          readonly required: readonly ['audio', 'voice_type', 'audio_resource_url', 'status'];
          readonly title: 'audiotext_to_speechTextToSpeechDataClass';
          readonly type: 'object';
          readonly properties: {
            readonly audio: {
              readonly title: 'Audio';
              readonly type: 'string';
            };
            readonly voice_type: {
              readonly title: 'Voice Type';
              readonly type: 'integer';
            };
            readonly audio_resource_url: {
              readonly title: 'Audio Resource Url';
              readonly type: 'string';
            };
            readonly original_response: {
              readonly default: any;
              readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
              readonly title: 'Original Response';
            };
            readonly status: {
              readonly title: 'Status';
              readonly enum: readonly ['sucess', 'fail'];
              readonly type: 'string';
              readonly description: '`sucess` `fail`';
            };
          };
        };
        readonly ibm: {
          readonly required: readonly ['audio', 'voice_type', 'audio_resource_url', 'status'];
          readonly title: 'audiotext_to_speechTextToSpeechDataClass';
          readonly type: 'object';
          readonly properties: {
            readonly audio: {
              readonly title: 'Audio';
              readonly type: 'string';
            };
            readonly voice_type: {
              readonly title: 'Voice Type';
              readonly type: 'integer';
            };
            readonly audio_resource_url: {
              readonly title: 'Audio Resource Url';
              readonly type: 'string';
            };
            readonly original_response: {
              readonly default: any;
              readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
              readonly title: 'Original Response';
            };
            readonly status: {
              readonly title: 'Status';
              readonly enum: readonly ['sucess', 'fail'];
              readonly type: 'string';
              readonly description: '`sucess` `fail`';
            };
          };
        };
        readonly google: {
          readonly required: readonly ['audio', 'voice_type', 'audio_resource_url', 'status'];
          readonly title: 'audiotext_to_speechTextToSpeechDataClass';
          readonly type: 'object';
          readonly properties: {
            readonly audio: {
              readonly title: 'Audio';
              readonly type: 'string';
            };
            readonly voice_type: {
              readonly title: 'Voice Type';
              readonly type: 'integer';
            };
            readonly audio_resource_url: {
              readonly title: 'Audio Resource Url';
              readonly type: 'string';
            };
            readonly original_response: {
              readonly default: any;
              readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
              readonly title: 'Original Response';
            };
            readonly status: {
              readonly title: 'Status';
              readonly enum: readonly ['sucess', 'fail'];
              readonly type: 'string';
              readonly description: '`sucess` `fail`';
            };
          };
        };
        readonly amazon: {
          readonly required: readonly ['audio', 'voice_type', 'audio_resource_url', 'status'];
          readonly title: 'audiotext_to_speechTextToSpeechDataClass';
          readonly type: 'object';
          readonly properties: {
            readonly audio: {
              readonly title: 'Audio';
              readonly type: 'string';
            };
            readonly voice_type: {
              readonly title: 'Voice Type';
              readonly type: 'integer';
            };
            readonly audio_resource_url: {
              readonly title: 'Audio Resource Url';
              readonly type: 'string';
            };
            readonly original_response: {
              readonly default: any;
              readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
              readonly title: 'Original Response';
            };
            readonly status: {
              readonly title: 'Status';
              readonly enum: readonly ['sucess', 'fail'];
              readonly type: 'string';
              readonly description: '`sucess` `fail`';
            };
          };
        };
      };
      readonly title: 'audiotext_to_speechResponseModel';
      readonly type: 'object';
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '400': {
      readonly type: 'object';
      readonly properties: {
        readonly error: {
          readonly type: 'object';
          readonly properties: {
            readonly type: {
              readonly type: 'string';
            };
            readonly message: {
              readonly type: 'object';
              readonly properties: {
                readonly '<parameter_name>': {
                  readonly type: 'array';
                  readonly items: {
                    readonly type: 'string';
                  };
                };
              };
              readonly required: readonly ['<parameter_name>'];
            };
          };
          readonly required: readonly ['message', 'type'];
        };
      };
      readonly required: readonly ['error'];
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '403': {
      readonly type: 'object';
      readonly properties: {
        readonly error: {
          readonly type: 'object';
          readonly properties: {
            readonly type: {
              readonly type: 'string';
            };
            readonly message: {
              readonly type: 'string';
            };
          };
          readonly required: readonly ['message', 'type'];
        };
      };
      readonly required: readonly ['error'];
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '404': {
      readonly type: 'object';
      readonly properties: {
        readonly details: {
          readonly type: 'string';
          readonly default: 'Not Found';
        };
      };
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '500': {
      readonly type: 'object';
      readonly properties: {
        readonly error: {
          readonly type: 'object';
          readonly properties: {
            readonly type: {
              readonly type: 'string';
            };
            readonly message: {
              readonly type: 'string';
            };
          };
          readonly required: readonly ['message', 'type'];
        };
      };
      readonly required: readonly ['error'];
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
  };
};
declare const BatchCreate: {
  readonly metadata: {
    readonly allOf: readonly [
      {
        readonly type: 'object';
        readonly properties: {
          readonly feature: {
            readonly type: 'string';
            readonly $schema: 'http://json-schema.org/draft-04/schema#';
          };
          readonly name: {
            readonly type: 'string';
            readonly $schema: 'http://json-schema.org/draft-04/schema#';
          };
          readonly subfeature: {
            readonly type: 'string';
            readonly $schema: 'http://json-schema.org/draft-04/schema#';
          };
        };
        readonly required: readonly ['feature', 'name', 'subfeature'];
      }
    ];
  };
  readonly response: {
    readonly '200': {
      readonly properties: {
        readonly job_id: {
          readonly description: 'Job ID/name';
          readonly title: 'Job Id';
          readonly type: 'string';
        };
        readonly nb_launched: {
          readonly description: 'Number of successfully launched requests';
          readonly title: 'Nb Launched';
          readonly type: 'integer';
        };
        readonly nb_failed: {
          readonly description: 'Number of failed_requests';
          readonly title: 'Nb Failed';
          readonly type: 'integer';
        };
        readonly total: {
          readonly description: 'Total number of requests sent';
          readonly title: 'Total';
          readonly type: 'integer';
        };
        readonly failed_requests: {
          readonly description: 'if any requests failed, they will be shown in this list';
          readonly items: {
            readonly properties: {
              readonly name: {
                readonly description: 'Request name, if any were given';
                readonly title: 'Name';
                readonly type: 'string';
              };
              readonly public_id: {
                readonly description: 'Request ID';
                readonly title: 'Public Id';
                readonly type: 'integer';
              };
              readonly body: {
                readonly description: 'Parameters passed to the request';
                readonly title: 'Body';
                readonly type: 'object';
                readonly additionalProperties: true;
              };
              readonly errors: {
                readonly description: 'Error received from the request validator';
                readonly title: 'Errors';
                readonly type: 'object';
                readonly additionalProperties: true;
              };
            };
            readonly required: readonly ['name', 'public_id', 'body', 'errors'];
            readonly title: 'BatchLaunchFailedRequest';
            readonly type: 'object';
          };
          readonly title: 'Failed Requests';
          readonly type: 'array';
        };
      };
      readonly required: readonly [
        'job_id',
        'nb_launched',
        'nb_failed',
        'total',
        'failed_requests'
      ];
      readonly title: 'BatchLaunchResponse';
      readonly type: 'object';
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '400': {
      readonly type: 'object';
      readonly properties: {
        readonly error: {
          readonly type: 'object';
          readonly properties: {
            readonly type: {
              readonly type: 'string';
            };
            readonly message: {
              readonly type: 'object';
              readonly properties: {
                readonly '<parameter_name>': {
                  readonly type: 'array';
                  readonly items: {
                    readonly type: 'string';
                  };
                };
              };
              readonly required: readonly ['<parameter_name>'];
            };
          };
          readonly required: readonly ['message', 'type'];
        };
      };
      readonly required: readonly ['error'];
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '403': {
      readonly type: 'object';
      readonly properties: {
        readonly error: {
          readonly type: 'object';
          readonly properties: {
            readonly type: {
              readonly type: 'string';
            };
            readonly message: {
              readonly type: 'string';
            };
          };
          readonly required: readonly ['message', 'type'];
        };
      };
      readonly required: readonly ['error'];
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '404': {
      readonly type: 'object';
      readonly properties: {
        readonly details: {
          readonly type: 'string';
          readonly default: 'Not Found';
        };
      };
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '500': {
      readonly type: 'object';
      readonly properties: {
        readonly error: {
          readonly type: 'object';
          readonly properties: {
            readonly type: {
              readonly type: 'string';
            };
            readonly message: {
              readonly type: 'string';
            };
          };
          readonly required: readonly ['message', 'type'];
        };
      };
      readonly required: readonly ['error'];
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
  };
};
declare const BatchRetrieve: {
  readonly metadata: {
    readonly allOf: readonly [
      {
        readonly type: 'object';
        readonly properties: {
          readonly feature: {
            readonly type: 'string';
            readonly $schema: 'http://json-schema.org/draft-04/schema#';
          };
          readonly name: {
            readonly type: 'string';
            readonly $schema: 'http://json-schema.org/draft-04/schema#';
          };
          readonly subfeature: {
            readonly type: 'string';
            readonly $schema: 'http://json-schema.org/draft-04/schema#';
          };
        };
        readonly required: readonly ['feature', 'name', 'subfeature'];
      },
      {
        readonly type: 'object';
        readonly properties: {
          readonly name: {
            readonly type: 'string';
            readonly minLength: 1;
            readonly $schema: 'http://json-schema.org/draft-04/schema#';
          };
          readonly page: {
            readonly type: 'integer';
            readonly minimum: 0;
            readonly $schema: 'http://json-schema.org/draft-04/schema#';
          };
          readonly public_id: {
            readonly type: 'integer';
            readonly minimum: 0;
            readonly $schema: 'http://json-schema.org/draft-04/schema#';
          };
          readonly status: {
            readonly enum: readonly ['succeeded', 'failed', 'finished', 'processing'];
            readonly type: 'string';
            readonly minLength: 1;
            readonly $schema: 'http://json-schema.org/draft-04/schema#';
            readonly description: '* `succeeded` - Status Succeeded\n* `failed` - Status Failed\n* `finished` - Status Finished\n* `processing` - Status Processing';
          };
        };
        readonly required: readonly [];
      }
    ];
  };
  readonly response: {
    readonly '200': {
      readonly type: 'object';
      readonly properties: {
        readonly total: {
          readonly type: 'integer';
          readonly description: 'Total requests made';
        };
        readonly current_page: {
          readonly type: 'integer';
          readonly description: 'Current page number';
        };
        readonly last_page: {
          readonly type: 'integer';
        };
        readonly per_page: {
          readonly type: 'integer';
          readonly description: 'Number of requests per page';
        };
        readonly From: {
          readonly type: 'integer';
        };
        readonly to: {
          readonly type: 'integer';
        };
        readonly prev_page_url: {
          readonly type: 'string';
          readonly format: 'uri';
        };
        readonly next_page_url: {
          readonly type: 'string';
          readonly format: 'uri';
        };
        readonly requests: {
          readonly type: 'array';
          readonly items: {
            readonly type: 'object';
            readonly properties: {
              readonly public_id: {
                readonly type: 'integer';
                readonly readOnly: true;
              };
              readonly status: {
                readonly enum: readonly ['succeeded', 'failed', 'finished', 'processing'];
                readonly type: 'string';
                readonly description: '* `succeeded` - Status Succeeded\n* `failed` - Status Failed\n* `finished` - Status Finished\n* `processing` - Status Processing\n\n`succeeded` `failed` `finished` `processing`';
              };
              readonly name: {
                readonly type: readonly ['string', 'null'];
                readonly maxLength: 1023;
              };
              readonly errors: {
                readonly type: readonly ['object', 'null'];
                readonly additionalProperties: true;
              };
              readonly response: {
                readonly type: readonly ['object', 'null'];
                readonly additionalProperties: true;
              };
            };
            readonly required: readonly ['public_id'];
          };
        };
        readonly status: {
          readonly enum: readonly ['succeeded', 'failed', 'finished', 'processing'];
          readonly type: 'string';
          readonly description: '* `succeeded` - Status Succeeded\n* `failed` - Status Failed\n* `finished` - Status Finished\n* `processing` - Status Processing\n\n`succeeded` `failed` `finished` `processing`';
        };
        readonly created: {
          readonly type: 'string';
          readonly format: 'date-time';
          readonly readOnly: true;
        };
        readonly updated: {
          readonly type: 'string';
          readonly format: 'date-time';
          readonly readOnly: true;
        };
      };
      readonly required: readonly [
        'From',
        'created',
        'current_page',
        'last_page',
        'per_page',
        'requests',
        'to',
        'total',
        'updated'
      ];
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '400': {
      readonly type: 'object';
      readonly properties: {
        readonly error: {
          readonly type: 'object';
          readonly properties: {
            readonly type: {
              readonly type: 'string';
            };
            readonly message: {
              readonly type: 'object';
              readonly properties: {
                readonly '<parameter_name>': {
                  readonly type: 'array';
                  readonly items: {
                    readonly type: 'string';
                  };
                };
              };
              readonly required: readonly ['<parameter_name>'];
            };
          };
          readonly required: readonly ['message', 'type'];
        };
      };
      readonly required: readonly ['error'];
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '403': {
      readonly type: 'object';
      readonly properties: {
        readonly error: {
          readonly type: 'object';
          readonly properties: {
            readonly type: {
              readonly type: 'string';
            };
            readonly message: {
              readonly type: 'string';
            };
          };
          readonly required: readonly ['message', 'type'];
        };
      };
      readonly required: readonly ['error'];
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '404': {
      readonly type: 'object';
      readonly properties: {
        readonly details: {
          readonly type: 'string';
          readonly default: 'Not Found';
        };
      };
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '500': {
      readonly type: 'object';
      readonly properties: {
        readonly error: {
          readonly type: 'object';
          readonly properties: {
            readonly type: {
              readonly type: 'string';
            };
            readonly message: {
              readonly type: 'string';
            };
          };
          readonly required: readonly ['message', 'type'];
        };
      };
      readonly required: readonly ['error'];
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
  };
};
declare const ImageAnonymizationCreate: {
  readonly body: {
    readonly type: 'object';
    readonly properties: {
      readonly providers: {
        readonly type: 'string';
        readonly minLength: 1;
        readonly description: "It can be one (ex: **'amazon'** or **'google'**) or multiple provider(s) (ex: **'amazon,microsoft,google'**)             that the data will be redirected to in order to get the processed results.";
        readonly examples: readonly ['api4ai'];
      };
      readonly fallback_providers: {
        readonly type: 'string';
        readonly minLength: 1;
        readonly description: "Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.\n    To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.\n\nThey will be tried in the same order they are input, and it will stop to the first provider who doesn't fail.\n\n\n*Doesn't work with async subfeatures.*\n    ";
      };
      readonly response_as_dict: {
        readonly type: 'boolean';
        readonly default: true;
        readonly description: "Optional : When set to **true** (default), the response is an object of responses with providers names as keys : <br> \n                  ``` {'google' : { 'status': 'success', ... }, } ``` <br>\n                When set to **false** the response structure is a list of response objects : <br> \n                   ``` [{'status': 'success', 'provider': 'google' ... }, ] ```. <br> \n                  ";
      };
      readonly attributes_as_list: {
        readonly type: 'boolean';
        readonly default: false;
        readonly description: "Optional : When set to **false** (default) the structure of the extracted items is list of objects having different attributes : <br>\n     ```{'items': [{'attribute_1': 'x1','attribute_2': 'y2'}, ... ]}``` <br>\n     When it is set to **true**, the response contains an object with each attribute as a list : <br>\n     ```{ 'attribute_1': ['x1','x2', ...], 'attribute_2': [y1, y2, ...]}``` ";
      };
      readonly show_original_response: {
        readonly type: 'boolean';
        readonly default: false;
        readonly description: 'Optional : Shows the original response of the provider.<br>\n        When set to **true**, a new attribute *original_response* will appear in the response object.';
      };
      readonly file: {
        readonly type: 'string';
        readonly format: 'binary';
        readonly description: 'File to analyse in binary format to be used with *content-type*: **multipart/form-data** <br> **Does not work with application/json !**';
        readonly pattern: '(?:jpg|jpeg|png|tiff)$';
      };
      readonly file_url: {
        readonly type: readonly ['string', 'null'];
        readonly format: 'uri';
        readonly description: 'File **URL** to analyse to be used with with *content-type*: **application/json**.';
        readonly examples: readonly ['http://edenai-resource-example.jpg'];
      };
    };
    readonly required: readonly ['providers'];
    readonly $schema: 'http://json-schema.org/draft-04/schema#';
  };
  readonly response: {
    readonly '200': {
      readonly properties: {
        readonly api4ai: {
          readonly required: readonly ['image', 'image_resource_url', 'status'];
          readonly title: 'imageanonymizationAnonymizationDataClass';
          readonly type: 'object';
          readonly properties: {
            readonly image: {
              readonly title: 'Image';
              readonly type: 'string';
            };
            readonly image_resource_url: {
              readonly title: 'Image Resource Url';
              readonly type: 'string';
            };
            readonly items: {
              readonly title: 'Items';
              readonly type: 'array';
              readonly items: {
                readonly required: readonly ['kind', 'confidence', 'bounding_boxes'];
                readonly title: 'AnonymizationItem';
                readonly type: 'object';
                readonly properties: {
                  readonly kind: {
                    readonly title: 'Kind';
                    readonly type: 'string';
                  };
                  readonly confidence: {
                    readonly title: 'Confidence';
                    readonly type: 'integer';
                  };
                  readonly bounding_boxes: {
                    readonly required: readonly ['x_min', 'x_max', 'y_min', 'y_max'];
                    readonly title: 'AnonymizationBoundingBox';
                    readonly type: 'object';
                    readonly properties: {
                      readonly x_min: {
                        readonly title: 'X Min';
                        readonly type: 'integer';
                      };
                      readonly x_max: {
                        readonly title: 'X Max';
                        readonly type: 'integer';
                      };
                      readonly y_min: {
                        readonly title: 'Y Min';
                        readonly type: 'integer';
                      };
                      readonly y_max: {
                        readonly title: 'Y Max';
                        readonly type: 'integer';
                      };
                    };
                  };
                };
              };
            };
            readonly original_response: {
              readonly default: any;
              readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
              readonly title: 'Original Response';
            };
            readonly status: {
              readonly title: 'Status';
              readonly enum: readonly ['sucess', 'fail'];
              readonly type: 'string';
              readonly description: '`sucess` `fail`';
            };
          };
        };
      };
      readonly title: 'imageanonymizationResponseModel';
      readonly type: 'object';
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '400': {
      readonly type: 'object';
      readonly properties: {
        readonly error: {
          readonly type: 'object';
          readonly properties: {
            readonly type: {
              readonly type: 'string';
            };
            readonly message: {
              readonly type: 'object';
              readonly properties: {
                readonly '<parameter_name>': {
                  readonly type: 'array';
                  readonly items: {
                    readonly type: 'string';
                  };
                };
              };
              readonly required: readonly ['<parameter_name>'];
            };
          };
          readonly required: readonly ['message', 'type'];
        };
      };
      readonly required: readonly ['error'];
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '403': {
      readonly type: 'object';
      readonly properties: {
        readonly error: {
          readonly type: 'object';
          readonly properties: {
            readonly type: {
              readonly type: 'string';
            };
            readonly message: {
              readonly type: 'string';
            };
          };
          readonly required: readonly ['message', 'type'];
        };
      };
      readonly required: readonly ['error'];
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '404': {
      readonly type: 'object';
      readonly properties: {
        readonly details: {
          readonly type: 'string';
          readonly default: 'Not Found';
        };
      };
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '500': {
      readonly type: 'object';
      readonly properties: {
        readonly error: {
          readonly type: 'object';
          readonly properties: {
            readonly type: {
              readonly type: 'string';
            };
            readonly message: {
              readonly type: 'string';
            };
          };
          readonly required: readonly ['message', 'type'];
        };
      };
      readonly required: readonly ['error'];
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
  };
};
declare const ImageExplicitContentCreate: {
  readonly body: {
    readonly type: 'object';
    readonly properties: {
      readonly providers: {
        readonly type: 'string';
        readonly minLength: 1;
        readonly description: "It can be one (ex: **'amazon'** or **'google'**) or multiple provider(s) (ex: **'amazon,microsoft,google'**)             that the data will be redirected to in order to get the processed results.";
        readonly examples: readonly [
          'amazon,google,microsoft,sentisight,picpurify,api4ai,clarifai'
        ];
      };
      readonly fallback_providers: {
        readonly type: 'string';
        readonly minLength: 1;
        readonly description: "Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.\n    To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.\n\nThey will be tried in the same order they are input, and it will stop to the first provider who doesn't fail.\n\n\n*Doesn't work with async subfeatures.*\n    ";
      };
      readonly response_as_dict: {
        readonly type: 'boolean';
        readonly default: true;
        readonly description: "Optional : When set to **true** (default), the response is an object of responses with providers names as keys : <br> \n                  ``` {'google' : { 'status': 'success', ... }, } ``` <br>\n                When set to **false** the response structure is a list of response objects : <br> \n                   ``` [{'status': 'success', 'provider': 'google' ... }, ] ```. <br> \n                  ";
      };
      readonly attributes_as_list: {
        readonly type: 'boolean';
        readonly default: false;
        readonly description: "Optional : When set to **false** (default) the structure of the extracted items is list of objects having different attributes : <br>\n     ```{'items': [{'attribute_1': 'x1','attribute_2': 'y2'}, ... ]}``` <br>\n     When it is set to **true**, the response contains an object with each attribute as a list : <br>\n     ```{ 'attribute_1': ['x1','x2', ...], 'attribute_2': [y1, y2, ...]}``` ";
      };
      readonly show_original_response: {
        readonly type: 'boolean';
        readonly default: false;
        readonly description: 'Optional : Shows the original response of the provider.<br>\n        When set to **true**, a new attribute *original_response* will appear in the response object.';
      };
      readonly file: {
        readonly type: 'string';
        readonly format: 'binary';
        readonly description: 'File to analyse in binary format to be used with *content-type*: **multipart/form-data** <br> **Does not work with application/json !**';
        readonly pattern: '(?:jpg|jpeg|png|tiff)$';
      };
      readonly file_url: {
        readonly type: readonly ['string', 'null'];
        readonly format: 'uri';
        readonly description: 'File **URL** to analyse to be used with with *content-type*: **application/json**.';
        readonly examples: readonly ['http://edenai-resource-example.jpg'];
      };
    };
    readonly required: readonly ['providers'];
    readonly $schema: 'http://json-schema.org/draft-04/schema#';
  };
  readonly response: {
    readonly '200': {
      readonly properties: {
        readonly clarifai: {
          readonly required: readonly ['nsfw_likelihood', 'status'];
          readonly title: 'imageexplicit_contentExplicitContentDataClass';
          readonly type: 'object';
          readonly properties: {
            readonly nsfw_likelihood: {
              readonly title: 'Nsfw Likelihood';
              readonly type: 'integer';
            };
            readonly items: {
              readonly title: 'Items';
              readonly type: 'array';
              readonly items: {
                readonly required: readonly ['label', 'likelihood'];
                readonly title: 'ExplicitItem';
                readonly type: 'object';
                readonly properties: {
                  readonly label: {
                    readonly title: 'Label';
                    readonly type: 'string';
                  };
                  readonly likelihood: {
                    readonly title: 'Likelihood';
                    readonly type: 'integer';
                  };
                };
              };
            };
            readonly original_response: {
              readonly default: any;
              readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
              readonly title: 'Original Response';
            };
            readonly status: {
              readonly title: 'Status';
              readonly enum: readonly ['sucess', 'fail'];
              readonly type: 'string';
              readonly description: '`sucess` `fail`';
            };
          };
        };
        readonly picpurify: {
          readonly required: readonly ['nsfw_likelihood', 'status'];
          readonly title: 'imageexplicit_contentExplicitContentDataClass';
          readonly type: 'object';
          readonly properties: {
            readonly nsfw_likelihood: {
              readonly title: 'Nsfw Likelihood';
              readonly type: 'integer';
            };
            readonly items: {
              readonly title: 'Items';
              readonly type: 'array';
              readonly items: {
                readonly required: readonly ['label', 'likelihood'];
                readonly title: 'ExplicitItem';
                readonly type: 'object';
                readonly properties: {
                  readonly label: {
                    readonly title: 'Label';
                    readonly type: 'string';
                  };
                  readonly likelihood: {
                    readonly title: 'Likelihood';
                    readonly type: 'integer';
                  };
                };
              };
            };
            readonly original_response: {
              readonly default: any;
              readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
              readonly title: 'Original Response';
            };
            readonly status: {
              readonly title: 'Status';
              readonly enum: readonly ['sucess', 'fail'];
              readonly type: 'string';
              readonly description: '`sucess` `fail`';
            };
          };
        };
        readonly microsoft: {
          readonly required: readonly ['nsfw_likelihood', 'status'];
          readonly title: 'imageexplicit_contentExplicitContentDataClass';
          readonly type: 'object';
          readonly properties: {
            readonly nsfw_likelihood: {
              readonly title: 'Nsfw Likelihood';
              readonly type: 'integer';
            };
            readonly items: {
              readonly title: 'Items';
              readonly type: 'array';
              readonly items: {
                readonly required: readonly ['label', 'likelihood'];
                readonly title: 'ExplicitItem';
                readonly type: 'object';
                readonly properties: {
                  readonly label: {
                    readonly title: 'Label';
                    readonly type: 'string';
                  };
                  readonly likelihood: {
                    readonly title: 'Likelihood';
                    readonly type: 'integer';
                  };
                };
              };
            };
            readonly original_response: {
              readonly default: any;
              readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
              readonly title: 'Original Response';
            };
            readonly status: {
              readonly title: 'Status';
              readonly enum: readonly ['sucess', 'fail'];
              readonly type: 'string';
              readonly description: '`sucess` `fail`';
            };
          };
        };
        readonly api4ai: {
          readonly required: readonly ['nsfw_likelihood', 'status'];
          readonly title: 'imageexplicit_contentExplicitContentDataClass';
          readonly type: 'object';
          readonly properties: {
            readonly nsfw_likelihood: {
              readonly title: 'Nsfw Likelihood';
              readonly type: 'integer';
            };
            readonly items: {
              readonly title: 'Items';
              readonly type: 'array';
              readonly items: {
                readonly required: readonly ['label', 'likelihood'];
                readonly title: 'ExplicitItem';
                readonly type: 'object';
                readonly properties: {
                  readonly label: {
                    readonly title: 'Label';
                    readonly type: 'string';
                  };
                  readonly likelihood: {
                    readonly title: 'Likelihood';
                    readonly type: 'integer';
                  };
                };
              };
            };
            readonly original_response: {
              readonly default: any;
              readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
              readonly title: 'Original Response';
            };
            readonly status: {
              readonly title: 'Status';
              readonly enum: readonly ['sucess', 'fail'];
              readonly type: 'string';
              readonly description: '`sucess` `fail`';
            };
          };
        };
        readonly google: {
          readonly required: readonly ['nsfw_likelihood', 'status'];
          readonly title: 'imageexplicit_contentExplicitContentDataClass';
          readonly type: 'object';
          readonly properties: {
            readonly nsfw_likelihood: {
              readonly title: 'Nsfw Likelihood';
              readonly type: 'integer';
            };
            readonly items: {
              readonly title: 'Items';
              readonly type: 'array';
              readonly items: {
                readonly required: readonly ['label', 'likelihood'];
                readonly title: 'ExplicitItem';
                readonly type: 'object';
                readonly properties: {
                  readonly label: {
                    readonly title: 'Label';
                    readonly type: 'string';
                  };
                  readonly likelihood: {
                    readonly title: 'Likelihood';
                    readonly type: 'integer';
                  };
                };
              };
            };
            readonly original_response: {
              readonly default: any;
              readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
              readonly title: 'Original Response';
            };
            readonly status: {
              readonly title: 'Status';
              readonly enum: readonly ['sucess', 'fail'];
              readonly type: 'string';
              readonly description: '`sucess` `fail`';
            };
          };
        };
        readonly sentisight: {
          readonly required: readonly ['nsfw_likelihood', 'status'];
          readonly title: 'imageexplicit_contentExplicitContentDataClass';
          readonly type: 'object';
          readonly properties: {
            readonly nsfw_likelihood: {
              readonly title: 'Nsfw Likelihood';
              readonly type: 'integer';
            };
            readonly items: {
              readonly title: 'Items';
              readonly type: 'array';
              readonly items: {
                readonly required: readonly ['label', 'likelihood'];
                readonly title: 'ExplicitItem';
                readonly type: 'object';
                readonly properties: {
                  readonly label: {
                    readonly title: 'Label';
                    readonly type: 'string';
                  };
                  readonly likelihood: {
                    readonly title: 'Likelihood';
                    readonly type: 'integer';
                  };
                };
              };
            };
            readonly original_response: {
              readonly default: any;
              readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
              readonly title: 'Original Response';
            };
            readonly status: {
              readonly title: 'Status';
              readonly enum: readonly ['sucess', 'fail'];
              readonly type: 'string';
              readonly description: '`sucess` `fail`';
            };
          };
        };
        readonly amazon: {
          readonly required: readonly ['nsfw_likelihood', 'status'];
          readonly title: 'imageexplicit_contentExplicitContentDataClass';
          readonly type: 'object';
          readonly properties: {
            readonly nsfw_likelihood: {
              readonly title: 'Nsfw Likelihood';
              readonly type: 'integer';
            };
            readonly items: {
              readonly title: 'Items';
              readonly type: 'array';
              readonly items: {
                readonly required: readonly ['label', 'likelihood'];
                readonly title: 'ExplicitItem';
                readonly type: 'object';
                readonly properties: {
                  readonly label: {
                    readonly title: 'Label';
                    readonly type: 'string';
                  };
                  readonly likelihood: {
                    readonly title: 'Likelihood';
                    readonly type: 'integer';
                  };
                };
              };
            };
            readonly original_response: {
              readonly default: any;
              readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
              readonly title: 'Original Response';
            };
            readonly status: {
              readonly title: 'Status';
              readonly enum: readonly ['sucess', 'fail'];
              readonly type: 'string';
              readonly description: '`sucess` `fail`';
            };
          };
        };
        readonly 'eden-ai': {
          readonly required: readonly ['nsfw_likelihood', 'status'];
          readonly title: 'imageexplicit_contentExplicitContentDataClass';
          readonly type: 'object';
          readonly properties: {
            readonly nsfw_likelihood: {
              readonly title: 'Nsfw Likelihood';
              readonly type: 'integer';
            };
            readonly items: {
              readonly title: 'Items';
              readonly type: 'array';
              readonly items: {
                readonly required: readonly ['label', 'likelihood'];
                readonly title: 'ExplicitItem';
                readonly type: 'object';
                readonly properties: {
                  readonly label: {
                    readonly title: 'Label';
                    readonly type: 'string';
                  };
                  readonly likelihood: {
                    readonly title: 'Likelihood';
                    readonly type: 'integer';
                  };
                };
              };
            };
            readonly original_response: {
              readonly default: any;
              readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
              readonly title: 'Original Response';
            };
            readonly status: {
              readonly title: 'Status';
              readonly enum: readonly ['sucess', 'fail'];
              readonly type: 'string';
              readonly description: '`sucess` `fail`';
            };
          };
        };
      };
      readonly title: 'imageexplicit_contentResponseModel';
      readonly type: 'object';
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '400': {
      readonly type: 'object';
      readonly properties: {
        readonly error: {
          readonly type: 'object';
          readonly properties: {
            readonly type: {
              readonly type: 'string';
            };
            readonly message: {
              readonly type: 'object';
              readonly properties: {
                readonly '<parameter_name>': {
                  readonly type: 'array';
                  readonly items: {
                    readonly type: 'string';
                  };
                };
              };
              readonly required: readonly ['<parameter_name>'];
            };
          };
          readonly required: readonly ['message', 'type'];
        };
      };
      readonly required: readonly ['error'];
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '403': {
      readonly type: 'object';
      readonly properties: {
        readonly error: {
          readonly type: 'object';
          readonly properties: {
            readonly type: {
              readonly type: 'string';
            };
            readonly message: {
              readonly type: 'string';
            };
          };
          readonly required: readonly ['message', 'type'];
        };
      };
      readonly required: readonly ['error'];
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '404': {
      readonly type: 'object';
      readonly properties: {
        readonly details: {
          readonly type: 'string';
          readonly default: 'Not Found';
        };
      };
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '500': {
      readonly type: 'object';
      readonly properties: {
        readonly error: {
          readonly type: 'object';
          readonly properties: {
            readonly type: {
              readonly type: 'string';
            };
            readonly message: {
              readonly type: 'string';
            };
          };
          readonly required: readonly ['message', 'type'];
        };
      };
      readonly required: readonly ['error'];
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
  };
};
declare const ImageFaceCompareCreate: {
  readonly body: {
    readonly type: 'object';
    readonly properties: {
      readonly providers: {
        readonly type: 'string';
        readonly minLength: 1;
        readonly description: "It can be one (ex: **'amazon'** or **'google'**) or multiple provider(s) (ex: **'amazon,microsoft,google'**)             that the data will be redirected to in order to get the processed results.";
        readonly examples: readonly ['facepp,base64,amazon'];
      };
      readonly fallback_providers: {
        readonly type: 'string';
        readonly minLength: 1;
        readonly description: "Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.\n    To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.\n\nThey will be tried in the same order they are input, and it will stop to the first provider who doesn't fail.\n\n\n*Doesn't work with async subfeatures.*\n    ";
      };
      readonly response_as_dict: {
        readonly type: 'boolean';
        readonly default: true;
        readonly description: "Optional : When set to **true** (default), the response is an object of responses with providers names as keys : <br> \n                  ``` {'google' : { 'status': 'success', ... }, } ``` <br>\n                When set to **false** the response structure is a list of response objects : <br> \n                   ``` [{'status': 'success', 'provider': 'google' ... }, ] ```. <br> \n                  ";
      };
      readonly attributes_as_list: {
        readonly type: 'boolean';
        readonly default: false;
        readonly description: "Optional : When set to **false** (default) the structure of the extracted items is list of objects having different attributes : <br>\n     ```{'items': [{'attribute_1': 'x1','attribute_2': 'y2'}, ... ]}``` <br>\n     When it is set to **true**, the response contains an object with each attribute as a list : <br>\n     ```{ 'attribute_1': ['x1','x2', ...], 'attribute_2': [y1, y2, ...]}``` ";
      };
      readonly show_original_response: {
        readonly type: 'boolean';
        readonly default: false;
        readonly description: 'Optional : Shows the original response of the provider.<br>\n        When set to **true**, a new attribute *original_response* will appear in the response object.';
      };
      readonly file1: {
        readonly type: 'string';
        readonly format: 'binary';
        readonly description: 'File to analyse in binary format to be used with *content-type*: **multipart/form-data** <br> **Does not work with application/json !**';
        readonly pattern: '(?:jpg|jpeg|png|tiff)$';
      };
      readonly file1_url: {
        readonly type: readonly ['string', 'null'];
        readonly format: 'uri';
        readonly description: 'File **URL** to analyse to be used with with *content-type*: **application/json**.';
        readonly examples: readonly ['http://edenai-resource-example.jpg'];
      };
      readonly file2: {
        readonly type: 'string';
        readonly format: 'binary';
        readonly description: 'File to analyse in binary format to be used with *content-type*: **multipart/form-data** <br> **Does not work with application/json !**';
        readonly pattern: '(?:jpg|jpeg|png|tiff)$';
      };
      readonly file2_url: {
        readonly type: readonly ['string', 'null'];
        readonly format: 'uri';
        readonly description: 'File **URL** to analyse to be used with with *content-type*: **application/json**.';
        readonly examples: readonly ['http://edenai-resource-example.jpg'];
      };
    };
    readonly required: readonly ['providers'];
    readonly $schema: 'http://json-schema.org/draft-04/schema#';
  };
  readonly response: {
    readonly '200': {
      readonly properties: {
        readonly facepp: {
          readonly required: readonly ['status'];
          readonly title: 'imageface_compareFaceCompareDataClass';
          readonly type: 'object';
          readonly properties: {
            readonly items: {
              readonly title: 'Items';
              readonly type: 'array';
              readonly items: {
                readonly required: readonly ['confidence', 'bounding_box'];
                readonly title: 'FaceMatch';
                readonly type: 'object';
                readonly properties: {
                  readonly confidence: {
                    readonly title: 'Confidence';
                    readonly type: 'integer';
                  };
                  readonly bounding_box: {
                    readonly required: readonly ['top', 'left', 'height', 'width'];
                    readonly title: 'FaceCompareBoundingBox';
                    readonly type: 'object';
                    readonly properties: {
                      readonly top: {
                        readonly title: 'Top';
                        readonly type: 'integer';
                      };
                      readonly left: {
                        readonly title: 'Left';
                        readonly type: 'integer';
                      };
                      readonly height: {
                        readonly title: 'Height';
                        readonly type: 'integer';
                      };
                      readonly width: {
                        readonly title: 'Width';
                        readonly type: 'integer';
                      };
                    };
                  };
                };
              };
            };
            readonly original_response: {
              readonly default: any;
              readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
              readonly title: 'Original Response';
            };
            readonly status: {
              readonly title: 'Status';
              readonly enum: readonly ['sucess', 'fail'];
              readonly type: 'string';
              readonly description: '`sucess` `fail`';
            };
          };
        };
        readonly base64: {
          readonly required: readonly ['status'];
          readonly title: 'imageface_compareFaceCompareDataClass';
          readonly type: 'object';
          readonly properties: {
            readonly items: {
              readonly title: 'Items';
              readonly type: 'array';
              readonly items: {
                readonly required: readonly ['confidence', 'bounding_box'];
                readonly title: 'FaceMatch';
                readonly type: 'object';
                readonly properties: {
                  readonly confidence: {
                    readonly title: 'Confidence';
                    readonly type: 'integer';
                  };
                  readonly bounding_box: {
                    readonly required: readonly ['top', 'left', 'height', 'width'];
                    readonly title: 'FaceCompareBoundingBox';
                    readonly type: 'object';
                    readonly properties: {
                      readonly top: {
                        readonly title: 'Top';
                        readonly type: 'integer';
                      };
                      readonly left: {
                        readonly title: 'Left';
                        readonly type: 'integer';
                      };
                      readonly height: {
                        readonly title: 'Height';
                        readonly type: 'integer';
                      };
                      readonly width: {
                        readonly title: 'Width';
                        readonly type: 'integer';
                      };
                    };
                  };
                };
              };
            };
            readonly original_response: {
              readonly default: any;
              readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
              readonly title: 'Original Response';
            };
            readonly status: {
              readonly title: 'Status';
              readonly enum: readonly ['sucess', 'fail'];
              readonly type: 'string';
              readonly description: '`sucess` `fail`';
            };
          };
        };
        readonly amazon: {
          readonly required: readonly ['status'];
          readonly title: 'imageface_compareFaceCompareDataClass';
          readonly type: 'object';
          readonly properties: {
            readonly items: {
              readonly title: 'Items';
              readonly type: 'array';
              readonly items: {
                readonly required: readonly ['confidence', 'bounding_box'];
                readonly title: 'FaceMatch';
                readonly type: 'object';
                readonly properties: {
                  readonly confidence: {
                    readonly title: 'Confidence';
                    readonly type: 'integer';
                  };
                  readonly bounding_box: {
                    readonly required: readonly ['top', 'left', 'height', 'width'];
                    readonly title: 'FaceCompareBoundingBox';
                    readonly type: 'object';
                    readonly properties: {
                      readonly top: {
                        readonly title: 'Top';
                        readonly type: 'integer';
                      };
                      readonly left: {
                        readonly title: 'Left';
                        readonly type: 'integer';
                      };
                      readonly height: {
                        readonly title: 'Height';
                        readonly type: 'integer';
                      };
                      readonly width: {
                        readonly title: 'Width';
                        readonly type: 'integer';
                      };
                    };
                  };
                };
              };
            };
            readonly original_response: {
              readonly default: any;
              readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
              readonly title: 'Original Response';
            };
            readonly status: {
              readonly title: 'Status';
              readonly enum: readonly ['sucess', 'fail'];
              readonly type: 'string';
              readonly description: '`sucess` `fail`';
            };
          };
        };
      };
      readonly title: 'imageface_compareResponseModel';
      readonly type: 'object';
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '400': {
      readonly type: 'object';
      readonly properties: {
        readonly error: {
          readonly type: 'object';
          readonly properties: {
            readonly type: {
              readonly type: 'string';
            };
            readonly message: {
              readonly type: 'object';
              readonly properties: {
                readonly '<parameter_name>': {
                  readonly type: 'array';
                  readonly items: {
                    readonly type: 'string';
                  };
                };
              };
              readonly required: readonly ['<parameter_name>'];
            };
          };
          readonly required: readonly ['message', 'type'];
        };
      };
      readonly required: readonly ['error'];
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '403': {
      readonly type: 'object';
      readonly properties: {
        readonly error: {
          readonly type: 'object';
          readonly properties: {
            readonly type: {
              readonly type: 'string';
            };
            readonly message: {
              readonly type: 'string';
            };
          };
          readonly required: readonly ['message', 'type'];
        };
      };
      readonly required: readonly ['error'];
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '404': {
      readonly type: 'object';
      readonly properties: {
        readonly details: {
          readonly type: 'string';
          readonly default: 'Not Found';
        };
      };
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '500': {
      readonly type: 'object';
      readonly properties: {
        readonly error: {
          readonly type: 'object';
          readonly properties: {
            readonly type: {
              readonly type: 'string';
            };
            readonly message: {
              readonly type: 'string';
            };
          };
          readonly required: readonly ['message', 'type'];
        };
      };
      readonly required: readonly ['error'];
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
  };
};
declare const ImageFaceDetectionCreate: {
  readonly body: {
    readonly type: 'object';
    readonly properties: {
      readonly providers: {
        readonly type: 'string';
        readonly minLength: 1;
        readonly description: "It can be one (ex: **'amazon'** or **'google'**) or multiple provider(s) (ex: **'amazon,microsoft,google'**)             that the data will be redirected to in order to get the processed results.";
        readonly examples: readonly [
          'clarifai,amazon,skybiometry,google,api4ai,microsoft,picpurify'
        ];
      };
      readonly fallback_providers: {
        readonly type: 'string';
        readonly minLength: 1;
        readonly description: "Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.\n    To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.\n\nThey will be tried in the same order they are input, and it will stop to the first provider who doesn't fail.\n\n\n*Doesn't work with async subfeatures.*\n    ";
      };
      readonly response_as_dict: {
        readonly type: 'boolean';
        readonly default: true;
        readonly description: "Optional : When set to **true** (default), the response is an object of responses with providers names as keys : <br> \n                  ``` {'google' : { 'status': 'success', ... }, } ``` <br>\n                When set to **false** the response structure is a list of response objects : <br> \n                   ``` [{'status': 'success', 'provider': 'google' ... }, ] ```. <br> \n                  ";
      };
      readonly attributes_as_list: {
        readonly type: 'boolean';
        readonly default: false;
        readonly description: "Optional : When set to **false** (default) the structure of the extracted items is list of objects having different attributes : <br>\n     ```{'items': [{'attribute_1': 'x1','attribute_2': 'y2'}, ... ]}``` <br>\n     When it is set to **true**, the response contains an object with each attribute as a list : <br>\n     ```{ 'attribute_1': ['x1','x2', ...], 'attribute_2': [y1, y2, ...]}``` ";
      };
      readonly show_original_response: {
        readonly type: 'boolean';
        readonly default: false;
        readonly description: 'Optional : Shows the original response of the provider.<br>\n        When set to **true**, a new attribute *original_response* will appear in the response object.';
      };
      readonly file: {
        readonly type: 'string';
        readonly format: 'binary';
        readonly description: 'File to analyse in binary format to be used with *content-type*: **multipart/form-data** <br> **Does not work with application/json !**';
        readonly pattern: '(?:jpg|jpeg|png|tiff)$';
      };
      readonly file_url: {
        readonly type: readonly ['string', 'null'];
        readonly format: 'uri';
        readonly description: 'File **URL** to analyse to be used with with *content-type*: **application/json**.';
        readonly examples: readonly ['http://edenai-resource-example.jpg'];
      };
    };
    readonly required: readonly ['providers'];
    readonly $schema: 'http://json-schema.org/draft-04/schema#';
  };
  readonly response: {
    readonly '200': {
      readonly properties: {
        readonly clarifai: {
          readonly required: readonly ['status'];
          readonly title: 'imageface_detectionFaceDetectionDataClass';
          readonly type: 'object';
          readonly properties: {
            readonly items: {
              readonly title: 'Items';
              readonly type: 'array';
              readonly items: {
                readonly required: readonly [
                  'confidence',
                  'landmarks',
                  'emotions',
                  'poses',
                  'age',
                  'gender',
                  'bounding_box',
                  'hair',
                  'facial_hair',
                  'quality',
                  'makeup',
                  'accessories',
                  'occlusions',
                  'features'
                ];
                readonly title: 'FaceItem';
                readonly type: 'object';
                readonly properties: {
                  readonly confidence: {
                    readonly title: 'Confidence';
                    readonly type: 'integer';
                  };
                  readonly landmarks: {
                    readonly title: 'FaceLandmarks';
                    readonly type: 'object';
                    readonly properties: {
                      readonly left_eye: {
                        readonly title: 'Left Eye';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly left_eye_top: {
                        readonly title: 'Left Eye Top';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly left_eye_right: {
                        readonly title: 'Left Eye Right';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly left_eye_bottom: {
                        readonly title: 'Left Eye Bottom';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly left_eye_left: {
                        readonly title: 'Left Eye Left';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly right_eye: {
                        readonly title: 'Right Eye';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly right_eye_top: {
                        readonly title: 'Right Eye Top';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly right_eye_right: {
                        readonly title: 'Right Eye Right';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly right_eye_bottom: {
                        readonly title: 'Right Eye Bottom';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly right_eye_left: {
                        readonly title: 'Right Eye Left';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly left_eyebrow_left: {
                        readonly title: 'Left Eyebrow Left';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly left_eyebrow_right: {
                        readonly title: 'Left Eyebrow Right';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly left_eyebrow_top: {
                        readonly title: 'Left Eyebrow Top';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly right_eyebrow_left: {
                        readonly title: 'Right Eyebrow Left';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly right_eyebrow_right: {
                        readonly title: 'Right Eyebrow Right';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly left_pupil: {
                        readonly title: 'Left Pupil';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly right_pupil: {
                        readonly title: 'Right Pupil';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly nose_tip: {
                        readonly title: 'Nose Tip';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly nose_bottom_right: {
                        readonly title: 'Nose Bottom Right';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly nose_bottom_left: {
                        readonly title: 'Nose Bottom Left';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly mouth_left: {
                        readonly title: 'Mouth Left';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly mouth_right: {
                        readonly title: 'Mouth Right';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly right_eyebrow_top: {
                        readonly title: 'Right Eyebrow Top';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly midpoint_between_eyes: {
                        readonly title: 'Midpoint Between Eyes';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly nose_bottom_center: {
                        readonly title: 'Nose Bottom Center';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly nose_left_alar_out_tip: {
                        readonly title: 'Nose Left Alar Out Tip';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly nose_left_alar_top: {
                        readonly title: 'Nose Left Alar Top';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly nose_right_alar_out_tip: {
                        readonly title: 'Nose Right Alar Out Tip';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly nose_right_alar_top: {
                        readonly title: 'Nose Right Alar Top';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly nose_root_left: {
                        readonly title: 'Nose Root Left';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly nose_root_right: {
                        readonly title: 'Nose Root Right';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly upper_lip: {
                        readonly title: 'Upper Lip';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly under_lip: {
                        readonly title: 'Under Lip';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly under_lip_bottom: {
                        readonly title: 'Under Lip Bottom';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly under_lip_top: {
                        readonly title: 'Under Lip Top';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly upper_lip_bottom: {
                        readonly title: 'Upper Lip Bottom';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly upper_lip_top: {
                        readonly title: 'Upper Lip Top';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly mouth_center: {
                        readonly title: 'Mouth Center';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly mouth_top: {
                        readonly title: 'Mouth Top';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly mouth_bottom: {
                        readonly title: 'Mouth Bottom';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly left_ear_tragion: {
                        readonly title: 'Left Ear Tragion';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly right_ear_tragion: {
                        readonly title: 'Right Ear Tragion';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly forehead_glabella: {
                        readonly title: 'Forehead Glabella';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly chin_gnathion: {
                        readonly title: 'Chin Gnathion';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly chin_left_gonion: {
                        readonly title: 'Chin Left Gonion';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly chin_right_gonion: {
                        readonly title: 'Chin Right Gonion';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly upper_jawline_left: {
                        readonly title: 'Upper Jawline Left';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly mid_jawline_left: {
                        readonly title: 'Mid Jawline Left';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly mid_jawline_right: {
                        readonly title: 'Mid Jawline Right';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly upper_jawline_right: {
                        readonly title: 'Upper Jawline Right';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly left_cheek_center: {
                        readonly title: 'Left Cheek Center';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly right_cheek_center: {
                        readonly title: 'Right Cheek Center';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                    };
                  };
                  readonly emotions: {
                    readonly required: readonly [
                      'joy',
                      'sorrow',
                      'anger',
                      'surprise',
                      'disgust',
                      'fear',
                      'confusion',
                      'calm',
                      'unknown',
                      'neutral',
                      'contempt'
                    ];
                    readonly title: 'FaceEmotions';
                    readonly type: 'object';
                    readonly properties: {
                      readonly joy: {
                        readonly title: 'Joy';
                        readonly type: 'integer';
                      };
                      readonly sorrow: {
                        readonly title: 'Sorrow';
                        readonly type: 'integer';
                      };
                      readonly anger: {
                        readonly title: 'Anger';
                        readonly type: 'integer';
                      };
                      readonly surprise: {
                        readonly title: 'Surprise';
                        readonly type: 'integer';
                      };
                      readonly disgust: {
                        readonly title: 'Disgust';
                        readonly type: 'integer';
                      };
                      readonly fear: {
                        readonly title: 'Fear';
                        readonly type: 'integer';
                      };
                      readonly confusion: {
                        readonly title: 'Confusion';
                        readonly type: 'integer';
                      };
                      readonly calm: {
                        readonly title: 'Calm';
                        readonly type: 'integer';
                      };
                      readonly unknown: {
                        readonly title: 'Unknown';
                        readonly type: 'integer';
                      };
                      readonly neutral: {
                        readonly title: 'Neutral';
                        readonly type: 'integer';
                      };
                      readonly contempt: {
                        readonly title: 'Contempt';
                        readonly type: 'integer';
                      };
                    };
                  };
                  readonly poses: {
                    readonly required: readonly ['pitch', 'roll', 'yaw'];
                    readonly title: 'FacePoses';
                    readonly type: 'object';
                    readonly properties: {
                      readonly pitch: {
                        readonly title: 'Pitch';
                        readonly type: 'integer';
                      };
                      readonly roll: {
                        readonly title: 'Roll';
                        readonly type: 'integer';
                      };
                      readonly yaw: {
                        readonly title: 'Yaw';
                        readonly type: 'integer';
                      };
                    };
                  };
                  readonly age: {
                    readonly title: 'Age';
                    readonly type: 'integer';
                  };
                  readonly gender: {
                    readonly title: 'Gender';
                    readonly type: 'string';
                  };
                  readonly bounding_box: {
                    readonly required: readonly ['x_min', 'x_max', 'y_min', 'y_max'];
                    readonly title: 'FaceBoundingBox';
                    readonly type: 'object';
                    readonly properties: {
                      readonly x_min: {
                        readonly title: 'X Min';
                        readonly type: 'integer';
                      };
                      readonly x_max: {
                        readonly title: 'X Max';
                        readonly type: 'integer';
                      };
                      readonly y_min: {
                        readonly title: 'Y Min';
                        readonly type: 'integer';
                      };
                      readonly y_max: {
                        readonly title: 'Y Max';
                        readonly type: 'integer';
                      };
                    };
                  };
                  readonly hair: {
                    readonly required: readonly ['bald', 'invisible'];
                    readonly title: 'FaceHair';
                    readonly type: 'object';
                    readonly properties: {
                      readonly hair_color: {
                        readonly title: 'Hair Color';
                        readonly type: 'array';
                        readonly items: {
                          readonly required: readonly ['color', 'confidence'];
                          readonly title: 'FaceHairColor';
                          readonly type: 'object';
                          readonly properties: {
                            readonly color: {
                              readonly title: 'Color';
                              readonly type: 'string';
                            };
                            readonly confidence: {
                              readonly title: 'Confidence';
                              readonly type: 'integer';
                            };
                          };
                        };
                      };
                      readonly bald: {
                        readonly title: 'Bald';
                        readonly type: 'integer';
                      };
                      readonly invisible: {
                        readonly title: 'Invisible';
                        readonly type: 'boolean';
                      };
                    };
                  };
                  readonly facial_hair: {
                    readonly required: readonly ['moustache', 'beard', 'sideburns'];
                    readonly title: 'FaceFacialHair';
                    readonly type: 'object';
                    readonly properties: {
                      readonly moustache: {
                        readonly title: 'Moustache';
                        readonly type: 'integer';
                      };
                      readonly beard: {
                        readonly title: 'Beard';
                        readonly type: 'integer';
                      };
                      readonly sideburns: {
                        readonly title: 'Sideburns';
                        readonly type: 'integer';
                      };
                    };
                  };
                  readonly quality: {
                    readonly required: readonly [
                      'noise',
                      'exposure',
                      'blur',
                      'brightness',
                      'sharpness'
                    ];
                    readonly title: 'FaceQuality';
                    readonly type: 'object';
                    readonly properties: {
                      readonly noise: {
                        readonly title: 'Noise';
                        readonly type: 'integer';
                      };
                      readonly exposure: {
                        readonly title: 'Exposure';
                        readonly type: 'integer';
                      };
                      readonly blur: {
                        readonly title: 'Blur';
                        readonly type: 'integer';
                      };
                      readonly brightness: {
                        readonly title: 'Brightness';
                        readonly type: 'integer';
                      };
                      readonly sharpness: {
                        readonly title: 'Sharpness';
                        readonly type: 'integer';
                      };
                    };
                  };
                  readonly makeup: {
                    readonly required: readonly ['eye_make', 'lip_make'];
                    readonly title: 'FaceMakeup';
                    readonly type: 'object';
                    readonly properties: {
                      readonly eye_make: {
                        readonly title: 'Eye Make';
                        readonly type: 'boolean';
                      };
                      readonly lip_make: {
                        readonly title: 'Lip Make';
                        readonly type: 'boolean';
                      };
                    };
                  };
                  readonly accessories: {
                    readonly required: readonly [
                      'sunglasses',
                      'reading_glasses',
                      'swimming_goggles',
                      'face_mask',
                      'eyeglasses',
                      'headwear'
                    ];
                    readonly title: 'FaceAccessories';
                    readonly type: 'object';
                    readonly properties: {
                      readonly sunglasses: {
                        readonly title: 'Sunglasses';
                        readonly type: 'integer';
                      };
                      readonly reading_glasses: {
                        readonly title: 'Reading Glasses';
                        readonly type: 'integer';
                      };
                      readonly swimming_goggles: {
                        readonly title: 'Swimming Goggles';
                        readonly type: 'integer';
                      };
                      readonly face_mask: {
                        readonly title: 'Face Mask';
                        readonly type: 'integer';
                      };
                      readonly eyeglasses: {
                        readonly title: 'Eyeglasses';
                        readonly type: 'integer';
                      };
                      readonly headwear: {
                        readonly title: 'Headwear';
                        readonly type: 'integer';
                      };
                    };
                  };
                  readonly occlusions: {
                    readonly required: readonly [
                      'eye_occluded',
                      'forehead_occluded',
                      'mouth_occluded'
                    ];
                    readonly title: 'FaceOcclusions';
                    readonly type: 'object';
                    readonly properties: {
                      readonly eye_occluded: {
                        readonly title: 'Eye Occluded';
                        readonly type: 'boolean';
                      };
                      readonly forehead_occluded: {
                        readonly title: 'Forehead Occluded';
                        readonly type: 'boolean';
                      };
                      readonly mouth_occluded: {
                        readonly title: 'Mouth Occluded';
                        readonly type: 'boolean';
                      };
                    };
                  };
                  readonly features: {
                    readonly required: readonly ['eyes_open', 'smile', 'mouth_open'];
                    readonly title: 'FaceFeatures';
                    readonly type: 'object';
                    readonly properties: {
                      readonly eyes_open: {
                        readonly title: 'Eyes Open';
                        readonly type: 'integer';
                      };
                      readonly smile: {
                        readonly title: 'Smile';
                        readonly type: 'integer';
                      };
                      readonly mouth_open: {
                        readonly title: 'Mouth Open';
                        readonly type: 'integer';
                      };
                    };
                  };
                };
              };
            };
            readonly original_response: {
              readonly default: any;
              readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
              readonly title: 'Original Response';
            };
            readonly status: {
              readonly title: 'Status';
              readonly enum: readonly ['sucess', 'fail'];
              readonly type: 'string';
              readonly description: '`sucess` `fail`';
            };
          };
        };
        readonly picpurify: {
          readonly required: readonly ['status'];
          readonly title: 'imageface_detectionFaceDetectionDataClass';
          readonly type: 'object';
          readonly properties: {
            readonly items: {
              readonly title: 'Items';
              readonly type: 'array';
              readonly items: {
                readonly required: readonly [
                  'confidence',
                  'landmarks',
                  'emotions',
                  'poses',
                  'age',
                  'gender',
                  'bounding_box',
                  'hair',
                  'facial_hair',
                  'quality',
                  'makeup',
                  'accessories',
                  'occlusions',
                  'features'
                ];
                readonly title: 'FaceItem';
                readonly type: 'object';
                readonly properties: {
                  readonly confidence: {
                    readonly title: 'Confidence';
                    readonly type: 'integer';
                  };
                  readonly landmarks: {
                    readonly title: 'FaceLandmarks';
                    readonly type: 'object';
                    readonly properties: {
                      readonly left_eye: {
                        readonly title: 'Left Eye';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly left_eye_top: {
                        readonly title: 'Left Eye Top';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly left_eye_right: {
                        readonly title: 'Left Eye Right';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly left_eye_bottom: {
                        readonly title: 'Left Eye Bottom';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly left_eye_left: {
                        readonly title: 'Left Eye Left';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly right_eye: {
                        readonly title: 'Right Eye';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly right_eye_top: {
                        readonly title: 'Right Eye Top';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly right_eye_right: {
                        readonly title: 'Right Eye Right';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly right_eye_bottom: {
                        readonly title: 'Right Eye Bottom';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly right_eye_left: {
                        readonly title: 'Right Eye Left';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly left_eyebrow_left: {
                        readonly title: 'Left Eyebrow Left';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly left_eyebrow_right: {
                        readonly title: 'Left Eyebrow Right';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly left_eyebrow_top: {
                        readonly title: 'Left Eyebrow Top';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly right_eyebrow_left: {
                        readonly title: 'Right Eyebrow Left';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly right_eyebrow_right: {
                        readonly title: 'Right Eyebrow Right';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly left_pupil: {
                        readonly title: 'Left Pupil';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly right_pupil: {
                        readonly title: 'Right Pupil';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly nose_tip: {
                        readonly title: 'Nose Tip';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly nose_bottom_right: {
                        readonly title: 'Nose Bottom Right';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly nose_bottom_left: {
                        readonly title: 'Nose Bottom Left';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly mouth_left: {
                        readonly title: 'Mouth Left';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly mouth_right: {
                        readonly title: 'Mouth Right';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly right_eyebrow_top: {
                        readonly title: 'Right Eyebrow Top';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly midpoint_between_eyes: {
                        readonly title: 'Midpoint Between Eyes';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly nose_bottom_center: {
                        readonly title: 'Nose Bottom Center';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly nose_left_alar_out_tip: {
                        readonly title: 'Nose Left Alar Out Tip';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly nose_left_alar_top: {
                        readonly title: 'Nose Left Alar Top';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly nose_right_alar_out_tip: {
                        readonly title: 'Nose Right Alar Out Tip';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly nose_right_alar_top: {
                        readonly title: 'Nose Right Alar Top';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly nose_root_left: {
                        readonly title: 'Nose Root Left';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly nose_root_right: {
                        readonly title: 'Nose Root Right';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly upper_lip: {
                        readonly title: 'Upper Lip';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly under_lip: {
                        readonly title: 'Under Lip';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly under_lip_bottom: {
                        readonly title: 'Under Lip Bottom';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly under_lip_top: {
                        readonly title: 'Under Lip Top';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly upper_lip_bottom: {
                        readonly title: 'Upper Lip Bottom';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly upper_lip_top: {
                        readonly title: 'Upper Lip Top';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly mouth_center: {
                        readonly title: 'Mouth Center';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly mouth_top: {
                        readonly title: 'Mouth Top';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly mouth_bottom: {
                        readonly title: 'Mouth Bottom';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly left_ear_tragion: {
                        readonly title: 'Left Ear Tragion';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly right_ear_tragion: {
                        readonly title: 'Right Ear Tragion';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly forehead_glabella: {
                        readonly title: 'Forehead Glabella';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly chin_gnathion: {
                        readonly title: 'Chin Gnathion';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly chin_left_gonion: {
                        readonly title: 'Chin Left Gonion';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly chin_right_gonion: {
                        readonly title: 'Chin Right Gonion';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly upper_jawline_left: {
                        readonly title: 'Upper Jawline Left';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly mid_jawline_left: {
                        readonly title: 'Mid Jawline Left';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly mid_jawline_right: {
                        readonly title: 'Mid Jawline Right';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly upper_jawline_right: {
                        readonly title: 'Upper Jawline Right';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly left_cheek_center: {
                        readonly title: 'Left Cheek Center';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly right_cheek_center: {
                        readonly title: 'Right Cheek Center';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                    };
                  };
                  readonly emotions: {
                    readonly required: readonly [
                      'joy',
                      'sorrow',
                      'anger',
                      'surprise',
                      'disgust',
                      'fear',
                      'confusion',
                      'calm',
                      'unknown',
                      'neutral',
                      'contempt'
                    ];
                    readonly title: 'FaceEmotions';
                    readonly type: 'object';
                    readonly properties: {
                      readonly joy: {
                        readonly title: 'Joy';
                        readonly type: 'integer';
                      };
                      readonly sorrow: {
                        readonly title: 'Sorrow';
                        readonly type: 'integer';
                      };
                      readonly anger: {
                        readonly title: 'Anger';
                        readonly type: 'integer';
                      };
                      readonly surprise: {
                        readonly title: 'Surprise';
                        readonly type: 'integer';
                      };
                      readonly disgust: {
                        readonly title: 'Disgust';
                        readonly type: 'integer';
                      };
                      readonly fear: {
                        readonly title: 'Fear';
                        readonly type: 'integer';
                      };
                      readonly confusion: {
                        readonly title: 'Confusion';
                        readonly type: 'integer';
                      };
                      readonly calm: {
                        readonly title: 'Calm';
                        readonly type: 'integer';
                      };
                      readonly unknown: {
                        readonly title: 'Unknown';
                        readonly type: 'integer';
                      };
                      readonly neutral: {
                        readonly title: 'Neutral';
                        readonly type: 'integer';
                      };
                      readonly contempt: {
                        readonly title: 'Contempt';
                        readonly type: 'integer';
                      };
                    };
                  };
                  readonly poses: {
                    readonly required: readonly ['pitch', 'roll', 'yaw'];
                    readonly title: 'FacePoses';
                    readonly type: 'object';
                    readonly properties: {
                      readonly pitch: {
                        readonly title: 'Pitch';
                        readonly type: 'integer';
                      };
                      readonly roll: {
                        readonly title: 'Roll';
                        readonly type: 'integer';
                      };
                      readonly yaw: {
                        readonly title: 'Yaw';
                        readonly type: 'integer';
                      };
                    };
                  };
                  readonly age: {
                    readonly title: 'Age';
                    readonly type: 'integer';
                  };
                  readonly gender: {
                    readonly title: 'Gender';
                    readonly type: 'string';
                  };
                  readonly bounding_box: {
                    readonly required: readonly ['x_min', 'x_max', 'y_min', 'y_max'];
                    readonly title: 'FaceBoundingBox';
                    readonly type: 'object';
                    readonly properties: {
                      readonly x_min: {
                        readonly title: 'X Min';
                        readonly type: 'integer';
                      };
                      readonly x_max: {
                        readonly title: 'X Max';
                        readonly type: 'integer';
                      };
                      readonly y_min: {
                        readonly title: 'Y Min';
                        readonly type: 'integer';
                      };
                      readonly y_max: {
                        readonly title: 'Y Max';
                        readonly type: 'integer';
                      };
                    };
                  };
                  readonly hair: {
                    readonly required: readonly ['bald', 'invisible'];
                    readonly title: 'FaceHair';
                    readonly type: 'object';
                    readonly properties: {
                      readonly hair_color: {
                        readonly title: 'Hair Color';
                        readonly type: 'array';
                        readonly items: {
                          readonly required: readonly ['color', 'confidence'];
                          readonly title: 'FaceHairColor';
                          readonly type: 'object';
                          readonly properties: {
                            readonly color: {
                              readonly title: 'Color';
                              readonly type: 'string';
                            };
                            readonly confidence: {
                              readonly title: 'Confidence';
                              readonly type: 'integer';
                            };
                          };
                        };
                      };
                      readonly bald: {
                        readonly title: 'Bald';
                        readonly type: 'integer';
                      };
                      readonly invisible: {
                        readonly title: 'Invisible';
                        readonly type: 'boolean';
                      };
                    };
                  };
                  readonly facial_hair: {
                    readonly required: readonly ['moustache', 'beard', 'sideburns'];
                    readonly title: 'FaceFacialHair';
                    readonly type: 'object';
                    readonly properties: {
                      readonly moustache: {
                        readonly title: 'Moustache';
                        readonly type: 'integer';
                      };
                      readonly beard: {
                        readonly title: 'Beard';
                        readonly type: 'integer';
                      };
                      readonly sideburns: {
                        readonly title: 'Sideburns';
                        readonly type: 'integer';
                      };
                    };
                  };
                  readonly quality: {
                    readonly required: readonly [
                      'noise',
                      'exposure',
                      'blur',
                      'brightness',
                      'sharpness'
                    ];
                    readonly title: 'FaceQuality';
                    readonly type: 'object';
                    readonly properties: {
                      readonly noise: {
                        readonly title: 'Noise';
                        readonly type: 'integer';
                      };
                      readonly exposure: {
                        readonly title: 'Exposure';
                        readonly type: 'integer';
                      };
                      readonly blur: {
                        readonly title: 'Blur';
                        readonly type: 'integer';
                      };
                      readonly brightness: {
                        readonly title: 'Brightness';
                        readonly type: 'integer';
                      };
                      readonly sharpness: {
                        readonly title: 'Sharpness';
                        readonly type: 'integer';
                      };
                    };
                  };
                  readonly makeup: {
                    readonly required: readonly ['eye_make', 'lip_make'];
                    readonly title: 'FaceMakeup';
                    readonly type: 'object';
                    readonly properties: {
                      readonly eye_make: {
                        readonly title: 'Eye Make';
                        readonly type: 'boolean';
                      };
                      readonly lip_make: {
                        readonly title: 'Lip Make';
                        readonly type: 'boolean';
                      };
                    };
                  };
                  readonly accessories: {
                    readonly required: readonly [
                      'sunglasses',
                      'reading_glasses',
                      'swimming_goggles',
                      'face_mask',
                      'eyeglasses',
                      'headwear'
                    ];
                    readonly title: 'FaceAccessories';
                    readonly type: 'object';
                    readonly properties: {
                      readonly sunglasses: {
                        readonly title: 'Sunglasses';
                        readonly type: 'integer';
                      };
                      readonly reading_glasses: {
                        readonly title: 'Reading Glasses';
                        readonly type: 'integer';
                      };
                      readonly swimming_goggles: {
                        readonly title: 'Swimming Goggles';
                        readonly type: 'integer';
                      };
                      readonly face_mask: {
                        readonly title: 'Face Mask';
                        readonly type: 'integer';
                      };
                      readonly eyeglasses: {
                        readonly title: 'Eyeglasses';
                        readonly type: 'integer';
                      };
                      readonly headwear: {
                        readonly title: 'Headwear';
                        readonly type: 'integer';
                      };
                    };
                  };
                  readonly occlusions: {
                    readonly required: readonly [
                      'eye_occluded',
                      'forehead_occluded',
                      'mouth_occluded'
                    ];
                    readonly title: 'FaceOcclusions';
                    readonly type: 'object';
                    readonly properties: {
                      readonly eye_occluded: {
                        readonly title: 'Eye Occluded';
                        readonly type: 'boolean';
                      };
                      readonly forehead_occluded: {
                        readonly title: 'Forehead Occluded';
                        readonly type: 'boolean';
                      };
                      readonly mouth_occluded: {
                        readonly title: 'Mouth Occluded';
                        readonly type: 'boolean';
                      };
                    };
                  };
                  readonly features: {
                    readonly required: readonly ['eyes_open', 'smile', 'mouth_open'];
                    readonly title: 'FaceFeatures';
                    readonly type: 'object';
                    readonly properties: {
                      readonly eyes_open: {
                        readonly title: 'Eyes Open';
                        readonly type: 'integer';
                      };
                      readonly smile: {
                        readonly title: 'Smile';
                        readonly type: 'integer';
                      };
                      readonly mouth_open: {
                        readonly title: 'Mouth Open';
                        readonly type: 'integer';
                      };
                    };
                  };
                };
              };
            };
            readonly original_response: {
              readonly default: any;
              readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
              readonly title: 'Original Response';
            };
            readonly status: {
              readonly title: 'Status';
              readonly enum: readonly ['sucess', 'fail'];
              readonly type: 'string';
              readonly description: '`sucess` `fail`';
            };
          };
        };
        readonly microsoft: {
          readonly required: readonly ['status'];
          readonly title: 'imageface_detectionFaceDetectionDataClass';
          readonly type: 'object';
          readonly properties: {
            readonly items: {
              readonly title: 'Items';
              readonly type: 'array';
              readonly items: {
                readonly required: readonly [
                  'confidence',
                  'landmarks',
                  'emotions',
                  'poses',
                  'age',
                  'gender',
                  'bounding_box',
                  'hair',
                  'facial_hair',
                  'quality',
                  'makeup',
                  'accessories',
                  'occlusions',
                  'features'
                ];
                readonly title: 'FaceItem';
                readonly type: 'object';
                readonly properties: {
                  readonly confidence: {
                    readonly title: 'Confidence';
                    readonly type: 'integer';
                  };
                  readonly landmarks: {
                    readonly title: 'FaceLandmarks';
                    readonly type: 'object';
                    readonly properties: {
                      readonly left_eye: {
                        readonly title: 'Left Eye';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly left_eye_top: {
                        readonly title: 'Left Eye Top';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly left_eye_right: {
                        readonly title: 'Left Eye Right';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly left_eye_bottom: {
                        readonly title: 'Left Eye Bottom';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly left_eye_left: {
                        readonly title: 'Left Eye Left';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly right_eye: {
                        readonly title: 'Right Eye';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly right_eye_top: {
                        readonly title: 'Right Eye Top';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly right_eye_right: {
                        readonly title: 'Right Eye Right';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly right_eye_bottom: {
                        readonly title: 'Right Eye Bottom';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly right_eye_left: {
                        readonly title: 'Right Eye Left';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly left_eyebrow_left: {
                        readonly title: 'Left Eyebrow Left';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly left_eyebrow_right: {
                        readonly title: 'Left Eyebrow Right';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly left_eyebrow_top: {
                        readonly title: 'Left Eyebrow Top';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly right_eyebrow_left: {
                        readonly title: 'Right Eyebrow Left';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly right_eyebrow_right: {
                        readonly title: 'Right Eyebrow Right';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly left_pupil: {
                        readonly title: 'Left Pupil';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly right_pupil: {
                        readonly title: 'Right Pupil';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly nose_tip: {
                        readonly title: 'Nose Tip';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly nose_bottom_right: {
                        readonly title: 'Nose Bottom Right';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly nose_bottom_left: {
                        readonly title: 'Nose Bottom Left';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly mouth_left: {
                        readonly title: 'Mouth Left';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly mouth_right: {
                        readonly title: 'Mouth Right';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly right_eyebrow_top: {
                        readonly title: 'Right Eyebrow Top';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly midpoint_between_eyes: {
                        readonly title: 'Midpoint Between Eyes';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly nose_bottom_center: {
                        readonly title: 'Nose Bottom Center';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly nose_left_alar_out_tip: {
                        readonly title: 'Nose Left Alar Out Tip';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly nose_left_alar_top: {
                        readonly title: 'Nose Left Alar Top';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly nose_right_alar_out_tip: {
                        readonly title: 'Nose Right Alar Out Tip';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly nose_right_alar_top: {
                        readonly title: 'Nose Right Alar Top';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly nose_root_left: {
                        readonly title: 'Nose Root Left';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly nose_root_right: {
                        readonly title: 'Nose Root Right';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly upper_lip: {
                        readonly title: 'Upper Lip';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly under_lip: {
                        readonly title: 'Under Lip';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly under_lip_bottom: {
                        readonly title: 'Under Lip Bottom';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly under_lip_top: {
                        readonly title: 'Under Lip Top';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly upper_lip_bottom: {
                        readonly title: 'Upper Lip Bottom';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly upper_lip_top: {
                        readonly title: 'Upper Lip Top';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly mouth_center: {
                        readonly title: 'Mouth Center';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly mouth_top: {
                        readonly title: 'Mouth Top';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly mouth_bottom: {
                        readonly title: 'Mouth Bottom';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly left_ear_tragion: {
                        readonly title: 'Left Ear Tragion';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly right_ear_tragion: {
                        readonly title: 'Right Ear Tragion';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly forehead_glabella: {
                        readonly title: 'Forehead Glabella';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly chin_gnathion: {
                        readonly title: 'Chin Gnathion';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly chin_left_gonion: {
                        readonly title: 'Chin Left Gonion';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly chin_right_gonion: {
                        readonly title: 'Chin Right Gonion';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly upper_jawline_left: {
                        readonly title: 'Upper Jawline Left';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly mid_jawline_left: {
                        readonly title: 'Mid Jawline Left';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly mid_jawline_right: {
                        readonly title: 'Mid Jawline Right';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly upper_jawline_right: {
                        readonly title: 'Upper Jawline Right';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly left_cheek_center: {
                        readonly title: 'Left Cheek Center';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly right_cheek_center: {
                        readonly title: 'Right Cheek Center';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                    };
                  };
                  readonly emotions: {
                    readonly required: readonly [
                      'joy',
                      'sorrow',
                      'anger',
                      'surprise',
                      'disgust',
                      'fear',
                      'confusion',
                      'calm',
                      'unknown',
                      'neutral',
                      'contempt'
                    ];
                    readonly title: 'FaceEmotions';
                    readonly type: 'object';
                    readonly properties: {
                      readonly joy: {
                        readonly title: 'Joy';
                        readonly type: 'integer';
                      };
                      readonly sorrow: {
                        readonly title: 'Sorrow';
                        readonly type: 'integer';
                      };
                      readonly anger: {
                        readonly title: 'Anger';
                        readonly type: 'integer';
                      };
                      readonly surprise: {
                        readonly title: 'Surprise';
                        readonly type: 'integer';
                      };
                      readonly disgust: {
                        readonly title: 'Disgust';
                        readonly type: 'integer';
                      };
                      readonly fear: {
                        readonly title: 'Fear';
                        readonly type: 'integer';
                      };
                      readonly confusion: {
                        readonly title: 'Confusion';
                        readonly type: 'integer';
                      };
                      readonly calm: {
                        readonly title: 'Calm';
                        readonly type: 'integer';
                      };
                      readonly unknown: {
                        readonly title: 'Unknown';
                        readonly type: 'integer';
                      };
                      readonly neutral: {
                        readonly title: 'Neutral';
                        readonly type: 'integer';
                      };
                      readonly contempt: {
                        readonly title: 'Contempt';
                        readonly type: 'integer';
                      };
                    };
                  };
                  readonly poses: {
                    readonly required: readonly ['pitch', 'roll', 'yaw'];
                    readonly title: 'FacePoses';
                    readonly type: 'object';
                    readonly properties: {
                      readonly pitch: {
                        readonly title: 'Pitch';
                        readonly type: 'integer';
                      };
                      readonly roll: {
                        readonly title: 'Roll';
                        readonly type: 'integer';
                      };
                      readonly yaw: {
                        readonly title: 'Yaw';
                        readonly type: 'integer';
                      };
                    };
                  };
                  readonly age: {
                    readonly title: 'Age';
                    readonly type: 'integer';
                  };
                  readonly gender: {
                    readonly title: 'Gender';
                    readonly type: 'string';
                  };
                  readonly bounding_box: {
                    readonly required: readonly ['x_min', 'x_max', 'y_min', 'y_max'];
                    readonly title: 'FaceBoundingBox';
                    readonly type: 'object';
                    readonly properties: {
                      readonly x_min: {
                        readonly title: 'X Min';
                        readonly type: 'integer';
                      };
                      readonly x_max: {
                        readonly title: 'X Max';
                        readonly type: 'integer';
                      };
                      readonly y_min: {
                        readonly title: 'Y Min';
                        readonly type: 'integer';
                      };
                      readonly y_max: {
                        readonly title: 'Y Max';
                        readonly type: 'integer';
                      };
                    };
                  };
                  readonly hair: {
                    readonly required: readonly ['bald', 'invisible'];
                    readonly title: 'FaceHair';
                    readonly type: 'object';
                    readonly properties: {
                      readonly hair_color: {
                        readonly title: 'Hair Color';
                        readonly type: 'array';
                        readonly items: {
                          readonly required: readonly ['color', 'confidence'];
                          readonly title: 'FaceHairColor';
                          readonly type: 'object';
                          readonly properties: {
                            readonly color: {
                              readonly title: 'Color';
                              readonly type: 'string';
                            };
                            readonly confidence: {
                              readonly title: 'Confidence';
                              readonly type: 'integer';
                            };
                          };
                        };
                      };
                      readonly bald: {
                        readonly title: 'Bald';
                        readonly type: 'integer';
                      };
                      readonly invisible: {
                        readonly title: 'Invisible';
                        readonly type: 'boolean';
                      };
                    };
                  };
                  readonly facial_hair: {
                    readonly required: readonly ['moustache', 'beard', 'sideburns'];
                    readonly title: 'FaceFacialHair';
                    readonly type: 'object';
                    readonly properties: {
                      readonly moustache: {
                        readonly title: 'Moustache';
                        readonly type: 'integer';
                      };
                      readonly beard: {
                        readonly title: 'Beard';
                        readonly type: 'integer';
                      };
                      readonly sideburns: {
                        readonly title: 'Sideburns';
                        readonly type: 'integer';
                      };
                    };
                  };
                  readonly quality: {
                    readonly required: readonly [
                      'noise',
                      'exposure',
                      'blur',
                      'brightness',
                      'sharpness'
                    ];
                    readonly title: 'FaceQuality';
                    readonly type: 'object';
                    readonly properties: {
                      readonly noise: {
                        readonly title: 'Noise';
                        readonly type: 'integer';
                      };
                      readonly exposure: {
                        readonly title: 'Exposure';
                        readonly type: 'integer';
                      };
                      readonly blur: {
                        readonly title: 'Blur';
                        readonly type: 'integer';
                      };
                      readonly brightness: {
                        readonly title: 'Brightness';
                        readonly type: 'integer';
                      };
                      readonly sharpness: {
                        readonly title: 'Sharpness';
                        readonly type: 'integer';
                      };
                    };
                  };
                  readonly makeup: {
                    readonly required: readonly ['eye_make', 'lip_make'];
                    readonly title: 'FaceMakeup';
                    readonly type: 'object';
                    readonly properties: {
                      readonly eye_make: {
                        readonly title: 'Eye Make';
                        readonly type: 'boolean';
                      };
                      readonly lip_make: {
                        readonly title: 'Lip Make';
                        readonly type: 'boolean';
                      };
                    };
                  };
                  readonly accessories: {
                    readonly required: readonly [
                      'sunglasses',
                      'reading_glasses',
                      'swimming_goggles',
                      'face_mask',
                      'eyeglasses',
                      'headwear'
                    ];
                    readonly title: 'FaceAccessories';
                    readonly type: 'object';
                    readonly properties: {
                      readonly sunglasses: {
                        readonly title: 'Sunglasses';
                        readonly type: 'integer';
                      };
                      readonly reading_glasses: {
                        readonly title: 'Reading Glasses';
                        readonly type: 'integer';
                      };
                      readonly swimming_goggles: {
                        readonly title: 'Swimming Goggles';
                        readonly type: 'integer';
                      };
                      readonly face_mask: {
                        readonly title: 'Face Mask';
                        readonly type: 'integer';
                      };
                      readonly eyeglasses: {
                        readonly title: 'Eyeglasses';
                        readonly type: 'integer';
                      };
                      readonly headwear: {
                        readonly title: 'Headwear';
                        readonly type: 'integer';
                      };
                    };
                  };
                  readonly occlusions: {
                    readonly required: readonly [
                      'eye_occluded',
                      'forehead_occluded',
                      'mouth_occluded'
                    ];
                    readonly title: 'FaceOcclusions';
                    readonly type: 'object';
                    readonly properties: {
                      readonly eye_occluded: {
                        readonly title: 'Eye Occluded';
                        readonly type: 'boolean';
                      };
                      readonly forehead_occluded: {
                        readonly title: 'Forehead Occluded';
                        readonly type: 'boolean';
                      };
                      readonly mouth_occluded: {
                        readonly title: 'Mouth Occluded';
                        readonly type: 'boolean';
                      };
                    };
                  };
                  readonly features: {
                    readonly required: readonly ['eyes_open', 'smile', 'mouth_open'];
                    readonly title: 'FaceFeatures';
                    readonly type: 'object';
                    readonly properties: {
                      readonly eyes_open: {
                        readonly title: 'Eyes Open';
                        readonly type: 'integer';
                      };
                      readonly smile: {
                        readonly title: 'Smile';
                        readonly type: 'integer';
                      };
                      readonly mouth_open: {
                        readonly title: 'Mouth Open';
                        readonly type: 'integer';
                      };
                    };
                  };
                };
              };
            };
            readonly original_response: {
              readonly default: any;
              readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
              readonly title: 'Original Response';
            };
            readonly status: {
              readonly title: 'Status';
              readonly enum: readonly ['sucess', 'fail'];
              readonly type: 'string';
              readonly description: '`sucess` `fail`';
            };
          };
        };
        readonly api4ai: {
          readonly required: readonly ['status'];
          readonly title: 'imageface_detectionFaceDetectionDataClass';
          readonly type: 'object';
          readonly properties: {
            readonly items: {
              readonly title: 'Items';
              readonly type: 'array';
              readonly items: {
                readonly required: readonly [
                  'confidence',
                  'landmarks',
                  'emotions',
                  'poses',
                  'age',
                  'gender',
                  'bounding_box',
                  'hair',
                  'facial_hair',
                  'quality',
                  'makeup',
                  'accessories',
                  'occlusions',
                  'features'
                ];
                readonly title: 'FaceItem';
                readonly type: 'object';
                readonly properties: {
                  readonly confidence: {
                    readonly title: 'Confidence';
                    readonly type: 'integer';
                  };
                  readonly landmarks: {
                    readonly title: 'FaceLandmarks';
                    readonly type: 'object';
                    readonly properties: {
                      readonly left_eye: {
                        readonly title: 'Left Eye';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly left_eye_top: {
                        readonly title: 'Left Eye Top';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly left_eye_right: {
                        readonly title: 'Left Eye Right';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly left_eye_bottom: {
                        readonly title: 'Left Eye Bottom';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly left_eye_left: {
                        readonly title: 'Left Eye Left';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly right_eye: {
                        readonly title: 'Right Eye';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly right_eye_top: {
                        readonly title: 'Right Eye Top';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly right_eye_right: {
                        readonly title: 'Right Eye Right';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly right_eye_bottom: {
                        readonly title: 'Right Eye Bottom';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly right_eye_left: {
                        readonly title: 'Right Eye Left';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly left_eyebrow_left: {
                        readonly title: 'Left Eyebrow Left';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly left_eyebrow_right: {
                        readonly title: 'Left Eyebrow Right';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly left_eyebrow_top: {
                        readonly title: 'Left Eyebrow Top';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly right_eyebrow_left: {
                        readonly title: 'Right Eyebrow Left';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly right_eyebrow_right: {
                        readonly title: 'Right Eyebrow Right';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly left_pupil: {
                        readonly title: 'Left Pupil';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly right_pupil: {
                        readonly title: 'Right Pupil';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly nose_tip: {
                        readonly title: 'Nose Tip';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly nose_bottom_right: {
                        readonly title: 'Nose Bottom Right';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly nose_bottom_left: {
                        readonly title: 'Nose Bottom Left';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly mouth_left: {
                        readonly title: 'Mouth Left';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly mouth_right: {
                        readonly title: 'Mouth Right';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly right_eyebrow_top: {
                        readonly title: 'Right Eyebrow Top';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly midpoint_between_eyes: {
                        readonly title: 'Midpoint Between Eyes';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly nose_bottom_center: {
                        readonly title: 'Nose Bottom Center';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly nose_left_alar_out_tip: {
                        readonly title: 'Nose Left Alar Out Tip';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly nose_left_alar_top: {
                        readonly title: 'Nose Left Alar Top';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly nose_right_alar_out_tip: {
                        readonly title: 'Nose Right Alar Out Tip';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly nose_right_alar_top: {
                        readonly title: 'Nose Right Alar Top';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly nose_root_left: {
                        readonly title: 'Nose Root Left';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly nose_root_right: {
                        readonly title: 'Nose Root Right';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly upper_lip: {
                        readonly title: 'Upper Lip';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly under_lip: {
                        readonly title: 'Under Lip';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly under_lip_bottom: {
                        readonly title: 'Under Lip Bottom';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly under_lip_top: {
                        readonly title: 'Under Lip Top';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly upper_lip_bottom: {
                        readonly title: 'Upper Lip Bottom';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly upper_lip_top: {
                        readonly title: 'Upper Lip Top';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly mouth_center: {
                        readonly title: 'Mouth Center';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly mouth_top: {
                        readonly title: 'Mouth Top';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly mouth_bottom: {
                        readonly title: 'Mouth Bottom';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly left_ear_tragion: {
                        readonly title: 'Left Ear Tragion';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly right_ear_tragion: {
                        readonly title: 'Right Ear Tragion';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly forehead_glabella: {
                        readonly title: 'Forehead Glabella';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly chin_gnathion: {
                        readonly title: 'Chin Gnathion';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly chin_left_gonion: {
                        readonly title: 'Chin Left Gonion';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly chin_right_gonion: {
                        readonly title: 'Chin Right Gonion';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly upper_jawline_left: {
                        readonly title: 'Upper Jawline Left';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly mid_jawline_left: {
                        readonly title: 'Mid Jawline Left';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly mid_jawline_right: {
                        readonly title: 'Mid Jawline Right';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly upper_jawline_right: {
                        readonly title: 'Upper Jawline Right';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly left_cheek_center: {
                        readonly title: 'Left Cheek Center';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly right_cheek_center: {
                        readonly title: 'Right Cheek Center';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                    };
                  };
                  readonly emotions: {
                    readonly required: readonly [
                      'joy',
                      'sorrow',
                      'anger',
                      'surprise',
                      'disgust',
                      'fear',
                      'confusion',
                      'calm',
                      'unknown',
                      'neutral',
                      'contempt'
                    ];
                    readonly title: 'FaceEmotions';
                    readonly type: 'object';
                    readonly properties: {
                      readonly joy: {
                        readonly title: 'Joy';
                        readonly type: 'integer';
                      };
                      readonly sorrow: {
                        readonly title: 'Sorrow';
                        readonly type: 'integer';
                      };
                      readonly anger: {
                        readonly title: 'Anger';
                        readonly type: 'integer';
                      };
                      readonly surprise: {
                        readonly title: 'Surprise';
                        readonly type: 'integer';
                      };
                      readonly disgust: {
                        readonly title: 'Disgust';
                        readonly type: 'integer';
                      };
                      readonly fear: {
                        readonly title: 'Fear';
                        readonly type: 'integer';
                      };
                      readonly confusion: {
                        readonly title: 'Confusion';
                        readonly type: 'integer';
                      };
                      readonly calm: {
                        readonly title: 'Calm';
                        readonly type: 'integer';
                      };
                      readonly unknown: {
                        readonly title: 'Unknown';
                        readonly type: 'integer';
                      };
                      readonly neutral: {
                        readonly title: 'Neutral';
                        readonly type: 'integer';
                      };
                      readonly contempt: {
                        readonly title: 'Contempt';
                        readonly type: 'integer';
                      };
                    };
                  };
                  readonly poses: {
                    readonly required: readonly ['pitch', 'roll', 'yaw'];
                    readonly title: 'FacePoses';
                    readonly type: 'object';
                    readonly properties: {
                      readonly pitch: {
                        readonly title: 'Pitch';
                        readonly type: 'integer';
                      };
                      readonly roll: {
                        readonly title: 'Roll';
                        readonly type: 'integer';
                      };
                      readonly yaw: {
                        readonly title: 'Yaw';
                        readonly type: 'integer';
                      };
                    };
                  };
                  readonly age: {
                    readonly title: 'Age';
                    readonly type: 'integer';
                  };
                  readonly gender: {
                    readonly title: 'Gender';
                    readonly type: 'string';
                  };
                  readonly bounding_box: {
                    readonly required: readonly ['x_min', 'x_max', 'y_min', 'y_max'];
                    readonly title: 'FaceBoundingBox';
                    readonly type: 'object';
                    readonly properties: {
                      readonly x_min: {
                        readonly title: 'X Min';
                        readonly type: 'integer';
                      };
                      readonly x_max: {
                        readonly title: 'X Max';
                        readonly type: 'integer';
                      };
                      readonly y_min: {
                        readonly title: 'Y Min';
                        readonly type: 'integer';
                      };
                      readonly y_max: {
                        readonly title: 'Y Max';
                        readonly type: 'integer';
                      };
                    };
                  };
                  readonly hair: {
                    readonly required: readonly ['bald', 'invisible'];
                    readonly title: 'FaceHair';
                    readonly type: 'object';
                    readonly properties: {
                      readonly hair_color: {
                        readonly title: 'Hair Color';
                        readonly type: 'array';
                        readonly items: {
                          readonly required: readonly ['color', 'confidence'];
                          readonly title: 'FaceHairColor';
                          readonly type: 'object';
                          readonly properties: {
                            readonly color: {
                              readonly title: 'Color';
                              readonly type: 'string';
                            };
                            readonly confidence: {
                              readonly title: 'Confidence';
                              readonly type: 'integer';
                            };
                          };
                        };
                      };
                      readonly bald: {
                        readonly title: 'Bald';
                        readonly type: 'integer';
                      };
                      readonly invisible: {
                        readonly title: 'Invisible';
                        readonly type: 'boolean';
                      };
                    };
                  };
                  readonly facial_hair: {
                    readonly required: readonly ['moustache', 'beard', 'sideburns'];
                    readonly title: 'FaceFacialHair';
                    readonly type: 'object';
                    readonly properties: {
                      readonly moustache: {
                        readonly title: 'Moustache';
                        readonly type: 'integer';
                      };
                      readonly beard: {
                        readonly title: 'Beard';
                        readonly type: 'integer';
                      };
                      readonly sideburns: {
                        readonly title: 'Sideburns';
                        readonly type: 'integer';
                      };
                    };
                  };
                  readonly quality: {
                    readonly required: readonly [
                      'noise',
                      'exposure',
                      'blur',
                      'brightness',
                      'sharpness'
                    ];
                    readonly title: 'FaceQuality';
                    readonly type: 'object';
                    readonly properties: {
                      readonly noise: {
                        readonly title: 'Noise';
                        readonly type: 'integer';
                      };
                      readonly exposure: {
                        readonly title: 'Exposure';
                        readonly type: 'integer';
                      };
                      readonly blur: {
                        readonly title: 'Blur';
                        readonly type: 'integer';
                      };
                      readonly brightness: {
                        readonly title: 'Brightness';
                        readonly type: 'integer';
                      };
                      readonly sharpness: {
                        readonly title: 'Sharpness';
                        readonly type: 'integer';
                      };
                    };
                  };
                  readonly makeup: {
                    readonly required: readonly ['eye_make', 'lip_make'];
                    readonly title: 'FaceMakeup';
                    readonly type: 'object';
                    readonly properties: {
                      readonly eye_make: {
                        readonly title: 'Eye Make';
                        readonly type: 'boolean';
                      };
                      readonly lip_make: {
                        readonly title: 'Lip Make';
                        readonly type: 'boolean';
                      };
                    };
                  };
                  readonly accessories: {
                    readonly required: readonly [
                      'sunglasses',
                      'reading_glasses',
                      'swimming_goggles',
                      'face_mask',
                      'eyeglasses',
                      'headwear'
                    ];
                    readonly title: 'FaceAccessories';
                    readonly type: 'object';
                    readonly properties: {
                      readonly sunglasses: {
                        readonly title: 'Sunglasses';
                        readonly type: 'integer';
                      };
                      readonly reading_glasses: {
                        readonly title: 'Reading Glasses';
                        readonly type: 'integer';
                      };
                      readonly swimming_goggles: {
                        readonly title: 'Swimming Goggles';
                        readonly type: 'integer';
                      };
                      readonly face_mask: {
                        readonly title: 'Face Mask';
                        readonly type: 'integer';
                      };
                      readonly eyeglasses: {
                        readonly title: 'Eyeglasses';
                        readonly type: 'integer';
                      };
                      readonly headwear: {
                        readonly title: 'Headwear';
                        readonly type: 'integer';
                      };
                    };
                  };
                  readonly occlusions: {
                    readonly required: readonly [
                      'eye_occluded',
                      'forehead_occluded',
                      'mouth_occluded'
                    ];
                    readonly title: 'FaceOcclusions';
                    readonly type: 'object';
                    readonly properties: {
                      readonly eye_occluded: {
                        readonly title: 'Eye Occluded';
                        readonly type: 'boolean';
                      };
                      readonly forehead_occluded: {
                        readonly title: 'Forehead Occluded';
                        readonly type: 'boolean';
                      };
                      readonly mouth_occluded: {
                        readonly title: 'Mouth Occluded';
                        readonly type: 'boolean';
                      };
                    };
                  };
                  readonly features: {
                    readonly required: readonly ['eyes_open', 'smile', 'mouth_open'];
                    readonly title: 'FaceFeatures';
                    readonly type: 'object';
                    readonly properties: {
                      readonly eyes_open: {
                        readonly title: 'Eyes Open';
                        readonly type: 'integer';
                      };
                      readonly smile: {
                        readonly title: 'Smile';
                        readonly type: 'integer';
                      };
                      readonly mouth_open: {
                        readonly title: 'Mouth Open';
                        readonly type: 'integer';
                      };
                    };
                  };
                };
              };
            };
            readonly original_response: {
              readonly default: any;
              readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
              readonly title: 'Original Response';
            };
            readonly status: {
              readonly title: 'Status';
              readonly enum: readonly ['sucess', 'fail'];
              readonly type: 'string';
              readonly description: '`sucess` `fail`';
            };
          };
        };
        readonly google: {
          readonly required: readonly ['status'];
          readonly title: 'imageface_detectionFaceDetectionDataClass';
          readonly type: 'object';
          readonly properties: {
            readonly items: {
              readonly title: 'Items';
              readonly type: 'array';
              readonly items: {
                readonly required: readonly [
                  'confidence',
                  'landmarks',
                  'emotions',
                  'poses',
                  'age',
                  'gender',
                  'bounding_box',
                  'hair',
                  'facial_hair',
                  'quality',
                  'makeup',
                  'accessories',
                  'occlusions',
                  'features'
                ];
                readonly title: 'FaceItem';
                readonly type: 'object';
                readonly properties: {
                  readonly confidence: {
                    readonly title: 'Confidence';
                    readonly type: 'integer';
                  };
                  readonly landmarks: {
                    readonly title: 'FaceLandmarks';
                    readonly type: 'object';
                    readonly properties: {
                      readonly left_eye: {
                        readonly title: 'Left Eye';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly left_eye_top: {
                        readonly title: 'Left Eye Top';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly left_eye_right: {
                        readonly title: 'Left Eye Right';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly left_eye_bottom: {
                        readonly title: 'Left Eye Bottom';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly left_eye_left: {
                        readonly title: 'Left Eye Left';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly right_eye: {
                        readonly title: 'Right Eye';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly right_eye_top: {
                        readonly title: 'Right Eye Top';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly right_eye_right: {
                        readonly title: 'Right Eye Right';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly right_eye_bottom: {
                        readonly title: 'Right Eye Bottom';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly right_eye_left: {
                        readonly title: 'Right Eye Left';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly left_eyebrow_left: {
                        readonly title: 'Left Eyebrow Left';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly left_eyebrow_right: {
                        readonly title: 'Left Eyebrow Right';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly left_eyebrow_top: {
                        readonly title: 'Left Eyebrow Top';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly right_eyebrow_left: {
                        readonly title: 'Right Eyebrow Left';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly right_eyebrow_right: {
                        readonly title: 'Right Eyebrow Right';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly left_pupil: {
                        readonly title: 'Left Pupil';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly right_pupil: {
                        readonly title: 'Right Pupil';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly nose_tip: {
                        readonly title: 'Nose Tip';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly nose_bottom_right: {
                        readonly title: 'Nose Bottom Right';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly nose_bottom_left: {
                        readonly title: 'Nose Bottom Left';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly mouth_left: {
                        readonly title: 'Mouth Left';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly mouth_right: {
                        readonly title: 'Mouth Right';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly right_eyebrow_top: {
                        readonly title: 'Right Eyebrow Top';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly midpoint_between_eyes: {
                        readonly title: 'Midpoint Between Eyes';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly nose_bottom_center: {
                        readonly title: 'Nose Bottom Center';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly nose_left_alar_out_tip: {
                        readonly title: 'Nose Left Alar Out Tip';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly nose_left_alar_top: {
                        readonly title: 'Nose Left Alar Top';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly nose_right_alar_out_tip: {
                        readonly title: 'Nose Right Alar Out Tip';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly nose_right_alar_top: {
                        readonly title: 'Nose Right Alar Top';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly nose_root_left: {
                        readonly title: 'Nose Root Left';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly nose_root_right: {
                        readonly title: 'Nose Root Right';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly upper_lip: {
                        readonly title: 'Upper Lip';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly under_lip: {
                        readonly title: 'Under Lip';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly under_lip_bottom: {
                        readonly title: 'Under Lip Bottom';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly under_lip_top: {
                        readonly title: 'Under Lip Top';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly upper_lip_bottom: {
                        readonly title: 'Upper Lip Bottom';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly upper_lip_top: {
                        readonly title: 'Upper Lip Top';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly mouth_center: {
                        readonly title: 'Mouth Center';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly mouth_top: {
                        readonly title: 'Mouth Top';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly mouth_bottom: {
                        readonly title: 'Mouth Bottom';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly left_ear_tragion: {
                        readonly title: 'Left Ear Tragion';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly right_ear_tragion: {
                        readonly title: 'Right Ear Tragion';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly forehead_glabella: {
                        readonly title: 'Forehead Glabella';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly chin_gnathion: {
                        readonly title: 'Chin Gnathion';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly chin_left_gonion: {
                        readonly title: 'Chin Left Gonion';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly chin_right_gonion: {
                        readonly title: 'Chin Right Gonion';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly upper_jawline_left: {
                        readonly title: 'Upper Jawline Left';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly mid_jawline_left: {
                        readonly title: 'Mid Jawline Left';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly mid_jawline_right: {
                        readonly title: 'Mid Jawline Right';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly upper_jawline_right: {
                        readonly title: 'Upper Jawline Right';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly left_cheek_center: {
                        readonly title: 'Left Cheek Center';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly right_cheek_center: {
                        readonly title: 'Right Cheek Center';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                    };
                  };
                  readonly emotions: {
                    readonly required: readonly [
                      'joy',
                      'sorrow',
                      'anger',
                      'surprise',
                      'disgust',
                      'fear',
                      'confusion',
                      'calm',
                      'unknown',
                      'neutral',
                      'contempt'
                    ];
                    readonly title: 'FaceEmotions';
                    readonly type: 'object';
                    readonly properties: {
                      readonly joy: {
                        readonly title: 'Joy';
                        readonly type: 'integer';
                      };
                      readonly sorrow: {
                        readonly title: 'Sorrow';
                        readonly type: 'integer';
                      };
                      readonly anger: {
                        readonly title: 'Anger';
                        readonly type: 'integer';
                      };
                      readonly surprise: {
                        readonly title: 'Surprise';
                        readonly type: 'integer';
                      };
                      readonly disgust: {
                        readonly title: 'Disgust';
                        readonly type: 'integer';
                      };
                      readonly fear: {
                        readonly title: 'Fear';
                        readonly type: 'integer';
                      };
                      readonly confusion: {
                        readonly title: 'Confusion';
                        readonly type: 'integer';
                      };
                      readonly calm: {
                        readonly title: 'Calm';
                        readonly type: 'integer';
                      };
                      readonly unknown: {
                        readonly title: 'Unknown';
                        readonly type: 'integer';
                      };
                      readonly neutral: {
                        readonly title: 'Neutral';
                        readonly type: 'integer';
                      };
                      readonly contempt: {
                        readonly title: 'Contempt';
                        readonly type: 'integer';
                      };
                    };
                  };
                  readonly poses: {
                    readonly required: readonly ['pitch', 'roll', 'yaw'];
                    readonly title: 'FacePoses';
                    readonly type: 'object';
                    readonly properties: {
                      readonly pitch: {
                        readonly title: 'Pitch';
                        readonly type: 'integer';
                      };
                      readonly roll: {
                        readonly title: 'Roll';
                        readonly type: 'integer';
                      };
                      readonly yaw: {
                        readonly title: 'Yaw';
                        readonly type: 'integer';
                      };
                    };
                  };
                  readonly age: {
                    readonly title: 'Age';
                    readonly type: 'integer';
                  };
                  readonly gender: {
                    readonly title: 'Gender';
                    readonly type: 'string';
                  };
                  readonly bounding_box: {
                    readonly required: readonly ['x_min', 'x_max', 'y_min', 'y_max'];
                    readonly title: 'FaceBoundingBox';
                    readonly type: 'object';
                    readonly properties: {
                      readonly x_min: {
                        readonly title: 'X Min';
                        readonly type: 'integer';
                      };
                      readonly x_max: {
                        readonly title: 'X Max';
                        readonly type: 'integer';
                      };
                      readonly y_min: {
                        readonly title: 'Y Min';
                        readonly type: 'integer';
                      };
                      readonly y_max: {
                        readonly title: 'Y Max';
                        readonly type: 'integer';
                      };
                    };
                  };
                  readonly hair: {
                    readonly required: readonly ['bald', 'invisible'];
                    readonly title: 'FaceHair';
                    readonly type: 'object';
                    readonly properties: {
                      readonly hair_color: {
                        readonly title: 'Hair Color';
                        readonly type: 'array';
                        readonly items: {
                          readonly required: readonly ['color', 'confidence'];
                          readonly title: 'FaceHairColor';
                          readonly type: 'object';
                          readonly properties: {
                            readonly color: {
                              readonly title: 'Color';
                              readonly type: 'string';
                            };
                            readonly confidence: {
                              readonly title: 'Confidence';
                              readonly type: 'integer';
                            };
                          };
                        };
                      };
                      readonly bald: {
                        readonly title: 'Bald';
                        readonly type: 'integer';
                      };
                      readonly invisible: {
                        readonly title: 'Invisible';
                        readonly type: 'boolean';
                      };
                    };
                  };
                  readonly facial_hair: {
                    readonly required: readonly ['moustache', 'beard', 'sideburns'];
                    readonly title: 'FaceFacialHair';
                    readonly type: 'object';
                    readonly properties: {
                      readonly moustache: {
                        readonly title: 'Moustache';
                        readonly type: 'integer';
                      };
                      readonly beard: {
                        readonly title: 'Beard';
                        readonly type: 'integer';
                      };
                      readonly sideburns: {
                        readonly title: 'Sideburns';
                        readonly type: 'integer';
                      };
                    };
                  };
                  readonly quality: {
                    readonly required: readonly [
                      'noise',
                      'exposure',
                      'blur',
                      'brightness',
                      'sharpness'
                    ];
                    readonly title: 'FaceQuality';
                    readonly type: 'object';
                    readonly properties: {
                      readonly noise: {
                        readonly title: 'Noise';
                        readonly type: 'integer';
                      };
                      readonly exposure: {
                        readonly title: 'Exposure';
                        readonly type: 'integer';
                      };
                      readonly blur: {
                        readonly title: 'Blur';
                        readonly type: 'integer';
                      };
                      readonly brightness: {
                        readonly title: 'Brightness';
                        readonly type: 'integer';
                      };
                      readonly sharpness: {
                        readonly title: 'Sharpness';
                        readonly type: 'integer';
                      };
                    };
                  };
                  readonly makeup: {
                    readonly required: readonly ['eye_make', 'lip_make'];
                    readonly title: 'FaceMakeup';
                    readonly type: 'object';
                    readonly properties: {
                      readonly eye_make: {
                        readonly title: 'Eye Make';
                        readonly type: 'boolean';
                      };
                      readonly lip_make: {
                        readonly title: 'Lip Make';
                        readonly type: 'boolean';
                      };
                    };
                  };
                  readonly accessories: {
                    readonly required: readonly [
                      'sunglasses',
                      'reading_glasses',
                      'swimming_goggles',
                      'face_mask',
                      'eyeglasses',
                      'headwear'
                    ];
                    readonly title: 'FaceAccessories';
                    readonly type: 'object';
                    readonly properties: {
                      readonly sunglasses: {
                        readonly title: 'Sunglasses';
                        readonly type: 'integer';
                      };
                      readonly reading_glasses: {
                        readonly title: 'Reading Glasses';
                        readonly type: 'integer';
                      };
                      readonly swimming_goggles: {
                        readonly title: 'Swimming Goggles';
                        readonly type: 'integer';
                      };
                      readonly face_mask: {
                        readonly title: 'Face Mask';
                        readonly type: 'integer';
                      };
                      readonly eyeglasses: {
                        readonly title: 'Eyeglasses';
                        readonly type: 'integer';
                      };
                      readonly headwear: {
                        readonly title: 'Headwear';
                        readonly type: 'integer';
                      };
                    };
                  };
                  readonly occlusions: {
                    readonly required: readonly [
                      'eye_occluded',
                      'forehead_occluded',
                      'mouth_occluded'
                    ];
                    readonly title: 'FaceOcclusions';
                    readonly type: 'object';
                    readonly properties: {
                      readonly eye_occluded: {
                        readonly title: 'Eye Occluded';
                        readonly type: 'boolean';
                      };
                      readonly forehead_occluded: {
                        readonly title: 'Forehead Occluded';
                        readonly type: 'boolean';
                      };
                      readonly mouth_occluded: {
                        readonly title: 'Mouth Occluded';
                        readonly type: 'boolean';
                      };
                    };
                  };
                  readonly features: {
                    readonly required: readonly ['eyes_open', 'smile', 'mouth_open'];
                    readonly title: 'FaceFeatures';
                    readonly type: 'object';
                    readonly properties: {
                      readonly eyes_open: {
                        readonly title: 'Eyes Open';
                        readonly type: 'integer';
                      };
                      readonly smile: {
                        readonly title: 'Smile';
                        readonly type: 'integer';
                      };
                      readonly mouth_open: {
                        readonly title: 'Mouth Open';
                        readonly type: 'integer';
                      };
                    };
                  };
                };
              };
            };
            readonly original_response: {
              readonly default: any;
              readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
              readonly title: 'Original Response';
            };
            readonly status: {
              readonly title: 'Status';
              readonly enum: readonly ['sucess', 'fail'];
              readonly type: 'string';
              readonly description: '`sucess` `fail`';
            };
          };
        };
        readonly skybiometry: {
          readonly required: readonly ['status'];
          readonly title: 'imageface_detectionFaceDetectionDataClass';
          readonly type: 'object';
          readonly properties: {
            readonly items: {
              readonly title: 'Items';
              readonly type: 'array';
              readonly items: {
                readonly required: readonly [
                  'confidence',
                  'landmarks',
                  'emotions',
                  'poses',
                  'age',
                  'gender',
                  'bounding_box',
                  'hair',
                  'facial_hair',
                  'quality',
                  'makeup',
                  'accessories',
                  'occlusions',
                  'features'
                ];
                readonly title: 'FaceItem';
                readonly type: 'object';
                readonly properties: {
                  readonly confidence: {
                    readonly title: 'Confidence';
                    readonly type: 'integer';
                  };
                  readonly landmarks: {
                    readonly title: 'FaceLandmarks';
                    readonly type: 'object';
                    readonly properties: {
                      readonly left_eye: {
                        readonly title: 'Left Eye';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly left_eye_top: {
                        readonly title: 'Left Eye Top';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly left_eye_right: {
                        readonly title: 'Left Eye Right';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly left_eye_bottom: {
                        readonly title: 'Left Eye Bottom';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly left_eye_left: {
                        readonly title: 'Left Eye Left';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly right_eye: {
                        readonly title: 'Right Eye';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly right_eye_top: {
                        readonly title: 'Right Eye Top';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly right_eye_right: {
                        readonly title: 'Right Eye Right';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly right_eye_bottom: {
                        readonly title: 'Right Eye Bottom';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly right_eye_left: {
                        readonly title: 'Right Eye Left';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly left_eyebrow_left: {
                        readonly title: 'Left Eyebrow Left';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly left_eyebrow_right: {
                        readonly title: 'Left Eyebrow Right';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly left_eyebrow_top: {
                        readonly title: 'Left Eyebrow Top';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly right_eyebrow_left: {
                        readonly title: 'Right Eyebrow Left';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly right_eyebrow_right: {
                        readonly title: 'Right Eyebrow Right';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly left_pupil: {
                        readonly title: 'Left Pupil';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly right_pupil: {
                        readonly title: 'Right Pupil';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly nose_tip: {
                        readonly title: 'Nose Tip';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly nose_bottom_right: {
                        readonly title: 'Nose Bottom Right';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly nose_bottom_left: {
                        readonly title: 'Nose Bottom Left';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly mouth_left: {
                        readonly title: 'Mouth Left';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly mouth_right: {
                        readonly title: 'Mouth Right';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly right_eyebrow_top: {
                        readonly title: 'Right Eyebrow Top';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly midpoint_between_eyes: {
                        readonly title: 'Midpoint Between Eyes';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly nose_bottom_center: {
                        readonly title: 'Nose Bottom Center';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly nose_left_alar_out_tip: {
                        readonly title: 'Nose Left Alar Out Tip';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly nose_left_alar_top: {
                        readonly title: 'Nose Left Alar Top';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly nose_right_alar_out_tip: {
                        readonly title: 'Nose Right Alar Out Tip';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly nose_right_alar_top: {
                        readonly title: 'Nose Right Alar Top';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly nose_root_left: {
                        readonly title: 'Nose Root Left';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly nose_root_right: {
                        readonly title: 'Nose Root Right';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly upper_lip: {
                        readonly title: 'Upper Lip';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly under_lip: {
                        readonly title: 'Under Lip';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly under_lip_bottom: {
                        readonly title: 'Under Lip Bottom';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly under_lip_top: {
                        readonly title: 'Under Lip Top';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly upper_lip_bottom: {
                        readonly title: 'Upper Lip Bottom';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly upper_lip_top: {
                        readonly title: 'Upper Lip Top';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly mouth_center: {
                        readonly title: 'Mouth Center';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly mouth_top: {
                        readonly title: 'Mouth Top';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly mouth_bottom: {
                        readonly title: 'Mouth Bottom';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly left_ear_tragion: {
                        readonly title: 'Left Ear Tragion';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly right_ear_tragion: {
                        readonly title: 'Right Ear Tragion';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly forehead_glabella: {
                        readonly title: 'Forehead Glabella';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly chin_gnathion: {
                        readonly title: 'Chin Gnathion';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly chin_left_gonion: {
                        readonly title: 'Chin Left Gonion';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly chin_right_gonion: {
                        readonly title: 'Chin Right Gonion';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly upper_jawline_left: {
                        readonly title: 'Upper Jawline Left';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly mid_jawline_left: {
                        readonly title: 'Mid Jawline Left';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly mid_jawline_right: {
                        readonly title: 'Mid Jawline Right';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly upper_jawline_right: {
                        readonly title: 'Upper Jawline Right';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly left_cheek_center: {
                        readonly title: 'Left Cheek Center';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly right_cheek_center: {
                        readonly title: 'Right Cheek Center';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                    };
                  };
                  readonly emotions: {
                    readonly required: readonly [
                      'joy',
                      'sorrow',
                      'anger',
                      'surprise',
                      'disgust',
                      'fear',
                      'confusion',
                      'calm',
                      'unknown',
                      'neutral',
                      'contempt'
                    ];
                    readonly title: 'FaceEmotions';
                    readonly type: 'object';
                    readonly properties: {
                      readonly joy: {
                        readonly title: 'Joy';
                        readonly type: 'integer';
                      };
                      readonly sorrow: {
                        readonly title: 'Sorrow';
                        readonly type: 'integer';
                      };
                      readonly anger: {
                        readonly title: 'Anger';
                        readonly type: 'integer';
                      };
                      readonly surprise: {
                        readonly title: 'Surprise';
                        readonly type: 'integer';
                      };
                      readonly disgust: {
                        readonly title: 'Disgust';
                        readonly type: 'integer';
                      };
                      readonly fear: {
                        readonly title: 'Fear';
                        readonly type: 'integer';
                      };
                      readonly confusion: {
                        readonly title: 'Confusion';
                        readonly type: 'integer';
                      };
                      readonly calm: {
                        readonly title: 'Calm';
                        readonly type: 'integer';
                      };
                      readonly unknown: {
                        readonly title: 'Unknown';
                        readonly type: 'integer';
                      };
                      readonly neutral: {
                        readonly title: 'Neutral';
                        readonly type: 'integer';
                      };
                      readonly contempt: {
                        readonly title: 'Contempt';
                        readonly type: 'integer';
                      };
                    };
                  };
                  readonly poses: {
                    readonly required: readonly ['pitch', 'roll', 'yaw'];
                    readonly title: 'FacePoses';
                    readonly type: 'object';
                    readonly properties: {
                      readonly pitch: {
                        readonly title: 'Pitch';
                        readonly type: 'integer';
                      };
                      readonly roll: {
                        readonly title: 'Roll';
                        readonly type: 'integer';
                      };
                      readonly yaw: {
                        readonly title: 'Yaw';
                        readonly type: 'integer';
                      };
                    };
                  };
                  readonly age: {
                    readonly title: 'Age';
                    readonly type: 'integer';
                  };
                  readonly gender: {
                    readonly title: 'Gender';
                    readonly type: 'string';
                  };
                  readonly bounding_box: {
                    readonly required: readonly ['x_min', 'x_max', 'y_min', 'y_max'];
                    readonly title: 'FaceBoundingBox';
                    readonly type: 'object';
                    readonly properties: {
                      readonly x_min: {
                        readonly title: 'X Min';
                        readonly type: 'integer';
                      };
                      readonly x_max: {
                        readonly title: 'X Max';
                        readonly type: 'integer';
                      };
                      readonly y_min: {
                        readonly title: 'Y Min';
                        readonly type: 'integer';
                      };
                      readonly y_max: {
                        readonly title: 'Y Max';
                        readonly type: 'integer';
                      };
                    };
                  };
                  readonly hair: {
                    readonly required: readonly ['bald', 'invisible'];
                    readonly title: 'FaceHair';
                    readonly type: 'object';
                    readonly properties: {
                      readonly hair_color: {
                        readonly title: 'Hair Color';
                        readonly type: 'array';
                        readonly items: {
                          readonly required: readonly ['color', 'confidence'];
                          readonly title: 'FaceHairColor';
                          readonly type: 'object';
                          readonly properties: {
                            readonly color: {
                              readonly title: 'Color';
                              readonly type: 'string';
                            };
                            readonly confidence: {
                              readonly title: 'Confidence';
                              readonly type: 'integer';
                            };
                          };
                        };
                      };
                      readonly bald: {
                        readonly title: 'Bald';
                        readonly type: 'integer';
                      };
                      readonly invisible: {
                        readonly title: 'Invisible';
                        readonly type: 'boolean';
                      };
                    };
                  };
                  readonly facial_hair: {
                    readonly required: readonly ['moustache', 'beard', 'sideburns'];
                    readonly title: 'FaceFacialHair';
                    readonly type: 'object';
                    readonly properties: {
                      readonly moustache: {
                        readonly title: 'Moustache';
                        readonly type: 'integer';
                      };
                      readonly beard: {
                        readonly title: 'Beard';
                        readonly type: 'integer';
                      };
                      readonly sideburns: {
                        readonly title: 'Sideburns';
                        readonly type: 'integer';
                      };
                    };
                  };
                  readonly quality: {
                    readonly required: readonly [
                      'noise',
                      'exposure',
                      'blur',
                      'brightness',
                      'sharpness'
                    ];
                    readonly title: 'FaceQuality';
                    readonly type: 'object';
                    readonly properties: {
                      readonly noise: {
                        readonly title: 'Noise';
                        readonly type: 'integer';
                      };
                      readonly exposure: {
                        readonly title: 'Exposure';
                        readonly type: 'integer';
                      };
                      readonly blur: {
                        readonly title: 'Blur';
                        readonly type: 'integer';
                      };
                      readonly brightness: {
                        readonly title: 'Brightness';
                        readonly type: 'integer';
                      };
                      readonly sharpness: {
                        readonly title: 'Sharpness';
                        readonly type: 'integer';
                      };
                    };
                  };
                  readonly makeup: {
                    readonly required: readonly ['eye_make', 'lip_make'];
                    readonly title: 'FaceMakeup';
                    readonly type: 'object';
                    readonly properties: {
                      readonly eye_make: {
                        readonly title: 'Eye Make';
                        readonly type: 'boolean';
                      };
                      readonly lip_make: {
                        readonly title: 'Lip Make';
                        readonly type: 'boolean';
                      };
                    };
                  };
                  readonly accessories: {
                    readonly required: readonly [
                      'sunglasses',
                      'reading_glasses',
                      'swimming_goggles',
                      'face_mask',
                      'eyeglasses',
                      'headwear'
                    ];
                    readonly title: 'FaceAccessories';
                    readonly type: 'object';
                    readonly properties: {
                      readonly sunglasses: {
                        readonly title: 'Sunglasses';
                        readonly type: 'integer';
                      };
                      readonly reading_glasses: {
                        readonly title: 'Reading Glasses';
                        readonly type: 'integer';
                      };
                      readonly swimming_goggles: {
                        readonly title: 'Swimming Goggles';
                        readonly type: 'integer';
                      };
                      readonly face_mask: {
                        readonly title: 'Face Mask';
                        readonly type: 'integer';
                      };
                      readonly eyeglasses: {
                        readonly title: 'Eyeglasses';
                        readonly type: 'integer';
                      };
                      readonly headwear: {
                        readonly title: 'Headwear';
                        readonly type: 'integer';
                      };
                    };
                  };
                  readonly occlusions: {
                    readonly required: readonly [
                      'eye_occluded',
                      'forehead_occluded',
                      'mouth_occluded'
                    ];
                    readonly title: 'FaceOcclusions';
                    readonly type: 'object';
                    readonly properties: {
                      readonly eye_occluded: {
                        readonly title: 'Eye Occluded';
                        readonly type: 'boolean';
                      };
                      readonly forehead_occluded: {
                        readonly title: 'Forehead Occluded';
                        readonly type: 'boolean';
                      };
                      readonly mouth_occluded: {
                        readonly title: 'Mouth Occluded';
                        readonly type: 'boolean';
                      };
                    };
                  };
                  readonly features: {
                    readonly required: readonly ['eyes_open', 'smile', 'mouth_open'];
                    readonly title: 'FaceFeatures';
                    readonly type: 'object';
                    readonly properties: {
                      readonly eyes_open: {
                        readonly title: 'Eyes Open';
                        readonly type: 'integer';
                      };
                      readonly smile: {
                        readonly title: 'Smile';
                        readonly type: 'integer';
                      };
                      readonly mouth_open: {
                        readonly title: 'Mouth Open';
                        readonly type: 'integer';
                      };
                    };
                  };
                };
              };
            };
            readonly original_response: {
              readonly default: any;
              readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
              readonly title: 'Original Response';
            };
            readonly status: {
              readonly title: 'Status';
              readonly enum: readonly ['sucess', 'fail'];
              readonly type: 'string';
              readonly description: '`sucess` `fail`';
            };
          };
        };
        readonly amazon: {
          readonly required: readonly ['status'];
          readonly title: 'imageface_detectionFaceDetectionDataClass';
          readonly type: 'object';
          readonly properties: {
            readonly items: {
              readonly title: 'Items';
              readonly type: 'array';
              readonly items: {
                readonly required: readonly [
                  'confidence',
                  'landmarks',
                  'emotions',
                  'poses',
                  'age',
                  'gender',
                  'bounding_box',
                  'hair',
                  'facial_hair',
                  'quality',
                  'makeup',
                  'accessories',
                  'occlusions',
                  'features'
                ];
                readonly title: 'FaceItem';
                readonly type: 'object';
                readonly properties: {
                  readonly confidence: {
                    readonly title: 'Confidence';
                    readonly type: 'integer';
                  };
                  readonly landmarks: {
                    readonly title: 'FaceLandmarks';
                    readonly type: 'object';
                    readonly properties: {
                      readonly left_eye: {
                        readonly title: 'Left Eye';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly left_eye_top: {
                        readonly title: 'Left Eye Top';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly left_eye_right: {
                        readonly title: 'Left Eye Right';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly left_eye_bottom: {
                        readonly title: 'Left Eye Bottom';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly left_eye_left: {
                        readonly title: 'Left Eye Left';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly right_eye: {
                        readonly title: 'Right Eye';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly right_eye_top: {
                        readonly title: 'Right Eye Top';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly right_eye_right: {
                        readonly title: 'Right Eye Right';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly right_eye_bottom: {
                        readonly title: 'Right Eye Bottom';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly right_eye_left: {
                        readonly title: 'Right Eye Left';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly left_eyebrow_left: {
                        readonly title: 'Left Eyebrow Left';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly left_eyebrow_right: {
                        readonly title: 'Left Eyebrow Right';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly left_eyebrow_top: {
                        readonly title: 'Left Eyebrow Top';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly right_eyebrow_left: {
                        readonly title: 'Right Eyebrow Left';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly right_eyebrow_right: {
                        readonly title: 'Right Eyebrow Right';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly left_pupil: {
                        readonly title: 'Left Pupil';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly right_pupil: {
                        readonly title: 'Right Pupil';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly nose_tip: {
                        readonly title: 'Nose Tip';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly nose_bottom_right: {
                        readonly title: 'Nose Bottom Right';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly nose_bottom_left: {
                        readonly title: 'Nose Bottom Left';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly mouth_left: {
                        readonly title: 'Mouth Left';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly mouth_right: {
                        readonly title: 'Mouth Right';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly right_eyebrow_top: {
                        readonly title: 'Right Eyebrow Top';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly midpoint_between_eyes: {
                        readonly title: 'Midpoint Between Eyes';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly nose_bottom_center: {
                        readonly title: 'Nose Bottom Center';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly nose_left_alar_out_tip: {
                        readonly title: 'Nose Left Alar Out Tip';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly nose_left_alar_top: {
                        readonly title: 'Nose Left Alar Top';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly nose_right_alar_out_tip: {
                        readonly title: 'Nose Right Alar Out Tip';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly nose_right_alar_top: {
                        readonly title: 'Nose Right Alar Top';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly nose_root_left: {
                        readonly title: 'Nose Root Left';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly nose_root_right: {
                        readonly title: 'Nose Root Right';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly upper_lip: {
                        readonly title: 'Upper Lip';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly under_lip: {
                        readonly title: 'Under Lip';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly under_lip_bottom: {
                        readonly title: 'Under Lip Bottom';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly under_lip_top: {
                        readonly title: 'Under Lip Top';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly upper_lip_bottom: {
                        readonly title: 'Upper Lip Bottom';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly upper_lip_top: {
                        readonly title: 'Upper Lip Top';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly mouth_center: {
                        readonly title: 'Mouth Center';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly mouth_top: {
                        readonly title: 'Mouth Top';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly mouth_bottom: {
                        readonly title: 'Mouth Bottom';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly left_ear_tragion: {
                        readonly title: 'Left Ear Tragion';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly right_ear_tragion: {
                        readonly title: 'Right Ear Tragion';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly forehead_glabella: {
                        readonly title: 'Forehead Glabella';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly chin_gnathion: {
                        readonly title: 'Chin Gnathion';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly chin_left_gonion: {
                        readonly title: 'Chin Left Gonion';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly chin_right_gonion: {
                        readonly title: 'Chin Right Gonion';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly upper_jawline_left: {
                        readonly title: 'Upper Jawline Left';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly mid_jawline_left: {
                        readonly title: 'Mid Jawline Left';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly mid_jawline_right: {
                        readonly title: 'Mid Jawline Right';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly upper_jawline_right: {
                        readonly title: 'Upper Jawline Right';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly left_cheek_center: {
                        readonly title: 'Left Cheek Center';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly right_cheek_center: {
                        readonly title: 'Right Cheek Center';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                    };
                  };
                  readonly emotions: {
                    readonly required: readonly [
                      'joy',
                      'sorrow',
                      'anger',
                      'surprise',
                      'disgust',
                      'fear',
                      'confusion',
                      'calm',
                      'unknown',
                      'neutral',
                      'contempt'
                    ];
                    readonly title: 'FaceEmotions';
                    readonly type: 'object';
                    readonly properties: {
                      readonly joy: {
                        readonly title: 'Joy';
                        readonly type: 'integer';
                      };
                      readonly sorrow: {
                        readonly title: 'Sorrow';
                        readonly type: 'integer';
                      };
                      readonly anger: {
                        readonly title: 'Anger';
                        readonly type: 'integer';
                      };
                      readonly surprise: {
                        readonly title: 'Surprise';
                        readonly type: 'integer';
                      };
                      readonly disgust: {
                        readonly title: 'Disgust';
                        readonly type: 'integer';
                      };
                      readonly fear: {
                        readonly title: 'Fear';
                        readonly type: 'integer';
                      };
                      readonly confusion: {
                        readonly title: 'Confusion';
                        readonly type: 'integer';
                      };
                      readonly calm: {
                        readonly title: 'Calm';
                        readonly type: 'integer';
                      };
                      readonly unknown: {
                        readonly title: 'Unknown';
                        readonly type: 'integer';
                      };
                      readonly neutral: {
                        readonly title: 'Neutral';
                        readonly type: 'integer';
                      };
                      readonly contempt: {
                        readonly title: 'Contempt';
                        readonly type: 'integer';
                      };
                    };
                  };
                  readonly poses: {
                    readonly required: readonly ['pitch', 'roll', 'yaw'];
                    readonly title: 'FacePoses';
                    readonly type: 'object';
                    readonly properties: {
                      readonly pitch: {
                        readonly title: 'Pitch';
                        readonly type: 'integer';
                      };
                      readonly roll: {
                        readonly title: 'Roll';
                        readonly type: 'integer';
                      };
                      readonly yaw: {
                        readonly title: 'Yaw';
                        readonly type: 'integer';
                      };
                    };
                  };
                  readonly age: {
                    readonly title: 'Age';
                    readonly type: 'integer';
                  };
                  readonly gender: {
                    readonly title: 'Gender';
                    readonly type: 'string';
                  };
                  readonly bounding_box: {
                    readonly required: readonly ['x_min', 'x_max', 'y_min', 'y_max'];
                    readonly title: 'FaceBoundingBox';
                    readonly type: 'object';
                    readonly properties: {
                      readonly x_min: {
                        readonly title: 'X Min';
                        readonly type: 'integer';
                      };
                      readonly x_max: {
                        readonly title: 'X Max';
                        readonly type: 'integer';
                      };
                      readonly y_min: {
                        readonly title: 'Y Min';
                        readonly type: 'integer';
                      };
                      readonly y_max: {
                        readonly title: 'Y Max';
                        readonly type: 'integer';
                      };
                    };
                  };
                  readonly hair: {
                    readonly required: readonly ['bald', 'invisible'];
                    readonly title: 'FaceHair';
                    readonly type: 'object';
                    readonly properties: {
                      readonly hair_color: {
                        readonly title: 'Hair Color';
                        readonly type: 'array';
                        readonly items: {
                          readonly required: readonly ['color', 'confidence'];
                          readonly title: 'FaceHairColor';
                          readonly type: 'object';
                          readonly properties: {
                            readonly color: {
                              readonly title: 'Color';
                              readonly type: 'string';
                            };
                            readonly confidence: {
                              readonly title: 'Confidence';
                              readonly type: 'integer';
                            };
                          };
                        };
                      };
                      readonly bald: {
                        readonly title: 'Bald';
                        readonly type: 'integer';
                      };
                      readonly invisible: {
                        readonly title: 'Invisible';
                        readonly type: 'boolean';
                      };
                    };
                  };
                  readonly facial_hair: {
                    readonly required: readonly ['moustache', 'beard', 'sideburns'];
                    readonly title: 'FaceFacialHair';
                    readonly type: 'object';
                    readonly properties: {
                      readonly moustache: {
                        readonly title: 'Moustache';
                        readonly type: 'integer';
                      };
                      readonly beard: {
                        readonly title: 'Beard';
                        readonly type: 'integer';
                      };
                      readonly sideburns: {
                        readonly title: 'Sideburns';
                        readonly type: 'integer';
                      };
                    };
                  };
                  readonly quality: {
                    readonly required: readonly [
                      'noise',
                      'exposure',
                      'blur',
                      'brightness',
                      'sharpness'
                    ];
                    readonly title: 'FaceQuality';
                    readonly type: 'object';
                    readonly properties: {
                      readonly noise: {
                        readonly title: 'Noise';
                        readonly type: 'integer';
                      };
                      readonly exposure: {
                        readonly title: 'Exposure';
                        readonly type: 'integer';
                      };
                      readonly blur: {
                        readonly title: 'Blur';
                        readonly type: 'integer';
                      };
                      readonly brightness: {
                        readonly title: 'Brightness';
                        readonly type: 'integer';
                      };
                      readonly sharpness: {
                        readonly title: 'Sharpness';
                        readonly type: 'integer';
                      };
                    };
                  };
                  readonly makeup: {
                    readonly required: readonly ['eye_make', 'lip_make'];
                    readonly title: 'FaceMakeup';
                    readonly type: 'object';
                    readonly properties: {
                      readonly eye_make: {
                        readonly title: 'Eye Make';
                        readonly type: 'boolean';
                      };
                      readonly lip_make: {
                        readonly title: 'Lip Make';
                        readonly type: 'boolean';
                      };
                    };
                  };
                  readonly accessories: {
                    readonly required: readonly [
                      'sunglasses',
                      'reading_glasses',
                      'swimming_goggles',
                      'face_mask',
                      'eyeglasses',
                      'headwear'
                    ];
                    readonly title: 'FaceAccessories';
                    readonly type: 'object';
                    readonly properties: {
                      readonly sunglasses: {
                        readonly title: 'Sunglasses';
                        readonly type: 'integer';
                      };
                      readonly reading_glasses: {
                        readonly title: 'Reading Glasses';
                        readonly type: 'integer';
                      };
                      readonly swimming_goggles: {
                        readonly title: 'Swimming Goggles';
                        readonly type: 'integer';
                      };
                      readonly face_mask: {
                        readonly title: 'Face Mask';
                        readonly type: 'integer';
                      };
                      readonly eyeglasses: {
                        readonly title: 'Eyeglasses';
                        readonly type: 'integer';
                      };
                      readonly headwear: {
                        readonly title: 'Headwear';
                        readonly type: 'integer';
                      };
                    };
                  };
                  readonly occlusions: {
                    readonly required: readonly [
                      'eye_occluded',
                      'forehead_occluded',
                      'mouth_occluded'
                    ];
                    readonly title: 'FaceOcclusions';
                    readonly type: 'object';
                    readonly properties: {
                      readonly eye_occluded: {
                        readonly title: 'Eye Occluded';
                        readonly type: 'boolean';
                      };
                      readonly forehead_occluded: {
                        readonly title: 'Forehead Occluded';
                        readonly type: 'boolean';
                      };
                      readonly mouth_occluded: {
                        readonly title: 'Mouth Occluded';
                        readonly type: 'boolean';
                      };
                    };
                  };
                  readonly features: {
                    readonly required: readonly ['eyes_open', 'smile', 'mouth_open'];
                    readonly title: 'FaceFeatures';
                    readonly type: 'object';
                    readonly properties: {
                      readonly eyes_open: {
                        readonly title: 'Eyes Open';
                        readonly type: 'integer';
                      };
                      readonly smile: {
                        readonly title: 'Smile';
                        readonly type: 'integer';
                      };
                      readonly mouth_open: {
                        readonly title: 'Mouth Open';
                        readonly type: 'integer';
                      };
                    };
                  };
                };
              };
            };
            readonly original_response: {
              readonly default: any;
              readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
              readonly title: 'Original Response';
            };
            readonly status: {
              readonly title: 'Status';
              readonly enum: readonly ['sucess', 'fail'];
              readonly type: 'string';
              readonly description: '`sucess` `fail`';
            };
          };
        };
        readonly 'eden-ai': {
          readonly required: readonly ['status'];
          readonly title: 'imageface_detectionFaceDetectionDataClass';
          readonly type: 'object';
          readonly properties: {
            readonly items: {
              readonly title: 'Items';
              readonly type: 'array';
              readonly items: {
                readonly required: readonly [
                  'confidence',
                  'landmarks',
                  'emotions',
                  'poses',
                  'age',
                  'gender',
                  'bounding_box',
                  'hair',
                  'facial_hair',
                  'quality',
                  'makeup',
                  'accessories',
                  'occlusions',
                  'features'
                ];
                readonly title: 'FaceItem';
                readonly type: 'object';
                readonly properties: {
                  readonly confidence: {
                    readonly title: 'Confidence';
                    readonly type: 'integer';
                  };
                  readonly landmarks: {
                    readonly title: 'FaceLandmarks';
                    readonly type: 'object';
                    readonly properties: {
                      readonly left_eye: {
                        readonly title: 'Left Eye';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly left_eye_top: {
                        readonly title: 'Left Eye Top';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly left_eye_right: {
                        readonly title: 'Left Eye Right';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly left_eye_bottom: {
                        readonly title: 'Left Eye Bottom';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly left_eye_left: {
                        readonly title: 'Left Eye Left';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly right_eye: {
                        readonly title: 'Right Eye';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly right_eye_top: {
                        readonly title: 'Right Eye Top';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly right_eye_right: {
                        readonly title: 'Right Eye Right';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly right_eye_bottom: {
                        readonly title: 'Right Eye Bottom';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly right_eye_left: {
                        readonly title: 'Right Eye Left';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly left_eyebrow_left: {
                        readonly title: 'Left Eyebrow Left';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly left_eyebrow_right: {
                        readonly title: 'Left Eyebrow Right';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly left_eyebrow_top: {
                        readonly title: 'Left Eyebrow Top';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly right_eyebrow_left: {
                        readonly title: 'Right Eyebrow Left';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly right_eyebrow_right: {
                        readonly title: 'Right Eyebrow Right';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly left_pupil: {
                        readonly title: 'Left Pupil';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly right_pupil: {
                        readonly title: 'Right Pupil';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly nose_tip: {
                        readonly title: 'Nose Tip';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly nose_bottom_right: {
                        readonly title: 'Nose Bottom Right';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly nose_bottom_left: {
                        readonly title: 'Nose Bottom Left';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly mouth_left: {
                        readonly title: 'Mouth Left';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly mouth_right: {
                        readonly title: 'Mouth Right';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly right_eyebrow_top: {
                        readonly title: 'Right Eyebrow Top';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly midpoint_between_eyes: {
                        readonly title: 'Midpoint Between Eyes';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly nose_bottom_center: {
                        readonly title: 'Nose Bottom Center';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly nose_left_alar_out_tip: {
                        readonly title: 'Nose Left Alar Out Tip';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly nose_left_alar_top: {
                        readonly title: 'Nose Left Alar Top';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly nose_right_alar_out_tip: {
                        readonly title: 'Nose Right Alar Out Tip';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly nose_right_alar_top: {
                        readonly title: 'Nose Right Alar Top';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly nose_root_left: {
                        readonly title: 'Nose Root Left';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly nose_root_right: {
                        readonly title: 'Nose Root Right';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly upper_lip: {
                        readonly title: 'Upper Lip';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly under_lip: {
                        readonly title: 'Under Lip';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly under_lip_bottom: {
                        readonly title: 'Under Lip Bottom';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly under_lip_top: {
                        readonly title: 'Under Lip Top';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly upper_lip_bottom: {
                        readonly title: 'Upper Lip Bottom';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly upper_lip_top: {
                        readonly title: 'Upper Lip Top';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly mouth_center: {
                        readonly title: 'Mouth Center';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly mouth_top: {
                        readonly title: 'Mouth Top';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly mouth_bottom: {
                        readonly title: 'Mouth Bottom';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly left_ear_tragion: {
                        readonly title: 'Left Ear Tragion';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly right_ear_tragion: {
                        readonly title: 'Right Ear Tragion';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly forehead_glabella: {
                        readonly title: 'Forehead Glabella';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly chin_gnathion: {
                        readonly title: 'Chin Gnathion';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly chin_left_gonion: {
                        readonly title: 'Chin Left Gonion';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly chin_right_gonion: {
                        readonly title: 'Chin Right Gonion';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly upper_jawline_left: {
                        readonly title: 'Upper Jawline Left';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly mid_jawline_left: {
                        readonly title: 'Mid Jawline Left';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly mid_jawline_right: {
                        readonly title: 'Mid Jawline Right';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly upper_jawline_right: {
                        readonly title: 'Upper Jawline Right';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly left_cheek_center: {
                        readonly title: 'Left Cheek Center';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                      readonly right_cheek_center: {
                        readonly title: 'Right Cheek Center';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'integer';
                        };
                      };
                    };
                  };
                  readonly emotions: {
                    readonly required: readonly [
                      'joy',
                      'sorrow',
                      'anger',
                      'surprise',
                      'disgust',
                      'fear',
                      'confusion',
                      'calm',
                      'unknown',
                      'neutral',
                      'contempt'
                    ];
                    readonly title: 'FaceEmotions';
                    readonly type: 'object';
                    readonly properties: {
                      readonly joy: {
                        readonly title: 'Joy';
                        readonly type: 'integer';
                      };
                      readonly sorrow: {
                        readonly title: 'Sorrow';
                        readonly type: 'integer';
                      };
                      readonly anger: {
                        readonly title: 'Anger';
                        readonly type: 'integer';
                      };
                      readonly surprise: {
                        readonly title: 'Surprise';
                        readonly type: 'integer';
                      };
                      readonly disgust: {
                        readonly title: 'Disgust';
                        readonly type: 'integer';
                      };
                      readonly fear: {
                        readonly title: 'Fear';
                        readonly type: 'integer';
                      };
                      readonly confusion: {
                        readonly title: 'Confusion';
                        readonly type: 'integer';
                      };
                      readonly calm: {
                        readonly title: 'Calm';
                        readonly type: 'integer';
                      };
                      readonly unknown: {
                        readonly title: 'Unknown';
                        readonly type: 'integer';
                      };
                      readonly neutral: {
                        readonly title: 'Neutral';
                        readonly type: 'integer';
                      };
                      readonly contempt: {
                        readonly title: 'Contempt';
                        readonly type: 'integer';
                      };
                    };
                  };
                  readonly poses: {
                    readonly required: readonly ['pitch', 'roll', 'yaw'];
                    readonly title: 'FacePoses';
                    readonly type: 'object';
                    readonly properties: {
                      readonly pitch: {
                        readonly title: 'Pitch';
                        readonly type: 'integer';
                      };
                      readonly roll: {
                        readonly title: 'Roll';
                        readonly type: 'integer';
                      };
                      readonly yaw: {
                        readonly title: 'Yaw';
                        readonly type: 'integer';
                      };
                    };
                  };
                  readonly age: {
                    readonly title: 'Age';
                    readonly type: 'integer';
                  };
                  readonly gender: {
                    readonly title: 'Gender';
                    readonly type: 'string';
                  };
                  readonly bounding_box: {
                    readonly required: readonly ['x_min', 'x_max', 'y_min', 'y_max'];
                    readonly title: 'FaceBoundingBox';
                    readonly type: 'object';
                    readonly properties: {
                      readonly x_min: {
                        readonly title: 'X Min';
                        readonly type: 'integer';
                      };
                      readonly x_max: {
                        readonly title: 'X Max';
                        readonly type: 'integer';
                      };
                      readonly y_min: {
                        readonly title: 'Y Min';
                        readonly type: 'integer';
                      };
                      readonly y_max: {
                        readonly title: 'Y Max';
                        readonly type: 'integer';
                      };
                    };
                  };
                  readonly hair: {
                    readonly required: readonly ['bald', 'invisible'];
                    readonly title: 'FaceHair';
                    readonly type: 'object';
                    readonly properties: {
                      readonly hair_color: {
                        readonly title: 'Hair Color';
                        readonly type: 'array';
                        readonly items: {
                          readonly required: readonly ['color', 'confidence'];
                          readonly title: 'FaceHairColor';
                          readonly type: 'object';
                          readonly properties: {
                            readonly color: {
                              readonly title: 'Color';
                              readonly type: 'string';
                            };
                            readonly confidence: {
                              readonly title: 'Confidence';
                              readonly type: 'integer';
                            };
                          };
                        };
                      };
                      readonly bald: {
                        readonly title: 'Bald';
                        readonly type: 'integer';
                      };
                      readonly invisible: {
                        readonly title: 'Invisible';
                        readonly type: 'boolean';
                      };
                    };
                  };
                  readonly facial_hair: {
                    readonly required: readonly ['moustache', 'beard', 'sideburns'];
                    readonly title: 'FaceFacialHair';
                    readonly type: 'object';
                    readonly properties: {
                      readonly moustache: {
                        readonly title: 'Moustache';
                        readonly type: 'integer';
                      };
                      readonly beard: {
                        readonly title: 'Beard';
                        readonly type: 'integer';
                      };
                      readonly sideburns: {
                        readonly title: 'Sideburns';
                        readonly type: 'integer';
                      };
                    };
                  };
                  readonly quality: {
                    readonly required: readonly [
                      'noise',
                      'exposure',
                      'blur',
                      'brightness',
                      'sharpness'
                    ];
                    readonly title: 'FaceQuality';
                    readonly type: 'object';
                    readonly properties: {
                      readonly noise: {
                        readonly title: 'Noise';
                        readonly type: 'integer';
                      };
                      readonly exposure: {
                        readonly title: 'Exposure';
                        readonly type: 'integer';
                      };
                      readonly blur: {
                        readonly title: 'Blur';
                        readonly type: 'integer';
                      };
                      readonly brightness: {
                        readonly title: 'Brightness';
                        readonly type: 'integer';
                      };
                      readonly sharpness: {
                        readonly title: 'Sharpness';
                        readonly type: 'integer';
                      };
                    };
                  };
                  readonly makeup: {
                    readonly required: readonly ['eye_make', 'lip_make'];
                    readonly title: 'FaceMakeup';
                    readonly type: 'object';
                    readonly properties: {
                      readonly eye_make: {
                        readonly title: 'Eye Make';
                        readonly type: 'boolean';
                      };
                      readonly lip_make: {
                        readonly title: 'Lip Make';
                        readonly type: 'boolean';
                      };
                    };
                  };
                  readonly accessories: {
                    readonly required: readonly [
                      'sunglasses',
                      'reading_glasses',
                      'swimming_goggles',
                      'face_mask',
                      'eyeglasses',
                      'headwear'
                    ];
                    readonly title: 'FaceAccessories';
                    readonly type: 'object';
                    readonly properties: {
                      readonly sunglasses: {
                        readonly title: 'Sunglasses';
                        readonly type: 'integer';
                      };
                      readonly reading_glasses: {
                        readonly title: 'Reading Glasses';
                        readonly type: 'integer';
                      };
                      readonly swimming_goggles: {
                        readonly title: 'Swimming Goggles';
                        readonly type: 'integer';
                      };
                      readonly face_mask: {
                        readonly title: 'Face Mask';
                        readonly type: 'integer';
                      };
                      readonly eyeglasses: {
                        readonly title: 'Eyeglasses';
                        readonly type: 'integer';
                      };
                      readonly headwear: {
                        readonly title: 'Headwear';
                        readonly type: 'integer';
                      };
                    };
                  };
                  readonly occlusions: {
                    readonly required: readonly [
                      'eye_occluded',
                      'forehead_occluded',
                      'mouth_occluded'
                    ];
                    readonly title: 'FaceOcclusions';
                    readonly type: 'object';
                    readonly properties: {
                      readonly eye_occluded: {
                        readonly title: 'Eye Occluded';
                        readonly type: 'boolean';
                      };
                      readonly forehead_occluded: {
                        readonly title: 'Forehead Occluded';
                        readonly type: 'boolean';
                      };
                      readonly mouth_occluded: {
                        readonly title: 'Mouth Occluded';
                        readonly type: 'boolean';
                      };
                    };
                  };
                  readonly features: {
                    readonly required: readonly ['eyes_open', 'smile', 'mouth_open'];
                    readonly title: 'FaceFeatures';
                    readonly type: 'object';
                    readonly properties: {
                      readonly eyes_open: {
                        readonly title: 'Eyes Open';
                        readonly type: 'integer';
                      };
                      readonly smile: {
                        readonly title: 'Smile';
                        readonly type: 'integer';
                      };
                      readonly mouth_open: {
                        readonly title: 'Mouth Open';
                        readonly type: 'integer';
                      };
                    };
                  };
                };
              };
            };
            readonly original_response: {
              readonly default: any;
              readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
              readonly title: 'Original Response';
            };
            readonly status: {
              readonly title: 'Status';
              readonly enum: readonly ['sucess', 'fail'];
              readonly type: 'string';
              readonly description: '`sucess` `fail`';
            };
          };
        };
      };
      readonly title: 'imageface_detectionResponseModel';
      readonly type: 'object';
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '400': {
      readonly type: 'object';
      readonly properties: {
        readonly error: {
          readonly type: 'object';
          readonly properties: {
            readonly type: {
              readonly type: 'string';
            };
            readonly message: {
              readonly type: 'object';
              readonly properties: {
                readonly '<parameter_name>': {
                  readonly type: 'array';
                  readonly items: {
                    readonly type: 'string';
                  };
                };
              };
              readonly required: readonly ['<parameter_name>'];
            };
          };
          readonly required: readonly ['message', 'type'];
        };
      };
      readonly required: readonly ['error'];
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '403': {
      readonly type: 'object';
      readonly properties: {
        readonly error: {
          readonly type: 'object';
          readonly properties: {
            readonly type: {
              readonly type: 'string';
            };
            readonly message: {
              readonly type: 'string';
            };
          };
          readonly required: readonly ['message', 'type'];
        };
      };
      readonly required: readonly ['error'];
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '404': {
      readonly type: 'object';
      readonly properties: {
        readonly details: {
          readonly type: 'string';
          readonly default: 'Not Found';
        };
      };
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '500': {
      readonly type: 'object';
      readonly properties: {
        readonly error: {
          readonly type: 'object';
          readonly properties: {
            readonly type: {
              readonly type: 'string';
            };
            readonly message: {
              readonly type: 'string';
            };
          };
          readonly required: readonly ['message', 'type'];
        };
      };
      readonly required: readonly ['error'];
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
  };
};
declare const ImageFaceRecognitionAddFaceCreate: {
  readonly body: {
    readonly type: 'object';
    readonly properties: {
      readonly providers: {
        readonly type: 'string';
        readonly minLength: 1;
        readonly description: "It can be one (ex: **'amazon'** or **'google'**) or multiple provider(s) (ex: **'amazon,microsoft,google'**)             that the data will be redirected to in order to get the processed results.";
        readonly examples: readonly ['amazon,amazon,amazon,amazon,facepp,facepp,facepp,facepp'];
      };
      readonly fallback_providers: {
        readonly type: 'string';
        readonly minLength: 1;
        readonly description: "Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.\n    To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.\n\nThey will be tried in the same order they are input, and it will stop to the first provider who doesn't fail.\n\n\n*Doesn't work with async subfeatures.*\n    ";
      };
      readonly response_as_dict: {
        readonly type: 'boolean';
        readonly default: true;
        readonly description: "Optional : When set to **true** (default), the response is an object of responses with providers names as keys : <br> \n                  ``` {'google' : { 'status': 'success', ... }, } ``` <br>\n                When set to **false** the response structure is a list of response objects : <br> \n                   ``` [{'status': 'success', 'provider': 'google' ... }, ] ```. <br> \n                  ";
      };
      readonly attributes_as_list: {
        readonly type: 'boolean';
        readonly default: false;
        readonly description: "Optional : When set to **false** (default) the structure of the extracted items is list of objects having different attributes : <br>\n     ```{'items': [{'attribute_1': 'x1','attribute_2': 'y2'}, ... ]}``` <br>\n     When it is set to **true**, the response contains an object with each attribute as a list : <br>\n     ```{ 'attribute_1': ['x1','x2', ...], 'attribute_2': [y1, y2, ...]}``` ";
      };
      readonly show_original_response: {
        readonly type: 'boolean';
        readonly default: false;
        readonly description: 'Optional : Shows the original response of the provider.<br>\n        When set to **true**, a new attribute *original_response* will appear in the response object.';
      };
      readonly file: {
        readonly type: 'string';
        readonly format: 'binary';
        readonly description: 'File to analyse in binary format to be used with *content-type*: **multipart/form-data** <br> **Does not work with application/json !**';
        readonly pattern: '(?:jpg|jpeg|png|bmp)$';
      };
      readonly file_url: {
        readonly type: readonly ['string', 'null'];
        readonly format: 'uri';
        readonly description: 'File **URL** to analyse to be used with with *content-type*: **application/json**.';
        readonly examples: readonly ['http://edenai-resource-example.jpg'];
      };
    };
    readonly required: readonly ['providers'];
    readonly $schema: 'http://json-schema.org/draft-04/schema#';
  };
  readonly response: {
    readonly '200': {
      readonly properties: {
        readonly facepp: {
          readonly required: readonly ['face_ids', 'status'];
          readonly title: 'imageface_recognitionFaceRecognitionAddFaceDataClass';
          readonly type: 'object';
          readonly properties: {
            readonly face_ids: {
              readonly title: 'Face Ids';
              readonly type: 'array';
              readonly items: {
                readonly type: 'string';
              };
            };
            readonly original_response: {
              readonly default: any;
              readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
              readonly title: 'Original Response';
            };
            readonly status: {
              readonly title: 'Status';
              readonly enum: readonly ['sucess', 'fail'];
              readonly type: 'string';
              readonly description: '`sucess` `fail`';
            };
          };
        };
        readonly microsoft: {
          readonly required: readonly ['face_ids', 'status'];
          readonly title: 'imageface_recognitionFaceRecognitionAddFaceDataClass';
          readonly type: 'object';
          readonly properties: {
            readonly face_ids: {
              readonly title: 'Face Ids';
              readonly type: 'array';
              readonly items: {
                readonly type: 'string';
              };
            };
            readonly original_response: {
              readonly default: any;
              readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
              readonly title: 'Original Response';
            };
            readonly status: {
              readonly title: 'Status';
              readonly enum: readonly ['sucess', 'fail'];
              readonly type: 'string';
              readonly description: '`sucess` `fail`';
            };
          };
        };
        readonly amazon: {
          readonly required: readonly ['face_ids', 'status'];
          readonly title: 'imageface_recognitionFaceRecognitionAddFaceDataClass';
          readonly type: 'object';
          readonly properties: {
            readonly face_ids: {
              readonly title: 'Face Ids';
              readonly type: 'array';
              readonly items: {
                readonly type: 'string';
              };
            };
            readonly original_response: {
              readonly default: any;
              readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
              readonly title: 'Original Response';
            };
            readonly status: {
              readonly title: 'Status';
              readonly enum: readonly ['sucess', 'fail'];
              readonly type: 'string';
              readonly description: '`sucess` `fail`';
            };
          };
        };
      };
      readonly title: 'imageface_recognitionResponseModel';
      readonly type: 'object';
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '400': {
      readonly type: 'object';
      readonly properties: {
        readonly error: {
          readonly type: 'object';
          readonly properties: {
            readonly type: {
              readonly type: 'string';
            };
            readonly message: {
              readonly type: 'object';
              readonly properties: {
                readonly '<parameter_name>': {
                  readonly type: 'array';
                  readonly items: {
                    readonly type: 'string';
                  };
                };
              };
              readonly required: readonly ['<parameter_name>'];
            };
          };
          readonly required: readonly ['message', 'type'];
        };
      };
      readonly required: readonly ['error'];
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '403': {
      readonly type: 'object';
      readonly properties: {
        readonly error: {
          readonly type: 'object';
          readonly properties: {
            readonly type: {
              readonly type: 'string';
            };
            readonly message: {
              readonly type: 'string';
            };
          };
          readonly required: readonly ['message', 'type'];
        };
      };
      readonly required: readonly ['error'];
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '404': {
      readonly type: 'object';
      readonly properties: {
        readonly details: {
          readonly type: 'string';
          readonly default: 'Not Found';
        };
      };
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '500': {
      readonly type: 'object';
      readonly properties: {
        readonly error: {
          readonly type: 'object';
          readonly properties: {
            readonly type: {
              readonly type: 'string';
            };
            readonly message: {
              readonly type: 'string';
            };
          };
          readonly required: readonly ['message', 'type'];
        };
      };
      readonly required: readonly ['error'];
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
  };
};
declare const ImageFaceRecognitionDeleteFaceCreate: {
  readonly body: {
    readonly type: 'object';
    readonly properties: {
      readonly providers: {
        readonly type: 'string';
        readonly minLength: 1;
        readonly description: "It can be one (ex: **'amazon'** or **'google'**) or multiple provider(s) (ex: **'amazon,microsoft,google'**)             that the data will be redirected to in order to get the processed results.";
        readonly examples: readonly ['amazon,amazon,amazon,amazon,facepp,facepp,facepp,facepp'];
      };
      readonly fallback_providers: {
        readonly type: 'string';
        readonly minLength: 1;
        readonly description: "Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.\n    To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.\n\nThey will be tried in the same order they are input, and it will stop to the first provider who doesn't fail.\n\n\n*Doesn't work with async subfeatures.*\n    ";
      };
      readonly response_as_dict: {
        readonly type: 'boolean';
        readonly default: true;
        readonly description: "Optional : When set to **true** (default), the response is an object of responses with providers names as keys : <br> \n                  ``` {'google' : { 'status': 'success', ... }, } ``` <br>\n                When set to **false** the response structure is a list of response objects : <br> \n                   ``` [{'status': 'success', 'provider': 'google' ... }, ] ```. <br> \n                  ";
      };
      readonly attributes_as_list: {
        readonly type: 'boolean';
        readonly default: false;
        readonly description: "Optional : When set to **false** (default) the structure of the extracted items is list of objects having different attributes : <br>\n     ```{'items': [{'attribute_1': 'x1','attribute_2': 'y2'}, ... ]}``` <br>\n     When it is set to **true**, the response contains an object with each attribute as a list : <br>\n     ```{ 'attribute_1': ['x1','x2', ...], 'attribute_2': [y1, y2, ...]}``` ";
      };
      readonly show_original_response: {
        readonly type: 'boolean';
        readonly default: false;
        readonly description: 'Optional : Shows the original response of the provider.<br>\n        When set to **true**, a new attribute *original_response* will appear in the response object.';
      };
      readonly face_id: {
        readonly type: 'string';
        readonly minLength: 1;
        readonly description: 'ID of face to delete';
        readonly examples: readonly ['249061cf-0062-47b8-94f6-ae8f8e98badb'];
      };
    };
    readonly required: readonly ['face_id', 'providers'];
    readonly $schema: 'http://json-schema.org/draft-04/schema#';
  };
  readonly response: {
    readonly '200': {
      readonly properties: {
        readonly facepp: {
          readonly required: readonly ['face_ids', 'status'];
          readonly title: 'imageface_recognitionFaceRecognitionAddFaceDataClass';
          readonly type: 'object';
          readonly properties: {
            readonly face_ids: {
              readonly title: 'Face Ids';
              readonly type: 'array';
              readonly items: {
                readonly type: 'string';
              };
            };
            readonly original_response: {
              readonly default: any;
              readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
              readonly title: 'Original Response';
            };
            readonly status: {
              readonly title: 'Status';
              readonly enum: readonly ['sucess', 'fail'];
              readonly type: 'string';
              readonly description: '`sucess` `fail`';
            };
          };
        };
        readonly microsoft: {
          readonly required: readonly ['face_ids', 'status'];
          readonly title: 'imageface_recognitionFaceRecognitionAddFaceDataClass';
          readonly type: 'object';
          readonly properties: {
            readonly face_ids: {
              readonly title: 'Face Ids';
              readonly type: 'array';
              readonly items: {
                readonly type: 'string';
              };
            };
            readonly original_response: {
              readonly default: any;
              readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
              readonly title: 'Original Response';
            };
            readonly status: {
              readonly title: 'Status';
              readonly enum: readonly ['sucess', 'fail'];
              readonly type: 'string';
              readonly description: '`sucess` `fail`';
            };
          };
        };
        readonly amazon: {
          readonly required: readonly ['face_ids', 'status'];
          readonly title: 'imageface_recognitionFaceRecognitionAddFaceDataClass';
          readonly type: 'object';
          readonly properties: {
            readonly face_ids: {
              readonly title: 'Face Ids';
              readonly type: 'array';
              readonly items: {
                readonly type: 'string';
              };
            };
            readonly original_response: {
              readonly default: any;
              readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
              readonly title: 'Original Response';
            };
            readonly status: {
              readonly title: 'Status';
              readonly enum: readonly ['sucess', 'fail'];
              readonly type: 'string';
              readonly description: '`sucess` `fail`';
            };
          };
        };
      };
      readonly title: 'imageface_recognitionResponseModel';
      readonly type: 'object';
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '400': {
      readonly type: 'object';
      readonly properties: {
        readonly error: {
          readonly type: 'object';
          readonly properties: {
            readonly type: {
              readonly type: 'string';
            };
            readonly message: {
              readonly type: 'object';
              readonly properties: {
                readonly '<parameter_name>': {
                  readonly type: 'array';
                  readonly items: {
                    readonly type: 'string';
                  };
                };
              };
              readonly required: readonly ['<parameter_name>'];
            };
          };
          readonly required: readonly ['message', 'type'];
        };
      };
      readonly required: readonly ['error'];
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '403': {
      readonly type: 'object';
      readonly properties: {
        readonly error: {
          readonly type: 'object';
          readonly properties: {
            readonly type: {
              readonly type: 'string';
            };
            readonly message: {
              readonly type: 'string';
            };
          };
          readonly required: readonly ['message', 'type'];
        };
      };
      readonly required: readonly ['error'];
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '404': {
      readonly type: 'object';
      readonly properties: {
        readonly details: {
          readonly type: 'string';
          readonly default: 'Not Found';
        };
      };
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '500': {
      readonly type: 'object';
      readonly properties: {
        readonly error: {
          readonly type: 'object';
          readonly properties: {
            readonly type: {
              readonly type: 'string';
            };
            readonly message: {
              readonly type: 'string';
            };
          };
          readonly required: readonly ['message', 'type'];
        };
      };
      readonly required: readonly ['error'];
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
  };
};
declare const ImageFaceRecognitionListFacesRetrieve: {
  readonly metadata: {
    readonly allOf: readonly [
      {
        readonly type: 'object';
        readonly properties: {
          readonly attributes_as_list: {
            readonly type: 'boolean';
            readonly default: false;
            readonly $schema: 'http://json-schema.org/draft-04/schema#';
            readonly description: "Optional : When set to **false** (default) the structure of the extracted items is list of objects having different attributes : <br>\n     ```{'items': [{'attribute_1': 'x1','attribute_2': 'y2'}, ... ]}``` <br>\n     When it is set to **true**, the response contains an object with each attribute as a list : <br>\n     ```{ 'attribute_1': ['x1','x2', ...], 'attribute_2': [y1, y2, ...]}``` ";
          };
          readonly fallback_providers: {
            readonly type: 'string';
            readonly minLength: 1;
            readonly $schema: 'http://json-schema.org/draft-04/schema#';
            readonly description: "Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.\n    To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.\n\nThey will be tried in the same order they are input, and it will stop to the first provider who doesn't fail.\n\n\n*Doesn't work with async subfeatures.*\n    ";
          };
          readonly providers: {
            readonly type: 'string';
            readonly minLength: 1;
            readonly $schema: 'http://json-schema.org/draft-04/schema#';
            readonly description: "It can be one (ex: **'amazon'** or **'google'**) or multiple provider(s) (ex: **'amazon,microsoft,google'**)             that the data will be redirected to in order to get the processed results.";
          };
          readonly response_as_dict: {
            readonly type: 'boolean';
            readonly default: true;
            readonly $schema: 'http://json-schema.org/draft-04/schema#';
            readonly description: "Optional : When set to **true** (default), the response is an object of responses with providers names as keys : <br> \n                  ``` {'google' : { 'status': 'success', ... }, } ``` <br>\n                When set to **false** the response structure is a list of response objects : <br> \n                   ``` [{'status': 'success', 'provider': 'google' ... }, ] ```. <br> \n                  ";
          };
          readonly show_original_response: {
            readonly type: 'boolean';
            readonly default: false;
            readonly $schema: 'http://json-schema.org/draft-04/schema#';
            readonly description: 'Optional : Shows the original response of the provider.<br>\n        When set to **true**, a new attribute *original_response* will appear in the response object.';
          };
        };
        readonly required: readonly ['providers'];
      }
    ];
  };
  readonly response: {
    readonly '200': {
      readonly properties: {
        readonly facepp: {
          readonly required: readonly ['face_ids', 'status'];
          readonly title: 'imageface_recognitionFaceRecognitionAddFaceDataClass';
          readonly type: 'object';
          readonly properties: {
            readonly face_ids: {
              readonly title: 'Face Ids';
              readonly type: 'array';
              readonly items: {
                readonly type: 'string';
              };
            };
            readonly original_response: {
              readonly default: any;
              readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
              readonly title: 'Original Response';
            };
            readonly status: {
              readonly title: 'Status';
              readonly enum: readonly ['sucess', 'fail'];
              readonly type: 'string';
              readonly description: '`sucess` `fail`';
            };
          };
        };
        readonly microsoft: {
          readonly required: readonly ['face_ids', 'status'];
          readonly title: 'imageface_recognitionFaceRecognitionAddFaceDataClass';
          readonly type: 'object';
          readonly properties: {
            readonly face_ids: {
              readonly title: 'Face Ids';
              readonly type: 'array';
              readonly items: {
                readonly type: 'string';
              };
            };
            readonly original_response: {
              readonly default: any;
              readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
              readonly title: 'Original Response';
            };
            readonly status: {
              readonly title: 'Status';
              readonly enum: readonly ['sucess', 'fail'];
              readonly type: 'string';
              readonly description: '`sucess` `fail`';
            };
          };
        };
        readonly amazon: {
          readonly required: readonly ['face_ids', 'status'];
          readonly title: 'imageface_recognitionFaceRecognitionAddFaceDataClass';
          readonly type: 'object';
          readonly properties: {
            readonly face_ids: {
              readonly title: 'Face Ids';
              readonly type: 'array';
              readonly items: {
                readonly type: 'string';
              };
            };
            readonly original_response: {
              readonly default: any;
              readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
              readonly title: 'Original Response';
            };
            readonly status: {
              readonly title: 'Status';
              readonly enum: readonly ['sucess', 'fail'];
              readonly type: 'string';
              readonly description: '`sucess` `fail`';
            };
          };
        };
      };
      readonly title: 'imageface_recognitionResponseModel';
      readonly type: 'object';
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '400': {
      readonly type: 'object';
      readonly properties: {
        readonly error: {
          readonly type: 'object';
          readonly properties: {
            readonly type: {
              readonly type: 'string';
            };
            readonly message: {
              readonly type: 'object';
              readonly properties: {
                readonly '<parameter_name>': {
                  readonly type: 'array';
                  readonly items: {
                    readonly type: 'string';
                  };
                };
              };
              readonly required: readonly ['<parameter_name>'];
            };
          };
          readonly required: readonly ['message', 'type'];
        };
      };
      readonly required: readonly ['error'];
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '403': {
      readonly type: 'object';
      readonly properties: {
        readonly error: {
          readonly type: 'object';
          readonly properties: {
            readonly type: {
              readonly type: 'string';
            };
            readonly message: {
              readonly type: 'string';
            };
          };
          readonly required: readonly ['message', 'type'];
        };
      };
      readonly required: readonly ['error'];
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '404': {
      readonly type: 'object';
      readonly properties: {
        readonly details: {
          readonly type: 'string';
          readonly default: 'Not Found';
        };
      };
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '500': {
      readonly type: 'object';
      readonly properties: {
        readonly error: {
          readonly type: 'object';
          readonly properties: {
            readonly type: {
              readonly type: 'string';
            };
            readonly message: {
              readonly type: 'string';
            };
          };
          readonly required: readonly ['message', 'type'];
        };
      };
      readonly required: readonly ['error'];
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
  };
};
declare const ImageFaceRecognitionRecognizeCreate: {
  readonly body: {
    readonly type: 'object';
    readonly properties: {
      readonly providers: {
        readonly type: 'string';
        readonly minLength: 1;
        readonly description: "It can be one (ex: **'amazon'** or **'google'**) or multiple provider(s) (ex: **'amazon,microsoft,google'**)             that the data will be redirected to in order to get the processed results.";
        readonly examples: readonly ['amazon,amazon,amazon,amazon,facepp,facepp,facepp,facepp'];
      };
      readonly fallback_providers: {
        readonly type: 'string';
        readonly minLength: 1;
        readonly description: "Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.\n    To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.\n\nThey will be tried in the same order they are input, and it will stop to the first provider who doesn't fail.\n\n\n*Doesn't work with async subfeatures.*\n    ";
      };
      readonly response_as_dict: {
        readonly type: 'boolean';
        readonly default: true;
        readonly description: "Optional : When set to **true** (default), the response is an object of responses with providers names as keys : <br> \n                  ``` {'google' : { 'status': 'success', ... }, } ``` <br>\n                When set to **false** the response structure is a list of response objects : <br> \n                   ``` [{'status': 'success', 'provider': 'google' ... }, ] ```. <br> \n                  ";
      };
      readonly attributes_as_list: {
        readonly type: 'boolean';
        readonly default: false;
        readonly description: "Optional : When set to **false** (default) the structure of the extracted items is list of objects having different attributes : <br>\n     ```{'items': [{'attribute_1': 'x1','attribute_2': 'y2'}, ... ]}``` <br>\n     When it is set to **true**, the response contains an object with each attribute as a list : <br>\n     ```{ 'attribute_1': ['x1','x2', ...], 'attribute_2': [y1, y2, ...]}``` ";
      };
      readonly show_original_response: {
        readonly type: 'boolean';
        readonly default: false;
        readonly description: 'Optional : Shows the original response of the provider.<br>\n        When set to **true**, a new attribute *original_response* will appear in the response object.';
      };
      readonly file: {
        readonly type: 'string';
        readonly format: 'binary';
        readonly description: 'File to analyse in binary format to be used with *content-type*: **multipart/form-data** <br> **Does not work with application/json !**';
        readonly pattern: '(?:jpg|jpeg|png|bmp)$';
      };
      readonly file_url: {
        readonly type: readonly ['string', 'null'];
        readonly format: 'uri';
        readonly description: 'File **URL** to analyse to be used with with *content-type*: **application/json**.';
        readonly examples: readonly ['http://edenai-resource-example.jpg'];
      };
    };
    readonly required: readonly ['providers'];
    readonly $schema: 'http://json-schema.org/draft-04/schema#';
  };
  readonly response: {
    readonly '200': {
      readonly properties: {
        readonly facepp: {
          readonly required: readonly ['face_ids', 'status'];
          readonly title: 'imageface_recognitionFaceRecognitionAddFaceDataClass';
          readonly type: 'object';
          readonly properties: {
            readonly face_ids: {
              readonly title: 'Face Ids';
              readonly type: 'array';
              readonly items: {
                readonly type: 'string';
              };
            };
            readonly original_response: {
              readonly default: any;
              readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
              readonly title: 'Original Response';
            };
            readonly status: {
              readonly title: 'Status';
              readonly enum: readonly ['sucess', 'fail'];
              readonly type: 'string';
              readonly description: '`sucess` `fail`';
            };
          };
        };
        readonly microsoft: {
          readonly required: readonly ['face_ids', 'status'];
          readonly title: 'imageface_recognitionFaceRecognitionAddFaceDataClass';
          readonly type: 'object';
          readonly properties: {
            readonly face_ids: {
              readonly title: 'Face Ids';
              readonly type: 'array';
              readonly items: {
                readonly type: 'string';
              };
            };
            readonly original_response: {
              readonly default: any;
              readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
              readonly title: 'Original Response';
            };
            readonly status: {
              readonly title: 'Status';
              readonly enum: readonly ['sucess', 'fail'];
              readonly type: 'string';
              readonly description: '`sucess` `fail`';
            };
          };
        };
        readonly amazon: {
          readonly required: readonly ['face_ids', 'status'];
          readonly title: 'imageface_recognitionFaceRecognitionAddFaceDataClass';
          readonly type: 'object';
          readonly properties: {
            readonly face_ids: {
              readonly title: 'Face Ids';
              readonly type: 'array';
              readonly items: {
                readonly type: 'string';
              };
            };
            readonly original_response: {
              readonly default: any;
              readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
              readonly title: 'Original Response';
            };
            readonly status: {
              readonly title: 'Status';
              readonly enum: readonly ['sucess', 'fail'];
              readonly type: 'string';
              readonly description: '`sucess` `fail`';
            };
          };
        };
      };
      readonly title: 'imageface_recognitionResponseModel';
      readonly type: 'object';
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '400': {
      readonly type: 'object';
      readonly properties: {
        readonly error: {
          readonly type: 'object';
          readonly properties: {
            readonly type: {
              readonly type: 'string';
            };
            readonly message: {
              readonly type: 'object';
              readonly properties: {
                readonly '<parameter_name>': {
                  readonly type: 'array';
                  readonly items: {
                    readonly type: 'string';
                  };
                };
              };
              readonly required: readonly ['<parameter_name>'];
            };
          };
          readonly required: readonly ['message', 'type'];
        };
      };
      readonly required: readonly ['error'];
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '403': {
      readonly type: 'object';
      readonly properties: {
        readonly error: {
          readonly type: 'object';
          readonly properties: {
            readonly type: {
              readonly type: 'string';
            };
            readonly message: {
              readonly type: 'string';
            };
          };
          readonly required: readonly ['message', 'type'];
        };
      };
      readonly required: readonly ['error'];
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '404': {
      readonly type: 'object';
      readonly properties: {
        readonly details: {
          readonly type: 'string';
          readonly default: 'Not Found';
        };
      };
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '500': {
      readonly type: 'object';
      readonly properties: {
        readonly error: {
          readonly type: 'object';
          readonly properties: {
            readonly type: {
              readonly type: 'string';
            };
            readonly message: {
              readonly type: 'string';
            };
          };
          readonly required: readonly ['message', 'type'];
        };
      };
      readonly required: readonly ['error'];
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
  };
};
declare const ImageGenerationCreate: {
  readonly body: {
    readonly type: 'object';
    readonly properties: {
      readonly providers: {
        readonly type: 'string';
        readonly minLength: 1;
        readonly description: "It can be one (ex: **'amazon'** or **'google'**) or multiple provider(s) (ex: **'amazon,microsoft,google'**)             that the data will be redirected to in order to get the processed results.";
        readonly examples: readonly ['openai,deepai,stabilityai'];
      };
      readonly fallback_providers: {
        readonly type: 'string';
        readonly minLength: 1;
        readonly description: "Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.\n    To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.\n\nThey will be tried in the same order they are input, and it will stop to the first provider who doesn't fail.\n\n\n*Doesn't work with async subfeatures.*\n    ";
      };
      readonly response_as_dict: {
        readonly type: 'boolean';
        readonly default: true;
        readonly description: "Optional : When set to **true** (default), the response is an object of responses with providers names as keys : <br> \n                  ``` {'google' : { 'status': 'success', ... }, } ``` <br>\n                When set to **false** the response structure is a list of response objects : <br> \n                   ``` [{'status': 'success', 'provider': 'google' ... }, ] ```. <br> \n                  ";
      };
      readonly attributes_as_list: {
        readonly type: 'boolean';
        readonly default: false;
        readonly description: "Optional : When set to **false** (default) the structure of the extracted items is list of objects having different attributes : <br>\n     ```{'items': [{'attribute_1': 'x1','attribute_2': 'y2'}, ... ]}``` <br>\n     When it is set to **true**, the response contains an object with each attribute as a list : <br>\n     ```{ 'attribute_1': ['x1','x2', ...], 'attribute_2': [y1, y2, ...]}``` ";
      };
      readonly show_original_response: {
        readonly type: 'boolean';
        readonly default: false;
        readonly description: 'Optional : Shows the original response of the provider.<br>\n        When set to **true**, a new attribute *original_response* will appear in the response object.';
      };
      readonly text: {
        readonly type: 'string';
        readonly minLength: 1;
        readonly description: 'Description of the desired image(s). The maximum length is 1000 characters';
        readonly maxLength: 1000;
        readonly examples: readonly ['A huge red ballon flying outside the city.'];
      };
      readonly resolution: {
        readonly enum: readonly ['256x256', '512x512', '1024x1024'];
        readonly type: 'string';
        readonly description: '* `256x256` - 256x256\n* `512x512` - 512x512\n* `1024x1024` - 1024x1024';
        readonly examples: readonly ['512x512'];
      };
      readonly num_images: {
        readonly type: 'integer';
        readonly maximum: 10;
        readonly minimum: 1;
        readonly default: 1;
        readonly description: 'The number of images to generate. Must be between 1 and 10.';
        readonly examples: readonly [2];
      };
    };
    readonly required: readonly ['providers', 'resolution', 'text'];
    readonly $schema: 'http://json-schema.org/draft-04/schema#';
  };
  readonly response: {
    readonly '200': {
      readonly properties: {
        readonly stabilityai: {
          readonly required: readonly ['status'];
          readonly title: 'imagegenerationGenerationDataClass';
          readonly type: 'object';
          readonly properties: {
            readonly items: {
              readonly title: 'Items';
              readonly type: 'array';
              readonly items: {
                readonly required: readonly ['image', 'image_resource_url'];
                readonly title: 'GeneratedImageDataClass';
                readonly type: 'object';
                readonly properties: {
                  readonly image: {
                    readonly title: 'Image';
                    readonly type: 'string';
                  };
                  readonly image_resource_url: {
                    readonly title: 'Image Resource Url';
                    readonly type: 'string';
                  };
                };
              };
            };
            readonly original_response: {
              readonly default: any;
              readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
              readonly title: 'Original Response';
            };
            readonly status: {
              readonly title: 'Status';
              readonly enum: readonly ['sucess', 'fail'];
              readonly type: 'string';
              readonly description: '`sucess` `fail`';
            };
          };
        };
        readonly deepai: {
          readonly required: readonly ['status'];
          readonly title: 'imagegenerationGenerationDataClass';
          readonly type: 'object';
          readonly properties: {
            readonly items: {
              readonly title: 'Items';
              readonly type: 'array';
              readonly items: {
                readonly required: readonly ['image', 'image_resource_url'];
                readonly title: 'GeneratedImageDataClass';
                readonly type: 'object';
                readonly properties: {
                  readonly image: {
                    readonly title: 'Image';
                    readonly type: 'string';
                  };
                  readonly image_resource_url: {
                    readonly title: 'Image Resource Url';
                    readonly type: 'string';
                  };
                };
              };
            };
            readonly original_response: {
              readonly default: any;
              readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
              readonly title: 'Original Response';
            };
            readonly status: {
              readonly title: 'Status';
              readonly enum: readonly ['sucess', 'fail'];
              readonly type: 'string';
              readonly description: '`sucess` `fail`';
            };
          };
        };
        readonly openai: {
          readonly required: readonly ['status'];
          readonly title: 'imagegenerationGenerationDataClass';
          readonly type: 'object';
          readonly properties: {
            readonly items: {
              readonly title: 'Items';
              readonly type: 'array';
              readonly items: {
                readonly required: readonly ['image', 'image_resource_url'];
                readonly title: 'GeneratedImageDataClass';
                readonly type: 'object';
                readonly properties: {
                  readonly image: {
                    readonly title: 'Image';
                    readonly type: 'string';
                  };
                  readonly image_resource_url: {
                    readonly title: 'Image Resource Url';
                    readonly type: 'string';
                  };
                };
              };
            };
            readonly original_response: {
              readonly default: any;
              readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
              readonly title: 'Original Response';
            };
            readonly status: {
              readonly title: 'Status';
              readonly enum: readonly ['sucess', 'fail'];
              readonly type: 'string';
              readonly description: '`sucess` `fail`';
            };
          };
        };
      };
      readonly title: 'imagegenerationResponseModel';
      readonly type: 'object';
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '400': {
      readonly type: 'object';
      readonly properties: {
        readonly error: {
          readonly type: 'object';
          readonly properties: {
            readonly type: {
              readonly type: 'string';
            };
            readonly message: {
              readonly type: 'object';
              readonly properties: {
                readonly '<parameter_name>': {
                  readonly type: 'array';
                  readonly items: {
                    readonly type: 'string';
                  };
                };
              };
              readonly required: readonly ['<parameter_name>'];
            };
          };
          readonly required: readonly ['message', 'type'];
        };
      };
      readonly required: readonly ['error'];
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '403': {
      readonly type: 'object';
      readonly properties: {
        readonly error: {
          readonly type: 'object';
          readonly properties: {
            readonly type: {
              readonly type: 'string';
            };
            readonly message: {
              readonly type: 'string';
            };
          };
          readonly required: readonly ['message', 'type'];
        };
      };
      readonly required: readonly ['error'];
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '404': {
      readonly type: 'object';
      readonly properties: {
        readonly details: {
          readonly type: 'string';
          readonly default: 'Not Found';
        };
      };
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '500': {
      readonly type: 'object';
      readonly properties: {
        readonly error: {
          readonly type: 'object';
          readonly properties: {
            readonly type: {
              readonly type: 'string';
            };
            readonly message: {
              readonly type: 'string';
            };
          };
          readonly required: readonly ['message', 'type'];
        };
      };
      readonly required: readonly ['error'];
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
  };
};
declare const ImageLandmarkDetectionCreate: {
  readonly body: {
    readonly type: 'object';
    readonly properties: {
      readonly providers: {
        readonly type: 'string';
        readonly minLength: 1;
        readonly description: "It can be one (ex: **'amazon'** or **'google'**) or multiple provider(s) (ex: **'amazon,microsoft,google'**)             that the data will be redirected to in order to get the processed results.";
        readonly examples: readonly ['google,microsoft'];
      };
      readonly fallback_providers: {
        readonly type: 'string';
        readonly minLength: 1;
        readonly description: "Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.\n    To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.\n\nThey will be tried in the same order they are input, and it will stop to the first provider who doesn't fail.\n\n\n*Doesn't work with async subfeatures.*\n    ";
      };
      readonly response_as_dict: {
        readonly type: 'boolean';
        readonly default: true;
        readonly description: "Optional : When set to **true** (default), the response is an object of responses with providers names as keys : <br> \n                  ``` {'google' : { 'status': 'success', ... }, } ``` <br>\n                When set to **false** the response structure is a list of response objects : <br> \n                   ``` [{'status': 'success', 'provider': 'google' ... }, ] ```. <br> \n                  ";
      };
      readonly attributes_as_list: {
        readonly type: 'boolean';
        readonly default: false;
        readonly description: "Optional : When set to **false** (default) the structure of the extracted items is list of objects having different attributes : <br>\n     ```{'items': [{'attribute_1': 'x1','attribute_2': 'y2'}, ... ]}``` <br>\n     When it is set to **true**, the response contains an object with each attribute as a list : <br>\n     ```{ 'attribute_1': ['x1','x2', ...], 'attribute_2': [y1, y2, ...]}``` ";
      };
      readonly show_original_response: {
        readonly type: 'boolean';
        readonly default: false;
        readonly description: 'Optional : Shows the original response of the provider.<br>\n        When set to **true**, a new attribute *original_response* will appear in the response object.';
      };
      readonly file: {
        readonly type: 'string';
        readonly format: 'binary';
        readonly description: 'File to analyse in binary format to be used with *content-type*: **multipart/form-data** <br> **Does not work with application/json !**';
        readonly pattern: '(?:jpg|jpeg|png|tiff)$';
      };
      readonly file_url: {
        readonly type: readonly ['string', 'null'];
        readonly format: 'uri';
        readonly description: 'File **URL** to analyse to be used with with *content-type*: **application/json**.';
        readonly examples: readonly ['http://edenai-resource-example.jpg'];
      };
    };
    readonly required: readonly ['providers'];
    readonly $schema: 'http://json-schema.org/draft-04/schema#';
  };
  readonly response: {
    readonly '200': {
      readonly properties: {
        readonly google: {
          readonly required: readonly ['status'];
          readonly title: 'imagelandmark_detectionLandmarkDetectionDataClass';
          readonly type: 'object';
          readonly properties: {
            readonly items: {
              readonly title: 'Items';
              readonly type: 'array';
              readonly items: {
                readonly required: readonly ['description', 'confidence'];
                readonly title: 'LandmarkItem';
                readonly type: 'object';
                readonly properties: {
                  readonly description: {
                    readonly title: 'Description';
                    readonly type: 'string';
                  };
                  readonly confidence: {
                    readonly title: 'Confidence';
                    readonly type: 'integer';
                  };
                  readonly bounding_box: {
                    readonly title: 'Bounding Box';
                    readonly type: 'array';
                    readonly items: {
                      readonly required: readonly ['x', 'y'];
                      readonly title: 'LandmarkVertice';
                      readonly type: 'object';
                      readonly properties: {
                        readonly x: {
                          readonly title: 'X';
                          readonly type: 'integer';
                        };
                        readonly y: {
                          readonly title: 'Y';
                          readonly type: 'integer';
                        };
                      };
                    };
                  };
                  readonly locations: {
                    readonly title: 'Locations';
                    readonly type: 'array';
                    readonly items: {
                      readonly required: readonly ['lat_lng'];
                      readonly title: 'LandmarkLocation';
                      readonly type: 'object';
                      readonly properties: {
                        readonly lat_lng: {
                          readonly required: readonly ['latitude', 'longitude'];
                          readonly title: 'LandmarkLatLng';
                          readonly type: 'object';
                          readonly properties: {
                            readonly latitude: {
                              readonly title: 'Latitude';
                              readonly type: 'integer';
                            };
                            readonly longitude: {
                              readonly title: 'Longitude';
                              readonly type: 'integer';
                            };
                          };
                        };
                      };
                    };
                  };
                };
              };
            };
            readonly original_response: {
              readonly default: any;
              readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
              readonly title: 'Original Response';
            };
            readonly status: {
              readonly title: 'Status';
              readonly enum: readonly ['sucess', 'fail'];
              readonly type: 'string';
              readonly description: '`sucess` `fail`';
            };
          };
        };
        readonly microsoft: {
          readonly required: readonly ['status'];
          readonly title: 'imagelandmark_detectionLandmarkDetectionDataClass';
          readonly type: 'object';
          readonly properties: {
            readonly items: {
              readonly title: 'Items';
              readonly type: 'array';
              readonly items: {
                readonly required: readonly ['description', 'confidence'];
                readonly title: 'LandmarkItem';
                readonly type: 'object';
                readonly properties: {
                  readonly description: {
                    readonly title: 'Description';
                    readonly type: 'string';
                  };
                  readonly confidence: {
                    readonly title: 'Confidence';
                    readonly type: 'integer';
                  };
                  readonly bounding_box: {
                    readonly title: 'Bounding Box';
                    readonly type: 'array';
                    readonly items: {
                      readonly required: readonly ['x', 'y'];
                      readonly title: 'LandmarkVertice';
                      readonly type: 'object';
                      readonly properties: {
                        readonly x: {
                          readonly title: 'X';
                          readonly type: 'integer';
                        };
                        readonly y: {
                          readonly title: 'Y';
                          readonly type: 'integer';
                        };
                      };
                    };
                  };
                  readonly locations: {
                    readonly title: 'Locations';
                    readonly type: 'array';
                    readonly items: {
                      readonly required: readonly ['lat_lng'];
                      readonly title: 'LandmarkLocation';
                      readonly type: 'object';
                      readonly properties: {
                        readonly lat_lng: {
                          readonly required: readonly ['latitude', 'longitude'];
                          readonly title: 'LandmarkLatLng';
                          readonly type: 'object';
                          readonly properties: {
                            readonly latitude: {
                              readonly title: 'Latitude';
                              readonly type: 'integer';
                            };
                            readonly longitude: {
                              readonly title: 'Longitude';
                              readonly type: 'integer';
                            };
                          };
                        };
                      };
                    };
                  };
                };
              };
            };
            readonly original_response: {
              readonly default: any;
              readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
              readonly title: 'Original Response';
            };
            readonly status: {
              readonly title: 'Status';
              readonly enum: readonly ['sucess', 'fail'];
              readonly type: 'string';
              readonly description: '`sucess` `fail`';
            };
          };
        };
      };
      readonly title: 'imagelandmark_detectionResponseModel';
      readonly type: 'object';
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '400': {
      readonly type: 'object';
      readonly properties: {
        readonly error: {
          readonly type: 'object';
          readonly properties: {
            readonly type: {
              readonly type: 'string';
            };
            readonly message: {
              readonly type: 'object';
              readonly properties: {
                readonly '<parameter_name>': {
                  readonly type: 'array';
                  readonly items: {
                    readonly type: 'string';
                  };
                };
              };
              readonly required: readonly ['<parameter_name>'];
            };
          };
          readonly required: readonly ['message', 'type'];
        };
      };
      readonly required: readonly ['error'];
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '403': {
      readonly type: 'object';
      readonly properties: {
        readonly error: {
          readonly type: 'object';
          readonly properties: {
            readonly type: {
              readonly type: 'string';
            };
            readonly message: {
              readonly type: 'string';
            };
          };
          readonly required: readonly ['message', 'type'];
        };
      };
      readonly required: readonly ['error'];
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '404': {
      readonly type: 'object';
      readonly properties: {
        readonly details: {
          readonly type: 'string';
          readonly default: 'Not Found';
        };
      };
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '500': {
      readonly type: 'object';
      readonly properties: {
        readonly error: {
          readonly type: 'object';
          readonly properties: {
            readonly type: {
              readonly type: 'string';
            };
            readonly message: {
              readonly type: 'string';
            };
          };
          readonly required: readonly ['message', 'type'];
        };
      };
      readonly required: readonly ['error'];
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
  };
};
declare const ImageLogoDetectionCreate: {
  readonly body: {
    readonly type: 'object';
    readonly properties: {
      readonly providers: {
        readonly type: 'string';
        readonly minLength: 1;
        readonly description: "It can be one (ex: **'amazon'** or **'google'**) or multiple provider(s) (ex: **'amazon,microsoft,google'**)             that the data will be redirected to in order to get the processed results.";
        readonly examples: readonly ['google,microsoft,clarifai,smartclick,api4ai'];
      };
      readonly fallback_providers: {
        readonly type: 'string';
        readonly minLength: 1;
        readonly description: "Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.\n    To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.\n\nThey will be tried in the same order they are input, and it will stop to the first provider who doesn't fail.\n\n\n*Doesn't work with async subfeatures.*\n    ";
      };
      readonly response_as_dict: {
        readonly type: 'boolean';
        readonly default: true;
        readonly description: "Optional : When set to **true** (default), the response is an object of responses with providers names as keys : <br> \n                  ``` {'google' : { 'status': 'success', ... }, } ``` <br>\n                When set to **false** the response structure is a list of response objects : <br> \n                   ``` [{'status': 'success', 'provider': 'google' ... }, ] ```. <br> \n                  ";
      };
      readonly attributes_as_list: {
        readonly type: 'boolean';
        readonly default: false;
        readonly description: "Optional : When set to **false** (default) the structure of the extracted items is list of objects having different attributes : <br>\n     ```{'items': [{'attribute_1': 'x1','attribute_2': 'y2'}, ... ]}``` <br>\n     When it is set to **true**, the response contains an object with each attribute as a list : <br>\n     ```{ 'attribute_1': ['x1','x2', ...], 'attribute_2': [y1, y2, ...]}``` ";
      };
      readonly show_original_response: {
        readonly type: 'boolean';
        readonly default: false;
        readonly description: 'Optional : Shows the original response of the provider.<br>\n        When set to **true**, a new attribute *original_response* will appear in the response object.';
      };
      readonly file: {
        readonly type: 'string';
        readonly format: 'binary';
        readonly description: 'File to analyse in binary format to be used with *content-type*: **multipart/form-data** <br> **Does not work with application/json !**';
        readonly pattern: '(?:jpg|jpeg|png|tiff)$';
      };
      readonly file_url: {
        readonly type: readonly ['string', 'null'];
        readonly format: 'uri';
        readonly description: 'File **URL** to analyse to be used with with *content-type*: **application/json**.';
        readonly examples: readonly ['http://edenai-resource-example.jpg'];
      };
    };
    readonly required: readonly ['providers'];
    readonly $schema: 'http://json-schema.org/draft-04/schema#';
  };
  readonly response: {
    readonly '200': {
      readonly properties: {
        readonly clarifai: {
          readonly required: readonly ['status'];
          readonly title: 'imagelogo_detectionLogoDetectionDataClass';
          readonly type: 'object';
          readonly properties: {
            readonly items: {
              readonly title: 'Items';
              readonly type: 'array';
              readonly items: {
                readonly required: readonly ['bounding_poly', 'description', 'score'];
                readonly title: 'LogoItem';
                readonly type: 'object';
                readonly properties: {
                  readonly bounding_poly: {
                    readonly required: readonly ['vertices'];
                    readonly title: 'LogoBoundingPoly';
                    readonly type: 'object';
                    readonly properties: {
                      readonly vertices: {
                        readonly title: 'Vertices';
                        readonly type: 'array';
                        readonly items: {
                          readonly required: readonly ['x', 'y'];
                          readonly title: 'LogoVertice';
                          readonly type: 'object';
                          readonly properties: {
                            readonly x: {
                              readonly title: 'X';
                              readonly type: 'integer';
                            };
                            readonly y: {
                              readonly title: 'Y';
                              readonly type: 'integer';
                            };
                          };
                        };
                      };
                    };
                  };
                  readonly description: {
                    readonly title: 'Description';
                    readonly type: 'string';
                  };
                  readonly score: {
                    readonly title: 'Score';
                    readonly type: 'integer';
                  };
                };
              };
            };
            readonly original_response: {
              readonly default: any;
              readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
              readonly title: 'Original Response';
            };
            readonly status: {
              readonly title: 'Status';
              readonly enum: readonly ['sucess', 'fail'];
              readonly type: 'string';
              readonly description: '`sucess` `fail`';
            };
          };
        };
        readonly smartclick: {
          readonly required: readonly ['status'];
          readonly title: 'imagelogo_detectionLogoDetectionDataClass';
          readonly type: 'object';
          readonly properties: {
            readonly items: {
              readonly title: 'Items';
              readonly type: 'array';
              readonly items: {
                readonly required: readonly ['bounding_poly', 'description', 'score'];
                readonly title: 'LogoItem';
                readonly type: 'object';
                readonly properties: {
                  readonly bounding_poly: {
                    readonly required: readonly ['vertices'];
                    readonly title: 'LogoBoundingPoly';
                    readonly type: 'object';
                    readonly properties: {
                      readonly vertices: {
                        readonly title: 'Vertices';
                        readonly type: 'array';
                        readonly items: {
                          readonly required: readonly ['x', 'y'];
                          readonly title: 'LogoVertice';
                          readonly type: 'object';
                          readonly properties: {
                            readonly x: {
                              readonly title: 'X';
                              readonly type: 'integer';
                            };
                            readonly y: {
                              readonly title: 'Y';
                              readonly type: 'integer';
                            };
                          };
                        };
                      };
                    };
                  };
                  readonly description: {
                    readonly title: 'Description';
                    readonly type: 'string';
                  };
                  readonly score: {
                    readonly title: 'Score';
                    readonly type: 'integer';
                  };
                };
              };
            };
            readonly original_response: {
              readonly default: any;
              readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
              readonly title: 'Original Response';
            };
            readonly status: {
              readonly title: 'Status';
              readonly enum: readonly ['sucess', 'fail'];
              readonly type: 'string';
              readonly description: '`sucess` `fail`';
            };
          };
        };
        readonly microsoft: {
          readonly required: readonly ['status'];
          readonly title: 'imagelogo_detectionLogoDetectionDataClass';
          readonly type: 'object';
          readonly properties: {
            readonly items: {
              readonly title: 'Items';
              readonly type: 'array';
              readonly items: {
                readonly required: readonly ['bounding_poly', 'description', 'score'];
                readonly title: 'LogoItem';
                readonly type: 'object';
                readonly properties: {
                  readonly bounding_poly: {
                    readonly required: readonly ['vertices'];
                    readonly title: 'LogoBoundingPoly';
                    readonly type: 'object';
                    readonly properties: {
                      readonly vertices: {
                        readonly title: 'Vertices';
                        readonly type: 'array';
                        readonly items: {
                          readonly required: readonly ['x', 'y'];
                          readonly title: 'LogoVertice';
                          readonly type: 'object';
                          readonly properties: {
                            readonly x: {
                              readonly title: 'X';
                              readonly type: 'integer';
                            };
                            readonly y: {
                              readonly title: 'Y';
                              readonly type: 'integer';
                            };
                          };
                        };
                      };
                    };
                  };
                  readonly description: {
                    readonly title: 'Description';
                    readonly type: 'string';
                  };
                  readonly score: {
                    readonly title: 'Score';
                    readonly type: 'integer';
                  };
                };
              };
            };
            readonly original_response: {
              readonly default: any;
              readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
              readonly title: 'Original Response';
            };
            readonly status: {
              readonly title: 'Status';
              readonly enum: readonly ['sucess', 'fail'];
              readonly type: 'string';
              readonly description: '`sucess` `fail`';
            };
          };
        };
        readonly api4ai: {
          readonly required: readonly ['status'];
          readonly title: 'imagelogo_detectionLogoDetectionDataClass';
          readonly type: 'object';
          readonly properties: {
            readonly items: {
              readonly title: 'Items';
              readonly type: 'array';
              readonly items: {
                readonly required: readonly ['bounding_poly', 'description', 'score'];
                readonly title: 'LogoItem';
                readonly type: 'object';
                readonly properties: {
                  readonly bounding_poly: {
                    readonly required: readonly ['vertices'];
                    readonly title: 'LogoBoundingPoly';
                    readonly type: 'object';
                    readonly properties: {
                      readonly vertices: {
                        readonly title: 'Vertices';
                        readonly type: 'array';
                        readonly items: {
                          readonly required: readonly ['x', 'y'];
                          readonly title: 'LogoVertice';
                          readonly type: 'object';
                          readonly properties: {
                            readonly x: {
                              readonly title: 'X';
                              readonly type: 'integer';
                            };
                            readonly y: {
                              readonly title: 'Y';
                              readonly type: 'integer';
                            };
                          };
                        };
                      };
                    };
                  };
                  readonly description: {
                    readonly title: 'Description';
                    readonly type: 'string';
                  };
                  readonly score: {
                    readonly title: 'Score';
                    readonly type: 'integer';
                  };
                };
              };
            };
            readonly original_response: {
              readonly default: any;
              readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
              readonly title: 'Original Response';
            };
            readonly status: {
              readonly title: 'Status';
              readonly enum: readonly ['sucess', 'fail'];
              readonly type: 'string';
              readonly description: '`sucess` `fail`';
            };
          };
        };
        readonly google: {
          readonly required: readonly ['status'];
          readonly title: 'imagelogo_detectionLogoDetectionDataClass';
          readonly type: 'object';
          readonly properties: {
            readonly items: {
              readonly title: 'Items';
              readonly type: 'array';
              readonly items: {
                readonly required: readonly ['bounding_poly', 'description', 'score'];
                readonly title: 'LogoItem';
                readonly type: 'object';
                readonly properties: {
                  readonly bounding_poly: {
                    readonly required: readonly ['vertices'];
                    readonly title: 'LogoBoundingPoly';
                    readonly type: 'object';
                    readonly properties: {
                      readonly vertices: {
                        readonly title: 'Vertices';
                        readonly type: 'array';
                        readonly items: {
                          readonly required: readonly ['x', 'y'];
                          readonly title: 'LogoVertice';
                          readonly type: 'object';
                          readonly properties: {
                            readonly x: {
                              readonly title: 'X';
                              readonly type: 'integer';
                            };
                            readonly y: {
                              readonly title: 'Y';
                              readonly type: 'integer';
                            };
                          };
                        };
                      };
                    };
                  };
                  readonly description: {
                    readonly title: 'Description';
                    readonly type: 'string';
                  };
                  readonly score: {
                    readonly title: 'Score';
                    readonly type: 'integer';
                  };
                };
              };
            };
            readonly original_response: {
              readonly default: any;
              readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
              readonly title: 'Original Response';
            };
            readonly status: {
              readonly title: 'Status';
              readonly enum: readonly ['sucess', 'fail'];
              readonly type: 'string';
              readonly description: '`sucess` `fail`';
            };
          };
        };
      };
      readonly title: 'imagelogo_detectionResponseModel';
      readonly type: 'object';
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '400': {
      readonly type: 'object';
      readonly properties: {
        readonly error: {
          readonly type: 'object';
          readonly properties: {
            readonly type: {
              readonly type: 'string';
            };
            readonly message: {
              readonly type: 'object';
              readonly properties: {
                readonly '<parameter_name>': {
                  readonly type: 'array';
                  readonly items: {
                    readonly type: 'string';
                  };
                };
              };
              readonly required: readonly ['<parameter_name>'];
            };
          };
          readonly required: readonly ['message', 'type'];
        };
      };
      readonly required: readonly ['error'];
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '403': {
      readonly type: 'object';
      readonly properties: {
        readonly error: {
          readonly type: 'object';
          readonly properties: {
            readonly type: {
              readonly type: 'string';
            };
            readonly message: {
              readonly type: 'string';
            };
          };
          readonly required: readonly ['message', 'type'];
        };
      };
      readonly required: readonly ['error'];
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '404': {
      readonly type: 'object';
      readonly properties: {
        readonly details: {
          readonly type: 'string';
          readonly default: 'Not Found';
        };
      };
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '500': {
      readonly type: 'object';
      readonly properties: {
        readonly error: {
          readonly type: 'object';
          readonly properties: {
            readonly type: {
              readonly type: 'string';
            };
            readonly message: {
              readonly type: 'string';
            };
          };
          readonly required: readonly ['message', 'type'];
        };
      };
      readonly required: readonly ['error'];
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
  };
};
declare const ImageObjectDetectionCreate: {
  readonly body: {
    readonly type: 'object';
    readonly properties: {
      readonly providers: {
        readonly type: 'string';
        readonly minLength: 1;
        readonly description: "It can be one (ex: **'amazon'** or **'google'**) or multiple provider(s) (ex: **'amazon,microsoft,google'**)             that the data will be redirected to in order to get the processed results.";
        readonly examples: readonly ['api4ai,clarifai,amazon,google,microsoft,sentisight'];
      };
      readonly fallback_providers: {
        readonly type: 'string';
        readonly minLength: 1;
        readonly description: "Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.\n    To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.\n\nThey will be tried in the same order they are input, and it will stop to the first provider who doesn't fail.\n\n\n*Doesn't work with async subfeatures.*\n    ";
      };
      readonly response_as_dict: {
        readonly type: 'boolean';
        readonly default: true;
        readonly description: "Optional : When set to **true** (default), the response is an object of responses with providers names as keys : <br> \n                  ``` {'google' : { 'status': 'success', ... }, } ``` <br>\n                When set to **false** the response structure is a list of response objects : <br> \n                   ``` [{'status': 'success', 'provider': 'google' ... }, ] ```. <br> \n                  ";
      };
      readonly attributes_as_list: {
        readonly type: 'boolean';
        readonly default: false;
        readonly description: "Optional : When set to **false** (default) the structure of the extracted items is list of objects having different attributes : <br>\n     ```{'items': [{'attribute_1': 'x1','attribute_2': 'y2'}, ... ]}``` <br>\n     When it is set to **true**, the response contains an object with each attribute as a list : <br>\n     ```{ 'attribute_1': ['x1','x2', ...], 'attribute_2': [y1, y2, ...]}``` ";
      };
      readonly show_original_response: {
        readonly type: 'boolean';
        readonly default: false;
        readonly description: 'Optional : Shows the original response of the provider.<br>\n        When set to **true**, a new attribute *original_response* will appear in the response object.';
      };
      readonly settings: {
        readonly type: readonly ['object', 'null'];
        readonly additionalProperties: {
          readonly type: 'string';
          readonly minLength: 1;
          readonly description: 'The model id/name specified for the provider';
          readonly maxLength: 50;
        };
        readonly description: "A dictionnary or a json object to specify specific models to use for some providers. <br>                     It can be in the following format: {'google' : 'google_model', ibm': 'ibm_model'...}.\n                     **Caution**: setting models can be done only with `Content-Type` : `application/json`.\n                     ";
      };
      readonly file: {
        readonly type: 'string';
        readonly format: 'binary';
        readonly description: 'File to analyse in binary format to be used with *content-type*: **multipart/form-data** <br> **Does not work with application/json !**';
        readonly pattern: '(?:jpg|jpeg|png|tiff)$';
      };
      readonly file_url: {
        readonly type: readonly ['string', 'null'];
        readonly format: 'uri';
        readonly description: 'File **URL** to analyse to be used with with *content-type*: **application/json**.';
        readonly examples: readonly ['http://edenai-resource-example.png'];
      };
    };
    readonly required: readonly ['providers'];
    readonly $schema: 'http://json-schema.org/draft-04/schema#';
  };
  readonly response: {
    readonly '200': {
      readonly properties: {
        readonly clarifai: {
          readonly required: readonly ['status'];
          readonly title: 'imageobject_detectionObjectDetectionDataClass';
          readonly type: 'object';
          readonly properties: {
            readonly items: {
              readonly title: 'Items';
              readonly type: 'array';
              readonly items: {
                readonly required: readonly [
                  'label',
                  'confidence',
                  'x_min',
                  'x_max',
                  'y_min',
                  'y_max'
                ];
                readonly title: 'ObjectItem';
                readonly type: 'object';
                readonly properties: {
                  readonly label: {
                    readonly title: 'Label';
                    readonly type: 'string';
                  };
                  readonly confidence: {
                    readonly title: 'Confidence';
                    readonly type: 'integer';
                  };
                  readonly x_min: {
                    readonly title: 'X Min';
                    readonly type: 'integer';
                  };
                  readonly x_max: {
                    readonly title: 'X Max';
                    readonly type: 'integer';
                  };
                  readonly y_min: {
                    readonly title: 'Y Min';
                    readonly type: 'integer';
                  };
                  readonly y_max: {
                    readonly title: 'Y Max';
                    readonly type: 'integer';
                  };
                };
              };
            };
            readonly original_response: {
              readonly default: any;
              readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
              readonly title: 'Original Response';
            };
            readonly status: {
              readonly title: 'Status';
              readonly enum: readonly ['sucess', 'fail'];
              readonly type: 'string';
              readonly description: '`sucess` `fail`';
            };
          };
        };
        readonly microsoft: {
          readonly required: readonly ['status'];
          readonly title: 'imageobject_detectionObjectDetectionDataClass';
          readonly type: 'object';
          readonly properties: {
            readonly items: {
              readonly title: 'Items';
              readonly type: 'array';
              readonly items: {
                readonly required: readonly [
                  'label',
                  'confidence',
                  'x_min',
                  'x_max',
                  'y_min',
                  'y_max'
                ];
                readonly title: 'ObjectItem';
                readonly type: 'object';
                readonly properties: {
                  readonly label: {
                    readonly title: 'Label';
                    readonly type: 'string';
                  };
                  readonly confidence: {
                    readonly title: 'Confidence';
                    readonly type: 'integer';
                  };
                  readonly x_min: {
                    readonly title: 'X Min';
                    readonly type: 'integer';
                  };
                  readonly x_max: {
                    readonly title: 'X Max';
                    readonly type: 'integer';
                  };
                  readonly y_min: {
                    readonly title: 'Y Min';
                    readonly type: 'integer';
                  };
                  readonly y_max: {
                    readonly title: 'Y Max';
                    readonly type: 'integer';
                  };
                };
              };
            };
            readonly original_response: {
              readonly default: any;
              readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
              readonly title: 'Original Response';
            };
            readonly status: {
              readonly title: 'Status';
              readonly enum: readonly ['sucess', 'fail'];
              readonly type: 'string';
              readonly description: '`sucess` `fail`';
            };
          };
        };
        readonly api4ai: {
          readonly required: readonly ['status'];
          readonly title: 'imageobject_detectionObjectDetectionDataClass';
          readonly type: 'object';
          readonly properties: {
            readonly items: {
              readonly title: 'Items';
              readonly type: 'array';
              readonly items: {
                readonly required: readonly [
                  'label',
                  'confidence',
                  'x_min',
                  'x_max',
                  'y_min',
                  'y_max'
                ];
                readonly title: 'ObjectItem';
                readonly type: 'object';
                readonly properties: {
                  readonly label: {
                    readonly title: 'Label';
                    readonly type: 'string';
                  };
                  readonly confidence: {
                    readonly title: 'Confidence';
                    readonly type: 'integer';
                  };
                  readonly x_min: {
                    readonly title: 'X Min';
                    readonly type: 'integer';
                  };
                  readonly x_max: {
                    readonly title: 'X Max';
                    readonly type: 'integer';
                  };
                  readonly y_min: {
                    readonly title: 'Y Min';
                    readonly type: 'integer';
                  };
                  readonly y_max: {
                    readonly title: 'Y Max';
                    readonly type: 'integer';
                  };
                };
              };
            };
            readonly original_response: {
              readonly default: any;
              readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
              readonly title: 'Original Response';
            };
            readonly status: {
              readonly title: 'Status';
              readonly enum: readonly ['sucess', 'fail'];
              readonly type: 'string';
              readonly description: '`sucess` `fail`';
            };
          };
        };
        readonly google: {
          readonly required: readonly ['status'];
          readonly title: 'imageobject_detectionObjectDetectionDataClass';
          readonly type: 'object';
          readonly properties: {
            readonly items: {
              readonly title: 'Items';
              readonly type: 'array';
              readonly items: {
                readonly required: readonly [
                  'label',
                  'confidence',
                  'x_min',
                  'x_max',
                  'y_min',
                  'y_max'
                ];
                readonly title: 'ObjectItem';
                readonly type: 'object';
                readonly properties: {
                  readonly label: {
                    readonly title: 'Label';
                    readonly type: 'string';
                  };
                  readonly confidence: {
                    readonly title: 'Confidence';
                    readonly type: 'integer';
                  };
                  readonly x_min: {
                    readonly title: 'X Min';
                    readonly type: 'integer';
                  };
                  readonly x_max: {
                    readonly title: 'X Max';
                    readonly type: 'integer';
                  };
                  readonly y_min: {
                    readonly title: 'Y Min';
                    readonly type: 'integer';
                  };
                  readonly y_max: {
                    readonly title: 'Y Max';
                    readonly type: 'integer';
                  };
                };
              };
            };
            readonly original_response: {
              readonly default: any;
              readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
              readonly title: 'Original Response';
            };
            readonly status: {
              readonly title: 'Status';
              readonly enum: readonly ['sucess', 'fail'];
              readonly type: 'string';
              readonly description: '`sucess` `fail`';
            };
          };
        };
        readonly sentisight: {
          readonly required: readonly ['status'];
          readonly title: 'imageobject_detectionObjectDetectionDataClass';
          readonly type: 'object';
          readonly properties: {
            readonly items: {
              readonly title: 'Items';
              readonly type: 'array';
              readonly items: {
                readonly required: readonly [
                  'label',
                  'confidence',
                  'x_min',
                  'x_max',
                  'y_min',
                  'y_max'
                ];
                readonly title: 'ObjectItem';
                readonly type: 'object';
                readonly properties: {
                  readonly label: {
                    readonly title: 'Label';
                    readonly type: 'string';
                  };
                  readonly confidence: {
                    readonly title: 'Confidence';
                    readonly type: 'integer';
                  };
                  readonly x_min: {
                    readonly title: 'X Min';
                    readonly type: 'integer';
                  };
                  readonly x_max: {
                    readonly title: 'X Max';
                    readonly type: 'integer';
                  };
                  readonly y_min: {
                    readonly title: 'Y Min';
                    readonly type: 'integer';
                  };
                  readonly y_max: {
                    readonly title: 'Y Max';
                    readonly type: 'integer';
                  };
                };
              };
            };
            readonly original_response: {
              readonly default: any;
              readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
              readonly title: 'Original Response';
            };
            readonly status: {
              readonly title: 'Status';
              readonly enum: readonly ['sucess', 'fail'];
              readonly type: 'string';
              readonly description: '`sucess` `fail`';
            };
          };
        };
        readonly amazon: {
          readonly required: readonly ['status'];
          readonly title: 'imageobject_detectionObjectDetectionDataClass';
          readonly type: 'object';
          readonly properties: {
            readonly items: {
              readonly title: 'Items';
              readonly type: 'array';
              readonly items: {
                readonly required: readonly [
                  'label',
                  'confidence',
                  'x_min',
                  'x_max',
                  'y_min',
                  'y_max'
                ];
                readonly title: 'ObjectItem';
                readonly type: 'object';
                readonly properties: {
                  readonly label: {
                    readonly title: 'Label';
                    readonly type: 'string';
                  };
                  readonly confidence: {
                    readonly title: 'Confidence';
                    readonly type: 'integer';
                  };
                  readonly x_min: {
                    readonly title: 'X Min';
                    readonly type: 'integer';
                  };
                  readonly x_max: {
                    readonly title: 'X Max';
                    readonly type: 'integer';
                  };
                  readonly y_min: {
                    readonly title: 'Y Min';
                    readonly type: 'integer';
                  };
                  readonly y_max: {
                    readonly title: 'Y Max';
                    readonly type: 'integer';
                  };
                };
              };
            };
            readonly original_response: {
              readonly default: any;
              readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
              readonly title: 'Original Response';
            };
            readonly status: {
              readonly title: 'Status';
              readonly enum: readonly ['sucess', 'fail'];
              readonly type: 'string';
              readonly description: '`sucess` `fail`';
            };
          };
        };
        readonly 'eden-ai': {
          readonly required: readonly ['status'];
          readonly title: 'imageobject_detectionObjectDetectionDataClass';
          readonly type: 'object';
          readonly properties: {
            readonly items: {
              readonly title: 'Items';
              readonly type: 'array';
              readonly items: {
                readonly required: readonly [
                  'label',
                  'confidence',
                  'x_min',
                  'x_max',
                  'y_min',
                  'y_max'
                ];
                readonly title: 'ObjectItem';
                readonly type: 'object';
                readonly properties: {
                  readonly label: {
                    readonly title: 'Label';
                    readonly type: 'string';
                  };
                  readonly confidence: {
                    readonly title: 'Confidence';
                    readonly type: 'integer';
                  };
                  readonly x_min: {
                    readonly title: 'X Min';
                    readonly type: 'integer';
                  };
                  readonly x_max: {
                    readonly title: 'X Max';
                    readonly type: 'integer';
                  };
                  readonly y_min: {
                    readonly title: 'Y Min';
                    readonly type: 'integer';
                  };
                  readonly y_max: {
                    readonly title: 'Y Max';
                    readonly type: 'integer';
                  };
                };
              };
            };
            readonly original_response: {
              readonly default: any;
              readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
              readonly title: 'Original Response';
            };
            readonly status: {
              readonly title: 'Status';
              readonly enum: readonly ['sucess', 'fail'];
              readonly type: 'string';
              readonly description: '`sucess` `fail`';
            };
          };
        };
      };
      readonly title: 'imageobject_detectionResponseModel';
      readonly type: 'object';
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '400': {
      readonly type: 'object';
      readonly properties: {
        readonly error: {
          readonly type: 'object';
          readonly properties: {
            readonly type: {
              readonly type: 'string';
            };
            readonly message: {
              readonly type: 'object';
              readonly properties: {
                readonly '<parameter_name>': {
                  readonly type: 'array';
                  readonly items: {
                    readonly type: 'string';
                  };
                };
              };
              readonly required: readonly ['<parameter_name>'];
            };
          };
          readonly required: readonly ['message', 'type'];
        };
      };
      readonly required: readonly ['error'];
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '403': {
      readonly type: 'object';
      readonly properties: {
        readonly error: {
          readonly type: 'object';
          readonly properties: {
            readonly type: {
              readonly type: 'string';
            };
            readonly message: {
              readonly type: 'string';
            };
          };
          readonly required: readonly ['message', 'type'];
        };
      };
      readonly required: readonly ['error'];
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '404': {
      readonly type: 'object';
      readonly properties: {
        readonly details: {
          readonly type: 'string';
          readonly default: 'Not Found';
        };
      };
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '500': {
      readonly type: 'object';
      readonly properties: {
        readonly error: {
          readonly type: 'object';
          readonly properties: {
            readonly type: {
              readonly type: 'string';
            };
            readonly message: {
              readonly type: 'string';
            };
          };
          readonly required: readonly ['message', 'type'];
        };
      };
      readonly required: readonly ['error'];
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
  };
};
declare const ImageSearchDeleteImageCreate: {
  readonly body: {
    readonly type: 'object';
    readonly properties: {
      readonly providers: {
        readonly type: 'string';
        readonly minLength: 1;
        readonly description: "It can be one (ex: **'amazon'** or **'google'**) or multiple provider(s) (ex: **'amazon,microsoft,google'**)             that the data will be redirected to in order to get the processed results.";
        readonly examples: readonly ['sentisight,sentisight,sentisight,sentisight,sentisight'];
      };
      readonly fallback_providers: {
        readonly type: 'string';
        readonly minLength: 1;
        readonly description: "Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.\n    To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.\n\nThey will be tried in the same order they are input, and it will stop to the first provider who doesn't fail.\n\n\n*Doesn't work with async subfeatures.*\n    ";
      };
      readonly response_as_dict: {
        readonly type: 'boolean';
        readonly default: true;
        readonly description: "Optional : When set to **true** (default), the response is an object of responses with providers names as keys : <br> \n                  ``` {'google' : { 'status': 'success', ... }, } ``` <br>\n                When set to **false** the response structure is a list of response objects : <br> \n                   ``` [{'status': 'success', 'provider': 'google' ... }, ] ```. <br> \n                  ";
      };
      readonly attributes_as_list: {
        readonly type: 'boolean';
        readonly default: false;
        readonly description: "Optional : When set to **false** (default) the structure of the extracted items is list of objects having different attributes : <br>\n     ```{'items': [{'attribute_1': 'x1','attribute_2': 'y2'}, ... ]}``` <br>\n     When it is set to **true**, the response contains an object with each attribute as a list : <br>\n     ```{ 'attribute_1': ['x1','x2', ...], 'attribute_2': [y1, y2, ...]}``` ";
      };
      readonly show_original_response: {
        readonly type: 'boolean';
        readonly default: false;
        readonly description: 'Optional : Shows the original response of the provider.<br>\n        When set to **true**, a new attribute *original_response* will appear in the response object.';
      };
      readonly image_name: {
        readonly type: 'string';
        readonly minLength: 1;
        readonly examples: readonly ['test.jpg'];
      };
    };
    readonly required: readonly ['image_name', 'providers'];
    readonly $schema: 'http://json-schema.org/draft-04/schema#';
  };
  readonly response: {
    readonly '200': {
      readonly properties: {
        readonly sentisight: {
          readonly required: readonly ['status'];
          readonly title: 'imagesearchSearchDeleteImageDataClass';
          readonly type: 'object';
          readonly properties: {
            readonly status: {
              readonly title: 'Status';
              readonly enum: readonly ['sucess', 'fail'];
              readonly type: 'string';
              readonly description: '`sucess` `fail`';
            };
            readonly original_response: {
              readonly default: any;
              readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
              readonly title: 'Original Response';
            };
          };
        };
      };
      readonly title: 'imagesearchResponseModel';
      readonly type: 'object';
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '400': {
      readonly type: 'object';
      readonly properties: {
        readonly error: {
          readonly type: 'object';
          readonly properties: {
            readonly type: {
              readonly type: 'string';
            };
            readonly message: {
              readonly type: 'object';
              readonly properties: {
                readonly '<parameter_name>': {
                  readonly type: 'array';
                  readonly items: {
                    readonly type: 'string';
                  };
                };
              };
              readonly required: readonly ['<parameter_name>'];
            };
          };
          readonly required: readonly ['message', 'type'];
        };
      };
      readonly required: readonly ['error'];
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '403': {
      readonly type: 'object';
      readonly properties: {
        readonly error: {
          readonly type: 'object';
          readonly properties: {
            readonly type: {
              readonly type: 'string';
            };
            readonly message: {
              readonly type: 'string';
            };
          };
          readonly required: readonly ['message', 'type'];
        };
      };
      readonly required: readonly ['error'];
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '404': {
      readonly type: 'object';
      readonly properties: {
        readonly details: {
          readonly type: 'string';
          readonly default: 'Not Found';
        };
      };
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '500': {
      readonly type: 'object';
      readonly properties: {
        readonly error: {
          readonly type: 'object';
          readonly properties: {
            readonly type: {
              readonly type: 'string';
            };
            readonly message: {
              readonly type: 'string';
            };
          };
          readonly required: readonly ['message', 'type'];
        };
      };
      readonly required: readonly ['error'];
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
  };
};
declare const ImageSearchGetImageRetrieve: {
  readonly metadata: {
    readonly allOf: readonly [
      {
        readonly type: 'object';
        readonly properties: {
          readonly attributes_as_list: {
            readonly type: 'boolean';
            readonly default: false;
            readonly $schema: 'http://json-schema.org/draft-04/schema#';
            readonly description: "Optional : When set to **false** (default) the structure of the extracted items is list of objects having different attributes : <br>\n     ```{'items': [{'attribute_1': 'x1','attribute_2': 'y2'}, ... ]}``` <br>\n     When it is set to **true**, the response contains an object with each attribute as a list : <br>\n     ```{ 'attribute_1': ['x1','x2', ...], 'attribute_2': [y1, y2, ...]}``` ";
          };
          readonly fallback_providers: {
            readonly type: 'string';
            readonly minLength: 1;
            readonly $schema: 'http://json-schema.org/draft-04/schema#';
            readonly description: "Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.\n    To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.\n\nThey will be tried in the same order they are input, and it will stop to the first provider who doesn't fail.\n\n\n*Doesn't work with async subfeatures.*\n    ";
          };
          readonly image_name: {
            readonly type: 'string';
            readonly minLength: 1;
            readonly $schema: 'http://json-schema.org/draft-04/schema#';
          };
          readonly providers: {
            readonly type: 'string';
            readonly minLength: 1;
            readonly $schema: 'http://json-schema.org/draft-04/schema#';
            readonly description: "It can be one (ex: **'amazon'** or **'google'**) or multiple provider(s) (ex: **'amazon,microsoft,google'**)             that the data will be redirected to in order to get the processed results.";
          };
          readonly response_as_dict: {
            readonly type: 'boolean';
            readonly default: true;
            readonly $schema: 'http://json-schema.org/draft-04/schema#';
            readonly description: "Optional : When set to **true** (default), the response is an object of responses with providers names as keys : <br> \n                  ``` {'google' : { 'status': 'success', ... }, } ``` <br>\n                When set to **false** the response structure is a list of response objects : <br> \n                   ``` [{'status': 'success', 'provider': 'google' ... }, ] ```. <br> \n                  ";
          };
          readonly show_original_response: {
            readonly type: 'boolean';
            readonly default: false;
            readonly $schema: 'http://json-schema.org/draft-04/schema#';
            readonly description: 'Optional : Shows the original response of the provider.<br>\n        When set to **true**, a new attribute *original_response* will appear in the response object.';
          };
        };
        readonly required: readonly ['image_name', 'providers'];
      }
    ];
  };
  readonly response: {
    readonly '200': {
      readonly properties: {
        readonly sentisight: {
          readonly required: readonly ['status'];
          readonly title: 'imagesearchSearchDeleteImageDataClass';
          readonly type: 'object';
          readonly properties: {
            readonly status: {
              readonly title: 'Status';
              readonly enum: readonly ['sucess', 'fail'];
              readonly type: 'string';
              readonly description: '`sucess` `fail`';
            };
            readonly original_response: {
              readonly default: any;
              readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
              readonly title: 'Original Response';
            };
          };
        };
      };
      readonly title: 'imagesearchResponseModel';
      readonly type: 'object';
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '400': {
      readonly type: 'object';
      readonly properties: {
        readonly error: {
          readonly type: 'object';
          readonly properties: {
            readonly type: {
              readonly type: 'string';
            };
            readonly message: {
              readonly type: 'object';
              readonly properties: {
                readonly '<parameter_name>': {
                  readonly type: 'array';
                  readonly items: {
                    readonly type: 'string';
                  };
                };
              };
              readonly required: readonly ['<parameter_name>'];
            };
          };
          readonly required: readonly ['message', 'type'];
        };
      };
      readonly required: readonly ['error'];
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '403': {
      readonly type: 'object';
      readonly properties: {
        readonly error: {
          readonly type: 'object';
          readonly properties: {
            readonly type: {
              readonly type: 'string';
            };
            readonly message: {
              readonly type: 'string';
            };
          };
          readonly required: readonly ['message', 'type'];
        };
      };
      readonly required: readonly ['error'];
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '404': {
      readonly type: 'object';
      readonly properties: {
        readonly details: {
          readonly type: 'string';
          readonly default: 'Not Found';
        };
      };
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '500': {
      readonly type: 'object';
      readonly properties: {
        readonly error: {
          readonly type: 'object';
          readonly properties: {
            readonly type: {
              readonly type: 'string';
            };
            readonly message: {
              readonly type: 'string';
            };
          };
          readonly required: readonly ['message', 'type'];
        };
      };
      readonly required: readonly ['error'];
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
  };
};
declare const ImageSearchGetImagesRetrieve: {
  readonly metadata: {
    readonly allOf: readonly [
      {
        readonly type: 'object';
        readonly properties: {
          readonly attributes_as_list: {
            readonly type: 'boolean';
            readonly default: false;
            readonly $schema: 'http://json-schema.org/draft-04/schema#';
            readonly description: "Optional : When set to **false** (default) the structure of the extracted items is list of objects having different attributes : <br>\n     ```{'items': [{'attribute_1': 'x1','attribute_2': 'y2'}, ... ]}``` <br>\n     When it is set to **true**, the response contains an object with each attribute as a list : <br>\n     ```{ 'attribute_1': ['x1','x2', ...], 'attribute_2': [y1, y2, ...]}``` ";
          };
          readonly fallback_providers: {
            readonly type: 'string';
            readonly minLength: 1;
            readonly $schema: 'http://json-schema.org/draft-04/schema#';
            readonly description: "Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.\n    To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.\n\nThey will be tried in the same order they are input, and it will stop to the first provider who doesn't fail.\n\n\n*Doesn't work with async subfeatures.*\n    ";
          };
          readonly providers: {
            readonly type: 'string';
            readonly minLength: 1;
            readonly $schema: 'http://json-schema.org/draft-04/schema#';
            readonly description: "It can be one (ex: **'amazon'** or **'google'**) or multiple provider(s) (ex: **'amazon,microsoft,google'**)             that the data will be redirected to in order to get the processed results.";
          };
          readonly response_as_dict: {
            readonly type: 'boolean';
            readonly default: true;
            readonly $schema: 'http://json-schema.org/draft-04/schema#';
            readonly description: "Optional : When set to **true** (default), the response is an object of responses with providers names as keys : <br> \n                  ``` {'google' : { 'status': 'success', ... }, } ``` <br>\n                When set to **false** the response structure is a list of response objects : <br> \n                   ``` [{'status': 'success', 'provider': 'google' ... }, ] ```. <br> \n                  ";
          };
          readonly show_original_response: {
            readonly type: 'boolean';
            readonly default: false;
            readonly $schema: 'http://json-schema.org/draft-04/schema#';
            readonly description: 'Optional : Shows the original response of the provider.<br>\n        When set to **true**, a new attribute *original_response* will appear in the response object.';
          };
        };
        readonly required: readonly ['providers'];
      }
    ];
  };
  readonly response: {
    readonly '200': {
      readonly properties: {
        readonly sentisight: {
          readonly required: readonly ['status'];
          readonly title: 'imagesearchSearchDeleteImageDataClass';
          readonly type: 'object';
          readonly properties: {
            readonly status: {
              readonly title: 'Status';
              readonly enum: readonly ['sucess', 'fail'];
              readonly type: 'string';
              readonly description: '`sucess` `fail`';
            };
            readonly original_response: {
              readonly default: any;
              readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
              readonly title: 'Original Response';
            };
          };
        };
      };
      readonly title: 'imagesearchResponseModel';
      readonly type: 'object';
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '400': {
      readonly type: 'object';
      readonly properties: {
        readonly error: {
          readonly type: 'object';
          readonly properties: {
            readonly type: {
              readonly type: 'string';
            };
            readonly message: {
              readonly type: 'object';
              readonly properties: {
                readonly '<parameter_name>': {
                  readonly type: 'array';
                  readonly items: {
                    readonly type: 'string';
                  };
                };
              };
              readonly required: readonly ['<parameter_name>'];
            };
          };
          readonly required: readonly ['message', 'type'];
        };
      };
      readonly required: readonly ['error'];
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '403': {
      readonly type: 'object';
      readonly properties: {
        readonly error: {
          readonly type: 'object';
          readonly properties: {
            readonly type: {
              readonly type: 'string';
            };
            readonly message: {
              readonly type: 'string';
            };
          };
          readonly required: readonly ['message', 'type'];
        };
      };
      readonly required: readonly ['error'];
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '404': {
      readonly type: 'object';
      readonly properties: {
        readonly details: {
          readonly type: 'string';
          readonly default: 'Not Found';
        };
      };
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '500': {
      readonly type: 'object';
      readonly properties: {
        readonly error: {
          readonly type: 'object';
          readonly properties: {
            readonly type: {
              readonly type: 'string';
            };
            readonly message: {
              readonly type: 'string';
            };
          };
          readonly required: readonly ['message', 'type'];
        };
      };
      readonly required: readonly ['error'];
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
  };
};
declare const ImageSearchLaunchSimilarityCreate: {
  readonly body: {
    readonly type: 'object';
    readonly properties: {
      readonly providers: {
        readonly type: 'string';
        readonly minLength: 1;
        readonly description: "It can be one (ex: **'amazon'** or **'google'**) or multiple provider(s) (ex: **'amazon,microsoft,google'**)             that the data will be redirected to in order to get the processed results.";
        readonly examples: readonly ['sentisight,sentisight,sentisight,sentisight,sentisight'];
      };
      readonly fallback_providers: {
        readonly type: 'string';
        readonly minLength: 1;
        readonly description: "Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.\n    To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.\n\nThey will be tried in the same order they are input, and it will stop to the first provider who doesn't fail.\n\n\n*Doesn't work with async subfeatures.*\n    ";
      };
      readonly response_as_dict: {
        readonly type: 'boolean';
        readonly default: true;
        readonly description: "Optional : When set to **true** (default), the response is an object of responses with providers names as keys : <br> \n                  ``` {'google' : { 'status': 'success', ... }, } ``` <br>\n                When set to **false** the response structure is a list of response objects : <br> \n                   ``` [{'status': 'success', 'provider': 'google' ... }, ] ```. <br> \n                  ";
      };
      readonly attributes_as_list: {
        readonly type: 'boolean';
        readonly default: false;
        readonly description: "Optional : When set to **false** (default) the structure of the extracted items is list of objects having different attributes : <br>\n     ```{'items': [{'attribute_1': 'x1','attribute_2': 'y2'}, ... ]}``` <br>\n     When it is set to **true**, the response contains an object with each attribute as a list : <br>\n     ```{ 'attribute_1': ['x1','x2', ...], 'attribute_2': [y1, y2, ...]}``` ";
      };
      readonly show_original_response: {
        readonly type: 'boolean';
        readonly default: false;
        readonly description: 'Optional : Shows the original response of the provider.<br>\n        When set to **true**, a new attribute *original_response* will appear in the response object.';
      };
      readonly file: {
        readonly type: 'string';
        readonly format: 'binary';
        readonly description: 'File to analyse in binary format to be used with *content-type*: **multipart/form-data** <br> **Does not work with application/json !**';
        readonly pattern: '(?:jpg|jpeg|png|tiff)$';
      };
      readonly file_url: {
        readonly type: readonly ['string', 'null'];
        readonly format: 'uri';
        readonly description: 'File **URL** to analyse to be used with with *content-type*: **application/json**.';
        readonly examples: readonly ['http://edenai-resource-example.jpg'];
      };
    };
    readonly required: readonly ['providers'];
    readonly $schema: 'http://json-schema.org/draft-04/schema#';
  };
  readonly response: {
    readonly '200': {
      readonly properties: {
        readonly sentisight: {
          readonly required: readonly ['status'];
          readonly title: 'imagesearchSearchDeleteImageDataClass';
          readonly type: 'object';
          readonly properties: {
            readonly status: {
              readonly title: 'Status';
              readonly enum: readonly ['sucess', 'fail'];
              readonly type: 'string';
              readonly description: '`sucess` `fail`';
            };
            readonly original_response: {
              readonly default: any;
              readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
              readonly title: 'Original Response';
            };
          };
        };
      };
      readonly title: 'imagesearchResponseModel';
      readonly type: 'object';
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '400': {
      readonly type: 'object';
      readonly properties: {
        readonly error: {
          readonly type: 'object';
          readonly properties: {
            readonly type: {
              readonly type: 'string';
            };
            readonly message: {
              readonly type: 'object';
              readonly properties: {
                readonly '<parameter_name>': {
                  readonly type: 'array';
                  readonly items: {
                    readonly type: 'string';
                  };
                };
              };
              readonly required: readonly ['<parameter_name>'];
            };
          };
          readonly required: readonly ['message', 'type'];
        };
      };
      readonly required: readonly ['error'];
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '403': {
      readonly type: 'object';
      readonly properties: {
        readonly error: {
          readonly type: 'object';
          readonly properties: {
            readonly type: {
              readonly type: 'string';
            };
            readonly message: {
              readonly type: 'string';
            };
          };
          readonly required: readonly ['message', 'type'];
        };
      };
      readonly required: readonly ['error'];
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '404': {
      readonly type: 'object';
      readonly properties: {
        readonly details: {
          readonly type: 'string';
          readonly default: 'Not Found';
        };
      };
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '500': {
      readonly type: 'object';
      readonly properties: {
        readonly error: {
          readonly type: 'object';
          readonly properties: {
            readonly type: {
              readonly type: 'string';
            };
            readonly message: {
              readonly type: 'string';
            };
          };
          readonly required: readonly ['message', 'type'];
        };
      };
      readonly required: readonly ['error'];
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
  };
};
declare const ImageSearchUploadImageCreate: {
  readonly body: {
    readonly type: 'object';
    readonly properties: {
      readonly providers: {
        readonly type: 'string';
        readonly minLength: 1;
        readonly description: "It can be one (ex: **'amazon'** or **'google'**) or multiple provider(s) (ex: **'amazon,microsoft,google'**)             that the data will be redirected to in order to get the processed results.";
        readonly examples: readonly ['sentisight,sentisight,sentisight,sentisight,sentisight'];
      };
      readonly fallback_providers: {
        readonly type: 'string';
        readonly minLength: 1;
        readonly description: "Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.\n    To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.\n\nThey will be tried in the same order they are input, and it will stop to the first provider who doesn't fail.\n\n\n*Doesn't work with async subfeatures.*\n    ";
      };
      readonly response_as_dict: {
        readonly type: 'boolean';
        readonly default: true;
        readonly description: "Optional : When set to **true** (default), the response is an object of responses with providers names as keys : <br> \n                  ``` {'google' : { 'status': 'success', ... }, } ``` <br>\n                When set to **false** the response structure is a list of response objects : <br> \n                   ``` [{'status': 'success', 'provider': 'google' ... }, ] ```. <br> \n                  ";
      };
      readonly attributes_as_list: {
        readonly type: 'boolean';
        readonly default: false;
        readonly description: "Optional : When set to **false** (default) the structure of the extracted items is list of objects having different attributes : <br>\n     ```{'items': [{'attribute_1': 'x1','attribute_2': 'y2'}, ... ]}``` <br>\n     When it is set to **true**, the response contains an object with each attribute as a list : <br>\n     ```{ 'attribute_1': ['x1','x2', ...], 'attribute_2': [y1, y2, ...]}``` ";
      };
      readonly show_original_response: {
        readonly type: 'boolean';
        readonly default: false;
        readonly description: 'Optional : Shows the original response of the provider.<br>\n        When set to **true**, a new attribute *original_response* will appear in the response object.';
      };
      readonly file: {
        readonly type: 'string';
        readonly format: 'binary';
        readonly description: 'File to analyse in binary format to be used with *content-type*: **multipart/form-data** <br> **Does not work with application/json !**';
        readonly pattern: '(?:jpg|jpeg|png|tiff)$';
      };
      readonly file_url: {
        readonly type: readonly ['string', 'null'];
        readonly format: 'uri';
        readonly description: 'File **URL** to analyse to be used with with *content-type*: **application/json**.';
        readonly examples: readonly ['http://edenai-resource-example.jpg'];
      };
      readonly image_name: {
        readonly type: 'string';
        readonly minLength: 1;
        readonly examples: readonly ['test.jpg'];
      };
    };
    readonly required: readonly ['image_name', 'providers'];
    readonly $schema: 'http://json-schema.org/draft-04/schema#';
  };
  readonly response: {
    readonly '200': {
      readonly properties: {
        readonly sentisight: {
          readonly required: readonly ['status'];
          readonly title: 'imagesearchSearchDeleteImageDataClass';
          readonly type: 'object';
          readonly properties: {
            readonly status: {
              readonly title: 'Status';
              readonly enum: readonly ['sucess', 'fail'];
              readonly type: 'string';
              readonly description: '`sucess` `fail`';
            };
            readonly original_response: {
              readonly default: any;
              readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
              readonly title: 'Original Response';
            };
          };
        };
      };
      readonly title: 'imagesearchResponseModel';
      readonly type: 'object';
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '400': {
      readonly type: 'object';
      readonly properties: {
        readonly error: {
          readonly type: 'object';
          readonly properties: {
            readonly type: {
              readonly type: 'string';
            };
            readonly message: {
              readonly type: 'object';
              readonly properties: {
                readonly '<parameter_name>': {
                  readonly type: 'array';
                  readonly items: {
                    readonly type: 'string';
                  };
                };
              };
              readonly required: readonly ['<parameter_name>'];
            };
          };
          readonly required: readonly ['message', 'type'];
        };
      };
      readonly required: readonly ['error'];
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '403': {
      readonly type: 'object';
      readonly properties: {
        readonly error: {
          readonly type: 'object';
          readonly properties: {
            readonly type: {
              readonly type: 'string';
            };
            readonly message: {
              readonly type: 'string';
            };
          };
          readonly required: readonly ['message', 'type'];
        };
      };
      readonly required: readonly ['error'];
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '404': {
      readonly type: 'object';
      readonly properties: {
        readonly details: {
          readonly type: 'string';
          readonly default: 'Not Found';
        };
      };
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '500': {
      readonly type: 'object';
      readonly properties: {
        readonly error: {
          readonly type: 'object';
          readonly properties: {
            readonly type: {
              readonly type: 'string';
            };
            readonly message: {
              readonly type: 'string';
            };
          };
          readonly required: readonly ['message', 'type'];
        };
      };
      readonly required: readonly ['error'];
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
  };
};
declare const InfoProviderSubfeaturesList: {
  readonly metadata: {
    readonly allOf: readonly [
      {
        readonly type: 'object';
        readonly properties: {
          readonly feature__name: {
            readonly type: 'string';
            readonly $schema: 'http://json-schema.org/draft-04/schema#';
          };
          readonly gender: {
            readonly type: 'string';
            readonly $schema: 'http://json-schema.org/draft-04/schema#';
            readonly description: "Accepts two values: either 'male' or 'female'. Used to                              filter models voices for the text_to_speech subfeature";
          };
          readonly is_working: {
            readonly type: 'boolean';
            readonly $schema: 'http://json-schema.org/draft-04/schema#';
          };
          readonly language: {
            readonly type: 'string';
            readonly $schema: 'http://json-schema.org/draft-04/schema#';
            readonly description: 'languages [icontains]';
          };
          readonly phase__name: {
            readonly type: 'string';
            readonly $schema: 'http://json-schema.org/draft-04/schema#';
          };
          readonly provider__name: {
            readonly type: 'string';
            readonly $schema: 'http://json-schema.org/draft-04/schema#';
          };
          readonly subfeature__name: {
            readonly type: 'string';
            readonly $schema: 'http://json-schema.org/draft-04/schema#';
          };
        };
        readonly required: readonly [];
      }
    ];
  };
  readonly response: {
    readonly '200': {
      readonly type: 'array';
      readonly items: {
        readonly type: 'object';
        readonly properties: {
          readonly name: {
            readonly type: 'string';
            readonly readOnly: true;
          };
          readonly version: {
            readonly type: 'string';
            readonly readOnly: true;
          };
          readonly pricings: {
            readonly type: 'array';
            readonly items: {
              readonly type: 'object';
              readonly properties: {
                readonly model_name: {
                  readonly type: 'string';
                  readonly description: "Model name, default to 'default' if no models to chose from";
                  readonly maxLength: 255;
                };
                readonly price: {
                  readonly type: 'string';
                  readonly format: 'decimal';
                  readonly pattern: '^-?\\d{0,6}(?:\\.\\d{0,9})?$';
                };
                readonly price_unit_quantity: {
                  readonly type: 'integer';
                  readonly maximum: 2147483647;
                  readonly minimum: 0;
                };
                readonly min_price_quantity: {
                  readonly type: readonly ['integer', 'null'];
                  readonly maximum: 2147483647;
                  readonly minimum: 0;
                };
                readonly price_unit_type: {
                  readonly enum: readonly [
                    'file',
                    'image',
                    'page',
                    'size',
                    'request',
                    'seconde',
                    'minute',
                    'free',
                    'hour',
                    'char',
                    'token',
                    'exec_time',
                    'unknown'
                  ];
                  readonly type: 'string';
                  readonly description: '* `file` - File\n* `image` - Image\n* `page` - Page\n* `size` - Size\n* `request` - Request\n* `seconde` - Second\n* `minute` - Minute\n* `free` - Free\n* `hour` - Hour\n* `char` - Characters\n* `token` - Token\n* `exec_time` - Execution Time\n* `unknown` - Unknown\n\n`file` `image` `page` `size` `request` `seconde` `minute` `free` `hour` `char` `token` `exec_time` `unknown`';
                };
                readonly detail_type: {
                  readonly nullable: true;
                  readonly description: '(Optional) type of extra value, MUST be the same name as the feature parameter name. eg: resolution\n\n* `resolution` - Resolution';
                  readonly oneOf: readonly [
                    {
                      readonly enum: readonly ['resolution'];
                      readonly type: 'string';
                      readonly description: '* `resolution` - Resolution\n\n`resolution`';
                    },
                    {
                      readonly enum: readonly [''];
                    },
                    {
                      readonly enum: readonly [any];
                    }
                  ];
                };
                readonly detail_value: {
                  readonly type: readonly ['string', 'null'];
                  readonly description: '(Optional) extra value for detailed pricing, eg: 250x250 for resolution';
                  readonly maxLength: 255;
                };
                readonly get_detail_type_display: {
                  readonly type: 'string';
                  readonly readOnly: true;
                };
                readonly is_post_call: {
                  readonly type: 'boolean';
                };
              };
              readonly required: readonly ['get_detail_type_display'];
            };
          };
          readonly is_working: {
            readonly type: 'boolean';
          };
          readonly description_title: {
            readonly type: readonly ['string', 'null'];
            readonly maxLength: 100;
          };
          readonly description_content: {
            readonly type: readonly ['string', 'null'];
            readonly maxLength: 1000;
          };
          readonly provider: {
            readonly type: 'object';
            readonly properties: {
              readonly name: {
                readonly type: 'string';
                readonly maxLength: 255;
              };
              readonly fullname: {
                readonly type: readonly ['string', 'null'];
                readonly maxLength: 255;
              };
              readonly description: {
                readonly type: readonly ['string', 'null'];
                readonly maxLength: 1000;
              };
            };
            readonly required: readonly ['name'];
          };
          readonly feature: {
            readonly type: 'object';
            readonly properties: {
              readonly name: {
                readonly type: 'string';
                readonly maxLength: 255;
              };
              readonly fullname: {
                readonly type: readonly ['string', 'null'];
                readonly maxLength: 255;
              };
              readonly description: {
                readonly type: readonly ['string', 'null'];
                readonly maxLength: 1000;
              };
            };
            readonly required: readonly ['name'];
          };
          readonly subfeature: {
            readonly type: 'object';
            readonly properties: {
              readonly name: {
                readonly type: 'string';
                readonly maxLength: 255;
              };
              readonly fullname: {
                readonly type: readonly ['string', 'null'];
                readonly maxLength: 255;
              };
              readonly description: {
                readonly type: readonly ['string', 'null'];
                readonly maxLength: 1000;
              };
            };
            readonly required: readonly ['name'];
          };
          readonly constraints: {
            readonly type: 'object';
            readonly additionalProperties: true;
            readonly readOnly: true;
          };
          readonly models: {
            readonly type: 'object';
            readonly additionalProperties: true;
            readonly readOnly: true;
          };
          readonly languages: {
            readonly type: 'array';
            readonly items: {
              readonly type: 'object';
              readonly properties: {
                readonly language_name: {
                  readonly type: 'string';
                };
                readonly language_code: {
                  readonly type: 'string';
                };
              };
            };
            readonly readOnly: true;
          };
          readonly phase: {
            readonly type: 'string';
            readonly readOnly: true;
          };
        };
        readonly required: readonly [
          'constraints',
          'feature',
          'languages',
          'models',
          'name',
          'phase',
          'pricings',
          'provider',
          'subfeature',
          'version'
        ];
      };
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
  };
};
declare const OcrBankCheckParsingCreate: {
  readonly body: {
    readonly type: 'object';
    readonly properties: {
      readonly providers: {
        readonly type: 'string';
        readonly minLength: 1;
        readonly description: "It can be one (ex: **'amazon'** or **'google'**) or multiple provider(s) (ex: **'amazon,microsoft,google'**)             that the data will be redirected to in order to get the processed results.";
        readonly examples: readonly ['veryfi,base64'];
      };
      readonly fallback_providers: {
        readonly type: 'string';
        readonly minLength: 1;
        readonly description: "Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.\n    To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.\n\nThey will be tried in the same order they are input, and it will stop to the first provider who doesn't fail.\n\n\n*Doesn't work with async subfeatures.*\n    ";
      };
      readonly response_as_dict: {
        readonly type: 'boolean';
        readonly default: true;
        readonly description: "Optional : When set to **true** (default), the response is an object of responses with providers names as keys : <br> \n                  ``` {'google' : { 'status': 'success', ... }, } ``` <br>\n                When set to **false** the response structure is a list of response objects : <br> \n                   ``` [{'status': 'success', 'provider': 'google' ... }, ] ```. <br> \n                  ";
      };
      readonly attributes_as_list: {
        readonly type: 'boolean';
        readonly default: false;
        readonly description: "Optional : When set to **false** (default) the structure of the extracted items is list of objects having different attributes : <br>\n     ```{'items': [{'attribute_1': 'x1','attribute_2': 'y2'}, ... ]}``` <br>\n     When it is set to **true**, the response contains an object with each attribute as a list : <br>\n     ```{ 'attribute_1': ['x1','x2', ...], 'attribute_2': [y1, y2, ...]}``` ";
      };
      readonly show_original_response: {
        readonly type: 'boolean';
        readonly default: false;
        readonly description: 'Optional : Shows the original response of the provider.<br>\n        When set to **true**, a new attribute *original_response* will appear in the response object.';
      };
      readonly file: {
        readonly type: 'string';
        readonly format: 'binary';
        readonly description: 'File to analyse in binary format to be used with *content-type*: **multipart/form-data** <br> **Does not work with application/json !**';
      };
      readonly file_url: {
        readonly type: readonly ['string', 'null'];
        readonly format: 'uri';
        readonly description: 'File **URL** to analyse to be used with with *content-type*: **application/json**.';
        readonly examples: readonly ['http://edenai-resource-example.jpg'];
      };
    };
    readonly required: readonly ['providers'];
    readonly $schema: 'http://json-schema.org/draft-04/schema#';
  };
  readonly response: {
    readonly '200': {
      readonly properties: {
        readonly veryfi: {
          readonly required: readonly ['status'];
          readonly title: 'ocrbank_check_parsingBankCheckParsingDataClass';
          readonly type: 'object';
          readonly properties: {
            readonly extracted_data: {
              readonly title: 'Extracted Data';
              readonly type: 'array';
              readonly items: {
                readonly required: readonly [
                  'amount',
                  'amount_text',
                  'bank_address',
                  'bank_name',
                  'date',
                  'memo',
                  'payer_address',
                  'payer_name',
                  'receiver_address',
                  'receiver_name',
                  'currency',
                  'micr'
                ];
                readonly title: 'ItemBankCheckParsingDataClass';
                readonly type: 'object';
                readonly properties: {
                  readonly amount: {
                    readonly title: 'Amount';
                    readonly type: 'integer';
                  };
                  readonly amount_text: {
                    readonly title: 'Amount Text';
                    readonly type: 'string';
                  };
                  readonly bank_address: {
                    readonly title: 'Bank Address';
                    readonly type: 'string';
                  };
                  readonly bank_name: {
                    readonly title: 'Bank Name';
                    readonly type: 'string';
                  };
                  readonly date: {
                    readonly title: 'Date';
                    readonly type: 'string';
                  };
                  readonly memo: {
                    readonly title: 'Memo';
                    readonly type: 'string';
                  };
                  readonly payer_address: {
                    readonly title: 'Payer Address';
                    readonly type: 'string';
                  };
                  readonly payer_name: {
                    readonly title: 'Payer Name';
                    readonly type: 'string';
                  };
                  readonly receiver_address: {
                    readonly title: 'Receiver Address';
                    readonly type: 'string';
                  };
                  readonly receiver_name: {
                    readonly title: 'Receiver Name';
                    readonly type: 'string';
                  };
                  readonly currency: {
                    readonly title: 'Currency';
                    readonly type: 'string';
                  };
                  readonly micr: {
                    readonly required: readonly [
                      'raw',
                      'account_number',
                      'routing_number',
                      'serial_number',
                      'check_number'
                    ];
                    readonly title: 'MicrModel';
                    readonly type: 'object';
                    readonly properties: {
                      readonly raw: {
                        readonly title: 'Raw';
                        readonly type: 'string';
                      };
                      readonly account_number: {
                        readonly title: 'Account Number';
                        readonly type: 'string';
                      };
                      readonly routing_number: {
                        readonly title: 'Routing Number';
                        readonly type: 'string';
                      };
                      readonly serial_number: {
                        readonly title: 'Serial Number';
                        readonly type: 'string';
                      };
                      readonly check_number: {
                        readonly title: 'Check Number';
                        readonly type: 'string';
                      };
                    };
                  };
                };
              };
            };
            readonly original_response: {
              readonly default: any;
              readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
              readonly title: 'Original Response';
            };
            readonly status: {
              readonly title: 'Status';
              readonly enum: readonly ['sucess', 'fail'];
              readonly type: 'string';
              readonly description: '`sucess` `fail`';
            };
          };
        };
        readonly base64: {
          readonly required: readonly ['status'];
          readonly title: 'ocrbank_check_parsingBankCheckParsingDataClass';
          readonly type: 'object';
          readonly properties: {
            readonly extracted_data: {
              readonly title: 'Extracted Data';
              readonly type: 'array';
              readonly items: {
                readonly required: readonly [
                  'amount',
                  'amount_text',
                  'bank_address',
                  'bank_name',
                  'date',
                  'memo',
                  'payer_address',
                  'payer_name',
                  'receiver_address',
                  'receiver_name',
                  'currency',
                  'micr'
                ];
                readonly title: 'ItemBankCheckParsingDataClass';
                readonly type: 'object';
                readonly properties: {
                  readonly amount: {
                    readonly title: 'Amount';
                    readonly type: 'integer';
                  };
                  readonly amount_text: {
                    readonly title: 'Amount Text';
                    readonly type: 'string';
                  };
                  readonly bank_address: {
                    readonly title: 'Bank Address';
                    readonly type: 'string';
                  };
                  readonly bank_name: {
                    readonly title: 'Bank Name';
                    readonly type: 'string';
                  };
                  readonly date: {
                    readonly title: 'Date';
                    readonly type: 'string';
                  };
                  readonly memo: {
                    readonly title: 'Memo';
                    readonly type: 'string';
                  };
                  readonly payer_address: {
                    readonly title: 'Payer Address';
                    readonly type: 'string';
                  };
                  readonly payer_name: {
                    readonly title: 'Payer Name';
                    readonly type: 'string';
                  };
                  readonly receiver_address: {
                    readonly title: 'Receiver Address';
                    readonly type: 'string';
                  };
                  readonly receiver_name: {
                    readonly title: 'Receiver Name';
                    readonly type: 'string';
                  };
                  readonly currency: {
                    readonly title: 'Currency';
                    readonly type: 'string';
                  };
                  readonly micr: {
                    readonly required: readonly [
                      'raw',
                      'account_number',
                      'routing_number',
                      'serial_number',
                      'check_number'
                    ];
                    readonly title: 'MicrModel';
                    readonly type: 'object';
                    readonly properties: {
                      readonly raw: {
                        readonly title: 'Raw';
                        readonly type: 'string';
                      };
                      readonly account_number: {
                        readonly title: 'Account Number';
                        readonly type: 'string';
                      };
                      readonly routing_number: {
                        readonly title: 'Routing Number';
                        readonly type: 'string';
                      };
                      readonly serial_number: {
                        readonly title: 'Serial Number';
                        readonly type: 'string';
                      };
                      readonly check_number: {
                        readonly title: 'Check Number';
                        readonly type: 'string';
                      };
                    };
                  };
                };
              };
            };
            readonly original_response: {
              readonly default: any;
              readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
              readonly title: 'Original Response';
            };
            readonly status: {
              readonly title: 'Status';
              readonly enum: readonly ['sucess', 'fail'];
              readonly type: 'string';
              readonly description: '`sucess` `fail`';
            };
          };
        };
        readonly 'eden-ai': {
          readonly required: readonly ['status'];
          readonly title: 'ocrbank_check_parsingBankCheckParsingDataClass';
          readonly type: 'object';
          readonly properties: {
            readonly extracted_data: {
              readonly title: 'Extracted Data';
              readonly type: 'array';
              readonly items: {
                readonly required: readonly [
                  'amount',
                  'amount_text',
                  'bank_address',
                  'bank_name',
                  'date',
                  'memo',
                  'payer_address',
                  'payer_name',
                  'receiver_address',
                  'receiver_name',
                  'currency',
                  'micr'
                ];
                readonly title: 'ItemBankCheckParsingDataClass';
                readonly type: 'object';
                readonly properties: {
                  readonly amount: {
                    readonly title: 'Amount';
                    readonly type: 'integer';
                  };
                  readonly amount_text: {
                    readonly title: 'Amount Text';
                    readonly type: 'string';
                  };
                  readonly bank_address: {
                    readonly title: 'Bank Address';
                    readonly type: 'string';
                  };
                  readonly bank_name: {
                    readonly title: 'Bank Name';
                    readonly type: 'string';
                  };
                  readonly date: {
                    readonly title: 'Date';
                    readonly type: 'string';
                  };
                  readonly memo: {
                    readonly title: 'Memo';
                    readonly type: 'string';
                  };
                  readonly payer_address: {
                    readonly title: 'Payer Address';
                    readonly type: 'string';
                  };
                  readonly payer_name: {
                    readonly title: 'Payer Name';
                    readonly type: 'string';
                  };
                  readonly receiver_address: {
                    readonly title: 'Receiver Address';
                    readonly type: 'string';
                  };
                  readonly receiver_name: {
                    readonly title: 'Receiver Name';
                    readonly type: 'string';
                  };
                  readonly currency: {
                    readonly title: 'Currency';
                    readonly type: 'string';
                  };
                  readonly micr: {
                    readonly required: readonly [
                      'raw',
                      'account_number',
                      'routing_number',
                      'serial_number',
                      'check_number'
                    ];
                    readonly title: 'MicrModel';
                    readonly type: 'object';
                    readonly properties: {
                      readonly raw: {
                        readonly title: 'Raw';
                        readonly type: 'string';
                      };
                      readonly account_number: {
                        readonly title: 'Account Number';
                        readonly type: 'string';
                      };
                      readonly routing_number: {
                        readonly title: 'Routing Number';
                        readonly type: 'string';
                      };
                      readonly serial_number: {
                        readonly title: 'Serial Number';
                        readonly type: 'string';
                      };
                      readonly check_number: {
                        readonly title: 'Check Number';
                        readonly type: 'string';
                      };
                    };
                  };
                };
              };
            };
            readonly original_response: {
              readonly default: any;
              readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
              readonly title: 'Original Response';
            };
            readonly status: {
              readonly title: 'Status';
              readonly enum: readonly ['sucess', 'fail'];
              readonly type: 'string';
              readonly description: '`sucess` `fail`';
            };
          };
        };
      };
      readonly title: 'ocrbank_check_parsingResponseModel';
      readonly type: 'object';
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '400': {
      readonly type: 'object';
      readonly properties: {
        readonly error: {
          readonly type: 'object';
          readonly properties: {
            readonly type: {
              readonly type: 'string';
            };
            readonly message: {
              readonly type: 'object';
              readonly properties: {
                readonly '<parameter_name>': {
                  readonly type: 'array';
                  readonly items: {
                    readonly type: 'string';
                  };
                };
              };
              readonly required: readonly ['<parameter_name>'];
            };
          };
          readonly required: readonly ['message', 'type'];
        };
      };
      readonly required: readonly ['error'];
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '403': {
      readonly type: 'object';
      readonly properties: {
        readonly error: {
          readonly type: 'object';
          readonly properties: {
            readonly type: {
              readonly type: 'string';
            };
            readonly message: {
              readonly type: 'string';
            };
          };
          readonly required: readonly ['message', 'type'];
        };
      };
      readonly required: readonly ['error'];
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '404': {
      readonly type: 'object';
      readonly properties: {
        readonly details: {
          readonly type: 'string';
          readonly default: 'Not Found';
        };
      };
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '500': {
      readonly type: 'object';
      readonly properties: {
        readonly error: {
          readonly type: 'object';
          readonly properties: {
            readonly type: {
              readonly type: 'string';
            };
            readonly message: {
              readonly type: 'string';
            };
          };
          readonly required: readonly ['message', 'type'];
        };
      };
      readonly required: readonly ['error'];
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
  };
};
declare const OcrCustomDocumentParsingAsyncCreate: {
  readonly body: {
    readonly type: 'object';
    readonly properties: {
      readonly providers: {
        readonly type: 'string';
        readonly minLength: 1;
        readonly description: "It can be one (ex: **'amazon'** or **'google'**) or multiple provider(s) (ex: **'amazon,microsoft,google'**)             that the data will be redirected to in order to get the processed results.";
        readonly examples: readonly ['amazon'];
      };
      readonly fallback_providers: {
        readonly type: 'string';
        readonly minLength: 1;
        readonly description: "Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.\n    To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.\n\nThey will be tried in the same order they are input, and it will stop to the first provider who doesn't fail.\n\n\n*Doesn't work with async subfeatures.*\n    ";
      };
      readonly show_original_response: {
        readonly type: 'boolean';
        readonly default: false;
        readonly description: 'Optional : Shows the original response of the provider.<br>\n        When set to **true**, a new attribute *original_response* will appear in the response object.';
      };
      readonly webhook_receiver: {
        readonly type: 'string';
        readonly format: 'uri';
        readonly minLength: 1;
        readonly description: 'Webhook receiver should be a valid https URL (ex : https://your.listner.com/endpoint).             After the processing is done, the webhook endpoint will receive a POST request with the result.';
      };
      readonly users_webhook_parameters: {
        readonly type: 'object';
        readonly additionalProperties: true;
        readonly description: "Json data that contains of additional parameters that will be sent back to the webhook receiver             (ex: api key for security or client's data ID to link the result internally).             Will only be used when webhook_receiver is set.";
      };
      readonly file: {
        readonly type: 'string';
        readonly format: 'binary';
        readonly description: 'File to analyse in binary format to be used with *content-type*: **multipart/form-data** <br> **Does not work with application/json !**';
      };
      readonly file_url: {
        readonly type: readonly ['string', 'null'];
        readonly format: 'uri';
        readonly description: 'File **URL** to analyse to be used with with *content-type*: **application/json**.';
        readonly examples: readonly ['http://edenai-resource-example.pdf'];
      };
      readonly queries: {
        readonly type: 'string';
        readonly minLength: 1;
        readonly description: "Your queries need to be a list of dict containing the questions you want answered and the page to look for the information in :  '[{'query':'your query','pages':'your pages'},{'query':'your query','pages':'your pages'}]'";
        readonly examples: readonly [
          '[{"query" : "What is the person full-name","pages" : "1-*"},{"query" : "What is the first Adult Care experience?","pages" : "1"}]'
        ];
      };
    };
    readonly required: readonly ['providers', 'queries'];
    readonly $schema: 'http://json-schema.org/draft-04/schema#';
  };
  readonly response: {
    readonly '200': {
      readonly type: 'object';
      readonly properties: {
        readonly public_id: {
          readonly type: 'string';
          readonly format: 'uuid';
        };
      };
      readonly required: readonly ['public_id'];
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
  };
};
declare const OcrCustomDocumentParsingAsyncRetrieve: {
  readonly response: {
    readonly '200': {
      readonly type: 'object';
      readonly properties: {
        readonly jobs: {
          readonly type: 'array';
          readonly items: {
            readonly type: 'object';
            readonly properties: {
              readonly providers: {
                readonly type: 'string';
              };
              readonly nb: {
                readonly type: 'integer';
              };
              readonly nb_ok: {
                readonly type: 'integer';
              };
              readonly public_id: {
                readonly type: 'string';
                readonly format: 'uuid';
              };
              readonly state: {
                readonly enum: readonly ['finished', 'failed', 'Timeout error', 'processing'];
                readonly type: 'string';
                readonly description: '* `finished` - finished\n* `failed` - failed\n* `Timeout error` - Timeout error\n* `processing` - processing\n\n`finished` `failed` `Timeout error` `processing`';
              };
              readonly created_at: {
                readonly type: 'string';
                readonly format: 'date-time';
              };
            };
            readonly required: readonly [
              'created_at',
              'nb',
              'nb_ok',
              'providers',
              'public_id',
              'state'
            ];
          };
        };
      };
      readonly required: readonly ['jobs'];
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
  };
};
declare const OcrCustomDocumentParsingAsyncRetrieve2: {
  readonly metadata: {
    readonly allOf: readonly [
      {
        readonly type: 'object';
        readonly properties: {
          readonly public_id: {
            readonly type: 'string';
            readonly $schema: 'http://json-schema.org/draft-04/schema#';
          };
        };
        readonly required: readonly ['public_id'];
      },
      {
        readonly type: 'object';
        readonly properties: {
          readonly response_as_dict: {
            readonly type: 'boolean';
            readonly default: true;
            readonly $schema: 'http://json-schema.org/draft-04/schema#';
          };
          readonly show_original_response: {
            readonly type: 'boolean';
            readonly default: false;
            readonly $schema: 'http://json-schema.org/draft-04/schema#';
          };
        };
        readonly required: readonly [];
      }
    ];
  };
  readonly response: {
    readonly '200': {
      readonly properties: {
        readonly results: {
          readonly properties: {
            readonly amazon: {
              readonly required: readonly ['id', 'final_status'];
              readonly title: 'ocrcustom_document_parsing_asyncCustomDocumentParsingAsyncDataClass';
              readonly type: 'object';
              readonly properties: {
                readonly items: {
                  readonly title: 'Items';
                  readonly type: 'array';
                  readonly items: {
                    readonly required: readonly [
                      'confidence',
                      'value',
                      'query',
                      'bounding_box',
                      'page'
                    ];
                    readonly title: 'CustomDocumentParsingAsyncItem';
                    readonly type: 'object';
                    readonly properties: {
                      readonly confidence: {
                        readonly title: 'Confidence';
                        readonly type: 'integer';
                      };
                      readonly value: {
                        readonly title: 'Value';
                        readonly type: 'string';
                      };
                      readonly query: {
                        readonly title: 'Query';
                        readonly type: 'string';
                      };
                      readonly bounding_box: {
                        readonly required: readonly ['left', 'top', 'width', 'height'];
                        readonly title: 'CustomDocumentParsingAsyncBoundingBox';
                        readonly type: 'object';
                        readonly properties: {
                          readonly left: {
                            readonly title: 'Left';
                            readonly type: 'integer';
                          };
                          readonly top: {
                            readonly title: 'Top';
                            readonly type: 'integer';
                          };
                          readonly width: {
                            readonly title: 'Width';
                            readonly type: 'integer';
                          };
                          readonly height: {
                            readonly title: 'Height';
                            readonly type: 'integer';
                          };
                        };
                      };
                      readonly page: {
                        readonly title: 'Page';
                        readonly type: 'integer';
                      };
                    };
                  };
                };
                readonly original_response: {
                  readonly default: any;
                  readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
                  readonly title: 'Original Response';
                };
                readonly id: {
                  readonly title: 'Id';
                  readonly type: 'string';
                };
                readonly final_status: {
                  readonly title: 'Final Status';
                  readonly enum: readonly ['sucess', 'fail'];
                  readonly type: 'string';
                  readonly description: '`sucess` `fail`';
                };
                readonly error: {
                  readonly title: 'Error';
                  readonly type: 'object';
                  readonly additionalProperties: true;
                };
              };
            };
          };
          readonly title: 'ocrcustom_document_parsing_asyncModel';
          readonly type: 'object';
        };
        readonly error: {
          readonly title: 'Error';
          readonly type: 'string';
        };
        readonly public_id: {
          readonly format: 'uuid';
          readonly title: 'Public Id';
          readonly type: 'string';
        };
        readonly status: {
          readonly title: 'Status';
          readonly type: 'string';
        };
      };
      readonly required: readonly ['results', 'error', 'public_id', 'status'];
      readonly title: 'asyncocrcustom_document_parsing_asyncResponseModel';
      readonly type: 'object';
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '400': {
      readonly type: 'object';
      readonly properties: {
        readonly error: {
          readonly type: 'object';
          readonly properties: {
            readonly type: {
              readonly type: 'string';
            };
            readonly message: {
              readonly type: 'object';
              readonly properties: {
                readonly '<parameter_name>': {
                  readonly type: 'array';
                  readonly items: {
                    readonly type: 'string';
                  };
                };
              };
              readonly required: readonly ['<parameter_name>'];
            };
          };
          readonly required: readonly ['message', 'type'];
        };
      };
      readonly required: readonly ['error'];
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '403': {
      readonly type: 'object';
      readonly properties: {
        readonly error: {
          readonly type: 'object';
          readonly properties: {
            readonly type: {
              readonly type: 'string';
            };
            readonly message: {
              readonly type: 'string';
            };
          };
          readonly required: readonly ['message', 'type'];
        };
      };
      readonly required: readonly ['error'];
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '404': {
      readonly type: 'object';
      readonly properties: {
        readonly details: {
          readonly type: 'string';
          readonly default: 'Not Found';
        };
      };
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '500': {
      readonly type: 'object';
      readonly properties: {
        readonly error: {
          readonly type: 'object';
          readonly properties: {
            readonly type: {
              readonly type: 'string';
            };
            readonly message: {
              readonly type: 'string';
            };
          };
          readonly required: readonly ['message', 'type'];
        };
      };
      readonly required: readonly ['error'];
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
  };
};
declare const OcrDataExtractionCreate: {
  readonly body: {
    readonly type: 'object';
    readonly properties: {
      readonly providers: {
        readonly type: 'string';
        readonly minLength: 1;
        readonly description: "It can be one (ex: **'amazon'** or **'google'**) or multiple provider(s) (ex: **'amazon,microsoft,google'**)             that the data will be redirected to in order to get the processed results.";
        readonly examples: readonly ['base64,amazon'];
      };
      readonly fallback_providers: {
        readonly type: 'string';
        readonly minLength: 1;
        readonly description: "Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.\n    To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.\n\nThey will be tried in the same order they are input, and it will stop to the first provider who doesn't fail.\n\n\n*Doesn't work with async subfeatures.*\n    ";
      };
      readonly response_as_dict: {
        readonly type: 'boolean';
        readonly default: true;
        readonly description: "Optional : When set to **true** (default), the response is an object of responses with providers names as keys : <br> \n                  ``` {'google' : { 'status': 'success', ... }, } ``` <br>\n                When set to **false** the response structure is a list of response objects : <br> \n                   ``` [{'status': 'success', 'provider': 'google' ... }, ] ```. <br> \n                  ";
      };
      readonly attributes_as_list: {
        readonly type: 'boolean';
        readonly default: false;
        readonly description: "Optional : When set to **false** (default) the structure of the extracted items is list of objects having different attributes : <br>\n     ```{'items': [{'attribute_1': 'x1','attribute_2': 'y2'}, ... ]}``` <br>\n     When it is set to **true**, the response contains an object with each attribute as a list : <br>\n     ```{ 'attribute_1': ['x1','x2', ...], 'attribute_2': [y1, y2, ...]}``` ";
      };
      readonly show_original_response: {
        readonly type: 'boolean';
        readonly default: false;
        readonly description: 'Optional : Shows the original response of the provider.<br>\n        When set to **true**, a new attribute *original_response* will appear in the response object.';
      };
      readonly file: {
        readonly type: 'string';
        readonly format: 'binary';
        readonly description: 'File to analyse in binary format to be used with *content-type*: **multipart/form-data** <br> **Does not work with application/json !**';
      };
      readonly file_url: {
        readonly type: readonly ['string', 'null'];
        readonly format: 'uri';
        readonly description: 'File **URL** to analyse to be used with with *content-type*: **application/json**.';
        readonly examples: readonly ['http://edenai-resource-example.png'];
      };
    };
    readonly required: readonly ['providers'];
    readonly $schema: 'http://json-schema.org/draft-04/schema#';
  };
  readonly response: {
    readonly '200': {
      readonly properties: {
        readonly base64: {
          readonly required: readonly ['status'];
          readonly title: 'ocrdata_extractionDataExtractionDataClass';
          readonly type: 'object';
          readonly properties: {
            readonly fields: {
              readonly title: 'Fields';
              readonly type: 'array';
              readonly items: {
                readonly required: readonly ['key', 'value', 'bounding_box', 'confidence_score'];
                readonly title: 'ItemDataExtraction';
                readonly type: 'object';
                readonly properties: {
                  readonly key: {
                    readonly title: 'Key';
                    readonly type: 'string';
                  };
                  readonly value: {
                    readonly title: 'Value';
                  };
                  readonly bounding_box: {
                    readonly description: 'Bounding box of a word in the image\n\n    Attributes:\n        left (float): Left coordinate of the bounding box\n        top (float): Top coordinate of the bounding box\n        width (float): Width of the bounding box\n        height (float): Height of the bounding box\n        text (str): Text detected in the bounding box\n\n    Constructor:\n        from_json (classmethod): Create a new instance of BoundingBox from a JSON object\n        from_normalized_vertices (classmethod): Create a new instance of BoundingBox from normalized vertices\n        unknown (classmethod): Return a invalid bouding_box with all field filled with `-1`\n    ';
                    readonly required: readonly ['left', 'top', 'width', 'height'];
                    readonly title: 'BoundingBox';
                    readonly type: 'object';
                    readonly properties: {
                      readonly left: {
                        readonly description: 'Left coordinate of the bounding box';
                        readonly title: 'Left';
                        readonly type: 'integer';
                      };
                      readonly top: {
                        readonly description: 'Top coordinate of the bounding box';
                        readonly title: 'Top';
                        readonly type: 'integer';
                      };
                      readonly width: {
                        readonly description: 'Width of the bounding box';
                        readonly title: 'Width';
                        readonly type: 'integer';
                      };
                      readonly height: {
                        readonly description: 'Height of the bounding box';
                        readonly title: 'Height';
                        readonly type: 'integer';
                      };
                    };
                  };
                  readonly confidence_score: {
                    readonly maximum: 1;
                    readonly minimum: 0;
                    readonly title: 'Confidence Score';
                    readonly type: 'integer';
                  };
                };
              };
            };
            readonly original_response: {
              readonly default: any;
              readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
              readonly title: 'Original Response';
            };
            readonly status: {
              readonly title: 'Status';
              readonly enum: readonly ['sucess', 'fail'];
              readonly type: 'string';
              readonly description: '`sucess` `fail`';
            };
          };
        };
        readonly amazon: {
          readonly required: readonly ['status'];
          readonly title: 'ocrdata_extractionDataExtractionDataClass';
          readonly type: 'object';
          readonly properties: {
            readonly fields: {
              readonly title: 'Fields';
              readonly type: 'array';
              readonly items: {
                readonly required: readonly ['key', 'value', 'bounding_box', 'confidence_score'];
                readonly title: 'ItemDataExtraction';
                readonly type: 'object';
                readonly properties: {
                  readonly key: {
                    readonly title: 'Key';
                    readonly type: 'string';
                  };
                  readonly value: {
                    readonly title: 'Value';
                  };
                  readonly bounding_box: {
                    readonly description: 'Bounding box of a word in the image\n\n    Attributes:\n        left (float): Left coordinate of the bounding box\n        top (float): Top coordinate of the bounding box\n        width (float): Width of the bounding box\n        height (float): Height of the bounding box\n        text (str): Text detected in the bounding box\n\n    Constructor:\n        from_json (classmethod): Create a new instance of BoundingBox from a JSON object\n        from_normalized_vertices (classmethod): Create a new instance of BoundingBox from normalized vertices\n        unknown (classmethod): Return a invalid bouding_box with all field filled with `-1`\n    ';
                    readonly required: readonly ['left', 'top', 'width', 'height'];
                    readonly title: 'BoundingBox';
                    readonly type: 'object';
                    readonly properties: {
                      readonly left: {
                        readonly description: 'Left coordinate of the bounding box';
                        readonly title: 'Left';
                        readonly type: 'integer';
                      };
                      readonly top: {
                        readonly description: 'Top coordinate of the bounding box';
                        readonly title: 'Top';
                        readonly type: 'integer';
                      };
                      readonly width: {
                        readonly description: 'Width of the bounding box';
                        readonly title: 'Width';
                        readonly type: 'integer';
                      };
                      readonly height: {
                        readonly description: 'Height of the bounding box';
                        readonly title: 'Height';
                        readonly type: 'integer';
                      };
                    };
                  };
                  readonly confidence_score: {
                    readonly maximum: 1;
                    readonly minimum: 0;
                    readonly title: 'Confidence Score';
                    readonly type: 'integer';
                  };
                };
              };
            };
            readonly original_response: {
              readonly default: any;
              readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
              readonly title: 'Original Response';
            };
            readonly status: {
              readonly title: 'Status';
              readonly enum: readonly ['sucess', 'fail'];
              readonly type: 'string';
              readonly description: '`sucess` `fail`';
            };
          };
        };
      };
      readonly title: 'ocrdata_extractionResponseModel';
      readonly type: 'object';
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '400': {
      readonly type: 'object';
      readonly properties: {
        readonly error: {
          readonly type: 'object';
          readonly properties: {
            readonly type: {
              readonly type: 'string';
            };
            readonly message: {
              readonly type: 'object';
              readonly properties: {
                readonly '<parameter_name>': {
                  readonly type: 'array';
                  readonly items: {
                    readonly type: 'string';
                  };
                };
              };
              readonly required: readonly ['<parameter_name>'];
            };
          };
          readonly required: readonly ['message', 'type'];
        };
      };
      readonly required: readonly ['error'];
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '403': {
      readonly type: 'object';
      readonly properties: {
        readonly error: {
          readonly type: 'object';
          readonly properties: {
            readonly type: {
              readonly type: 'string';
            };
            readonly message: {
              readonly type: 'string';
            };
          };
          readonly required: readonly ['message', 'type'];
        };
      };
      readonly required: readonly ['error'];
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '404': {
      readonly type: 'object';
      readonly properties: {
        readonly details: {
          readonly type: 'string';
          readonly default: 'Not Found';
        };
      };
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '500': {
      readonly type: 'object';
      readonly properties: {
        readonly error: {
          readonly type: 'object';
          readonly properties: {
            readonly type: {
              readonly type: 'string';
            };
            readonly message: {
              readonly type: 'string';
            };
          };
          readonly required: readonly ['message', 'type'];
        };
      };
      readonly required: readonly ['error'];
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
  };
};
declare const OcrIdentityParserCreate: {
  readonly body: {
    readonly type: 'object';
    readonly properties: {
      readonly providers: {
        readonly type: 'string';
        readonly minLength: 1;
        readonly description: "It can be one (ex: **'amazon'** or **'google'**) or multiple provider(s) (ex: **'amazon,microsoft,google'**)             that the data will be redirected to in order to get the processed results.";
        readonly examples: readonly ['klippa,amazon,base64,mindee,microsoft'];
      };
      readonly fallback_providers: {
        readonly type: 'string';
        readonly minLength: 1;
        readonly description: "Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.\n    To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.\n\nThey will be tried in the same order they are input, and it will stop to the first provider who doesn't fail.\n\n\n*Doesn't work with async subfeatures.*\n    ";
      };
      readonly response_as_dict: {
        readonly type: 'boolean';
        readonly default: true;
        readonly description: "Optional : When set to **true** (default), the response is an object of responses with providers names as keys : <br> \n                  ``` {'google' : { 'status': 'success', ... }, } ``` <br>\n                When set to **false** the response structure is a list of response objects : <br> \n                   ``` [{'status': 'success', 'provider': 'google' ... }, ] ```. <br> \n                  ";
      };
      readonly attributes_as_list: {
        readonly type: 'boolean';
        readonly default: false;
        readonly description: "Optional : When set to **false** (default) the structure of the extracted items is list of objects having different attributes : <br>\n     ```{'items': [{'attribute_1': 'x1','attribute_2': 'y2'}, ... ]}``` <br>\n     When it is set to **true**, the response contains an object with each attribute as a list : <br>\n     ```{ 'attribute_1': ['x1','x2', ...], 'attribute_2': [y1, y2, ...]}``` ";
      };
      readonly show_original_response: {
        readonly type: 'boolean';
        readonly default: false;
        readonly description: 'Optional : Shows the original response of the provider.<br>\n        When set to **true**, a new attribute *original_response* will appear in the response object.';
      };
      readonly file: {
        readonly type: 'string';
        readonly format: 'binary';
        readonly description: 'File to analyse in binary format to be used with *content-type*: **multipart/form-data** <br> **Does not work with application/json !**';
      };
      readonly file_url: {
        readonly type: readonly ['string', 'null'];
        readonly format: 'uri';
        readonly description: 'File **URL** to analyse to be used with with *content-type*: **application/json**.';
        readonly examples: readonly ['http://edenai-resource-example.pdf'];
      };
    };
    readonly required: readonly ['providers'];
    readonly $schema: 'http://json-schema.org/draft-04/schema#';
  };
  readonly response: {
    readonly '200': {
      readonly properties: {
        readonly mindee: {
          readonly required: readonly ['status'];
          readonly title: 'ocridentity_parserIdentityParserDataClass';
          readonly type: 'object';
          readonly properties: {
            readonly extracted_data: {
              readonly title: 'Extracted Data';
              readonly type: 'array';
              readonly items: {
                readonly required: readonly [
                  'last_name',
                  'birth_place',
                  'birth_date',
                  'issuance_date',
                  'expire_date',
                  'document_id',
                  'issuing_state',
                  'address',
                  'age',
                  'country',
                  'document_type',
                  'gender',
                  'mrz',
                  'nationality'
                ];
                readonly title: 'InfosIdentityParserDataClass';
                readonly type: 'object';
                readonly properties: {
                  readonly last_name: {
                    readonly title: 'ItemIdentityParserDataClass';
                    readonly type: 'object';
                    readonly properties: {
                      readonly value: {
                        readonly default: any;
                        readonly title: 'Value';
                        readonly type: 'string';
                      };
                      readonly confidence: {
                        readonly default: any;
                        readonly title: 'Confidence';
                        readonly type: 'integer';
                      };
                    };
                  };
                  readonly given_names: {
                    readonly title: 'Given Names';
                    readonly type: 'array';
                    readonly items: {
                      readonly title: 'ItemIdentityParserDataClass';
                      readonly type: 'object';
                      readonly properties: {
                        readonly value: {
                          readonly default: any;
                          readonly title: 'Value';
                          readonly type: 'string';
                        };
                        readonly confidence: {
                          readonly default: any;
                          readonly title: 'Confidence';
                          readonly type: 'integer';
                        };
                      };
                    };
                  };
                  readonly birth_place: {
                    readonly title: 'ItemIdentityParserDataClass';
                    readonly type: 'object';
                    readonly properties: {
                      readonly value: {
                        readonly default: any;
                        readonly title: 'Value';
                        readonly type: 'string';
                      };
                      readonly confidence: {
                        readonly default: any;
                        readonly title: 'Confidence';
                        readonly type: 'integer';
                      };
                    };
                  };
                  readonly birth_date: {
                    readonly title: 'ItemIdentityParserDataClass';
                    readonly type: 'object';
                    readonly properties: {
                      readonly value: {
                        readonly default: any;
                        readonly title: 'Value';
                        readonly type: 'string';
                      };
                      readonly confidence: {
                        readonly default: any;
                        readonly title: 'Confidence';
                        readonly type: 'integer';
                      };
                    };
                  };
                  readonly issuance_date: {
                    readonly title: 'ItemIdentityParserDataClass';
                    readonly type: 'object';
                    readonly properties: {
                      readonly value: {
                        readonly default: any;
                        readonly title: 'Value';
                        readonly type: 'string';
                      };
                      readonly confidence: {
                        readonly default: any;
                        readonly title: 'Confidence';
                        readonly type: 'integer';
                      };
                    };
                  };
                  readonly expire_date: {
                    readonly title: 'ItemIdentityParserDataClass';
                    readonly type: 'object';
                    readonly properties: {
                      readonly value: {
                        readonly default: any;
                        readonly title: 'Value';
                        readonly type: 'string';
                      };
                      readonly confidence: {
                        readonly default: any;
                        readonly title: 'Confidence';
                        readonly type: 'integer';
                      };
                    };
                  };
                  readonly document_id: {
                    readonly title: 'ItemIdentityParserDataClass';
                    readonly type: 'object';
                    readonly properties: {
                      readonly value: {
                        readonly default: any;
                        readonly title: 'Value';
                        readonly type: 'string';
                      };
                      readonly confidence: {
                        readonly default: any;
                        readonly title: 'Confidence';
                        readonly type: 'integer';
                      };
                    };
                  };
                  readonly issuing_state: {
                    readonly title: 'ItemIdentityParserDataClass';
                    readonly type: 'object';
                    readonly properties: {
                      readonly value: {
                        readonly default: any;
                        readonly title: 'Value';
                        readonly type: 'string';
                      };
                      readonly confidence: {
                        readonly default: any;
                        readonly title: 'Confidence';
                        readonly type: 'integer';
                      };
                    };
                  };
                  readonly address: {
                    readonly title: 'ItemIdentityParserDataClass';
                    readonly type: 'object';
                    readonly properties: {
                      readonly value: {
                        readonly default: any;
                        readonly title: 'Value';
                        readonly type: 'string';
                      };
                      readonly confidence: {
                        readonly default: any;
                        readonly title: 'Confidence';
                        readonly type: 'integer';
                      };
                    };
                  };
                  readonly age: {
                    readonly title: 'ItemIdentityParserDataClass';
                    readonly type: 'object';
                    readonly properties: {
                      readonly value: {
                        readonly default: any;
                        readonly title: 'Value';
                        readonly type: 'string';
                      };
                      readonly confidence: {
                        readonly default: any;
                        readonly title: 'Confidence';
                        readonly type: 'integer';
                      };
                    };
                  };
                  readonly country: {
                    readonly required: readonly ['name', 'alpha2', 'alpha3', 'confidence'];
                    readonly title: 'Country';
                    readonly type: 'object';
                    readonly properties: {
                      readonly name: {
                        readonly title: 'Name';
                        readonly type: 'string';
                      };
                      readonly alpha2: {
                        readonly title: 'Alpha2';
                        readonly type: 'string';
                      };
                      readonly alpha3: {
                        readonly title: 'Alpha3';
                        readonly type: 'string';
                      };
                      readonly confidence: {
                        readonly title: 'Confidence';
                        readonly type: 'integer';
                      };
                    };
                  };
                  readonly document_type: {
                    readonly title: 'ItemIdentityParserDataClass';
                    readonly type: 'object';
                    readonly properties: {
                      readonly value: {
                        readonly default: any;
                        readonly title: 'Value';
                        readonly type: 'string';
                      };
                      readonly confidence: {
                        readonly default: any;
                        readonly title: 'Confidence';
                        readonly type: 'integer';
                      };
                    };
                  };
                  readonly gender: {
                    readonly title: 'ItemIdentityParserDataClass';
                    readonly type: 'object';
                    readonly properties: {
                      readonly value: {
                        readonly default: any;
                        readonly title: 'Value';
                        readonly type: 'string';
                      };
                      readonly confidence: {
                        readonly default: any;
                        readonly title: 'Confidence';
                        readonly type: 'integer';
                      };
                    };
                  };
                  readonly image_id: {
                    readonly title: 'Image Id';
                    readonly type: 'array';
                    readonly items: {
                      readonly title: 'ItemIdentityParserDataClass';
                      readonly type: 'object';
                      readonly properties: {
                        readonly value: {
                          readonly default: any;
                          readonly title: 'Value';
                          readonly type: 'string';
                        };
                        readonly confidence: {
                          readonly default: any;
                          readonly title: 'Confidence';
                          readonly type: 'integer';
                        };
                      };
                    };
                  };
                  readonly image_signature: {
                    readonly title: 'Image Signature';
                    readonly type: 'array';
                    readonly items: {
                      readonly title: 'ItemIdentityParserDataClass';
                      readonly type: 'object';
                      readonly properties: {
                        readonly value: {
                          readonly default: any;
                          readonly title: 'Value';
                          readonly type: 'string';
                        };
                        readonly confidence: {
                          readonly default: any;
                          readonly title: 'Confidence';
                          readonly type: 'integer';
                        };
                      };
                    };
                  };
                  readonly mrz: {
                    readonly title: 'ItemIdentityParserDataClass';
                    readonly type: 'object';
                    readonly properties: {
                      readonly value: {
                        readonly default: any;
                        readonly title: 'Value';
                        readonly type: 'string';
                      };
                      readonly confidence: {
                        readonly default: any;
                        readonly title: 'Confidence';
                        readonly type: 'integer';
                      };
                    };
                  };
                  readonly nationality: {
                    readonly title: 'ItemIdentityParserDataClass';
                    readonly type: 'object';
                    readonly properties: {
                      readonly value: {
                        readonly default: any;
                        readonly title: 'Value';
                        readonly type: 'string';
                      };
                      readonly confidence: {
                        readonly default: any;
                        readonly title: 'Confidence';
                        readonly type: 'integer';
                      };
                    };
                  };
                };
              };
            };
            readonly original_response: {
              readonly default: any;
              readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
              readonly title: 'Original Response';
            };
            readonly status: {
              readonly title: 'Status';
              readonly enum: readonly ['sucess', 'fail'];
              readonly type: 'string';
              readonly description: '`sucess` `fail`';
            };
          };
        };
        readonly base64: {
          readonly required: readonly ['status'];
          readonly title: 'ocridentity_parserIdentityParserDataClass';
          readonly type: 'object';
          readonly properties: {
            readonly extracted_data: {
              readonly title: 'Extracted Data';
              readonly type: 'array';
              readonly items: {
                readonly required: readonly [
                  'last_name',
                  'birth_place',
                  'birth_date',
                  'issuance_date',
                  'expire_date',
                  'document_id',
                  'issuing_state',
                  'address',
                  'age',
                  'country',
                  'document_type',
                  'gender',
                  'mrz',
                  'nationality'
                ];
                readonly title: 'InfosIdentityParserDataClass';
                readonly type: 'object';
                readonly properties: {
                  readonly last_name: {
                    readonly title: 'ItemIdentityParserDataClass';
                    readonly type: 'object';
                    readonly properties: {
                      readonly value: {
                        readonly default: any;
                        readonly title: 'Value';
                        readonly type: 'string';
                      };
                      readonly confidence: {
                        readonly default: any;
                        readonly title: 'Confidence';
                        readonly type: 'integer';
                      };
                    };
                  };
                  readonly given_names: {
                    readonly title: 'Given Names';
                    readonly type: 'array';
                    readonly items: {
                      readonly title: 'ItemIdentityParserDataClass';
                      readonly type: 'object';
                      readonly properties: {
                        readonly value: {
                          readonly default: any;
                          readonly title: 'Value';
                          readonly type: 'string';
                        };
                        readonly confidence: {
                          readonly default: any;
                          readonly title: 'Confidence';
                          readonly type: 'integer';
                        };
                      };
                    };
                  };
                  readonly birth_place: {
                    readonly title: 'ItemIdentityParserDataClass';
                    readonly type: 'object';
                    readonly properties: {
                      readonly value: {
                        readonly default: any;
                        readonly title: 'Value';
                        readonly type: 'string';
                      };
                      readonly confidence: {
                        readonly default: any;
                        readonly title: 'Confidence';
                        readonly type: 'integer';
                      };
                    };
                  };
                  readonly birth_date: {
                    readonly title: 'ItemIdentityParserDataClass';
                    readonly type: 'object';
                    readonly properties: {
                      readonly value: {
                        readonly default: any;
                        readonly title: 'Value';
                        readonly type: 'string';
                      };
                      readonly confidence: {
                        readonly default: any;
                        readonly title: 'Confidence';
                        readonly type: 'integer';
                      };
                    };
                  };
                  readonly issuance_date: {
                    readonly title: 'ItemIdentityParserDataClass';
                    readonly type: 'object';
                    readonly properties: {
                      readonly value: {
                        readonly default: any;
                        readonly title: 'Value';
                        readonly type: 'string';
                      };
                      readonly confidence: {
                        readonly default: any;
                        readonly title: 'Confidence';
                        readonly type: 'integer';
                      };
                    };
                  };
                  readonly expire_date: {
                    readonly title: 'ItemIdentityParserDataClass';
                    readonly type: 'object';
                    readonly properties: {
                      readonly value: {
                        readonly default: any;
                        readonly title: 'Value';
                        readonly type: 'string';
                      };
                      readonly confidence: {
                        readonly default: any;
                        readonly title: 'Confidence';
                        readonly type: 'integer';
                      };
                    };
                  };
                  readonly document_id: {
                    readonly title: 'ItemIdentityParserDataClass';
                    readonly type: 'object';
                    readonly properties: {
                      readonly value: {
                        readonly default: any;
                        readonly title: 'Value';
                        readonly type: 'string';
                      };
                      readonly confidence: {
                        readonly default: any;
                        readonly title: 'Confidence';
                        readonly type: 'integer';
                      };
                    };
                  };
                  readonly issuing_state: {
                    readonly title: 'ItemIdentityParserDataClass';
                    readonly type: 'object';
                    readonly properties: {
                      readonly value: {
                        readonly default: any;
                        readonly title: 'Value';
                        readonly type: 'string';
                      };
                      readonly confidence: {
                        readonly default: any;
                        readonly title: 'Confidence';
                        readonly type: 'integer';
                      };
                    };
                  };
                  readonly address: {
                    readonly title: 'ItemIdentityParserDataClass';
                    readonly type: 'object';
                    readonly properties: {
                      readonly value: {
                        readonly default: any;
                        readonly title: 'Value';
                        readonly type: 'string';
                      };
                      readonly confidence: {
                        readonly default: any;
                        readonly title: 'Confidence';
                        readonly type: 'integer';
                      };
                    };
                  };
                  readonly age: {
                    readonly title: 'ItemIdentityParserDataClass';
                    readonly type: 'object';
                    readonly properties: {
                      readonly value: {
                        readonly default: any;
                        readonly title: 'Value';
                        readonly type: 'string';
                      };
                      readonly confidence: {
                        readonly default: any;
                        readonly title: 'Confidence';
                        readonly type: 'integer';
                      };
                    };
                  };
                  readonly country: {
                    readonly required: readonly ['name', 'alpha2', 'alpha3', 'confidence'];
                    readonly title: 'Country';
                    readonly type: 'object';
                    readonly properties: {
                      readonly name: {
                        readonly title: 'Name';
                        readonly type: 'string';
                      };
                      readonly alpha2: {
                        readonly title: 'Alpha2';
                        readonly type: 'string';
                      };
                      readonly alpha3: {
                        readonly title: 'Alpha3';
                        readonly type: 'string';
                      };
                      readonly confidence: {
                        readonly title: 'Confidence';
                        readonly type: 'integer';
                      };
                    };
                  };
                  readonly document_type: {
                    readonly title: 'ItemIdentityParserDataClass';
                    readonly type: 'object';
                    readonly properties: {
                      readonly value: {
                        readonly default: any;
                        readonly title: 'Value';
                        readonly type: 'string';
                      };
                      readonly confidence: {
                        readonly default: any;
                        readonly title: 'Confidence';
                        readonly type: 'integer';
                      };
                    };
                  };
                  readonly gender: {
                    readonly title: 'ItemIdentityParserDataClass';
                    readonly type: 'object';
                    readonly properties: {
                      readonly value: {
                        readonly default: any;
                        readonly title: 'Value';
                        readonly type: 'string';
                      };
                      readonly confidence: {
                        readonly default: any;
                        readonly title: 'Confidence';
                        readonly type: 'integer';
                      };
                    };
                  };
                  readonly image_id: {
                    readonly title: 'Image Id';
                    readonly type: 'array';
                    readonly items: {
                      readonly title: 'ItemIdentityParserDataClass';
                      readonly type: 'object';
                      readonly properties: {
                        readonly value: {
                          readonly default: any;
                          readonly title: 'Value';
                          readonly type: 'string';
                        };
                        readonly confidence: {
                          readonly default: any;
                          readonly title: 'Confidence';
                          readonly type: 'integer';
                        };
                      };
                    };
                  };
                  readonly image_signature: {
                    readonly title: 'Image Signature';
                    readonly type: 'array';
                    readonly items: {
                      readonly title: 'ItemIdentityParserDataClass';
                      readonly type: 'object';
                      readonly properties: {
                        readonly value: {
                          readonly default: any;
                          readonly title: 'Value';
                          readonly type: 'string';
                        };
                        readonly confidence: {
                          readonly default: any;
                          readonly title: 'Confidence';
                          readonly type: 'integer';
                        };
                      };
                    };
                  };
                  readonly mrz: {
                    readonly title: 'ItemIdentityParserDataClass';
                    readonly type: 'object';
                    readonly properties: {
                      readonly value: {
                        readonly default: any;
                        readonly title: 'Value';
                        readonly type: 'string';
                      };
                      readonly confidence: {
                        readonly default: any;
                        readonly title: 'Confidence';
                        readonly type: 'integer';
                      };
                    };
                  };
                  readonly nationality: {
                    readonly title: 'ItemIdentityParserDataClass';
                    readonly type: 'object';
                    readonly properties: {
                      readonly value: {
                        readonly default: any;
                        readonly title: 'Value';
                        readonly type: 'string';
                      };
                      readonly confidence: {
                        readonly default: any;
                        readonly title: 'Confidence';
                        readonly type: 'integer';
                      };
                    };
                  };
                };
              };
            };
            readonly original_response: {
              readonly default: any;
              readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
              readonly title: 'Original Response';
            };
            readonly status: {
              readonly title: 'Status';
              readonly enum: readonly ['sucess', 'fail'];
              readonly type: 'string';
              readonly description: '`sucess` `fail`';
            };
          };
        };
        readonly microsoft: {
          readonly required: readonly ['status'];
          readonly title: 'ocridentity_parserIdentityParserDataClass';
          readonly type: 'object';
          readonly properties: {
            readonly extracted_data: {
              readonly title: 'Extracted Data';
              readonly type: 'array';
              readonly items: {
                readonly required: readonly [
                  'last_name',
                  'birth_place',
                  'birth_date',
                  'issuance_date',
                  'expire_date',
                  'document_id',
                  'issuing_state',
                  'address',
                  'age',
                  'country',
                  'document_type',
                  'gender',
                  'mrz',
                  'nationality'
                ];
                readonly title: 'InfosIdentityParserDataClass';
                readonly type: 'object';
                readonly properties: {
                  readonly last_name: {
                    readonly title: 'ItemIdentityParserDataClass';
                    readonly type: 'object';
                    readonly properties: {
                      readonly value: {
                        readonly default: any;
                        readonly title: 'Value';
                        readonly type: 'string';
                      };
                      readonly confidence: {
                        readonly default: any;
                        readonly title: 'Confidence';
                        readonly type: 'integer';
                      };
                    };
                  };
                  readonly given_names: {
                    readonly title: 'Given Names';
                    readonly type: 'array';
                    readonly items: {
                      readonly title: 'ItemIdentityParserDataClass';
                      readonly type: 'object';
                      readonly properties: {
                        readonly value: {
                          readonly default: any;
                          readonly title: 'Value';
                          readonly type: 'string';
                        };
                        readonly confidence: {
                          readonly default: any;
                          readonly title: 'Confidence';
                          readonly type: 'integer';
                        };
                      };
                    };
                  };
                  readonly birth_place: {
                    readonly title: 'ItemIdentityParserDataClass';
                    readonly type: 'object';
                    readonly properties: {
                      readonly value: {
                        readonly default: any;
                        readonly title: 'Value';
                        readonly type: 'string';
                      };
                      readonly confidence: {
                        readonly default: any;
                        readonly title: 'Confidence';
                        readonly type: 'integer';
                      };
                    };
                  };
                  readonly birth_date: {
                    readonly title: 'ItemIdentityParserDataClass';
                    readonly type: 'object';
                    readonly properties: {
                      readonly value: {
                        readonly default: any;
                        readonly title: 'Value';
                        readonly type: 'string';
                      };
                      readonly confidence: {
                        readonly default: any;
                        readonly title: 'Confidence';
                        readonly type: 'integer';
                      };
                    };
                  };
                  readonly issuance_date: {
                    readonly title: 'ItemIdentityParserDataClass';
                    readonly type: 'object';
                    readonly properties: {
                      readonly value: {
                        readonly default: any;
                        readonly title: 'Value';
                        readonly type: 'string';
                      };
                      readonly confidence: {
                        readonly default: any;
                        readonly title: 'Confidence';
                        readonly type: 'integer';
                      };
                    };
                  };
                  readonly expire_date: {
                    readonly title: 'ItemIdentityParserDataClass';
                    readonly type: 'object';
                    readonly properties: {
                      readonly value: {
                        readonly default: any;
                        readonly title: 'Value';
                        readonly type: 'string';
                      };
                      readonly confidence: {
                        readonly default: any;
                        readonly title: 'Confidence';
                        readonly type: 'integer';
                      };
                    };
                  };
                  readonly document_id: {
                    readonly title: 'ItemIdentityParserDataClass';
                    readonly type: 'object';
                    readonly properties: {
                      readonly value: {
                        readonly default: any;
                        readonly title: 'Value';
                        readonly type: 'string';
                      };
                      readonly confidence: {
                        readonly default: any;
                        readonly title: 'Confidence';
                        readonly type: 'integer';
                      };
                    };
                  };
                  readonly issuing_state: {
                    readonly title: 'ItemIdentityParserDataClass';
                    readonly type: 'object';
                    readonly properties: {
                      readonly value: {
                        readonly default: any;
                        readonly title: 'Value';
                        readonly type: 'string';
                      };
                      readonly confidence: {
                        readonly default: any;
                        readonly title: 'Confidence';
                        readonly type: 'integer';
                      };
                    };
                  };
                  readonly address: {
                    readonly title: 'ItemIdentityParserDataClass';
                    readonly type: 'object';
                    readonly properties: {
                      readonly value: {
                        readonly default: any;
                        readonly title: 'Value';
                        readonly type: 'string';
                      };
                      readonly confidence: {
                        readonly default: any;
                        readonly title: 'Confidence';
                        readonly type: 'integer';
                      };
                    };
                  };
                  readonly age: {
                    readonly title: 'ItemIdentityParserDataClass';
                    readonly type: 'object';
                    readonly properties: {
                      readonly value: {
                        readonly default: any;
                        readonly title: 'Value';
                        readonly type: 'string';
                      };
                      readonly confidence: {
                        readonly default: any;
                        readonly title: 'Confidence';
                        readonly type: 'integer';
                      };
                    };
                  };
                  readonly country: {
                    readonly required: readonly ['name', 'alpha2', 'alpha3', 'confidence'];
                    readonly title: 'Country';
                    readonly type: 'object';
                    readonly properties: {
                      readonly name: {
                        readonly title: 'Name';
                        readonly type: 'string';
                      };
                      readonly alpha2: {
                        readonly title: 'Alpha2';
                        readonly type: 'string';
                      };
                      readonly alpha3: {
                        readonly title: 'Alpha3';
                        readonly type: 'string';
                      };
                      readonly confidence: {
                        readonly title: 'Confidence';
                        readonly type: 'integer';
                      };
                    };
                  };
                  readonly document_type: {
                    readonly title: 'ItemIdentityParserDataClass';
                    readonly type: 'object';
                    readonly properties: {
                      readonly value: {
                        readonly default: any;
                        readonly title: 'Value';
                        readonly type: 'string';
                      };
                      readonly confidence: {
                        readonly default: any;
                        readonly title: 'Confidence';
                        readonly type: 'integer';
                      };
                    };
                  };
                  readonly gender: {
                    readonly title: 'ItemIdentityParserDataClass';
                    readonly type: 'object';
                    readonly properties: {
                      readonly value: {
                        readonly default: any;
                        readonly title: 'Value';
                        readonly type: 'string';
                      };
                      readonly confidence: {
                        readonly default: any;
                        readonly title: 'Confidence';
                        readonly type: 'integer';
                      };
                    };
                  };
                  readonly image_id: {
                    readonly title: 'Image Id';
                    readonly type: 'array';
                    readonly items: {
                      readonly title: 'ItemIdentityParserDataClass';
                      readonly type: 'object';
                      readonly properties: {
                        readonly value: {
                          readonly default: any;
                          readonly title: 'Value';
                          readonly type: 'string';
                        };
                        readonly confidence: {
                          readonly default: any;
                          readonly title: 'Confidence';
                          readonly type: 'integer';
                        };
                      };
                    };
                  };
                  readonly image_signature: {
                    readonly title: 'Image Signature';
                    readonly type: 'array';
                    readonly items: {
                      readonly title: 'ItemIdentityParserDataClass';
                      readonly type: 'object';
                      readonly properties: {
                        readonly value: {
                          readonly default: any;
                          readonly title: 'Value';
                          readonly type: 'string';
                        };
                        readonly confidence: {
                          readonly default: any;
                          readonly title: 'Confidence';
                          readonly type: 'integer';
                        };
                      };
                    };
                  };
                  readonly mrz: {
                    readonly title: 'ItemIdentityParserDataClass';
                    readonly type: 'object';
                    readonly properties: {
                      readonly value: {
                        readonly default: any;
                        readonly title: 'Value';
                        readonly type: 'string';
                      };
                      readonly confidence: {
                        readonly default: any;
                        readonly title: 'Confidence';
                        readonly type: 'integer';
                      };
                    };
                  };
                  readonly nationality: {
                    readonly title: 'ItemIdentityParserDataClass';
                    readonly type: 'object';
                    readonly properties: {
                      readonly value: {
                        readonly default: any;
                        readonly title: 'Value';
                        readonly type: 'string';
                      };
                      readonly confidence: {
                        readonly default: any;
                        readonly title: 'Confidence';
                        readonly type: 'integer';
                      };
                    };
                  };
                };
              };
            };
            readonly original_response: {
              readonly default: any;
              readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
              readonly title: 'Original Response';
            };
            readonly status: {
              readonly title: 'Status';
              readonly enum: readonly ['sucess', 'fail'];
              readonly type: 'string';
              readonly description: '`sucess` `fail`';
            };
          };
        };
        readonly klippa: {
          readonly required: readonly ['status'];
          readonly title: 'ocridentity_parserIdentityParserDataClass';
          readonly type: 'object';
          readonly properties: {
            readonly extracted_data: {
              readonly title: 'Extracted Data';
              readonly type: 'array';
              readonly items: {
                readonly required: readonly [
                  'last_name',
                  'birth_place',
                  'birth_date',
                  'issuance_date',
                  'expire_date',
                  'document_id',
                  'issuing_state',
                  'address',
                  'age',
                  'country',
                  'document_type',
                  'gender',
                  'mrz',
                  'nationality'
                ];
                readonly title: 'InfosIdentityParserDataClass';
                readonly type: 'object';
                readonly properties: {
                  readonly last_name: {
                    readonly title: 'ItemIdentityParserDataClass';
                    readonly type: 'object';
                    readonly properties: {
                      readonly value: {
                        readonly default: any;
                        readonly title: 'Value';
                        readonly type: 'string';
                      };
                      readonly confidence: {
                        readonly default: any;
                        readonly title: 'Confidence';
                        readonly type: 'integer';
                      };
                    };
                  };
                  readonly given_names: {
                    readonly title: 'Given Names';
                    readonly type: 'array';
                    readonly items: {
                      readonly title: 'ItemIdentityParserDataClass';
                      readonly type: 'object';
                      readonly properties: {
                        readonly value: {
                          readonly default: any;
                          readonly title: 'Value';
                          readonly type: 'string';
                        };
                        readonly confidence: {
                          readonly default: any;
                          readonly title: 'Confidence';
                          readonly type: 'integer';
                        };
                      };
                    };
                  };
                  readonly birth_place: {
                    readonly title: 'ItemIdentityParserDataClass';
                    readonly type: 'object';
                    readonly properties: {
                      readonly value: {
                        readonly default: any;
                        readonly title: 'Value';
                        readonly type: 'string';
                      };
                      readonly confidence: {
                        readonly default: any;
                        readonly title: 'Confidence';
                        readonly type: 'integer';
                      };
                    };
                  };
                  readonly birth_date: {
                    readonly title: 'ItemIdentityParserDataClass';
                    readonly type: 'object';
                    readonly properties: {
                      readonly value: {
                        readonly default: any;
                        readonly title: 'Value';
                        readonly type: 'string';
                      };
                      readonly confidence: {
                        readonly default: any;
                        readonly title: 'Confidence';
                        readonly type: 'integer';
                      };
                    };
                  };
                  readonly issuance_date: {
                    readonly title: 'ItemIdentityParserDataClass';
                    readonly type: 'object';
                    readonly properties: {
                      readonly value: {
                        readonly default: any;
                        readonly title: 'Value';
                        readonly type: 'string';
                      };
                      readonly confidence: {
                        readonly default: any;
                        readonly title: 'Confidence';
                        readonly type: 'integer';
                      };
                    };
                  };
                  readonly expire_date: {
                    readonly title: 'ItemIdentityParserDataClass';
                    readonly type: 'object';
                    readonly properties: {
                      readonly value: {
                        readonly default: any;
                        readonly title: 'Value';
                        readonly type: 'string';
                      };
                      readonly confidence: {
                        readonly default: any;
                        readonly title: 'Confidence';
                        readonly type: 'integer';
                      };
                    };
                  };
                  readonly document_id: {
                    readonly title: 'ItemIdentityParserDataClass';
                    readonly type: 'object';
                    readonly properties: {
                      readonly value: {
                        readonly default: any;
                        readonly title: 'Value';
                        readonly type: 'string';
                      };
                      readonly confidence: {
                        readonly default: any;
                        readonly title: 'Confidence';
                        readonly type: 'integer';
                      };
                    };
                  };
                  readonly issuing_state: {
                    readonly title: 'ItemIdentityParserDataClass';
                    readonly type: 'object';
                    readonly properties: {
                      readonly value: {
                        readonly default: any;
                        readonly title: 'Value';
                        readonly type: 'string';
                      };
                      readonly confidence: {
                        readonly default: any;
                        readonly title: 'Confidence';
                        readonly type: 'integer';
                      };
                    };
                  };
                  readonly address: {
                    readonly title: 'ItemIdentityParserDataClass';
                    readonly type: 'object';
                    readonly properties: {
                      readonly value: {
                        readonly default: any;
                        readonly title: 'Value';
                        readonly type: 'string';
                      };
                      readonly confidence: {
                        readonly default: any;
                        readonly title: 'Confidence';
                        readonly type: 'integer';
                      };
                    };
                  };
                  readonly age: {
                    readonly title: 'ItemIdentityParserDataClass';
                    readonly type: 'object';
                    readonly properties: {
                      readonly value: {
                        readonly default: any;
                        readonly title: 'Value';
                        readonly type: 'string';
                      };
                      readonly confidence: {
                        readonly default: any;
                        readonly title: 'Confidence';
                        readonly type: 'integer';
                      };
                    };
                  };
                  readonly country: {
                    readonly required: readonly ['name', 'alpha2', 'alpha3', 'confidence'];
                    readonly title: 'Country';
                    readonly type: 'object';
                    readonly properties: {
                      readonly name: {
                        readonly title: 'Name';
                        readonly type: 'string';
                      };
                      readonly alpha2: {
                        readonly title: 'Alpha2';
                        readonly type: 'string';
                      };
                      readonly alpha3: {
                        readonly title: 'Alpha3';
                        readonly type: 'string';
                      };
                      readonly confidence: {
                        readonly title: 'Confidence';
                        readonly type: 'integer';
                      };
                    };
                  };
                  readonly document_type: {
                    readonly title: 'ItemIdentityParserDataClass';
                    readonly type: 'object';
                    readonly properties: {
                      readonly value: {
                        readonly default: any;
                        readonly title: 'Value';
                        readonly type: 'string';
                      };
                      readonly confidence: {
                        readonly default: any;
                        readonly title: 'Confidence';
                        readonly type: 'integer';
                      };
                    };
                  };
                  readonly gender: {
                    readonly title: 'ItemIdentityParserDataClass';
                    readonly type: 'object';
                    readonly properties: {
                      readonly value: {
                        readonly default: any;
                        readonly title: 'Value';
                        readonly type: 'string';
                      };
                      readonly confidence: {
                        readonly default: any;
                        readonly title: 'Confidence';
                        readonly type: 'integer';
                      };
                    };
                  };
                  readonly image_id: {
                    readonly title: 'Image Id';
                    readonly type: 'array';
                    readonly items: {
                      readonly title: 'ItemIdentityParserDataClass';
                      readonly type: 'object';
                      readonly properties: {
                        readonly value: {
                          readonly default: any;
                          readonly title: 'Value';
                          readonly type: 'string';
                        };
                        readonly confidence: {
                          readonly default: any;
                          readonly title: 'Confidence';
                          readonly type: 'integer';
                        };
                      };
                    };
                  };
                  readonly image_signature: {
                    readonly title: 'Image Signature';
                    readonly type: 'array';
                    readonly items: {
                      readonly title: 'ItemIdentityParserDataClass';
                      readonly type: 'object';
                      readonly properties: {
                        readonly value: {
                          readonly default: any;
                          readonly title: 'Value';
                          readonly type: 'string';
                        };
                        readonly confidence: {
                          readonly default: any;
                          readonly title: 'Confidence';
                          readonly type: 'integer';
                        };
                      };
                    };
                  };
                  readonly mrz: {
                    readonly title: 'ItemIdentityParserDataClass';
                    readonly type: 'object';
                    readonly properties: {
                      readonly value: {
                        readonly default: any;
                        readonly title: 'Value';
                        readonly type: 'string';
                      };
                      readonly confidence: {
                        readonly default: any;
                        readonly title: 'Confidence';
                        readonly type: 'integer';
                      };
                    };
                  };
                  readonly nationality: {
                    readonly title: 'ItemIdentityParserDataClass';
                    readonly type: 'object';
                    readonly properties: {
                      readonly value: {
                        readonly default: any;
                        readonly title: 'Value';
                        readonly type: 'string';
                      };
                      readonly confidence: {
                        readonly default: any;
                        readonly title: 'Confidence';
                        readonly type: 'integer';
                      };
                    };
                  };
                };
              };
            };
            readonly original_response: {
              readonly default: any;
              readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
              readonly title: 'Original Response';
            };
            readonly status: {
              readonly title: 'Status';
              readonly enum: readonly ['sucess', 'fail'];
              readonly type: 'string';
              readonly description: '`sucess` `fail`';
            };
          };
        };
        readonly amazon: {
          readonly required: readonly ['status'];
          readonly title: 'ocridentity_parserIdentityParserDataClass';
          readonly type: 'object';
          readonly properties: {
            readonly extracted_data: {
              readonly title: 'Extracted Data';
              readonly type: 'array';
              readonly items: {
                readonly required: readonly [
                  'last_name',
                  'birth_place',
                  'birth_date',
                  'issuance_date',
                  'expire_date',
                  'document_id',
                  'issuing_state',
                  'address',
                  'age',
                  'country',
                  'document_type',
                  'gender',
                  'mrz',
                  'nationality'
                ];
                readonly title: 'InfosIdentityParserDataClass';
                readonly type: 'object';
                readonly properties: {
                  readonly last_name: {
                    readonly title: 'ItemIdentityParserDataClass';
                    readonly type: 'object';
                    readonly properties: {
                      readonly value: {
                        readonly default: any;
                        readonly title: 'Value';
                        readonly type: 'string';
                      };
                      readonly confidence: {
                        readonly default: any;
                        readonly title: 'Confidence';
                        readonly type: 'integer';
                      };
                    };
                  };
                  readonly given_names: {
                    readonly title: 'Given Names';
                    readonly type: 'array';
                    readonly items: {
                      readonly title: 'ItemIdentityParserDataClass';
                      readonly type: 'object';
                      readonly properties: {
                        readonly value: {
                          readonly default: any;
                          readonly title: 'Value';
                          readonly type: 'string';
                        };
                        readonly confidence: {
                          readonly default: any;
                          readonly title: 'Confidence';
                          readonly type: 'integer';
                        };
                      };
                    };
                  };
                  readonly birth_place: {
                    readonly title: 'ItemIdentityParserDataClass';
                    readonly type: 'object';
                    readonly properties: {
                      readonly value: {
                        readonly default: any;
                        readonly title: 'Value';
                        readonly type: 'string';
                      };
                      readonly confidence: {
                        readonly default: any;
                        readonly title: 'Confidence';
                        readonly type: 'integer';
                      };
                    };
                  };
                  readonly birth_date: {
                    readonly title: 'ItemIdentityParserDataClass';
                    readonly type: 'object';
                    readonly properties: {
                      readonly value: {
                        readonly default: any;
                        readonly title: 'Value';
                        readonly type: 'string';
                      };
                      readonly confidence: {
                        readonly default: any;
                        readonly title: 'Confidence';
                        readonly type: 'integer';
                      };
                    };
                  };
                  readonly issuance_date: {
                    readonly title: 'ItemIdentityParserDataClass';
                    readonly type: 'object';
                    readonly properties: {
                      readonly value: {
                        readonly default: any;
                        readonly title: 'Value';
                        readonly type: 'string';
                      };
                      readonly confidence: {
                        readonly default: any;
                        readonly title: 'Confidence';
                        readonly type: 'integer';
                      };
                    };
                  };
                  readonly expire_date: {
                    readonly title: 'ItemIdentityParserDataClass';
                    readonly type: 'object';
                    readonly properties: {
                      readonly value: {
                        readonly default: any;
                        readonly title: 'Value';
                        readonly type: 'string';
                      };
                      readonly confidence: {
                        readonly default: any;
                        readonly title: 'Confidence';
                        readonly type: 'integer';
                      };
                    };
                  };
                  readonly document_id: {
                    readonly title: 'ItemIdentityParserDataClass';
                    readonly type: 'object';
                    readonly properties: {
                      readonly value: {
                        readonly default: any;
                        readonly title: 'Value';
                        readonly type: 'string';
                      };
                      readonly confidence: {
                        readonly default: any;
                        readonly title: 'Confidence';
                        readonly type: 'integer';
                      };
                    };
                  };
                  readonly issuing_state: {
                    readonly title: 'ItemIdentityParserDataClass';
                    readonly type: 'object';
                    readonly properties: {
                      readonly value: {
                        readonly default: any;
                        readonly title: 'Value';
                        readonly type: 'string';
                      };
                      readonly confidence: {
                        readonly default: any;
                        readonly title: 'Confidence';
                        readonly type: 'integer';
                      };
                    };
                  };
                  readonly address: {
                    readonly title: 'ItemIdentityParserDataClass';
                    readonly type: 'object';
                    readonly properties: {
                      readonly value: {
                        readonly default: any;
                        readonly title: 'Value';
                        readonly type: 'string';
                      };
                      readonly confidence: {
                        readonly default: any;
                        readonly title: 'Confidence';
                        readonly type: 'integer';
                      };
                    };
                  };
                  readonly age: {
                    readonly title: 'ItemIdentityParserDataClass';
                    readonly type: 'object';
                    readonly properties: {
                      readonly value: {
                        readonly default: any;
                        readonly title: 'Value';
                        readonly type: 'string';
                      };
                      readonly confidence: {
                        readonly default: any;
                        readonly title: 'Confidence';
                        readonly type: 'integer';
                      };
                    };
                  };
                  readonly country: {
                    readonly required: readonly ['name', 'alpha2', 'alpha3', 'confidence'];
                    readonly title: 'Country';
                    readonly type: 'object';
                    readonly properties: {
                      readonly name: {
                        readonly title: 'Name';
                        readonly type: 'string';
                      };
                      readonly alpha2: {
                        readonly title: 'Alpha2';
                        readonly type: 'string';
                      };
                      readonly alpha3: {
                        readonly title: 'Alpha3';
                        readonly type: 'string';
                      };
                      readonly confidence: {
                        readonly title: 'Confidence';
                        readonly type: 'integer';
                      };
                    };
                  };
                  readonly document_type: {
                    readonly title: 'ItemIdentityParserDataClass';
                    readonly type: 'object';
                    readonly properties: {
                      readonly value: {
                        readonly default: any;
                        readonly title: 'Value';
                        readonly type: 'string';
                      };
                      readonly confidence: {
                        readonly default: any;
                        readonly title: 'Confidence';
                        readonly type: 'integer';
                      };
                    };
                  };
                  readonly gender: {
                    readonly title: 'ItemIdentityParserDataClass';
                    readonly type: 'object';
                    readonly properties: {
                      readonly value: {
                        readonly default: any;
                        readonly title: 'Value';
                        readonly type: 'string';
                      };
                      readonly confidence: {
                        readonly default: any;
                        readonly title: 'Confidence';
                        readonly type: 'integer';
                      };
                    };
                  };
                  readonly image_id: {
                    readonly title: 'Image Id';
                    readonly type: 'array';
                    readonly items: {
                      readonly title: 'ItemIdentityParserDataClass';
                      readonly type: 'object';
                      readonly properties: {
                        readonly value: {
                          readonly default: any;
                          readonly title: 'Value';
                          readonly type: 'string';
                        };
                        readonly confidence: {
                          readonly default: any;
                          readonly title: 'Confidence';
                          readonly type: 'integer';
                        };
                      };
                    };
                  };
                  readonly image_signature: {
                    readonly title: 'Image Signature';
                    readonly type: 'array';
                    readonly items: {
                      readonly title: 'ItemIdentityParserDataClass';
                      readonly type: 'object';
                      readonly properties: {
                        readonly value: {
                          readonly default: any;
                          readonly title: 'Value';
                          readonly type: 'string';
                        };
                        readonly confidence: {
                          readonly default: any;
                          readonly title: 'Confidence';
                          readonly type: 'integer';
                        };
                      };
                    };
                  };
                  readonly mrz: {
                    readonly title: 'ItemIdentityParserDataClass';
                    readonly type: 'object';
                    readonly properties: {
                      readonly value: {
                        readonly default: any;
                        readonly title: 'Value';
                        readonly type: 'string';
                      };
                      readonly confidence: {
                        readonly default: any;
                        readonly title: 'Confidence';
                        readonly type: 'integer';
                      };
                    };
                  };
                  readonly nationality: {
                    readonly title: 'ItemIdentityParserDataClass';
                    readonly type: 'object';
                    readonly properties: {
                      readonly value: {
                        readonly default: any;
                        readonly title: 'Value';
                        readonly type: 'string';
                      };
                      readonly confidence: {
                        readonly default: any;
                        readonly title: 'Confidence';
                        readonly type: 'integer';
                      };
                    };
                  };
                };
              };
            };
            readonly original_response: {
              readonly default: any;
              readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
              readonly title: 'Original Response';
            };
            readonly status: {
              readonly title: 'Status';
              readonly enum: readonly ['sucess', 'fail'];
              readonly type: 'string';
              readonly description: '`sucess` `fail`';
            };
          };
        };
        readonly 'eden-ai': {
          readonly required: readonly ['status'];
          readonly title: 'ocridentity_parserIdentityParserDataClass';
          readonly type: 'object';
          readonly properties: {
            readonly extracted_data: {
              readonly title: 'Extracted Data';
              readonly type: 'array';
              readonly items: {
                readonly required: readonly [
                  'last_name',
                  'birth_place',
                  'birth_date',
                  'issuance_date',
                  'expire_date',
                  'document_id',
                  'issuing_state',
                  'address',
                  'age',
                  'country',
                  'document_type',
                  'gender',
                  'mrz',
                  'nationality'
                ];
                readonly title: 'InfosIdentityParserDataClass';
                readonly type: 'object';
                readonly properties: {
                  readonly last_name: {
                    readonly title: 'ItemIdentityParserDataClass';
                    readonly type: 'object';
                    readonly properties: {
                      readonly value: {
                        readonly default: any;
                        readonly title: 'Value';
                        readonly type: 'string';
                      };
                      readonly confidence: {
                        readonly default: any;
                        readonly title: 'Confidence';
                        readonly type: 'integer';
                      };
                    };
                  };
                  readonly given_names: {
                    readonly title: 'Given Names';
                    readonly type: 'array';
                    readonly items: {
                      readonly title: 'ItemIdentityParserDataClass';
                      readonly type: 'object';
                      readonly properties: {
                        readonly value: {
                          readonly default: any;
                          readonly title: 'Value';
                          readonly type: 'string';
                        };
                        readonly confidence: {
                          readonly default: any;
                          readonly title: 'Confidence';
                          readonly type: 'integer';
                        };
                      };
                    };
                  };
                  readonly birth_place: {
                    readonly title: 'ItemIdentityParserDataClass';
                    readonly type: 'object';
                    readonly properties: {
                      readonly value: {
                        readonly default: any;
                        readonly title: 'Value';
                        readonly type: 'string';
                      };
                      readonly confidence: {
                        readonly default: any;
                        readonly title: 'Confidence';
                        readonly type: 'integer';
                      };
                    };
                  };
                  readonly birth_date: {
                    readonly title: 'ItemIdentityParserDataClass';
                    readonly type: 'object';
                    readonly properties: {
                      readonly value: {
                        readonly default: any;
                        readonly title: 'Value';
                        readonly type: 'string';
                      };
                      readonly confidence: {
                        readonly default: any;
                        readonly title: 'Confidence';
                        readonly type: 'integer';
                      };
                    };
                  };
                  readonly issuance_date: {
                    readonly title: 'ItemIdentityParserDataClass';
                    readonly type: 'object';
                    readonly properties: {
                      readonly value: {
                        readonly default: any;
                        readonly title: 'Value';
                        readonly type: 'string';
                      };
                      readonly confidence: {
                        readonly default: any;
                        readonly title: 'Confidence';
                        readonly type: 'integer';
                      };
                    };
                  };
                  readonly expire_date: {
                    readonly title: 'ItemIdentityParserDataClass';
                    readonly type: 'object';
                    readonly properties: {
                      readonly value: {
                        readonly default: any;
                        readonly title: 'Value';
                        readonly type: 'string';
                      };
                      readonly confidence: {
                        readonly default: any;
                        readonly title: 'Confidence';
                        readonly type: 'integer';
                      };
                    };
                  };
                  readonly document_id: {
                    readonly title: 'ItemIdentityParserDataClass';
                    readonly type: 'object';
                    readonly properties: {
                      readonly value: {
                        readonly default: any;
                        readonly title: 'Value';
                        readonly type: 'string';
                      };
                      readonly confidence: {
                        readonly default: any;
                        readonly title: 'Confidence';
                        readonly type: 'integer';
                      };
                    };
                  };
                  readonly issuing_state: {
                    readonly title: 'ItemIdentityParserDataClass';
                    readonly type: 'object';
                    readonly properties: {
                      readonly value: {
                        readonly default: any;
                        readonly title: 'Value';
                        readonly type: 'string';
                      };
                      readonly confidence: {
                        readonly default: any;
                        readonly title: 'Confidence';
                        readonly type: 'integer';
                      };
                    };
                  };
                  readonly address: {
                    readonly title: 'ItemIdentityParserDataClass';
                    readonly type: 'object';
                    readonly properties: {
                      readonly value: {
                        readonly default: any;
                        readonly title: 'Value';
                        readonly type: 'string';
                      };
                      readonly confidence: {
                        readonly default: any;
                        readonly title: 'Confidence';
                        readonly type: 'integer';
                      };
                    };
                  };
                  readonly age: {
                    readonly title: 'ItemIdentityParserDataClass';
                    readonly type: 'object';
                    readonly properties: {
                      readonly value: {
                        readonly default: any;
                        readonly title: 'Value';
                        readonly type: 'string';
                      };
                      readonly confidence: {
                        readonly default: any;
                        readonly title: 'Confidence';
                        readonly type: 'integer';
                      };
                    };
                  };
                  readonly country: {
                    readonly required: readonly ['name', 'alpha2', 'alpha3', 'confidence'];
                    readonly title: 'Country';
                    readonly type: 'object';
                    readonly properties: {
                      readonly name: {
                        readonly title: 'Name';
                        readonly type: 'string';
                      };
                      readonly alpha2: {
                        readonly title: 'Alpha2';
                        readonly type: 'string';
                      };
                      readonly alpha3: {
                        readonly title: 'Alpha3';
                        readonly type: 'string';
                      };
                      readonly confidence: {
                        readonly title: 'Confidence';
                        readonly type: 'integer';
                      };
                    };
                  };
                  readonly document_type: {
                    readonly title: 'ItemIdentityParserDataClass';
                    readonly type: 'object';
                    readonly properties: {
                      readonly value: {
                        readonly default: any;
                        readonly title: 'Value';
                        readonly type: 'string';
                      };
                      readonly confidence: {
                        readonly default: any;
                        readonly title: 'Confidence';
                        readonly type: 'integer';
                      };
                    };
                  };
                  readonly gender: {
                    readonly title: 'ItemIdentityParserDataClass';
                    readonly type: 'object';
                    readonly properties: {
                      readonly value: {
                        readonly default: any;
                        readonly title: 'Value';
                        readonly type: 'string';
                      };
                      readonly confidence: {
                        readonly default: any;
                        readonly title: 'Confidence';
                        readonly type: 'integer';
                      };
                    };
                  };
                  readonly image_id: {
                    readonly title: 'Image Id';
                    readonly type: 'array';
                    readonly items: {
                      readonly title: 'ItemIdentityParserDataClass';
                      readonly type: 'object';
                      readonly properties: {
                        readonly value: {
                          readonly default: any;
                          readonly title: 'Value';
                          readonly type: 'string';
                        };
                        readonly confidence: {
                          readonly default: any;
                          readonly title: 'Confidence';
                          readonly type: 'integer';
                        };
                      };
                    };
                  };
                  readonly image_signature: {
                    readonly title: 'Image Signature';
                    readonly type: 'array';
                    readonly items: {
                      readonly title: 'ItemIdentityParserDataClass';
                      readonly type: 'object';
                      readonly properties: {
                        readonly value: {
                          readonly default: any;
                          readonly title: 'Value';
                          readonly type: 'string';
                        };
                        readonly confidence: {
                          readonly default: any;
                          readonly title: 'Confidence';
                          readonly type: 'integer';
                        };
                      };
                    };
                  };
                  readonly mrz: {
                    readonly title: 'ItemIdentityParserDataClass';
                    readonly type: 'object';
                    readonly properties: {
                      readonly value: {
                        readonly default: any;
                        readonly title: 'Value';
                        readonly type: 'string';
                      };
                      readonly confidence: {
                        readonly default: any;
                        readonly title: 'Confidence';
                        readonly type: 'integer';
                      };
                    };
                  };
                  readonly nationality: {
                    readonly title: 'ItemIdentityParserDataClass';
                    readonly type: 'object';
                    readonly properties: {
                      readonly value: {
                        readonly default: any;
                        readonly title: 'Value';
                        readonly type: 'string';
                      };
                      readonly confidence: {
                        readonly default: any;
                        readonly title: 'Confidence';
                        readonly type: 'integer';
                      };
                    };
                  };
                };
              };
            };
            readonly original_response: {
              readonly default: any;
              readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
              readonly title: 'Original Response';
            };
            readonly status: {
              readonly title: 'Status';
              readonly enum: readonly ['sucess', 'fail'];
              readonly type: 'string';
              readonly description: '`sucess` `fail`';
            };
          };
        };
      };
      readonly title: 'ocridentity_parserResponseModel';
      readonly type: 'object';
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '400': {
      readonly type: 'object';
      readonly properties: {
        readonly error: {
          readonly type: 'object';
          readonly properties: {
            readonly type: {
              readonly type: 'string';
            };
            readonly message: {
              readonly type: 'object';
              readonly properties: {
                readonly '<parameter_name>': {
                  readonly type: 'array';
                  readonly items: {
                    readonly type: 'string';
                  };
                };
              };
              readonly required: readonly ['<parameter_name>'];
            };
          };
          readonly required: readonly ['message', 'type'];
        };
      };
      readonly required: readonly ['error'];
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '403': {
      readonly type: 'object';
      readonly properties: {
        readonly error: {
          readonly type: 'object';
          readonly properties: {
            readonly type: {
              readonly type: 'string';
            };
            readonly message: {
              readonly type: 'string';
            };
          };
          readonly required: readonly ['message', 'type'];
        };
      };
      readonly required: readonly ['error'];
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '404': {
      readonly type: 'object';
      readonly properties: {
        readonly details: {
          readonly type: 'string';
          readonly default: 'Not Found';
        };
      };
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '500': {
      readonly type: 'object';
      readonly properties: {
        readonly error: {
          readonly type: 'object';
          readonly properties: {
            readonly type: {
              readonly type: 'string';
            };
            readonly message: {
              readonly type: 'string';
            };
          };
          readonly required: readonly ['message', 'type'];
        };
      };
      readonly required: readonly ['error'];
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
  };
};
declare const OcrInvoiceParserCreate: {
  readonly body: {
    readonly type: 'object';
    readonly properties: {
      readonly providers: {
        readonly type: 'string';
        readonly minLength: 1;
        readonly description: "It can be one (ex: **'amazon'** or **'google'**) or multiple provider(s) (ex: **'amazon,microsoft,google'**)             that the data will be redirected to in order to get the processed results.";
        readonly examples: readonly [
          'amazon,base64,dataleon,mindee,veryfi,google,klippa,affinda,microsoft'
        ];
      };
      readonly fallback_providers: {
        readonly type: 'string';
        readonly minLength: 1;
        readonly description: "Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.\n    To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.\n\nThey will be tried in the same order they are input, and it will stop to the first provider who doesn't fail.\n\n\n*Doesn't work with async subfeatures.*\n    ";
      };
      readonly response_as_dict: {
        readonly type: 'boolean';
        readonly default: true;
        readonly description: "Optional : When set to **true** (default), the response is an object of responses with providers names as keys : <br> \n                  ``` {'google' : { 'status': 'success', ... }, } ``` <br>\n                When set to **false** the response structure is a list of response objects : <br> \n                   ``` [{'status': 'success', 'provider': 'google' ... }, ] ```. <br> \n                  ";
      };
      readonly attributes_as_list: {
        readonly type: 'boolean';
        readonly default: false;
        readonly description: "Optional : When set to **false** (default) the structure of the extracted items is list of objects having different attributes : <br>\n     ```{'items': [{'attribute_1': 'x1','attribute_2': 'y2'}, ... ]}``` <br>\n     When it is set to **true**, the response contains an object with each attribute as a list : <br>\n     ```{ 'attribute_1': ['x1','x2', ...], 'attribute_2': [y1, y2, ...]}``` ";
      };
      readonly show_original_response: {
        readonly type: 'boolean';
        readonly default: false;
        readonly description: 'Optional : Shows the original response of the provider.<br>\n        When set to **true**, a new attribute *original_response* will appear in the response object.';
      };
      readonly file: {
        readonly type: 'string';
        readonly format: 'binary';
        readonly description: 'File to analyse in binary format to be used with *content-type*: **multipart/form-data** <br> **Does not work with application/json !**';
      };
      readonly file_url: {
        readonly type: readonly ['string', 'null'];
        readonly format: 'uri';
        readonly description: 'File **URL** to analyse to be used with with *content-type*: **application/json**.';
        readonly examples: readonly ['http://edenai-resource-example.png'];
      };
      readonly language: {
        readonly type: readonly ['string', 'null'];
        readonly description: 'Language code of the language the document is written in (ex: fr (French), en (English), es (Spanish))';
        readonly examples: readonly ['en'];
      };
    };
    readonly required: readonly ['providers'];
    readonly $schema: 'http://json-schema.org/draft-04/schema#';
  };
  readonly response: {
    readonly '200': {
      readonly properties: {
        readonly affinda: {
          readonly required: readonly ['status'];
          readonly title: 'ocrinvoice_parserInvoiceParserDataClass';
          readonly type: 'object';
          readonly properties: {
            readonly extracted_data: {
              readonly title: 'Extracted Data';
              readonly type: 'array';
              readonly items: {
                readonly title: 'InfosInvoiceParserDataClass';
                readonly type: 'object';
                readonly properties: {
                  readonly customer_information: {
                    readonly required: readonly [
                      'customer_name',
                      'customer_address',
                      'customer_email',
                      'customer_id',
                      'customer_tax_id',
                      'customer_mailing_address',
                      'customer_billing_address',
                      'customer_shipping_address',
                      'customer_service_address',
                      'customer_remittance_address',
                      'abn_number',
                      'gst_number',
                      'pan_number',
                      'vat_number'
                    ];
                    readonly title: 'CustomerInformationInvoice';
                    readonly type: 'object';
                    readonly properties: {
                      readonly customer_name: {
                        readonly title: 'Customer Name';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly customer_address: {
                        readonly title: 'Customer Address';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly customer_email: {
                        readonly title: 'Customer Email';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly customer_id: {
                        readonly title: 'Customer Id';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly customer_tax_id: {
                        readonly title: 'Customer Tax Id';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly customer_mailing_address: {
                        readonly title: 'Customer Mailing Address';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly customer_billing_address: {
                        readonly title: 'Customer Billing Address';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly customer_shipping_address: {
                        readonly title: 'Customer Shipping Address';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly customer_service_address: {
                        readonly title: 'Customer Service Address';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly customer_remittance_address: {
                        readonly title: 'Customer Remittance Address';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly abn_number: {
                        readonly title: 'Abn Number';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly gst_number: {
                        readonly title: 'Gst Number';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly pan_number: {
                        readonly title: 'Pan Number';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly vat_number: {
                        readonly title: 'Vat Number';
                        readonly type: 'string';
                        readonly default: any;
                      };
                    };
                  };
                  readonly merchant_information: {
                    readonly required: readonly [
                      'merchant_name',
                      'merchant_address',
                      'merchant_phone',
                      'merchant_email',
                      'merchant_fax',
                      'merchant_website',
                      'merchant_tax_id',
                      'merchant_siret',
                      'merchant_siren',
                      'abn_number',
                      'gst_number',
                      'pan_number',
                      'vat_number'
                    ];
                    readonly title: 'MerchantInformationInvoice';
                    readonly type: 'object';
                    readonly properties: {
                      readonly merchant_name: {
                        readonly title: 'Merchant Name';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly merchant_address: {
                        readonly title: 'Merchant Address';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly merchant_phone: {
                        readonly title: 'Merchant Phone';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly merchant_email: {
                        readonly title: 'Merchant Email';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly merchant_fax: {
                        readonly title: 'Merchant Fax';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly merchant_website: {
                        readonly title: 'Merchant Website';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly merchant_tax_id: {
                        readonly title: 'Merchant Tax Id';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly merchant_siret: {
                        readonly title: 'Merchant Siret';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly merchant_siren: {
                        readonly title: 'Merchant Siren';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly abn_number: {
                        readonly title: 'Abn Number';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly gst_number: {
                        readonly title: 'Gst Number';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly pan_number: {
                        readonly title: 'Pan Number';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly vat_number: {
                        readonly title: 'Vat Number';
                        readonly type: 'string';
                        readonly default: any;
                      };
                    };
                  };
                  readonly invoice_number: {
                    readonly default: any;
                    readonly title: 'Invoice Number';
                    readonly type: 'string';
                  };
                  readonly invoice_total: {
                    readonly default: any;
                    readonly title: 'Invoice Total';
                    readonly type: 'integer';
                  };
                  readonly invoice_subtotal: {
                    readonly default: any;
                    readonly title: 'Invoice Subtotal';
                    readonly type: 'integer';
                  };
                  readonly gratuity: {
                    readonly default: any;
                    readonly title: 'Gratuity';
                    readonly type: 'integer';
                  };
                  readonly amount_due: {
                    readonly default: any;
                    readonly title: 'Amount Due';
                    readonly type: 'integer';
                  };
                  readonly previous_unpaid_balance: {
                    readonly default: any;
                    readonly title: 'Previous Unpaid Balance';
                    readonly type: 'integer';
                  };
                  readonly discount: {
                    readonly default: any;
                    readonly title: 'Discount';
                    readonly type: 'integer';
                  };
                  readonly taxes: {
                    readonly title: 'Taxes';
                    readonly type: 'array';
                    readonly items: {
                      readonly required: readonly ['value', 'rate'];
                      readonly title: 'TaxesInvoice';
                      readonly type: 'object';
                      readonly properties: {
                        readonly value: {
                          readonly title: 'Value';
                          readonly type: 'integer';
                        };
                        readonly rate: {
                          readonly title: 'Rate';
                          readonly type: 'integer';
                        };
                      };
                    };
                  };
                  readonly service_charge: {
                    readonly default: any;
                    readonly title: 'Service Charge';
                    readonly type: 'integer';
                  };
                  readonly payment_term: {
                    readonly default: any;
                    readonly title: 'Payment Term';
                    readonly type: 'string';
                  };
                  readonly purchase_order: {
                    readonly default: any;
                    readonly title: 'Purchase Order';
                    readonly type: 'string';
                  };
                  readonly date: {
                    readonly default: any;
                    readonly title: 'Date';
                    readonly type: 'string';
                  };
                  readonly due_date: {
                    readonly default: any;
                    readonly title: 'Due Date';
                    readonly type: 'string';
                  };
                  readonly service_date: {
                    readonly default: any;
                    readonly title: 'Service Date';
                    readonly type: 'string';
                  };
                  readonly service_due_date: {
                    readonly default: any;
                    readonly title: 'Service Due Date';
                    readonly type: 'string';
                  };
                  readonly po_number: {
                    readonly default: any;
                    readonly title: 'Po Number';
                    readonly type: 'string';
                  };
                  readonly locale: {
                    readonly required: readonly ['currency', 'language'];
                    readonly title: 'LocaleInvoice';
                    readonly type: 'object';
                    readonly properties: {
                      readonly currency: {
                        readonly title: 'Currency';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly language: {
                        readonly title: 'Language';
                        readonly type: 'string';
                        readonly default: any;
                      };
                    };
                  };
                  readonly bank_informations: {
                    readonly required: readonly [
                      'account_number',
                      'iban',
                      'bsb',
                      'sort_code',
                      'vat_number',
                      'rooting_number',
                      'swift'
                    ];
                    readonly title: 'BankInvoice';
                    readonly type: 'object';
                    readonly properties: {
                      readonly account_number: {
                        readonly title: 'Account Number';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly iban: {
                        readonly title: 'Iban';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly bsb: {
                        readonly title: 'Bsb';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly sort_code: {
                        readonly title: 'Sort Code';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly vat_number: {
                        readonly title: 'Vat Number';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly rooting_number: {
                        readonly title: 'Rooting Number';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly swift: {
                        readonly title: 'Swift';
                        readonly type: 'string';
                        readonly default: any;
                      };
                    };
                  };
                  readonly item_lines: {
                    readonly title: 'Item Lines';
                    readonly type: 'array';
                    readonly items: {
                      readonly title: 'ItemLinesInvoice';
                      readonly type: 'object';
                      readonly properties: {
                        readonly description: {
                          readonly default: any;
                          readonly title: 'Description';
                          readonly type: 'string';
                        };
                        readonly quantity: {
                          readonly default: any;
                          readonly title: 'Quantity';
                          readonly type: 'integer';
                        };
                        readonly amount: {
                          readonly default: any;
                          readonly title: 'Amount';
                          readonly type: 'integer';
                        };
                        readonly unit_price: {
                          readonly default: any;
                          readonly title: 'Unit Price';
                          readonly type: 'integer';
                        };
                        readonly discount: {
                          readonly default: any;
                          readonly title: 'Discount';
                          readonly type: 'integer';
                        };
                        readonly product_code: {
                          readonly default: any;
                          readonly title: 'Product Code';
                          readonly type: 'string';
                        };
                        readonly date_item: {
                          readonly default: any;
                          readonly title: 'Date Item';
                          readonly type: 'string';
                        };
                        readonly tax_item: {
                          readonly default: any;
                          readonly title: 'Tax Item';
                          readonly type: 'integer';
                        };
                        readonly tax_rate: {
                          readonly default: any;
                          readonly title: 'Tax Rate';
                          readonly type: 'integer';
                        };
                      };
                    };
                  };
                };
              };
            };
            readonly original_response: {
              readonly default: any;
              readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
              readonly title: 'Original Response';
            };
            readonly status: {
              readonly title: 'Status';
              readonly enum: readonly ['sucess', 'fail'];
              readonly type: 'string';
              readonly description: '`sucess` `fail`';
            };
          };
        };
        readonly veryfi: {
          readonly required: readonly ['status'];
          readonly title: 'ocrinvoice_parserInvoiceParserDataClass';
          readonly type: 'object';
          readonly properties: {
            readonly extracted_data: {
              readonly title: 'Extracted Data';
              readonly type: 'array';
              readonly items: {
                readonly title: 'InfosInvoiceParserDataClass';
                readonly type: 'object';
                readonly properties: {
                  readonly customer_information: {
                    readonly required: readonly [
                      'customer_name',
                      'customer_address',
                      'customer_email',
                      'customer_id',
                      'customer_tax_id',
                      'customer_mailing_address',
                      'customer_billing_address',
                      'customer_shipping_address',
                      'customer_service_address',
                      'customer_remittance_address',
                      'abn_number',
                      'gst_number',
                      'pan_number',
                      'vat_number'
                    ];
                    readonly title: 'CustomerInformationInvoice';
                    readonly type: 'object';
                    readonly properties: {
                      readonly customer_name: {
                        readonly title: 'Customer Name';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly customer_address: {
                        readonly title: 'Customer Address';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly customer_email: {
                        readonly title: 'Customer Email';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly customer_id: {
                        readonly title: 'Customer Id';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly customer_tax_id: {
                        readonly title: 'Customer Tax Id';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly customer_mailing_address: {
                        readonly title: 'Customer Mailing Address';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly customer_billing_address: {
                        readonly title: 'Customer Billing Address';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly customer_shipping_address: {
                        readonly title: 'Customer Shipping Address';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly customer_service_address: {
                        readonly title: 'Customer Service Address';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly customer_remittance_address: {
                        readonly title: 'Customer Remittance Address';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly abn_number: {
                        readonly title: 'Abn Number';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly gst_number: {
                        readonly title: 'Gst Number';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly pan_number: {
                        readonly title: 'Pan Number';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly vat_number: {
                        readonly title: 'Vat Number';
                        readonly type: 'string';
                        readonly default: any;
                      };
                    };
                  };
                  readonly merchant_information: {
                    readonly required: readonly [
                      'merchant_name',
                      'merchant_address',
                      'merchant_phone',
                      'merchant_email',
                      'merchant_fax',
                      'merchant_website',
                      'merchant_tax_id',
                      'merchant_siret',
                      'merchant_siren',
                      'abn_number',
                      'gst_number',
                      'pan_number',
                      'vat_number'
                    ];
                    readonly title: 'MerchantInformationInvoice';
                    readonly type: 'object';
                    readonly properties: {
                      readonly merchant_name: {
                        readonly title: 'Merchant Name';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly merchant_address: {
                        readonly title: 'Merchant Address';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly merchant_phone: {
                        readonly title: 'Merchant Phone';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly merchant_email: {
                        readonly title: 'Merchant Email';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly merchant_fax: {
                        readonly title: 'Merchant Fax';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly merchant_website: {
                        readonly title: 'Merchant Website';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly merchant_tax_id: {
                        readonly title: 'Merchant Tax Id';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly merchant_siret: {
                        readonly title: 'Merchant Siret';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly merchant_siren: {
                        readonly title: 'Merchant Siren';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly abn_number: {
                        readonly title: 'Abn Number';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly gst_number: {
                        readonly title: 'Gst Number';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly pan_number: {
                        readonly title: 'Pan Number';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly vat_number: {
                        readonly title: 'Vat Number';
                        readonly type: 'string';
                        readonly default: any;
                      };
                    };
                  };
                  readonly invoice_number: {
                    readonly default: any;
                    readonly title: 'Invoice Number';
                    readonly type: 'string';
                  };
                  readonly invoice_total: {
                    readonly default: any;
                    readonly title: 'Invoice Total';
                    readonly type: 'integer';
                  };
                  readonly invoice_subtotal: {
                    readonly default: any;
                    readonly title: 'Invoice Subtotal';
                    readonly type: 'integer';
                  };
                  readonly gratuity: {
                    readonly default: any;
                    readonly title: 'Gratuity';
                    readonly type: 'integer';
                  };
                  readonly amount_due: {
                    readonly default: any;
                    readonly title: 'Amount Due';
                    readonly type: 'integer';
                  };
                  readonly previous_unpaid_balance: {
                    readonly default: any;
                    readonly title: 'Previous Unpaid Balance';
                    readonly type: 'integer';
                  };
                  readonly discount: {
                    readonly default: any;
                    readonly title: 'Discount';
                    readonly type: 'integer';
                  };
                  readonly taxes: {
                    readonly title: 'Taxes';
                    readonly type: 'array';
                    readonly items: {
                      readonly required: readonly ['value', 'rate'];
                      readonly title: 'TaxesInvoice';
                      readonly type: 'object';
                      readonly properties: {
                        readonly value: {
                          readonly title: 'Value';
                          readonly type: 'integer';
                        };
                        readonly rate: {
                          readonly title: 'Rate';
                          readonly type: 'integer';
                        };
                      };
                    };
                  };
                  readonly service_charge: {
                    readonly default: any;
                    readonly title: 'Service Charge';
                    readonly type: 'integer';
                  };
                  readonly payment_term: {
                    readonly default: any;
                    readonly title: 'Payment Term';
                    readonly type: 'string';
                  };
                  readonly purchase_order: {
                    readonly default: any;
                    readonly title: 'Purchase Order';
                    readonly type: 'string';
                  };
                  readonly date: {
                    readonly default: any;
                    readonly title: 'Date';
                    readonly type: 'string';
                  };
                  readonly due_date: {
                    readonly default: any;
                    readonly title: 'Due Date';
                    readonly type: 'string';
                  };
                  readonly service_date: {
                    readonly default: any;
                    readonly title: 'Service Date';
                    readonly type: 'string';
                  };
                  readonly service_due_date: {
                    readonly default: any;
                    readonly title: 'Service Due Date';
                    readonly type: 'string';
                  };
                  readonly po_number: {
                    readonly default: any;
                    readonly title: 'Po Number';
                    readonly type: 'string';
                  };
                  readonly locale: {
                    readonly required: readonly ['currency', 'language'];
                    readonly title: 'LocaleInvoice';
                    readonly type: 'object';
                    readonly properties: {
                      readonly currency: {
                        readonly title: 'Currency';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly language: {
                        readonly title: 'Language';
                        readonly type: 'string';
                        readonly default: any;
                      };
                    };
                  };
                  readonly bank_informations: {
                    readonly required: readonly [
                      'account_number',
                      'iban',
                      'bsb',
                      'sort_code',
                      'vat_number',
                      'rooting_number',
                      'swift'
                    ];
                    readonly title: 'BankInvoice';
                    readonly type: 'object';
                    readonly properties: {
                      readonly account_number: {
                        readonly title: 'Account Number';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly iban: {
                        readonly title: 'Iban';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly bsb: {
                        readonly title: 'Bsb';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly sort_code: {
                        readonly title: 'Sort Code';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly vat_number: {
                        readonly title: 'Vat Number';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly rooting_number: {
                        readonly title: 'Rooting Number';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly swift: {
                        readonly title: 'Swift';
                        readonly type: 'string';
                        readonly default: any;
                      };
                    };
                  };
                  readonly item_lines: {
                    readonly title: 'Item Lines';
                    readonly type: 'array';
                    readonly items: {
                      readonly title: 'ItemLinesInvoice';
                      readonly type: 'object';
                      readonly properties: {
                        readonly description: {
                          readonly default: any;
                          readonly title: 'Description';
                          readonly type: 'string';
                        };
                        readonly quantity: {
                          readonly default: any;
                          readonly title: 'Quantity';
                          readonly type: 'integer';
                        };
                        readonly amount: {
                          readonly default: any;
                          readonly title: 'Amount';
                          readonly type: 'integer';
                        };
                        readonly unit_price: {
                          readonly default: any;
                          readonly title: 'Unit Price';
                          readonly type: 'integer';
                        };
                        readonly discount: {
                          readonly default: any;
                          readonly title: 'Discount';
                          readonly type: 'integer';
                        };
                        readonly product_code: {
                          readonly default: any;
                          readonly title: 'Product Code';
                          readonly type: 'string';
                        };
                        readonly date_item: {
                          readonly default: any;
                          readonly title: 'Date Item';
                          readonly type: 'string';
                        };
                        readonly tax_item: {
                          readonly default: any;
                          readonly title: 'Tax Item';
                          readonly type: 'integer';
                        };
                        readonly tax_rate: {
                          readonly default: any;
                          readonly title: 'Tax Rate';
                          readonly type: 'integer';
                        };
                      };
                    };
                  };
                };
              };
            };
            readonly original_response: {
              readonly default: any;
              readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
              readonly title: 'Original Response';
            };
            readonly status: {
              readonly title: 'Status';
              readonly enum: readonly ['sucess', 'fail'];
              readonly type: 'string';
              readonly description: '`sucess` `fail`';
            };
          };
        };
        readonly base64: {
          readonly required: readonly ['status'];
          readonly title: 'ocrinvoice_parserInvoiceParserDataClass';
          readonly type: 'object';
          readonly properties: {
            readonly extracted_data: {
              readonly title: 'Extracted Data';
              readonly type: 'array';
              readonly items: {
                readonly title: 'InfosInvoiceParserDataClass';
                readonly type: 'object';
                readonly properties: {
                  readonly customer_information: {
                    readonly required: readonly [
                      'customer_name',
                      'customer_address',
                      'customer_email',
                      'customer_id',
                      'customer_tax_id',
                      'customer_mailing_address',
                      'customer_billing_address',
                      'customer_shipping_address',
                      'customer_service_address',
                      'customer_remittance_address',
                      'abn_number',
                      'gst_number',
                      'pan_number',
                      'vat_number'
                    ];
                    readonly title: 'CustomerInformationInvoice';
                    readonly type: 'object';
                    readonly properties: {
                      readonly customer_name: {
                        readonly title: 'Customer Name';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly customer_address: {
                        readonly title: 'Customer Address';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly customer_email: {
                        readonly title: 'Customer Email';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly customer_id: {
                        readonly title: 'Customer Id';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly customer_tax_id: {
                        readonly title: 'Customer Tax Id';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly customer_mailing_address: {
                        readonly title: 'Customer Mailing Address';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly customer_billing_address: {
                        readonly title: 'Customer Billing Address';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly customer_shipping_address: {
                        readonly title: 'Customer Shipping Address';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly customer_service_address: {
                        readonly title: 'Customer Service Address';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly customer_remittance_address: {
                        readonly title: 'Customer Remittance Address';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly abn_number: {
                        readonly title: 'Abn Number';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly gst_number: {
                        readonly title: 'Gst Number';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly pan_number: {
                        readonly title: 'Pan Number';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly vat_number: {
                        readonly title: 'Vat Number';
                        readonly type: 'string';
                        readonly default: any;
                      };
                    };
                  };
                  readonly merchant_information: {
                    readonly required: readonly [
                      'merchant_name',
                      'merchant_address',
                      'merchant_phone',
                      'merchant_email',
                      'merchant_fax',
                      'merchant_website',
                      'merchant_tax_id',
                      'merchant_siret',
                      'merchant_siren',
                      'abn_number',
                      'gst_number',
                      'pan_number',
                      'vat_number'
                    ];
                    readonly title: 'MerchantInformationInvoice';
                    readonly type: 'object';
                    readonly properties: {
                      readonly merchant_name: {
                        readonly title: 'Merchant Name';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly merchant_address: {
                        readonly title: 'Merchant Address';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly merchant_phone: {
                        readonly title: 'Merchant Phone';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly merchant_email: {
                        readonly title: 'Merchant Email';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly merchant_fax: {
                        readonly title: 'Merchant Fax';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly merchant_website: {
                        readonly title: 'Merchant Website';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly merchant_tax_id: {
                        readonly title: 'Merchant Tax Id';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly merchant_siret: {
                        readonly title: 'Merchant Siret';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly merchant_siren: {
                        readonly title: 'Merchant Siren';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly abn_number: {
                        readonly title: 'Abn Number';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly gst_number: {
                        readonly title: 'Gst Number';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly pan_number: {
                        readonly title: 'Pan Number';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly vat_number: {
                        readonly title: 'Vat Number';
                        readonly type: 'string';
                        readonly default: any;
                      };
                    };
                  };
                  readonly invoice_number: {
                    readonly default: any;
                    readonly title: 'Invoice Number';
                    readonly type: 'string';
                  };
                  readonly invoice_total: {
                    readonly default: any;
                    readonly title: 'Invoice Total';
                    readonly type: 'integer';
                  };
                  readonly invoice_subtotal: {
                    readonly default: any;
                    readonly title: 'Invoice Subtotal';
                    readonly type: 'integer';
                  };
                  readonly gratuity: {
                    readonly default: any;
                    readonly title: 'Gratuity';
                    readonly type: 'integer';
                  };
                  readonly amount_due: {
                    readonly default: any;
                    readonly title: 'Amount Due';
                    readonly type: 'integer';
                  };
                  readonly previous_unpaid_balance: {
                    readonly default: any;
                    readonly title: 'Previous Unpaid Balance';
                    readonly type: 'integer';
                  };
                  readonly discount: {
                    readonly default: any;
                    readonly title: 'Discount';
                    readonly type: 'integer';
                  };
                  readonly taxes: {
                    readonly title: 'Taxes';
                    readonly type: 'array';
                    readonly items: {
                      readonly required: readonly ['value', 'rate'];
                      readonly title: 'TaxesInvoice';
                      readonly type: 'object';
                      readonly properties: {
                        readonly value: {
                          readonly title: 'Value';
                          readonly type: 'integer';
                        };
                        readonly rate: {
                          readonly title: 'Rate';
                          readonly type: 'integer';
                        };
                      };
                    };
                  };
                  readonly service_charge: {
                    readonly default: any;
                    readonly title: 'Service Charge';
                    readonly type: 'integer';
                  };
                  readonly payment_term: {
                    readonly default: any;
                    readonly title: 'Payment Term';
                    readonly type: 'string';
                  };
                  readonly purchase_order: {
                    readonly default: any;
                    readonly title: 'Purchase Order';
                    readonly type: 'string';
                  };
                  readonly date: {
                    readonly default: any;
                    readonly title: 'Date';
                    readonly type: 'string';
                  };
                  readonly due_date: {
                    readonly default: any;
                    readonly title: 'Due Date';
                    readonly type: 'string';
                  };
                  readonly service_date: {
                    readonly default: any;
                    readonly title: 'Service Date';
                    readonly type: 'string';
                  };
                  readonly service_due_date: {
                    readonly default: any;
                    readonly title: 'Service Due Date';
                    readonly type: 'string';
                  };
                  readonly po_number: {
                    readonly default: any;
                    readonly title: 'Po Number';
                    readonly type: 'string';
                  };
                  readonly locale: {
                    readonly required: readonly ['currency', 'language'];
                    readonly title: 'LocaleInvoice';
                    readonly type: 'object';
                    readonly properties: {
                      readonly currency: {
                        readonly title: 'Currency';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly language: {
                        readonly title: 'Language';
                        readonly type: 'string';
                        readonly default: any;
                      };
                    };
                  };
                  readonly bank_informations: {
                    readonly required: readonly [
                      'account_number',
                      'iban',
                      'bsb',
                      'sort_code',
                      'vat_number',
                      'rooting_number',
                      'swift'
                    ];
                    readonly title: 'BankInvoice';
                    readonly type: 'object';
                    readonly properties: {
                      readonly account_number: {
                        readonly title: 'Account Number';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly iban: {
                        readonly title: 'Iban';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly bsb: {
                        readonly title: 'Bsb';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly sort_code: {
                        readonly title: 'Sort Code';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly vat_number: {
                        readonly title: 'Vat Number';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly rooting_number: {
                        readonly title: 'Rooting Number';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly swift: {
                        readonly title: 'Swift';
                        readonly type: 'string';
                        readonly default: any;
                      };
                    };
                  };
                  readonly item_lines: {
                    readonly title: 'Item Lines';
                    readonly type: 'array';
                    readonly items: {
                      readonly title: 'ItemLinesInvoice';
                      readonly type: 'object';
                      readonly properties: {
                        readonly description: {
                          readonly default: any;
                          readonly title: 'Description';
                          readonly type: 'string';
                        };
                        readonly quantity: {
                          readonly default: any;
                          readonly title: 'Quantity';
                          readonly type: 'integer';
                        };
                        readonly amount: {
                          readonly default: any;
                          readonly title: 'Amount';
                          readonly type: 'integer';
                        };
                        readonly unit_price: {
                          readonly default: any;
                          readonly title: 'Unit Price';
                          readonly type: 'integer';
                        };
                        readonly discount: {
                          readonly default: any;
                          readonly title: 'Discount';
                          readonly type: 'integer';
                        };
                        readonly product_code: {
                          readonly default: any;
                          readonly title: 'Product Code';
                          readonly type: 'string';
                        };
                        readonly date_item: {
                          readonly default: any;
                          readonly title: 'Date Item';
                          readonly type: 'string';
                        };
                        readonly tax_item: {
                          readonly default: any;
                          readonly title: 'Tax Item';
                          readonly type: 'integer';
                        };
                        readonly tax_rate: {
                          readonly default: any;
                          readonly title: 'Tax Rate';
                          readonly type: 'integer';
                        };
                      };
                    };
                  };
                };
              };
            };
            readonly original_response: {
              readonly default: any;
              readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
              readonly title: 'Original Response';
            };
            readonly status: {
              readonly title: 'Status';
              readonly enum: readonly ['sucess', 'fail'];
              readonly type: 'string';
              readonly description: '`sucess` `fail`';
            };
          };
        };
        readonly mindee: {
          readonly required: readonly ['status'];
          readonly title: 'ocrinvoice_parserInvoiceParserDataClass';
          readonly type: 'object';
          readonly properties: {
            readonly extracted_data: {
              readonly title: 'Extracted Data';
              readonly type: 'array';
              readonly items: {
                readonly title: 'InfosInvoiceParserDataClass';
                readonly type: 'object';
                readonly properties: {
                  readonly customer_information: {
                    readonly required: readonly [
                      'customer_name',
                      'customer_address',
                      'customer_email',
                      'customer_id',
                      'customer_tax_id',
                      'customer_mailing_address',
                      'customer_billing_address',
                      'customer_shipping_address',
                      'customer_service_address',
                      'customer_remittance_address',
                      'abn_number',
                      'gst_number',
                      'pan_number',
                      'vat_number'
                    ];
                    readonly title: 'CustomerInformationInvoice';
                    readonly type: 'object';
                    readonly properties: {
                      readonly customer_name: {
                        readonly title: 'Customer Name';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly customer_address: {
                        readonly title: 'Customer Address';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly customer_email: {
                        readonly title: 'Customer Email';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly customer_id: {
                        readonly title: 'Customer Id';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly customer_tax_id: {
                        readonly title: 'Customer Tax Id';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly customer_mailing_address: {
                        readonly title: 'Customer Mailing Address';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly customer_billing_address: {
                        readonly title: 'Customer Billing Address';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly customer_shipping_address: {
                        readonly title: 'Customer Shipping Address';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly customer_service_address: {
                        readonly title: 'Customer Service Address';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly customer_remittance_address: {
                        readonly title: 'Customer Remittance Address';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly abn_number: {
                        readonly title: 'Abn Number';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly gst_number: {
                        readonly title: 'Gst Number';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly pan_number: {
                        readonly title: 'Pan Number';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly vat_number: {
                        readonly title: 'Vat Number';
                        readonly type: 'string';
                        readonly default: any;
                      };
                    };
                  };
                  readonly merchant_information: {
                    readonly required: readonly [
                      'merchant_name',
                      'merchant_address',
                      'merchant_phone',
                      'merchant_email',
                      'merchant_fax',
                      'merchant_website',
                      'merchant_tax_id',
                      'merchant_siret',
                      'merchant_siren',
                      'abn_number',
                      'gst_number',
                      'pan_number',
                      'vat_number'
                    ];
                    readonly title: 'MerchantInformationInvoice';
                    readonly type: 'object';
                    readonly properties: {
                      readonly merchant_name: {
                        readonly title: 'Merchant Name';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly merchant_address: {
                        readonly title: 'Merchant Address';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly merchant_phone: {
                        readonly title: 'Merchant Phone';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly merchant_email: {
                        readonly title: 'Merchant Email';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly merchant_fax: {
                        readonly title: 'Merchant Fax';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly merchant_website: {
                        readonly title: 'Merchant Website';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly merchant_tax_id: {
                        readonly title: 'Merchant Tax Id';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly merchant_siret: {
                        readonly title: 'Merchant Siret';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly merchant_siren: {
                        readonly title: 'Merchant Siren';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly abn_number: {
                        readonly title: 'Abn Number';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly gst_number: {
                        readonly title: 'Gst Number';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly pan_number: {
                        readonly title: 'Pan Number';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly vat_number: {
                        readonly title: 'Vat Number';
                        readonly type: 'string';
                        readonly default: any;
                      };
                    };
                  };
                  readonly invoice_number: {
                    readonly default: any;
                    readonly title: 'Invoice Number';
                    readonly type: 'string';
                  };
                  readonly invoice_total: {
                    readonly default: any;
                    readonly title: 'Invoice Total';
                    readonly type: 'integer';
                  };
                  readonly invoice_subtotal: {
                    readonly default: any;
                    readonly title: 'Invoice Subtotal';
                    readonly type: 'integer';
                  };
                  readonly gratuity: {
                    readonly default: any;
                    readonly title: 'Gratuity';
                    readonly type: 'integer';
                  };
                  readonly amount_due: {
                    readonly default: any;
                    readonly title: 'Amount Due';
                    readonly type: 'integer';
                  };
                  readonly previous_unpaid_balance: {
                    readonly default: any;
                    readonly title: 'Previous Unpaid Balance';
                    readonly type: 'integer';
                  };
                  readonly discount: {
                    readonly default: any;
                    readonly title: 'Discount';
                    readonly type: 'integer';
                  };
                  readonly taxes: {
                    readonly title: 'Taxes';
                    readonly type: 'array';
                    readonly items: {
                      readonly required: readonly ['value', 'rate'];
                      readonly title: 'TaxesInvoice';
                      readonly type: 'object';
                      readonly properties: {
                        readonly value: {
                          readonly title: 'Value';
                          readonly type: 'integer';
                        };
                        readonly rate: {
                          readonly title: 'Rate';
                          readonly type: 'integer';
                        };
                      };
                    };
                  };
                  readonly service_charge: {
                    readonly default: any;
                    readonly title: 'Service Charge';
                    readonly type: 'integer';
                  };
                  readonly payment_term: {
                    readonly default: any;
                    readonly title: 'Payment Term';
                    readonly type: 'string';
                  };
                  readonly purchase_order: {
                    readonly default: any;
                    readonly title: 'Purchase Order';
                    readonly type: 'string';
                  };
                  readonly date: {
                    readonly default: any;
                    readonly title: 'Date';
                    readonly type: 'string';
                  };
                  readonly due_date: {
                    readonly default: any;
                    readonly title: 'Due Date';
                    readonly type: 'string';
                  };
                  readonly service_date: {
                    readonly default: any;
                    readonly title: 'Service Date';
                    readonly type: 'string';
                  };
                  readonly service_due_date: {
                    readonly default: any;
                    readonly title: 'Service Due Date';
                    readonly type: 'string';
                  };
                  readonly po_number: {
                    readonly default: any;
                    readonly title: 'Po Number';
                    readonly type: 'string';
                  };
                  readonly locale: {
                    readonly required: readonly ['currency', 'language'];
                    readonly title: 'LocaleInvoice';
                    readonly type: 'object';
                    readonly properties: {
                      readonly currency: {
                        readonly title: 'Currency';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly language: {
                        readonly title: 'Language';
                        readonly type: 'string';
                        readonly default: any;
                      };
                    };
                  };
                  readonly bank_informations: {
                    readonly required: readonly [
                      'account_number',
                      'iban',
                      'bsb',
                      'sort_code',
                      'vat_number',
                      'rooting_number',
                      'swift'
                    ];
                    readonly title: 'BankInvoice';
                    readonly type: 'object';
                    readonly properties: {
                      readonly account_number: {
                        readonly title: 'Account Number';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly iban: {
                        readonly title: 'Iban';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly bsb: {
                        readonly title: 'Bsb';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly sort_code: {
                        readonly title: 'Sort Code';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly vat_number: {
                        readonly title: 'Vat Number';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly rooting_number: {
                        readonly title: 'Rooting Number';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly swift: {
                        readonly title: 'Swift';
                        readonly type: 'string';
                        readonly default: any;
                      };
                    };
                  };
                  readonly item_lines: {
                    readonly title: 'Item Lines';
                    readonly type: 'array';
                    readonly items: {
                      readonly title: 'ItemLinesInvoice';
                      readonly type: 'object';
                      readonly properties: {
                        readonly description: {
                          readonly default: any;
                          readonly title: 'Description';
                          readonly type: 'string';
                        };
                        readonly quantity: {
                          readonly default: any;
                          readonly title: 'Quantity';
                          readonly type: 'integer';
                        };
                        readonly amount: {
                          readonly default: any;
                          readonly title: 'Amount';
                          readonly type: 'integer';
                        };
                        readonly unit_price: {
                          readonly default: any;
                          readonly title: 'Unit Price';
                          readonly type: 'integer';
                        };
                        readonly discount: {
                          readonly default: any;
                          readonly title: 'Discount';
                          readonly type: 'integer';
                        };
                        readonly product_code: {
                          readonly default: any;
                          readonly title: 'Product Code';
                          readonly type: 'string';
                        };
                        readonly date_item: {
                          readonly default: any;
                          readonly title: 'Date Item';
                          readonly type: 'string';
                        };
                        readonly tax_item: {
                          readonly default: any;
                          readonly title: 'Tax Item';
                          readonly type: 'integer';
                        };
                        readonly tax_rate: {
                          readonly default: any;
                          readonly title: 'Tax Rate';
                          readonly type: 'integer';
                        };
                      };
                    };
                  };
                };
              };
            };
            readonly original_response: {
              readonly default: any;
              readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
              readonly title: 'Original Response';
            };
            readonly status: {
              readonly title: 'Status';
              readonly enum: readonly ['sucess', 'fail'];
              readonly type: 'string';
              readonly description: '`sucess` `fail`';
            };
          };
        };
        readonly rossum: {
          readonly required: readonly ['status'];
          readonly title: 'ocrinvoice_parserInvoiceParserDataClass';
          readonly type: 'object';
          readonly properties: {
            readonly extracted_data: {
              readonly title: 'Extracted Data';
              readonly type: 'array';
              readonly items: {
                readonly title: 'InfosInvoiceParserDataClass';
                readonly type: 'object';
                readonly properties: {
                  readonly customer_information: {
                    readonly required: readonly [
                      'customer_name',
                      'customer_address',
                      'customer_email',
                      'customer_id',
                      'customer_tax_id',
                      'customer_mailing_address',
                      'customer_billing_address',
                      'customer_shipping_address',
                      'customer_service_address',
                      'customer_remittance_address',
                      'abn_number',
                      'gst_number',
                      'pan_number',
                      'vat_number'
                    ];
                    readonly title: 'CustomerInformationInvoice';
                    readonly type: 'object';
                    readonly properties: {
                      readonly customer_name: {
                        readonly title: 'Customer Name';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly customer_address: {
                        readonly title: 'Customer Address';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly customer_email: {
                        readonly title: 'Customer Email';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly customer_id: {
                        readonly title: 'Customer Id';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly customer_tax_id: {
                        readonly title: 'Customer Tax Id';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly customer_mailing_address: {
                        readonly title: 'Customer Mailing Address';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly customer_billing_address: {
                        readonly title: 'Customer Billing Address';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly customer_shipping_address: {
                        readonly title: 'Customer Shipping Address';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly customer_service_address: {
                        readonly title: 'Customer Service Address';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly customer_remittance_address: {
                        readonly title: 'Customer Remittance Address';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly abn_number: {
                        readonly title: 'Abn Number';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly gst_number: {
                        readonly title: 'Gst Number';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly pan_number: {
                        readonly title: 'Pan Number';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly vat_number: {
                        readonly title: 'Vat Number';
                        readonly type: 'string';
                        readonly default: any;
                      };
                    };
                  };
                  readonly merchant_information: {
                    readonly required: readonly [
                      'merchant_name',
                      'merchant_address',
                      'merchant_phone',
                      'merchant_email',
                      'merchant_fax',
                      'merchant_website',
                      'merchant_tax_id',
                      'merchant_siret',
                      'merchant_siren',
                      'abn_number',
                      'gst_number',
                      'pan_number',
                      'vat_number'
                    ];
                    readonly title: 'MerchantInformationInvoice';
                    readonly type: 'object';
                    readonly properties: {
                      readonly merchant_name: {
                        readonly title: 'Merchant Name';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly merchant_address: {
                        readonly title: 'Merchant Address';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly merchant_phone: {
                        readonly title: 'Merchant Phone';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly merchant_email: {
                        readonly title: 'Merchant Email';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly merchant_fax: {
                        readonly title: 'Merchant Fax';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly merchant_website: {
                        readonly title: 'Merchant Website';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly merchant_tax_id: {
                        readonly title: 'Merchant Tax Id';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly merchant_siret: {
                        readonly title: 'Merchant Siret';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly merchant_siren: {
                        readonly title: 'Merchant Siren';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly abn_number: {
                        readonly title: 'Abn Number';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly gst_number: {
                        readonly title: 'Gst Number';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly pan_number: {
                        readonly title: 'Pan Number';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly vat_number: {
                        readonly title: 'Vat Number';
                        readonly type: 'string';
                        readonly default: any;
                      };
                    };
                  };
                  readonly invoice_number: {
                    readonly default: any;
                    readonly title: 'Invoice Number';
                    readonly type: 'string';
                  };
                  readonly invoice_total: {
                    readonly default: any;
                    readonly title: 'Invoice Total';
                    readonly type: 'integer';
                  };
                  readonly invoice_subtotal: {
                    readonly default: any;
                    readonly title: 'Invoice Subtotal';
                    readonly type: 'integer';
                  };
                  readonly gratuity: {
                    readonly default: any;
                    readonly title: 'Gratuity';
                    readonly type: 'integer';
                  };
                  readonly amount_due: {
                    readonly default: any;
                    readonly title: 'Amount Due';
                    readonly type: 'integer';
                  };
                  readonly previous_unpaid_balance: {
                    readonly default: any;
                    readonly title: 'Previous Unpaid Balance';
                    readonly type: 'integer';
                  };
                  readonly discount: {
                    readonly default: any;
                    readonly title: 'Discount';
                    readonly type: 'integer';
                  };
                  readonly taxes: {
                    readonly title: 'Taxes';
                    readonly type: 'array';
                    readonly items: {
                      readonly required: readonly ['value', 'rate'];
                      readonly title: 'TaxesInvoice';
                      readonly type: 'object';
                      readonly properties: {
                        readonly value: {
                          readonly title: 'Value';
                          readonly type: 'integer';
                        };
                        readonly rate: {
                          readonly title: 'Rate';
                          readonly type: 'integer';
                        };
                      };
                    };
                  };
                  readonly service_charge: {
                    readonly default: any;
                    readonly title: 'Service Charge';
                    readonly type: 'integer';
                  };
                  readonly payment_term: {
                    readonly default: any;
                    readonly title: 'Payment Term';
                    readonly type: 'string';
                  };
                  readonly purchase_order: {
                    readonly default: any;
                    readonly title: 'Purchase Order';
                    readonly type: 'string';
                  };
                  readonly date: {
                    readonly default: any;
                    readonly title: 'Date';
                    readonly type: 'string';
                  };
                  readonly due_date: {
                    readonly default: any;
                    readonly title: 'Due Date';
                    readonly type: 'string';
                  };
                  readonly service_date: {
                    readonly default: any;
                    readonly title: 'Service Date';
                    readonly type: 'string';
                  };
                  readonly service_due_date: {
                    readonly default: any;
                    readonly title: 'Service Due Date';
                    readonly type: 'string';
                  };
                  readonly po_number: {
                    readonly default: any;
                    readonly title: 'Po Number';
                    readonly type: 'string';
                  };
                  readonly locale: {
                    readonly required: readonly ['currency', 'language'];
                    readonly title: 'LocaleInvoice';
                    readonly type: 'object';
                    readonly properties: {
                      readonly currency: {
                        readonly title: 'Currency';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly language: {
                        readonly title: 'Language';
                        readonly type: 'string';
                        readonly default: any;
                      };
                    };
                  };
                  readonly bank_informations: {
                    readonly required: readonly [
                      'account_number',
                      'iban',
                      'bsb',
                      'sort_code',
                      'vat_number',
                      'rooting_number',
                      'swift'
                    ];
                    readonly title: 'BankInvoice';
                    readonly type: 'object';
                    readonly properties: {
                      readonly account_number: {
                        readonly title: 'Account Number';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly iban: {
                        readonly title: 'Iban';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly bsb: {
                        readonly title: 'Bsb';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly sort_code: {
                        readonly title: 'Sort Code';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly vat_number: {
                        readonly title: 'Vat Number';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly rooting_number: {
                        readonly title: 'Rooting Number';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly swift: {
                        readonly title: 'Swift';
                        readonly type: 'string';
                        readonly default: any;
                      };
                    };
                  };
                  readonly item_lines: {
                    readonly title: 'Item Lines';
                    readonly type: 'array';
                    readonly items: {
                      readonly title: 'ItemLinesInvoice';
                      readonly type: 'object';
                      readonly properties: {
                        readonly description: {
                          readonly default: any;
                          readonly title: 'Description';
                          readonly type: 'string';
                        };
                        readonly quantity: {
                          readonly default: any;
                          readonly title: 'Quantity';
                          readonly type: 'integer';
                        };
                        readonly amount: {
                          readonly default: any;
                          readonly title: 'Amount';
                          readonly type: 'integer';
                        };
                        readonly unit_price: {
                          readonly default: any;
                          readonly title: 'Unit Price';
                          readonly type: 'integer';
                        };
                        readonly discount: {
                          readonly default: any;
                          readonly title: 'Discount';
                          readonly type: 'integer';
                        };
                        readonly product_code: {
                          readonly default: any;
                          readonly title: 'Product Code';
                          readonly type: 'string';
                        };
                        readonly date_item: {
                          readonly default: any;
                          readonly title: 'Date Item';
                          readonly type: 'string';
                        };
                        readonly tax_item: {
                          readonly default: any;
                          readonly title: 'Tax Item';
                          readonly type: 'integer';
                        };
                        readonly tax_rate: {
                          readonly default: any;
                          readonly title: 'Tax Rate';
                          readonly type: 'integer';
                        };
                      };
                    };
                  };
                };
              };
            };
            readonly original_response: {
              readonly default: any;
              readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
              readonly title: 'Original Response';
            };
            readonly status: {
              readonly title: 'Status';
              readonly enum: readonly ['sucess', 'fail'];
              readonly type: 'string';
              readonly description: '`sucess` `fail`';
            };
          };
        };
        readonly microsoft: {
          readonly required: readonly ['status'];
          readonly title: 'ocrinvoice_parserInvoiceParserDataClass';
          readonly type: 'object';
          readonly properties: {
            readonly extracted_data: {
              readonly title: 'Extracted Data';
              readonly type: 'array';
              readonly items: {
                readonly title: 'InfosInvoiceParserDataClass';
                readonly type: 'object';
                readonly properties: {
                  readonly customer_information: {
                    readonly required: readonly [
                      'customer_name',
                      'customer_address',
                      'customer_email',
                      'customer_id',
                      'customer_tax_id',
                      'customer_mailing_address',
                      'customer_billing_address',
                      'customer_shipping_address',
                      'customer_service_address',
                      'customer_remittance_address',
                      'abn_number',
                      'gst_number',
                      'pan_number',
                      'vat_number'
                    ];
                    readonly title: 'CustomerInformationInvoice';
                    readonly type: 'object';
                    readonly properties: {
                      readonly customer_name: {
                        readonly title: 'Customer Name';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly customer_address: {
                        readonly title: 'Customer Address';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly customer_email: {
                        readonly title: 'Customer Email';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly customer_id: {
                        readonly title: 'Customer Id';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly customer_tax_id: {
                        readonly title: 'Customer Tax Id';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly customer_mailing_address: {
                        readonly title: 'Customer Mailing Address';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly customer_billing_address: {
                        readonly title: 'Customer Billing Address';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly customer_shipping_address: {
                        readonly title: 'Customer Shipping Address';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly customer_service_address: {
                        readonly title: 'Customer Service Address';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly customer_remittance_address: {
                        readonly title: 'Customer Remittance Address';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly abn_number: {
                        readonly title: 'Abn Number';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly gst_number: {
                        readonly title: 'Gst Number';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly pan_number: {
                        readonly title: 'Pan Number';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly vat_number: {
                        readonly title: 'Vat Number';
                        readonly type: 'string';
                        readonly default: any;
                      };
                    };
                  };
                  readonly merchant_information: {
                    readonly required: readonly [
                      'merchant_name',
                      'merchant_address',
                      'merchant_phone',
                      'merchant_email',
                      'merchant_fax',
                      'merchant_website',
                      'merchant_tax_id',
                      'merchant_siret',
                      'merchant_siren',
                      'abn_number',
                      'gst_number',
                      'pan_number',
                      'vat_number'
                    ];
                    readonly title: 'MerchantInformationInvoice';
                    readonly type: 'object';
                    readonly properties: {
                      readonly merchant_name: {
                        readonly title: 'Merchant Name';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly merchant_address: {
                        readonly title: 'Merchant Address';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly merchant_phone: {
                        readonly title: 'Merchant Phone';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly merchant_email: {
                        readonly title: 'Merchant Email';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly merchant_fax: {
                        readonly title: 'Merchant Fax';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly merchant_website: {
                        readonly title: 'Merchant Website';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly merchant_tax_id: {
                        readonly title: 'Merchant Tax Id';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly merchant_siret: {
                        readonly title: 'Merchant Siret';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly merchant_siren: {
                        readonly title: 'Merchant Siren';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly abn_number: {
                        readonly title: 'Abn Number';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly gst_number: {
                        readonly title: 'Gst Number';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly pan_number: {
                        readonly title: 'Pan Number';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly vat_number: {
                        readonly title: 'Vat Number';
                        readonly type: 'string';
                        readonly default: any;
                      };
                    };
                  };
                  readonly invoice_number: {
                    readonly default: any;
                    readonly title: 'Invoice Number';
                    readonly type: 'string';
                  };
                  readonly invoice_total: {
                    readonly default: any;
                    readonly title: 'Invoice Total';
                    readonly type: 'integer';
                  };
                  readonly invoice_subtotal: {
                    readonly default: any;
                    readonly title: 'Invoice Subtotal';
                    readonly type: 'integer';
                  };
                  readonly gratuity: {
                    readonly default: any;
                    readonly title: 'Gratuity';
                    readonly type: 'integer';
                  };
                  readonly amount_due: {
                    readonly default: any;
                    readonly title: 'Amount Due';
                    readonly type: 'integer';
                  };
                  readonly previous_unpaid_balance: {
                    readonly default: any;
                    readonly title: 'Previous Unpaid Balance';
                    readonly type: 'integer';
                  };
                  readonly discount: {
                    readonly default: any;
                    readonly title: 'Discount';
                    readonly type: 'integer';
                  };
                  readonly taxes: {
                    readonly title: 'Taxes';
                    readonly type: 'array';
                    readonly items: {
                      readonly required: readonly ['value', 'rate'];
                      readonly title: 'TaxesInvoice';
                      readonly type: 'object';
                      readonly properties: {
                        readonly value: {
                          readonly title: 'Value';
                          readonly type: 'integer';
                        };
                        readonly rate: {
                          readonly title: 'Rate';
                          readonly type: 'integer';
                        };
                      };
                    };
                  };
                  readonly service_charge: {
                    readonly default: any;
                    readonly title: 'Service Charge';
                    readonly type: 'integer';
                  };
                  readonly payment_term: {
                    readonly default: any;
                    readonly title: 'Payment Term';
                    readonly type: 'string';
                  };
                  readonly purchase_order: {
                    readonly default: any;
                    readonly title: 'Purchase Order';
                    readonly type: 'string';
                  };
                  readonly date: {
                    readonly default: any;
                    readonly title: 'Date';
                    readonly type: 'string';
                  };
                  readonly due_date: {
                    readonly default: any;
                    readonly title: 'Due Date';
                    readonly type: 'string';
                  };
                  readonly service_date: {
                    readonly default: any;
                    readonly title: 'Service Date';
                    readonly type: 'string';
                  };
                  readonly service_due_date: {
                    readonly default: any;
                    readonly title: 'Service Due Date';
                    readonly type: 'string';
                  };
                  readonly po_number: {
                    readonly default: any;
                    readonly title: 'Po Number';
                    readonly type: 'string';
                  };
                  readonly locale: {
                    readonly required: readonly ['currency', 'language'];
                    readonly title: 'LocaleInvoice';
                    readonly type: 'object';
                    readonly properties: {
                      readonly currency: {
                        readonly title: 'Currency';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly language: {
                        readonly title: 'Language';
                        readonly type: 'string';
                        readonly default: any;
                      };
                    };
                  };
                  readonly bank_informations: {
                    readonly required: readonly [
                      'account_number',
                      'iban',
                      'bsb',
                      'sort_code',
                      'vat_number',
                      'rooting_number',
                      'swift'
                    ];
                    readonly title: 'BankInvoice';
                    readonly type: 'object';
                    readonly properties: {
                      readonly account_number: {
                        readonly title: 'Account Number';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly iban: {
                        readonly title: 'Iban';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly bsb: {
                        readonly title: 'Bsb';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly sort_code: {
                        readonly title: 'Sort Code';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly vat_number: {
                        readonly title: 'Vat Number';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly rooting_number: {
                        readonly title: 'Rooting Number';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly swift: {
                        readonly title: 'Swift';
                        readonly type: 'string';
                        readonly default: any;
                      };
                    };
                  };
                  readonly item_lines: {
                    readonly title: 'Item Lines';
                    readonly type: 'array';
                    readonly items: {
                      readonly title: 'ItemLinesInvoice';
                      readonly type: 'object';
                      readonly properties: {
                        readonly description: {
                          readonly default: any;
                          readonly title: 'Description';
                          readonly type: 'string';
                        };
                        readonly quantity: {
                          readonly default: any;
                          readonly title: 'Quantity';
                          readonly type: 'integer';
                        };
                        readonly amount: {
                          readonly default: any;
                          readonly title: 'Amount';
                          readonly type: 'integer';
                        };
                        readonly unit_price: {
                          readonly default: any;
                          readonly title: 'Unit Price';
                          readonly type: 'integer';
                        };
                        readonly discount: {
                          readonly default: any;
                          readonly title: 'Discount';
                          readonly type: 'integer';
                        };
                        readonly product_code: {
                          readonly default: any;
                          readonly title: 'Product Code';
                          readonly type: 'string';
                        };
                        readonly date_item: {
                          readonly default: any;
                          readonly title: 'Date Item';
                          readonly type: 'string';
                        };
                        readonly tax_item: {
                          readonly default: any;
                          readonly title: 'Tax Item';
                          readonly type: 'integer';
                        };
                        readonly tax_rate: {
                          readonly default: any;
                          readonly title: 'Tax Rate';
                          readonly type: 'integer';
                        };
                      };
                    };
                  };
                };
              };
            };
            readonly original_response: {
              readonly default: any;
              readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
              readonly title: 'Original Response';
            };
            readonly status: {
              readonly title: 'Status';
              readonly enum: readonly ['sucess', 'fail'];
              readonly type: 'string';
              readonly description: '`sucess` `fail`';
            };
          };
        };
        readonly dataleon: {
          readonly required: readonly ['status'];
          readonly title: 'ocrinvoice_parserInvoiceParserDataClass';
          readonly type: 'object';
          readonly properties: {
            readonly extracted_data: {
              readonly title: 'Extracted Data';
              readonly type: 'array';
              readonly items: {
                readonly title: 'InfosInvoiceParserDataClass';
                readonly type: 'object';
                readonly properties: {
                  readonly customer_information: {
                    readonly required: readonly [
                      'customer_name',
                      'customer_address',
                      'customer_email',
                      'customer_id',
                      'customer_tax_id',
                      'customer_mailing_address',
                      'customer_billing_address',
                      'customer_shipping_address',
                      'customer_service_address',
                      'customer_remittance_address',
                      'abn_number',
                      'gst_number',
                      'pan_number',
                      'vat_number'
                    ];
                    readonly title: 'CustomerInformationInvoice';
                    readonly type: 'object';
                    readonly properties: {
                      readonly customer_name: {
                        readonly title: 'Customer Name';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly customer_address: {
                        readonly title: 'Customer Address';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly customer_email: {
                        readonly title: 'Customer Email';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly customer_id: {
                        readonly title: 'Customer Id';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly customer_tax_id: {
                        readonly title: 'Customer Tax Id';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly customer_mailing_address: {
                        readonly title: 'Customer Mailing Address';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly customer_billing_address: {
                        readonly title: 'Customer Billing Address';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly customer_shipping_address: {
                        readonly title: 'Customer Shipping Address';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly customer_service_address: {
                        readonly title: 'Customer Service Address';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly customer_remittance_address: {
                        readonly title: 'Customer Remittance Address';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly abn_number: {
                        readonly title: 'Abn Number';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly gst_number: {
                        readonly title: 'Gst Number';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly pan_number: {
                        readonly title: 'Pan Number';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly vat_number: {
                        readonly title: 'Vat Number';
                        readonly type: 'string';
                        readonly default: any;
                      };
                    };
                  };
                  readonly merchant_information: {
                    readonly required: readonly [
                      'merchant_name',
                      'merchant_address',
                      'merchant_phone',
                      'merchant_email',
                      'merchant_fax',
                      'merchant_website',
                      'merchant_tax_id',
                      'merchant_siret',
                      'merchant_siren',
                      'abn_number',
                      'gst_number',
                      'pan_number',
                      'vat_number'
                    ];
                    readonly title: 'MerchantInformationInvoice';
                    readonly type: 'object';
                    readonly properties: {
                      readonly merchant_name: {
                        readonly title: 'Merchant Name';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly merchant_address: {
                        readonly title: 'Merchant Address';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly merchant_phone: {
                        readonly title: 'Merchant Phone';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly merchant_email: {
                        readonly title: 'Merchant Email';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly merchant_fax: {
                        readonly title: 'Merchant Fax';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly merchant_website: {
                        readonly title: 'Merchant Website';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly merchant_tax_id: {
                        readonly title: 'Merchant Tax Id';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly merchant_siret: {
                        readonly title: 'Merchant Siret';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly merchant_siren: {
                        readonly title: 'Merchant Siren';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly abn_number: {
                        readonly title: 'Abn Number';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly gst_number: {
                        readonly title: 'Gst Number';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly pan_number: {
                        readonly title: 'Pan Number';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly vat_number: {
                        readonly title: 'Vat Number';
                        readonly type: 'string';
                        readonly default: any;
                      };
                    };
                  };
                  readonly invoice_number: {
                    readonly default: any;
                    readonly title: 'Invoice Number';
                    readonly type: 'string';
                  };
                  readonly invoice_total: {
                    readonly default: any;
                    readonly title: 'Invoice Total';
                    readonly type: 'integer';
                  };
                  readonly invoice_subtotal: {
                    readonly default: any;
                    readonly title: 'Invoice Subtotal';
                    readonly type: 'integer';
                  };
                  readonly gratuity: {
                    readonly default: any;
                    readonly title: 'Gratuity';
                    readonly type: 'integer';
                  };
                  readonly amount_due: {
                    readonly default: any;
                    readonly title: 'Amount Due';
                    readonly type: 'integer';
                  };
                  readonly previous_unpaid_balance: {
                    readonly default: any;
                    readonly title: 'Previous Unpaid Balance';
                    readonly type: 'integer';
                  };
                  readonly discount: {
                    readonly default: any;
                    readonly title: 'Discount';
                    readonly type: 'integer';
                  };
                  readonly taxes: {
                    readonly title: 'Taxes';
                    readonly type: 'array';
                    readonly items: {
                      readonly required: readonly ['value', 'rate'];
                      readonly title: 'TaxesInvoice';
                      readonly type: 'object';
                      readonly properties: {
                        readonly value: {
                          readonly title: 'Value';
                          readonly type: 'integer';
                        };
                        readonly rate: {
                          readonly title: 'Rate';
                          readonly type: 'integer';
                        };
                      };
                    };
                  };
                  readonly service_charge: {
                    readonly default: any;
                    readonly title: 'Service Charge';
                    readonly type: 'integer';
                  };
                  readonly payment_term: {
                    readonly default: any;
                    readonly title: 'Payment Term';
                    readonly type: 'string';
                  };
                  readonly purchase_order: {
                    readonly default: any;
                    readonly title: 'Purchase Order';
                    readonly type: 'string';
                  };
                  readonly date: {
                    readonly default: any;
                    readonly title: 'Date';
                    readonly type: 'string';
                  };
                  readonly due_date: {
                    readonly default: any;
                    readonly title: 'Due Date';
                    readonly type: 'string';
                  };
                  readonly service_date: {
                    readonly default: any;
                    readonly title: 'Service Date';
                    readonly type: 'string';
                  };
                  readonly service_due_date: {
                    readonly default: any;
                    readonly title: 'Service Due Date';
                    readonly type: 'string';
                  };
                  readonly po_number: {
                    readonly default: any;
                    readonly title: 'Po Number';
                    readonly type: 'string';
                  };
                  readonly locale: {
                    readonly required: readonly ['currency', 'language'];
                    readonly title: 'LocaleInvoice';
                    readonly type: 'object';
                    readonly properties: {
                      readonly currency: {
                        readonly title: 'Currency';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly language: {
                        readonly title: 'Language';
                        readonly type: 'string';
                        readonly default: any;
                      };
                    };
                  };
                  readonly bank_informations: {
                    readonly required: readonly [
                      'account_number',
                      'iban',
                      'bsb',
                      'sort_code',
                      'vat_number',
                      'rooting_number',
                      'swift'
                    ];
                    readonly title: 'BankInvoice';
                    readonly type: 'object';
                    readonly properties: {
                      readonly account_number: {
                        readonly title: 'Account Number';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly iban: {
                        readonly title: 'Iban';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly bsb: {
                        readonly title: 'Bsb';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly sort_code: {
                        readonly title: 'Sort Code';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly vat_number: {
                        readonly title: 'Vat Number';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly rooting_number: {
                        readonly title: 'Rooting Number';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly swift: {
                        readonly title: 'Swift';
                        readonly type: 'string';
                        readonly default: any;
                      };
                    };
                  };
                  readonly item_lines: {
                    readonly title: 'Item Lines';
                    readonly type: 'array';
                    readonly items: {
                      readonly title: 'ItemLinesInvoice';
                      readonly type: 'object';
                      readonly properties: {
                        readonly description: {
                          readonly default: any;
                          readonly title: 'Description';
                          readonly type: 'string';
                        };
                        readonly quantity: {
                          readonly default: any;
                          readonly title: 'Quantity';
                          readonly type: 'integer';
                        };
                        readonly amount: {
                          readonly default: any;
                          readonly title: 'Amount';
                          readonly type: 'integer';
                        };
                        readonly unit_price: {
                          readonly default: any;
                          readonly title: 'Unit Price';
                          readonly type: 'integer';
                        };
                        readonly discount: {
                          readonly default: any;
                          readonly title: 'Discount';
                          readonly type: 'integer';
                        };
                        readonly product_code: {
                          readonly default: any;
                          readonly title: 'Product Code';
                          readonly type: 'string';
                        };
                        readonly date_item: {
                          readonly default: any;
                          readonly title: 'Date Item';
                          readonly type: 'string';
                        };
                        readonly tax_item: {
                          readonly default: any;
                          readonly title: 'Tax Item';
                          readonly type: 'integer';
                        };
                        readonly tax_rate: {
                          readonly default: any;
                          readonly title: 'Tax Rate';
                          readonly type: 'integer';
                        };
                      };
                    };
                  };
                };
              };
            };
            readonly original_response: {
              readonly default: any;
              readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
              readonly title: 'Original Response';
            };
            readonly status: {
              readonly title: 'Status';
              readonly enum: readonly ['sucess', 'fail'];
              readonly type: 'string';
              readonly description: '`sucess` `fail`';
            };
          };
        };
        readonly google: {
          readonly required: readonly ['status'];
          readonly title: 'ocrinvoice_parserInvoiceParserDataClass';
          readonly type: 'object';
          readonly properties: {
            readonly extracted_data: {
              readonly title: 'Extracted Data';
              readonly type: 'array';
              readonly items: {
                readonly title: 'InfosInvoiceParserDataClass';
                readonly type: 'object';
                readonly properties: {
                  readonly customer_information: {
                    readonly required: readonly [
                      'customer_name',
                      'customer_address',
                      'customer_email',
                      'customer_id',
                      'customer_tax_id',
                      'customer_mailing_address',
                      'customer_billing_address',
                      'customer_shipping_address',
                      'customer_service_address',
                      'customer_remittance_address',
                      'abn_number',
                      'gst_number',
                      'pan_number',
                      'vat_number'
                    ];
                    readonly title: 'CustomerInformationInvoice';
                    readonly type: 'object';
                    readonly properties: {
                      readonly customer_name: {
                        readonly title: 'Customer Name';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly customer_address: {
                        readonly title: 'Customer Address';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly customer_email: {
                        readonly title: 'Customer Email';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly customer_id: {
                        readonly title: 'Customer Id';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly customer_tax_id: {
                        readonly title: 'Customer Tax Id';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly customer_mailing_address: {
                        readonly title: 'Customer Mailing Address';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly customer_billing_address: {
                        readonly title: 'Customer Billing Address';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly customer_shipping_address: {
                        readonly title: 'Customer Shipping Address';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly customer_service_address: {
                        readonly title: 'Customer Service Address';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly customer_remittance_address: {
                        readonly title: 'Customer Remittance Address';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly abn_number: {
                        readonly title: 'Abn Number';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly gst_number: {
                        readonly title: 'Gst Number';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly pan_number: {
                        readonly title: 'Pan Number';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly vat_number: {
                        readonly title: 'Vat Number';
                        readonly type: 'string';
                        readonly default: any;
                      };
                    };
                  };
                  readonly merchant_information: {
                    readonly required: readonly [
                      'merchant_name',
                      'merchant_address',
                      'merchant_phone',
                      'merchant_email',
                      'merchant_fax',
                      'merchant_website',
                      'merchant_tax_id',
                      'merchant_siret',
                      'merchant_siren',
                      'abn_number',
                      'gst_number',
                      'pan_number',
                      'vat_number'
                    ];
                    readonly title: 'MerchantInformationInvoice';
                    readonly type: 'object';
                    readonly properties: {
                      readonly merchant_name: {
                        readonly title: 'Merchant Name';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly merchant_address: {
                        readonly title: 'Merchant Address';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly merchant_phone: {
                        readonly title: 'Merchant Phone';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly merchant_email: {
                        readonly title: 'Merchant Email';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly merchant_fax: {
                        readonly title: 'Merchant Fax';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly merchant_website: {
                        readonly title: 'Merchant Website';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly merchant_tax_id: {
                        readonly title: 'Merchant Tax Id';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly merchant_siret: {
                        readonly title: 'Merchant Siret';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly merchant_siren: {
                        readonly title: 'Merchant Siren';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly abn_number: {
                        readonly title: 'Abn Number';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly gst_number: {
                        readonly title: 'Gst Number';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly pan_number: {
                        readonly title: 'Pan Number';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly vat_number: {
                        readonly title: 'Vat Number';
                        readonly type: 'string';
                        readonly default: any;
                      };
                    };
                  };
                  readonly invoice_number: {
                    readonly default: any;
                    readonly title: 'Invoice Number';
                    readonly type: 'string';
                  };
                  readonly invoice_total: {
                    readonly default: any;
                    readonly title: 'Invoice Total';
                    readonly type: 'integer';
                  };
                  readonly invoice_subtotal: {
                    readonly default: any;
                    readonly title: 'Invoice Subtotal';
                    readonly type: 'integer';
                  };
                  readonly gratuity: {
                    readonly default: any;
                    readonly title: 'Gratuity';
                    readonly type: 'integer';
                  };
                  readonly amount_due: {
                    readonly default: any;
                    readonly title: 'Amount Due';
                    readonly type: 'integer';
                  };
                  readonly previous_unpaid_balance: {
                    readonly default: any;
                    readonly title: 'Previous Unpaid Balance';
                    readonly type: 'integer';
                  };
                  readonly discount: {
                    readonly default: any;
                    readonly title: 'Discount';
                    readonly type: 'integer';
                  };
                  readonly taxes: {
                    readonly title: 'Taxes';
                    readonly type: 'array';
                    readonly items: {
                      readonly required: readonly ['value', 'rate'];
                      readonly title: 'TaxesInvoice';
                      readonly type: 'object';
                      readonly properties: {
                        readonly value: {
                          readonly title: 'Value';
                          readonly type: 'integer';
                        };
                        readonly rate: {
                          readonly title: 'Rate';
                          readonly type: 'integer';
                        };
                      };
                    };
                  };
                  readonly service_charge: {
                    readonly default: any;
                    readonly title: 'Service Charge';
                    readonly type: 'integer';
                  };
                  readonly payment_term: {
                    readonly default: any;
                    readonly title: 'Payment Term';
                    readonly type: 'string';
                  };
                  readonly purchase_order: {
                    readonly default: any;
                    readonly title: 'Purchase Order';
                    readonly type: 'string';
                  };
                  readonly date: {
                    readonly default: any;
                    readonly title: 'Date';
                    readonly type: 'string';
                  };
                  readonly due_date: {
                    readonly default: any;
                    readonly title: 'Due Date';
                    readonly type: 'string';
                  };
                  readonly service_date: {
                    readonly default: any;
                    readonly title: 'Service Date';
                    readonly type: 'string';
                  };
                  readonly service_due_date: {
                    readonly default: any;
                    readonly title: 'Service Due Date';
                    readonly type: 'string';
                  };
                  readonly po_number: {
                    readonly default: any;
                    readonly title: 'Po Number';
                    readonly type: 'string';
                  };
                  readonly locale: {
                    readonly required: readonly ['currency', 'language'];
                    readonly title: 'LocaleInvoice';
                    readonly type: 'object';
                    readonly properties: {
                      readonly currency: {
                        readonly title: 'Currency';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly language: {
                        readonly title: 'Language';
                        readonly type: 'string';
                        readonly default: any;
                      };
                    };
                  };
                  readonly bank_informations: {
                    readonly required: readonly [
                      'account_number',
                      'iban',
                      'bsb',
                      'sort_code',
                      'vat_number',
                      'rooting_number',
                      'swift'
                    ];
                    readonly title: 'BankInvoice';
                    readonly type: 'object';
                    readonly properties: {
                      readonly account_number: {
                        readonly title: 'Account Number';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly iban: {
                        readonly title: 'Iban';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly bsb: {
                        readonly title: 'Bsb';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly sort_code: {
                        readonly title: 'Sort Code';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly vat_number: {
                        readonly title: 'Vat Number';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly rooting_number: {
                        readonly title: 'Rooting Number';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly swift: {
                        readonly title: 'Swift';
                        readonly type: 'string';
                        readonly default: any;
                      };
                    };
                  };
                  readonly item_lines: {
                    readonly title: 'Item Lines';
                    readonly type: 'array';
                    readonly items: {
                      readonly title: 'ItemLinesInvoice';
                      readonly type: 'object';
                      readonly properties: {
                        readonly description: {
                          readonly default: any;
                          readonly title: 'Description';
                          readonly type: 'string';
                        };
                        readonly quantity: {
                          readonly default: any;
                          readonly title: 'Quantity';
                          readonly type: 'integer';
                        };
                        readonly amount: {
                          readonly default: any;
                          readonly title: 'Amount';
                          readonly type: 'integer';
                        };
                        readonly unit_price: {
                          readonly default: any;
                          readonly title: 'Unit Price';
                          readonly type: 'integer';
                        };
                        readonly discount: {
                          readonly default: any;
                          readonly title: 'Discount';
                          readonly type: 'integer';
                        };
                        readonly product_code: {
                          readonly default: any;
                          readonly title: 'Product Code';
                          readonly type: 'string';
                        };
                        readonly date_item: {
                          readonly default: any;
                          readonly title: 'Date Item';
                          readonly type: 'string';
                        };
                        readonly tax_item: {
                          readonly default: any;
                          readonly title: 'Tax Item';
                          readonly type: 'integer';
                        };
                        readonly tax_rate: {
                          readonly default: any;
                          readonly title: 'Tax Rate';
                          readonly type: 'integer';
                        };
                      };
                    };
                  };
                };
              };
            };
            readonly original_response: {
              readonly default: any;
              readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
              readonly title: 'Original Response';
            };
            readonly status: {
              readonly title: 'Status';
              readonly enum: readonly ['sucess', 'fail'];
              readonly type: 'string';
              readonly description: '`sucess` `fail`';
            };
          };
        };
        readonly klippa: {
          readonly required: readonly ['status'];
          readonly title: 'ocrinvoice_parserInvoiceParserDataClass';
          readonly type: 'object';
          readonly properties: {
            readonly extracted_data: {
              readonly title: 'Extracted Data';
              readonly type: 'array';
              readonly items: {
                readonly title: 'InfosInvoiceParserDataClass';
                readonly type: 'object';
                readonly properties: {
                  readonly customer_information: {
                    readonly required: readonly [
                      'customer_name',
                      'customer_address',
                      'customer_email',
                      'customer_id',
                      'customer_tax_id',
                      'customer_mailing_address',
                      'customer_billing_address',
                      'customer_shipping_address',
                      'customer_service_address',
                      'customer_remittance_address',
                      'abn_number',
                      'gst_number',
                      'pan_number',
                      'vat_number'
                    ];
                    readonly title: 'CustomerInformationInvoice';
                    readonly type: 'object';
                    readonly properties: {
                      readonly customer_name: {
                        readonly title: 'Customer Name';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly customer_address: {
                        readonly title: 'Customer Address';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly customer_email: {
                        readonly title: 'Customer Email';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly customer_id: {
                        readonly title: 'Customer Id';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly customer_tax_id: {
                        readonly title: 'Customer Tax Id';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly customer_mailing_address: {
                        readonly title: 'Customer Mailing Address';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly customer_billing_address: {
                        readonly title: 'Customer Billing Address';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly customer_shipping_address: {
                        readonly title: 'Customer Shipping Address';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly customer_service_address: {
                        readonly title: 'Customer Service Address';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly customer_remittance_address: {
                        readonly title: 'Customer Remittance Address';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly abn_number: {
                        readonly title: 'Abn Number';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly gst_number: {
                        readonly title: 'Gst Number';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly pan_number: {
                        readonly title: 'Pan Number';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly vat_number: {
                        readonly title: 'Vat Number';
                        readonly type: 'string';
                        readonly default: any;
                      };
                    };
                  };
                  readonly merchant_information: {
                    readonly required: readonly [
                      'merchant_name',
                      'merchant_address',
                      'merchant_phone',
                      'merchant_email',
                      'merchant_fax',
                      'merchant_website',
                      'merchant_tax_id',
                      'merchant_siret',
                      'merchant_siren',
                      'abn_number',
                      'gst_number',
                      'pan_number',
                      'vat_number'
                    ];
                    readonly title: 'MerchantInformationInvoice';
                    readonly type: 'object';
                    readonly properties: {
                      readonly merchant_name: {
                        readonly title: 'Merchant Name';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly merchant_address: {
                        readonly title: 'Merchant Address';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly merchant_phone: {
                        readonly title: 'Merchant Phone';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly merchant_email: {
                        readonly title: 'Merchant Email';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly merchant_fax: {
                        readonly title: 'Merchant Fax';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly merchant_website: {
                        readonly title: 'Merchant Website';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly merchant_tax_id: {
                        readonly title: 'Merchant Tax Id';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly merchant_siret: {
                        readonly title: 'Merchant Siret';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly merchant_siren: {
                        readonly title: 'Merchant Siren';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly abn_number: {
                        readonly title: 'Abn Number';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly gst_number: {
                        readonly title: 'Gst Number';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly pan_number: {
                        readonly title: 'Pan Number';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly vat_number: {
                        readonly title: 'Vat Number';
                        readonly type: 'string';
                        readonly default: any;
                      };
                    };
                  };
                  readonly invoice_number: {
                    readonly default: any;
                    readonly title: 'Invoice Number';
                    readonly type: 'string';
                  };
                  readonly invoice_total: {
                    readonly default: any;
                    readonly title: 'Invoice Total';
                    readonly type: 'integer';
                  };
                  readonly invoice_subtotal: {
                    readonly default: any;
                    readonly title: 'Invoice Subtotal';
                    readonly type: 'integer';
                  };
                  readonly gratuity: {
                    readonly default: any;
                    readonly title: 'Gratuity';
                    readonly type: 'integer';
                  };
                  readonly amount_due: {
                    readonly default: any;
                    readonly title: 'Amount Due';
                    readonly type: 'integer';
                  };
                  readonly previous_unpaid_balance: {
                    readonly default: any;
                    readonly title: 'Previous Unpaid Balance';
                    readonly type: 'integer';
                  };
                  readonly discount: {
                    readonly default: any;
                    readonly title: 'Discount';
                    readonly type: 'integer';
                  };
                  readonly taxes: {
                    readonly title: 'Taxes';
                    readonly type: 'array';
                    readonly items: {
                      readonly required: readonly ['value', 'rate'];
                      readonly title: 'TaxesInvoice';
                      readonly type: 'object';
                      readonly properties: {
                        readonly value: {
                          readonly title: 'Value';
                          readonly type: 'integer';
                        };
                        readonly rate: {
                          readonly title: 'Rate';
                          readonly type: 'integer';
                        };
                      };
                    };
                  };
                  readonly service_charge: {
                    readonly default: any;
                    readonly title: 'Service Charge';
                    readonly type: 'integer';
                  };
                  readonly payment_term: {
                    readonly default: any;
                    readonly title: 'Payment Term';
                    readonly type: 'string';
                  };
                  readonly purchase_order: {
                    readonly default: any;
                    readonly title: 'Purchase Order';
                    readonly type: 'string';
                  };
                  readonly date: {
                    readonly default: any;
                    readonly title: 'Date';
                    readonly type: 'string';
                  };
                  readonly due_date: {
                    readonly default: any;
                    readonly title: 'Due Date';
                    readonly type: 'string';
                  };
                  readonly service_date: {
                    readonly default: any;
                    readonly title: 'Service Date';
                    readonly type: 'string';
                  };
                  readonly service_due_date: {
                    readonly default: any;
                    readonly title: 'Service Due Date';
                    readonly type: 'string';
                  };
                  readonly po_number: {
                    readonly default: any;
                    readonly title: 'Po Number';
                    readonly type: 'string';
                  };
                  readonly locale: {
                    readonly required: readonly ['currency', 'language'];
                    readonly title: 'LocaleInvoice';
                    readonly type: 'object';
                    readonly properties: {
                      readonly currency: {
                        readonly title: 'Currency';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly language: {
                        readonly title: 'Language';
                        readonly type: 'string';
                        readonly default: any;
                      };
                    };
                  };
                  readonly bank_informations: {
                    readonly required: readonly [
                      'account_number',
                      'iban',
                      'bsb',
                      'sort_code',
                      'vat_number',
                      'rooting_number',
                      'swift'
                    ];
                    readonly title: 'BankInvoice';
                    readonly type: 'object';
                    readonly properties: {
                      readonly account_number: {
                        readonly title: 'Account Number';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly iban: {
                        readonly title: 'Iban';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly bsb: {
                        readonly title: 'Bsb';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly sort_code: {
                        readonly title: 'Sort Code';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly vat_number: {
                        readonly title: 'Vat Number';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly rooting_number: {
                        readonly title: 'Rooting Number';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly swift: {
                        readonly title: 'Swift';
                        readonly type: 'string';
                        readonly default: any;
                      };
                    };
                  };
                  readonly item_lines: {
                    readonly title: 'Item Lines';
                    readonly type: 'array';
                    readonly items: {
                      readonly title: 'ItemLinesInvoice';
                      readonly type: 'object';
                      readonly properties: {
                        readonly description: {
                          readonly default: any;
                          readonly title: 'Description';
                          readonly type: 'string';
                        };
                        readonly quantity: {
                          readonly default: any;
                          readonly title: 'Quantity';
                          readonly type: 'integer';
                        };
                        readonly amount: {
                          readonly default: any;
                          readonly title: 'Amount';
                          readonly type: 'integer';
                        };
                        readonly unit_price: {
                          readonly default: any;
                          readonly title: 'Unit Price';
                          readonly type: 'integer';
                        };
                        readonly discount: {
                          readonly default: any;
                          readonly title: 'Discount';
                          readonly type: 'integer';
                        };
                        readonly product_code: {
                          readonly default: any;
                          readonly title: 'Product Code';
                          readonly type: 'string';
                        };
                        readonly date_item: {
                          readonly default: any;
                          readonly title: 'Date Item';
                          readonly type: 'string';
                        };
                        readonly tax_item: {
                          readonly default: any;
                          readonly title: 'Tax Item';
                          readonly type: 'integer';
                        };
                        readonly tax_rate: {
                          readonly default: any;
                          readonly title: 'Tax Rate';
                          readonly type: 'integer';
                        };
                      };
                    };
                  };
                };
              };
            };
            readonly original_response: {
              readonly default: any;
              readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
              readonly title: 'Original Response';
            };
            readonly status: {
              readonly title: 'Status';
              readonly enum: readonly ['sucess', 'fail'];
              readonly type: 'string';
              readonly description: '`sucess` `fail`';
            };
          };
        };
        readonly amazon: {
          readonly required: readonly ['status'];
          readonly title: 'ocrinvoice_parserInvoiceParserDataClass';
          readonly type: 'object';
          readonly properties: {
            readonly extracted_data: {
              readonly title: 'Extracted Data';
              readonly type: 'array';
              readonly items: {
                readonly title: 'InfosInvoiceParserDataClass';
                readonly type: 'object';
                readonly properties: {
                  readonly customer_information: {
                    readonly required: readonly [
                      'customer_name',
                      'customer_address',
                      'customer_email',
                      'customer_id',
                      'customer_tax_id',
                      'customer_mailing_address',
                      'customer_billing_address',
                      'customer_shipping_address',
                      'customer_service_address',
                      'customer_remittance_address',
                      'abn_number',
                      'gst_number',
                      'pan_number',
                      'vat_number'
                    ];
                    readonly title: 'CustomerInformationInvoice';
                    readonly type: 'object';
                    readonly properties: {
                      readonly customer_name: {
                        readonly title: 'Customer Name';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly customer_address: {
                        readonly title: 'Customer Address';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly customer_email: {
                        readonly title: 'Customer Email';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly customer_id: {
                        readonly title: 'Customer Id';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly customer_tax_id: {
                        readonly title: 'Customer Tax Id';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly customer_mailing_address: {
                        readonly title: 'Customer Mailing Address';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly customer_billing_address: {
                        readonly title: 'Customer Billing Address';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly customer_shipping_address: {
                        readonly title: 'Customer Shipping Address';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly customer_service_address: {
                        readonly title: 'Customer Service Address';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly customer_remittance_address: {
                        readonly title: 'Customer Remittance Address';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly abn_number: {
                        readonly title: 'Abn Number';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly gst_number: {
                        readonly title: 'Gst Number';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly pan_number: {
                        readonly title: 'Pan Number';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly vat_number: {
                        readonly title: 'Vat Number';
                        readonly type: 'string';
                        readonly default: any;
                      };
                    };
                  };
                  readonly merchant_information: {
                    readonly required: readonly [
                      'merchant_name',
                      'merchant_address',
                      'merchant_phone',
                      'merchant_email',
                      'merchant_fax',
                      'merchant_website',
                      'merchant_tax_id',
                      'merchant_siret',
                      'merchant_siren',
                      'abn_number',
                      'gst_number',
                      'pan_number',
                      'vat_number'
                    ];
                    readonly title: 'MerchantInformationInvoice';
                    readonly type: 'object';
                    readonly properties: {
                      readonly merchant_name: {
                        readonly title: 'Merchant Name';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly merchant_address: {
                        readonly title: 'Merchant Address';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly merchant_phone: {
                        readonly title: 'Merchant Phone';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly merchant_email: {
                        readonly title: 'Merchant Email';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly merchant_fax: {
                        readonly title: 'Merchant Fax';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly merchant_website: {
                        readonly title: 'Merchant Website';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly merchant_tax_id: {
                        readonly title: 'Merchant Tax Id';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly merchant_siret: {
                        readonly title: 'Merchant Siret';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly merchant_siren: {
                        readonly title: 'Merchant Siren';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly abn_number: {
                        readonly title: 'Abn Number';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly gst_number: {
                        readonly title: 'Gst Number';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly pan_number: {
                        readonly title: 'Pan Number';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly vat_number: {
                        readonly title: 'Vat Number';
                        readonly type: 'string';
                        readonly default: any;
                      };
                    };
                  };
                  readonly invoice_number: {
                    readonly default: any;
                    readonly title: 'Invoice Number';
                    readonly type: 'string';
                  };
                  readonly invoice_total: {
                    readonly default: any;
                    readonly title: 'Invoice Total';
                    readonly type: 'integer';
                  };
                  readonly invoice_subtotal: {
                    readonly default: any;
                    readonly title: 'Invoice Subtotal';
                    readonly type: 'integer';
                  };
                  readonly gratuity: {
                    readonly default: any;
                    readonly title: 'Gratuity';
                    readonly type: 'integer';
                  };
                  readonly amount_due: {
                    readonly default: any;
                    readonly title: 'Amount Due';
                    readonly type: 'integer';
                  };
                  readonly previous_unpaid_balance: {
                    readonly default: any;
                    readonly title: 'Previous Unpaid Balance';
                    readonly type: 'integer';
                  };
                  readonly discount: {
                    readonly default: any;
                    readonly title: 'Discount';
                    readonly type: 'integer';
                  };
                  readonly taxes: {
                    readonly title: 'Taxes';
                    readonly type: 'array';
                    readonly items: {
                      readonly required: readonly ['value', 'rate'];
                      readonly title: 'TaxesInvoice';
                      readonly type: 'object';
                      readonly properties: {
                        readonly value: {
                          readonly title: 'Value';
                          readonly type: 'integer';
                        };
                        readonly rate: {
                          readonly title: 'Rate';
                          readonly type: 'integer';
                        };
                      };
                    };
                  };
                  readonly service_charge: {
                    readonly default: any;
                    readonly title: 'Service Charge';
                    readonly type: 'integer';
                  };
                  readonly payment_term: {
                    readonly default: any;
                    readonly title: 'Payment Term';
                    readonly type: 'string';
                  };
                  readonly purchase_order: {
                    readonly default: any;
                    readonly title: 'Purchase Order';
                    readonly type: 'string';
                  };
                  readonly date: {
                    readonly default: any;
                    readonly title: 'Date';
                    readonly type: 'string';
                  };
                  readonly due_date: {
                    readonly default: any;
                    readonly title: 'Due Date';
                    readonly type: 'string';
                  };
                  readonly service_date: {
                    readonly default: any;
                    readonly title: 'Service Date';
                    readonly type: 'string';
                  };
                  readonly service_due_date: {
                    readonly default: any;
                    readonly title: 'Service Due Date';
                    readonly type: 'string';
                  };
                  readonly po_number: {
                    readonly default: any;
                    readonly title: 'Po Number';
                    readonly type: 'string';
                  };
                  readonly locale: {
                    readonly required: readonly ['currency', 'language'];
                    readonly title: 'LocaleInvoice';
                    readonly type: 'object';
                    readonly properties: {
                      readonly currency: {
                        readonly title: 'Currency';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly language: {
                        readonly title: 'Language';
                        readonly type: 'string';
                        readonly default: any;
                      };
                    };
                  };
                  readonly bank_informations: {
                    readonly required: readonly [
                      'account_number',
                      'iban',
                      'bsb',
                      'sort_code',
                      'vat_number',
                      'rooting_number',
                      'swift'
                    ];
                    readonly title: 'BankInvoice';
                    readonly type: 'object';
                    readonly properties: {
                      readonly account_number: {
                        readonly title: 'Account Number';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly iban: {
                        readonly title: 'Iban';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly bsb: {
                        readonly title: 'Bsb';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly sort_code: {
                        readonly title: 'Sort Code';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly vat_number: {
                        readonly title: 'Vat Number';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly rooting_number: {
                        readonly title: 'Rooting Number';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly swift: {
                        readonly title: 'Swift';
                        readonly type: 'string';
                        readonly default: any;
                      };
                    };
                  };
                  readonly item_lines: {
                    readonly title: 'Item Lines';
                    readonly type: 'array';
                    readonly items: {
                      readonly title: 'ItemLinesInvoice';
                      readonly type: 'object';
                      readonly properties: {
                        readonly description: {
                          readonly default: any;
                          readonly title: 'Description';
                          readonly type: 'string';
                        };
                        readonly quantity: {
                          readonly default: any;
                          readonly title: 'Quantity';
                          readonly type: 'integer';
                        };
                        readonly amount: {
                          readonly default: any;
                          readonly title: 'Amount';
                          readonly type: 'integer';
                        };
                        readonly unit_price: {
                          readonly default: any;
                          readonly title: 'Unit Price';
                          readonly type: 'integer';
                        };
                        readonly discount: {
                          readonly default: any;
                          readonly title: 'Discount';
                          readonly type: 'integer';
                        };
                        readonly product_code: {
                          readonly default: any;
                          readonly title: 'Product Code';
                          readonly type: 'string';
                        };
                        readonly date_item: {
                          readonly default: any;
                          readonly title: 'Date Item';
                          readonly type: 'string';
                        };
                        readonly tax_item: {
                          readonly default: any;
                          readonly title: 'Tax Item';
                          readonly type: 'integer';
                        };
                        readonly tax_rate: {
                          readonly default: any;
                          readonly title: 'Tax Rate';
                          readonly type: 'integer';
                        };
                      };
                    };
                  };
                };
              };
            };
            readonly original_response: {
              readonly default: any;
              readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
              readonly title: 'Original Response';
            };
            readonly status: {
              readonly title: 'Status';
              readonly enum: readonly ['sucess', 'fail'];
              readonly type: 'string';
              readonly description: '`sucess` `fail`';
            };
          };
        };
        readonly 'eden-ai': {
          readonly required: readonly ['status'];
          readonly title: 'ocrinvoice_parserInvoiceParserDataClass';
          readonly type: 'object';
          readonly properties: {
            readonly extracted_data: {
              readonly title: 'Extracted Data';
              readonly type: 'array';
              readonly items: {
                readonly title: 'InfosInvoiceParserDataClass';
                readonly type: 'object';
                readonly properties: {
                  readonly customer_information: {
                    readonly required: readonly [
                      'customer_name',
                      'customer_address',
                      'customer_email',
                      'customer_id',
                      'customer_tax_id',
                      'customer_mailing_address',
                      'customer_billing_address',
                      'customer_shipping_address',
                      'customer_service_address',
                      'customer_remittance_address',
                      'abn_number',
                      'gst_number',
                      'pan_number',
                      'vat_number'
                    ];
                    readonly title: 'CustomerInformationInvoice';
                    readonly type: 'object';
                    readonly properties: {
                      readonly customer_name: {
                        readonly title: 'Customer Name';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly customer_address: {
                        readonly title: 'Customer Address';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly customer_email: {
                        readonly title: 'Customer Email';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly customer_id: {
                        readonly title: 'Customer Id';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly customer_tax_id: {
                        readonly title: 'Customer Tax Id';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly customer_mailing_address: {
                        readonly title: 'Customer Mailing Address';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly customer_billing_address: {
                        readonly title: 'Customer Billing Address';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly customer_shipping_address: {
                        readonly title: 'Customer Shipping Address';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly customer_service_address: {
                        readonly title: 'Customer Service Address';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly customer_remittance_address: {
                        readonly title: 'Customer Remittance Address';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly abn_number: {
                        readonly title: 'Abn Number';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly gst_number: {
                        readonly title: 'Gst Number';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly pan_number: {
                        readonly title: 'Pan Number';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly vat_number: {
                        readonly title: 'Vat Number';
                        readonly type: 'string';
                        readonly default: any;
                      };
                    };
                  };
                  readonly merchant_information: {
                    readonly required: readonly [
                      'merchant_name',
                      'merchant_address',
                      'merchant_phone',
                      'merchant_email',
                      'merchant_fax',
                      'merchant_website',
                      'merchant_tax_id',
                      'merchant_siret',
                      'merchant_siren',
                      'abn_number',
                      'gst_number',
                      'pan_number',
                      'vat_number'
                    ];
                    readonly title: 'MerchantInformationInvoice';
                    readonly type: 'object';
                    readonly properties: {
                      readonly merchant_name: {
                        readonly title: 'Merchant Name';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly merchant_address: {
                        readonly title: 'Merchant Address';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly merchant_phone: {
                        readonly title: 'Merchant Phone';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly merchant_email: {
                        readonly title: 'Merchant Email';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly merchant_fax: {
                        readonly title: 'Merchant Fax';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly merchant_website: {
                        readonly title: 'Merchant Website';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly merchant_tax_id: {
                        readonly title: 'Merchant Tax Id';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly merchant_siret: {
                        readonly title: 'Merchant Siret';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly merchant_siren: {
                        readonly title: 'Merchant Siren';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly abn_number: {
                        readonly title: 'Abn Number';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly gst_number: {
                        readonly title: 'Gst Number';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly pan_number: {
                        readonly title: 'Pan Number';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly vat_number: {
                        readonly title: 'Vat Number';
                        readonly type: 'string';
                        readonly default: any;
                      };
                    };
                  };
                  readonly invoice_number: {
                    readonly default: any;
                    readonly title: 'Invoice Number';
                    readonly type: 'string';
                  };
                  readonly invoice_total: {
                    readonly default: any;
                    readonly title: 'Invoice Total';
                    readonly type: 'integer';
                  };
                  readonly invoice_subtotal: {
                    readonly default: any;
                    readonly title: 'Invoice Subtotal';
                    readonly type: 'integer';
                  };
                  readonly gratuity: {
                    readonly default: any;
                    readonly title: 'Gratuity';
                    readonly type: 'integer';
                  };
                  readonly amount_due: {
                    readonly default: any;
                    readonly title: 'Amount Due';
                    readonly type: 'integer';
                  };
                  readonly previous_unpaid_balance: {
                    readonly default: any;
                    readonly title: 'Previous Unpaid Balance';
                    readonly type: 'integer';
                  };
                  readonly discount: {
                    readonly default: any;
                    readonly title: 'Discount';
                    readonly type: 'integer';
                  };
                  readonly taxes: {
                    readonly title: 'Taxes';
                    readonly type: 'array';
                    readonly items: {
                      readonly required: readonly ['value', 'rate'];
                      readonly title: 'TaxesInvoice';
                      readonly type: 'object';
                      readonly properties: {
                        readonly value: {
                          readonly title: 'Value';
                          readonly type: 'integer';
                        };
                        readonly rate: {
                          readonly title: 'Rate';
                          readonly type: 'integer';
                        };
                      };
                    };
                  };
                  readonly service_charge: {
                    readonly default: any;
                    readonly title: 'Service Charge';
                    readonly type: 'integer';
                  };
                  readonly payment_term: {
                    readonly default: any;
                    readonly title: 'Payment Term';
                    readonly type: 'string';
                  };
                  readonly purchase_order: {
                    readonly default: any;
                    readonly title: 'Purchase Order';
                    readonly type: 'string';
                  };
                  readonly date: {
                    readonly default: any;
                    readonly title: 'Date';
                    readonly type: 'string';
                  };
                  readonly due_date: {
                    readonly default: any;
                    readonly title: 'Due Date';
                    readonly type: 'string';
                  };
                  readonly service_date: {
                    readonly default: any;
                    readonly title: 'Service Date';
                    readonly type: 'string';
                  };
                  readonly service_due_date: {
                    readonly default: any;
                    readonly title: 'Service Due Date';
                    readonly type: 'string';
                  };
                  readonly po_number: {
                    readonly default: any;
                    readonly title: 'Po Number';
                    readonly type: 'string';
                  };
                  readonly locale: {
                    readonly required: readonly ['currency', 'language'];
                    readonly title: 'LocaleInvoice';
                    readonly type: 'object';
                    readonly properties: {
                      readonly currency: {
                        readonly title: 'Currency';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly language: {
                        readonly title: 'Language';
                        readonly type: 'string';
                        readonly default: any;
                      };
                    };
                  };
                  readonly bank_informations: {
                    readonly required: readonly [
                      'account_number',
                      'iban',
                      'bsb',
                      'sort_code',
                      'vat_number',
                      'rooting_number',
                      'swift'
                    ];
                    readonly title: 'BankInvoice';
                    readonly type: 'object';
                    readonly properties: {
                      readonly account_number: {
                        readonly title: 'Account Number';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly iban: {
                        readonly title: 'Iban';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly bsb: {
                        readonly title: 'Bsb';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly sort_code: {
                        readonly title: 'Sort Code';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly vat_number: {
                        readonly title: 'Vat Number';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly rooting_number: {
                        readonly title: 'Rooting Number';
                        readonly type: 'string';
                        readonly default: any;
                      };
                      readonly swift: {
                        readonly title: 'Swift';
                        readonly type: 'string';
                        readonly default: any;
                      };
                    };
                  };
                  readonly item_lines: {
                    readonly title: 'Item Lines';
                    readonly type: 'array';
                    readonly items: {
                      readonly title: 'ItemLinesInvoice';
                      readonly type: 'object';
                      readonly properties: {
                        readonly description: {
                          readonly default: any;
                          readonly title: 'Description';
                          readonly type: 'string';
                        };
                        readonly quantity: {
                          readonly default: any;
                          readonly title: 'Quantity';
                          readonly type: 'integer';
                        };
                        readonly amount: {
                          readonly default: any;
                          readonly title: 'Amount';
                          readonly type: 'integer';
                        };
                        readonly unit_price: {
                          readonly default: any;
                          readonly title: 'Unit Price';
                          readonly type: 'integer';
                        };
                        readonly discount: {
                          readonly default: any;
                          readonly title: 'Discount';
                          readonly type: 'integer';
                        };
                        readonly product_code: {
                          readonly default: any;
                          readonly title: 'Product Code';
                          readonly type: 'string';
                        };
                        readonly date_item: {
                          readonly default: any;
                          readonly title: 'Date Item';
                          readonly type: 'string';
                        };
                        readonly tax_item: {
                          readonly default: any;
                          readonly title: 'Tax Item';
                          readonly type: 'integer';
                        };
                        readonly tax_rate: {
                          readonly default: any;
                          readonly title: 'Tax Rate';
                          readonly type: 'integer';
                        };
                      };
                    };
                  };
                };
              };
            };
            readonly original_response: {
              readonly default: any;
              readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
              readonly title: 'Original Response';
            };
            readonly status: {
              readonly title: 'Status';
              readonly enum: readonly ['sucess', 'fail'];
              readonly type: 'string';
              readonly description: '`sucess` `fail`';
            };
          };
        };
      };
      readonly title: 'ocrinvoice_parserResponseModel';
      readonly type: 'object';
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '400': {
      readonly type: 'object';
      readonly properties: {
        readonly error: {
          readonly type: 'object';
          readonly properties: {
            readonly type: {
              readonly type: 'string';
            };
            readonly message: {
              readonly type: 'object';
              readonly properties: {
                readonly '<parameter_name>': {
                  readonly type: 'array';
                  readonly items: {
                    readonly type: 'string';
                  };
                };
              };
              readonly required: readonly ['<parameter_name>'];
            };
          };
          readonly required: readonly ['message', 'type'];
        };
      };
      readonly required: readonly ['error'];
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '403': {
      readonly type: 'object';
      readonly properties: {
        readonly error: {
          readonly type: 'object';
          readonly properties: {
            readonly type: {
              readonly type: 'string';
            };
            readonly message: {
              readonly type: 'string';
            };
          };
          readonly required: readonly ['message', 'type'];
        };
      };
      readonly required: readonly ['error'];
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '404': {
      readonly type: 'object';
      readonly properties: {
        readonly details: {
          readonly type: 'string';
          readonly default: 'Not Found';
        };
      };
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '500': {
      readonly type: 'object';
      readonly properties: {
        readonly error: {
          readonly type: 'object';
          readonly properties: {
            readonly type: {
              readonly type: 'string';
            };
            readonly message: {
              readonly type: 'string';
            };
          };
          readonly required: readonly ['message', 'type'];
        };
      };
      readonly required: readonly ['error'];
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
  };
};
declare const OcrOcrAsyncCreate: {
  readonly body: {
    readonly type: 'object';
    readonly properties: {
      readonly providers: {
        readonly type: 'string';
        readonly minLength: 1;
        readonly description: "It can be one (ex: **'amazon'** or **'google'**) or multiple provider(s) (ex: **'amazon,microsoft,google'**)             that the data will be redirected to in order to get the processed results.";
        readonly examples: readonly ['amazon'];
      };
      readonly fallback_providers: {
        readonly type: 'string';
        readonly minLength: 1;
        readonly description: "Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.\n    To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.\n\nThey will be tried in the same order they are input, and it will stop to the first provider who doesn't fail.\n\n\n*Doesn't work with async subfeatures.*\n    ";
      };
      readonly show_original_response: {
        readonly type: 'boolean';
        readonly default: false;
        readonly description: 'Optional : Shows the original response of the provider.<br>\n        When set to **true**, a new attribute *original_response* will appear in the response object.';
      };
      readonly webhook_receiver: {
        readonly type: 'string';
        readonly format: 'uri';
        readonly minLength: 1;
        readonly description: 'Webhook receiver should be a valid https URL (ex : https://your.listner.com/endpoint).             After the processing is done, the webhook endpoint will receive a POST request with the result.';
      };
      readonly users_webhook_parameters: {
        readonly type: 'object';
        readonly additionalProperties: true;
        readonly description: "Json data that contains of additional parameters that will be sent back to the webhook receiver             (ex: api key for security or client's data ID to link the result internally).             Will only be used when webhook_receiver is set.";
      };
      readonly file: {
        readonly type: 'string';
        readonly format: 'binary';
        readonly description: 'File to analyse in binary format to be used with *content-type*: **multipart/form-data** <br> **Does not work with application/json !**';
      };
      readonly file_url: {
        readonly type: readonly ['string', 'null'];
        readonly format: 'uri';
        readonly description: 'File **URL** to analyse to be used with with *content-type*: **application/json**.';
        readonly examples: readonly ['http://edenai-resource-example.pdf'];
      };
    };
    readonly required: readonly ['providers'];
    readonly $schema: 'http://json-schema.org/draft-04/schema#';
  };
  readonly response: {
    readonly '200': {
      readonly type: 'object';
      readonly properties: {
        readonly public_id: {
          readonly type: 'string';
          readonly format: 'uuid';
        };
      };
      readonly required: readonly ['public_id'];
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
  };
};
declare const OcrOcrAsyncRetrieve: {
  readonly response: {
    readonly '200': {
      readonly type: 'object';
      readonly properties: {
        readonly jobs: {
          readonly type: 'array';
          readonly items: {
            readonly type: 'object';
            readonly properties: {
              readonly providers: {
                readonly type: 'string';
              };
              readonly nb: {
                readonly type: 'integer';
              };
              readonly nb_ok: {
                readonly type: 'integer';
              };
              readonly public_id: {
                readonly type: 'string';
                readonly format: 'uuid';
              };
              readonly state: {
                readonly enum: readonly ['finished', 'failed', 'Timeout error', 'processing'];
                readonly type: 'string';
                readonly description: '* `finished` - finished\n* `failed` - failed\n* `Timeout error` - Timeout error\n* `processing` - processing\n\n`finished` `failed` `Timeout error` `processing`';
              };
              readonly created_at: {
                readonly type: 'string';
                readonly format: 'date-time';
              };
            };
            readonly required: readonly [
              'created_at',
              'nb',
              'nb_ok',
              'providers',
              'public_id',
              'state'
            ];
          };
        };
      };
      readonly required: readonly ['jobs'];
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
  };
};
declare const OcrOcrAsyncRetrieve2: {
  readonly metadata: {
    readonly allOf: readonly [
      {
        readonly type: 'object';
        readonly properties: {
          readonly public_id: {
            readonly type: 'string';
            readonly $schema: 'http://json-schema.org/draft-04/schema#';
          };
        };
        readonly required: readonly ['public_id'];
      },
      {
        readonly type: 'object';
        readonly properties: {
          readonly response_as_dict: {
            readonly type: 'boolean';
            readonly default: true;
            readonly $schema: 'http://json-schema.org/draft-04/schema#';
          };
          readonly show_original_response: {
            readonly type: 'boolean';
            readonly default: false;
            readonly $schema: 'http://json-schema.org/draft-04/schema#';
          };
        };
        readonly required: readonly [];
      }
    ];
  };
  readonly response: {
    readonly '200': {
      readonly properties: {
        readonly results: {
          readonly properties: {
            readonly oneai: {
              readonly required: readonly ['raw_text', 'number_of_pages', 'id', 'final_status'];
              readonly title: 'ocrocr_asyncOcrAsyncDataClass';
              readonly type: 'object';
              readonly properties: {
                readonly raw_text: {
                  readonly title: 'Raw Text';
                  readonly type: 'string';
                };
                readonly pages: {
                  readonly description: 'List of pages';
                  readonly title: 'Pages';
                  readonly type: 'array';
                  readonly items: {
                    readonly description: 'Page of a document\n\n    Attributes:\n        lines (Sequence[Line]): List of lines of the page\n    ';
                    readonly title: 'Page';
                    readonly type: 'object';
                    readonly properties: {
                      readonly lines: {
                        readonly description: 'List of lines';
                        readonly title: 'Lines';
                        readonly type: 'array';
                        readonly items: {
                          readonly description: 'Line of a document\n\n    Attributes:\n        text (str): Text detected in the line\n        bounding_boxes (Sequence[BoundingBox]): Bounding boxes of the words in the line\n        words (Sequence[Word]): List of words of the line\n        confidence (float): Confidence of the line\n    ';
                          readonly required: readonly ['text', 'bounding_box', 'confidence'];
                          readonly title: 'Line';
                          readonly type: 'object';
                          readonly properties: {
                            readonly text: {
                              readonly description: 'Text detected in the line';
                              readonly title: 'Text';
                              readonly type: 'string';
                            };
                            readonly words: {
                              readonly description: 'List of words';
                              readonly title: 'Words';
                              readonly type: 'array';
                              readonly items: {
                                readonly description: 'Word of a document\n\n    Attributes:\n        text (str): Text detected in the word\n        bounding_boxes (Sequence[BoundingBox]): Bounding boxes of the words in the word\n        confidence (float): Confidence score of the word\n    ';
                                readonly required: readonly ['text', 'bounding_box', 'confidence'];
                                readonly title: 'Word';
                                readonly type: 'object';
                                readonly properties: {
                                  readonly text: {
                                    readonly description: 'Text detected in the word';
                                    readonly title: 'Text';
                                    readonly type: 'string';
                                  };
                                  readonly bounding_box: {
                                    readonly description: 'Bounding box of a word in the image\n\n    Attributes:\n        left (float): Left coordinate of the bounding box\n        top (float): Top coordinate of the bounding box\n        width (float): Width of the bounding box\n        height (float): Height of the bounding box\n        text (str): Text detected in the bounding box\n\n    Constructor:\n        from_json (classmethod): Create a new instance of BoundingBox from a JSON object\n        from_normalized_vertices (classmethod): Create a new instance of BoundingBox from normalized vertices\n        unknown (classmethod): Return a invalid bouding_box with all field filled with `-1`\n    ';
                                    readonly required: readonly ['left', 'top', 'width', 'height'];
                                    readonly title: 'BoundingBox';
                                    readonly type: 'object';
                                    readonly properties: {
                                      readonly left: {
                                        readonly description: 'Left coordinate of the bounding box';
                                        readonly title: 'Left';
                                        readonly type: 'integer';
                                      };
                                      readonly top: {
                                        readonly description: 'Top coordinate of the bounding box';
                                        readonly title: 'Top';
                                        readonly type: 'integer';
                                      };
                                      readonly width: {
                                        readonly description: 'Width of the bounding box';
                                        readonly title: 'Width';
                                        readonly type: 'integer';
                                      };
                                      readonly height: {
                                        readonly description: 'Height of the bounding box';
                                        readonly title: 'Height';
                                        readonly type: 'integer';
                                      };
                                    };
                                  };
                                  readonly confidence: {
                                    readonly description: 'Confidence score of the word';
                                    readonly title: 'Confidence';
                                    readonly type: 'integer';
                                  };
                                };
                              };
                            };
                            readonly bounding_box: {
                              readonly description: 'Bounding box of a word in the image\n\n    Attributes:\n        left (float): Left coordinate of the bounding box\n        top (float): Top coordinate of the bounding box\n        width (float): Width of the bounding box\n        height (float): Height of the bounding box\n        text (str): Text detected in the bounding box\n\n    Constructor:\n        from_json (classmethod): Create a new instance of BoundingBox from a JSON object\n        from_normalized_vertices (classmethod): Create a new instance of BoundingBox from normalized vertices\n        unknown (classmethod): Return a invalid bouding_box with all field filled with `-1`\n    ';
                              readonly required: readonly ['left', 'top', 'width', 'height'];
                              readonly title: 'BoundingBox';
                              readonly type: 'object';
                              readonly properties: {
                                readonly left: {
                                  readonly description: 'Left coordinate of the bounding box';
                                  readonly title: 'Left';
                                  readonly type: 'integer';
                                };
                                readonly top: {
                                  readonly description: 'Top coordinate of the bounding box';
                                  readonly title: 'Top';
                                  readonly type: 'integer';
                                };
                                readonly width: {
                                  readonly description: 'Width of the bounding box';
                                  readonly title: 'Width';
                                  readonly type: 'integer';
                                };
                                readonly height: {
                                  readonly description: 'Height of the bounding box';
                                  readonly title: 'Height';
                                  readonly type: 'integer';
                                };
                              };
                            };
                            readonly confidence: {
                              readonly description: 'Confidence of the line';
                              readonly title: 'Confidence';
                              readonly type: 'integer';
                            };
                          };
                        };
                      };
                    };
                  };
                };
                readonly number_of_pages: {
                  readonly description: 'Number of pages in the document';
                  readonly title: 'Number Of Pages';
                  readonly type: 'integer';
                };
                readonly original_response: {
                  readonly default: any;
                  readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
                  readonly title: 'Original Response';
                };
                readonly id: {
                  readonly title: 'Id';
                  readonly type: 'string';
                };
                readonly final_status: {
                  readonly title: 'Final Status';
                  readonly enum: readonly ['sucess', 'fail'];
                  readonly type: 'string';
                  readonly description: '`sucess` `fail`';
                };
                readonly error: {
                  readonly title: 'Error';
                  readonly type: 'object';
                  readonly additionalProperties: true;
                };
              };
            };
            readonly google: {
              readonly required: readonly ['raw_text', 'number_of_pages', 'id', 'final_status'];
              readonly title: 'ocrocr_asyncOcrAsyncDataClass';
              readonly type: 'object';
              readonly properties: {
                readonly raw_text: {
                  readonly title: 'Raw Text';
                  readonly type: 'string';
                };
                readonly pages: {
                  readonly description: 'List of pages';
                  readonly title: 'Pages';
                  readonly type: 'array';
                  readonly items: {
                    readonly description: 'Page of a document\n\n    Attributes:\n        lines (Sequence[Line]): List of lines of the page\n    ';
                    readonly title: 'Page';
                    readonly type: 'object';
                    readonly properties: {
                      readonly lines: {
                        readonly description: 'List of lines';
                        readonly title: 'Lines';
                        readonly type: 'array';
                        readonly items: {
                          readonly description: 'Line of a document\n\n    Attributes:\n        text (str): Text detected in the line\n        bounding_boxes (Sequence[BoundingBox]): Bounding boxes of the words in the line\n        words (Sequence[Word]): List of words of the line\n        confidence (float): Confidence of the line\n    ';
                          readonly required: readonly ['text', 'bounding_box', 'confidence'];
                          readonly title: 'Line';
                          readonly type: 'object';
                          readonly properties: {
                            readonly text: {
                              readonly description: 'Text detected in the line';
                              readonly title: 'Text';
                              readonly type: 'string';
                            };
                            readonly words: {
                              readonly description: 'List of words';
                              readonly title: 'Words';
                              readonly type: 'array';
                              readonly items: {
                                readonly description: 'Word of a document\n\n    Attributes:\n        text (str): Text detected in the word\n        bounding_boxes (Sequence[BoundingBox]): Bounding boxes of the words in the word\n        confidence (float): Confidence score of the word\n    ';
                                readonly required: readonly ['text', 'bounding_box', 'confidence'];
                                readonly title: 'Word';
                                readonly type: 'object';
                                readonly properties: {
                                  readonly text: {
                                    readonly description: 'Text detected in the word';
                                    readonly title: 'Text';
                                    readonly type: 'string';
                                  };
                                  readonly bounding_box: {
                                    readonly description: 'Bounding box of a word in the image\n\n    Attributes:\n        left (float): Left coordinate of the bounding box\n        top (float): Top coordinate of the bounding box\n        width (float): Width of the bounding box\n        height (float): Height of the bounding box\n        text (str): Text detected in the bounding box\n\n    Constructor:\n        from_json (classmethod): Create a new instance of BoundingBox from a JSON object\n        from_normalized_vertices (classmethod): Create a new instance of BoundingBox from normalized vertices\n        unknown (classmethod): Return a invalid bouding_box with all field filled with `-1`\n    ';
                                    readonly required: readonly ['left', 'top', 'width', 'height'];
                                    readonly title: 'BoundingBox';
                                    readonly type: 'object';
                                    readonly properties: {
                                      readonly left: {
                                        readonly description: 'Left coordinate of the bounding box';
                                        readonly title: 'Left';
                                        readonly type: 'integer';
                                      };
                                      readonly top: {
                                        readonly description: 'Top coordinate of the bounding box';
                                        readonly title: 'Top';
                                        readonly type: 'integer';
                                      };
                                      readonly width: {
                                        readonly description: 'Width of the bounding box';
                                        readonly title: 'Width';
                                        readonly type: 'integer';
                                      };
                                      readonly height: {
                                        readonly description: 'Height of the bounding box';
                                        readonly title: 'Height';
                                        readonly type: 'integer';
                                      };
                                    };
                                  };
                                  readonly confidence: {
                                    readonly description: 'Confidence score of the word';
                                    readonly title: 'Confidence';
                                    readonly type: 'integer';
                                  };
                                };
                              };
                            };
                            readonly bounding_box: {
                              readonly description: 'Bounding box of a word in the image\n\n    Attributes:\n        left (float): Left coordinate of the bounding box\n        top (float): Top coordinate of the bounding box\n        width (float): Width of the bounding box\n        height (float): Height of the bounding box\n        text (str): Text detected in the bounding box\n\n    Constructor:\n        from_json (classmethod): Create a new instance of BoundingBox from a JSON object\n        from_normalized_vertices (classmethod): Create a new instance of BoundingBox from normalized vertices\n        unknown (classmethod): Return a invalid bouding_box with all field filled with `-1`\n    ';
                              readonly required: readonly ['left', 'top', 'width', 'height'];
                              readonly title: 'BoundingBox';
                              readonly type: 'object';
                              readonly properties: {
                                readonly left: {
                                  readonly description: 'Left coordinate of the bounding box';
                                  readonly title: 'Left';
                                  readonly type: 'integer';
                                };
                                readonly top: {
                                  readonly description: 'Top coordinate of the bounding box';
                                  readonly title: 'Top';
                                  readonly type: 'integer';
                                };
                                readonly width: {
                                  readonly description: 'Width of the bounding box';
                                  readonly title: 'Width';
                                  readonly type: 'integer';
                                };
                                readonly height: {
                                  readonly description: 'Height of the bounding box';
                                  readonly title: 'Height';
                                  readonly type: 'integer';
                                };
                              };
                            };
                            readonly confidence: {
                              readonly description: 'Confidence of the line';
                              readonly title: 'Confidence';
                              readonly type: 'integer';
                            };
                          };
                        };
                      };
                    };
                  };
                };
                readonly number_of_pages: {
                  readonly description: 'Number of pages in the document';
                  readonly title: 'Number Of Pages';
                  readonly type: 'integer';
                };
                readonly original_response: {
                  readonly default: any;
                  readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
                  readonly title: 'Original Response';
                };
                readonly id: {
                  readonly title: 'Id';
                  readonly type: 'string';
                };
                readonly final_status: {
                  readonly title: 'Final Status';
                  readonly enum: readonly ['sucess', 'fail'];
                  readonly type: 'string';
                  readonly description: '`sucess` `fail`';
                };
                readonly error: {
                  readonly title: 'Error';
                  readonly type: 'object';
                  readonly additionalProperties: true;
                };
              };
            };
            readonly amazon: {
              readonly required: readonly ['raw_text', 'number_of_pages', 'id', 'final_status'];
              readonly title: 'ocrocr_asyncOcrAsyncDataClass';
              readonly type: 'object';
              readonly properties: {
                readonly raw_text: {
                  readonly title: 'Raw Text';
                  readonly type: 'string';
                };
                readonly pages: {
                  readonly description: 'List of pages';
                  readonly title: 'Pages';
                  readonly type: 'array';
                  readonly items: {
                    readonly description: 'Page of a document\n\n    Attributes:\n        lines (Sequence[Line]): List of lines of the page\n    ';
                    readonly title: 'Page';
                    readonly type: 'object';
                    readonly properties: {
                      readonly lines: {
                        readonly description: 'List of lines';
                        readonly title: 'Lines';
                        readonly type: 'array';
                        readonly items: {
                          readonly description: 'Line of a document\n\n    Attributes:\n        text (str): Text detected in the line\n        bounding_boxes (Sequence[BoundingBox]): Bounding boxes of the words in the line\n        words (Sequence[Word]): List of words of the line\n        confidence (float): Confidence of the line\n    ';
                          readonly required: readonly ['text', 'bounding_box', 'confidence'];
                          readonly title: 'Line';
                          readonly type: 'object';
                          readonly properties: {
                            readonly text: {
                              readonly description: 'Text detected in the line';
                              readonly title: 'Text';
                              readonly type: 'string';
                            };
                            readonly words: {
                              readonly description: 'List of words';
                              readonly title: 'Words';
                              readonly type: 'array';
                              readonly items: {
                                readonly description: 'Word of a document\n\n    Attributes:\n        text (str): Text detected in the word\n        bounding_boxes (Sequence[BoundingBox]): Bounding boxes of the words in the word\n        confidence (float): Confidence score of the word\n    ';
                                readonly required: readonly ['text', 'bounding_box', 'confidence'];
                                readonly title: 'Word';
                                readonly type: 'object';
                                readonly properties: {
                                  readonly text: {
                                    readonly description: 'Text detected in the word';
                                    readonly title: 'Text';
                                    readonly type: 'string';
                                  };
                                  readonly bounding_box: {
                                    readonly description: 'Bounding box of a word in the image\n\n    Attributes:\n        left (float): Left coordinate of the bounding box\n        top (float): Top coordinate of the bounding box\n        width (float): Width of the bounding box\n        height (float): Height of the bounding box\n        text (str): Text detected in the bounding box\n\n    Constructor:\n        from_json (classmethod): Create a new instance of BoundingBox from a JSON object\n        from_normalized_vertices (classmethod): Create a new instance of BoundingBox from normalized vertices\n        unknown (classmethod): Return a invalid bouding_box with all field filled with `-1`\n    ';
                                    readonly required: readonly ['left', 'top', 'width', 'height'];
                                    readonly title: 'BoundingBox';
                                    readonly type: 'object';
                                    readonly properties: {
                                      readonly left: {
                                        readonly description: 'Left coordinate of the bounding box';
                                        readonly title: 'Left';
                                        readonly type: 'integer';
                                      };
                                      readonly top: {
                                        readonly description: 'Top coordinate of the bounding box';
                                        readonly title: 'Top';
                                        readonly type: 'integer';
                                      };
                                      readonly width: {
                                        readonly description: 'Width of the bounding box';
                                        readonly title: 'Width';
                                        readonly type: 'integer';
                                      };
                                      readonly height: {
                                        readonly description: 'Height of the bounding box';
                                        readonly title: 'Height';
                                        readonly type: 'integer';
                                      };
                                    };
                                  };
                                  readonly confidence: {
                                    readonly description: 'Confidence score of the word';
                                    readonly title: 'Confidence';
                                    readonly type: 'integer';
                                  };
                                };
                              };
                            };
                            readonly bounding_box: {
                              readonly description: 'Bounding box of a word in the image\n\n    Attributes:\n        left (float): Left coordinate of the bounding box\n        top (float): Top coordinate of the bounding box\n        width (float): Width of the bounding box\n        height (float): Height of the bounding box\n        text (str): Text detected in the bounding box\n\n    Constructor:\n        from_json (classmethod): Create a new instance of BoundingBox from a JSON object\n        from_normalized_vertices (classmethod): Create a new instance of BoundingBox from normalized vertices\n        unknown (classmethod): Return a invalid bouding_box with all field filled with `-1`\n    ';
                              readonly required: readonly ['left', 'top', 'width', 'height'];
                              readonly title: 'BoundingBox';
                              readonly type: 'object';
                              readonly properties: {
                                readonly left: {
                                  readonly description: 'Left coordinate of the bounding box';
                                  readonly title: 'Left';
                                  readonly type: 'integer';
                                };
                                readonly top: {
                                  readonly description: 'Top coordinate of the bounding box';
                                  readonly title: 'Top';
                                  readonly type: 'integer';
                                };
                                readonly width: {
                                  readonly description: 'Width of the bounding box';
                                  readonly title: 'Width';
                                  readonly type: 'integer';
                                };
                                readonly height: {
                                  readonly description: 'Height of the bounding box';
                                  readonly title: 'Height';
                                  readonly type: 'integer';
                                };
                              };
                            };
                            readonly confidence: {
                              readonly description: 'Confidence of the line';
                              readonly title: 'Confidence';
                              readonly type: 'integer';
                            };
                          };
                        };
                      };
                    };
                  };
                };
                readonly number_of_pages: {
                  readonly description: 'Number of pages in the document';
                  readonly title: 'Number Of Pages';
                  readonly type: 'integer';
                };
                readonly original_response: {
                  readonly default: any;
                  readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
                  readonly title: 'Original Response';
                };
                readonly id: {
                  readonly title: 'Id';
                  readonly type: 'string';
                };
                readonly final_status: {
                  readonly title: 'Final Status';
                  readonly enum: readonly ['sucess', 'fail'];
                  readonly type: 'string';
                  readonly description: '`sucess` `fail`';
                };
                readonly error: {
                  readonly title: 'Error';
                  readonly type: 'object';
                  readonly additionalProperties: true;
                };
              };
            };
          };
          readonly title: 'ocrocr_asyncModel';
          readonly type: 'object';
        };
        readonly error: {
          readonly title: 'Error';
          readonly type: 'string';
        };
        readonly public_id: {
          readonly format: 'uuid';
          readonly title: 'Public Id';
          readonly type: 'string';
        };
        readonly status: {
          readonly title: 'Status';
          readonly type: 'string';
        };
      };
      readonly required: readonly ['results', 'error', 'public_id', 'status'];
      readonly title: 'asyncocrocr_asyncResponseModel';
      readonly type: 'object';
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '400': {
      readonly type: 'object';
      readonly properties: {
        readonly error: {
          readonly type: 'object';
          readonly properties: {
            readonly type: {
              readonly type: 'string';
            };
            readonly message: {
              readonly type: 'object';
              readonly properties: {
                readonly '<parameter_name>': {
                  readonly type: 'array';
                  readonly items: {
                    readonly type: 'string';
                  };
                };
              };
              readonly required: readonly ['<parameter_name>'];
            };
          };
          readonly required: readonly ['message', 'type'];
        };
      };
      readonly required: readonly ['error'];
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '403': {
      readonly type: 'object';
      readonly properties: {
        readonly error: {
          readonly type: 'object';
          readonly properties: {
            readonly type: {
              readonly type: 'string';
            };
            readonly message: {
              readonly type: 'string';
            };
          };
          readonly required: readonly ['message', 'type'];
        };
      };
      readonly required: readonly ['error'];
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '404': {
      readonly type: 'object';
      readonly properties: {
        readonly details: {
          readonly type: 'string';
          readonly default: 'Not Found';
        };
      };
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '500': {
      readonly type: 'object';
      readonly properties: {
        readonly error: {
          readonly type: 'object';
          readonly properties: {
            readonly type: {
              readonly type: 'string';
            };
            readonly message: {
              readonly type: 'string';
            };
          };
          readonly required: readonly ['message', 'type'];
        };
      };
      readonly required: readonly ['error'];
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
  };
};
declare const OcrOcrCreate: {
  readonly body: {
    readonly type: 'object';
    readonly properties: {
      readonly providers: {
        readonly type: 'string';
        readonly minLength: 1;
        readonly description: "It can be one (ex: **'amazon'** or **'google'**) or multiple provider(s) (ex: **'amazon,microsoft,google'**)             that the data will be redirected to in order to get the processed results.";
        readonly examples: readonly ['clarifai,google,sentisight,microsoft,amazon,api4ai'];
      };
      readonly fallback_providers: {
        readonly type: 'string';
        readonly minLength: 1;
        readonly description: "Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.\n    To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.\n\nThey will be tried in the same order they are input, and it will stop to the first provider who doesn't fail.\n\n\n*Doesn't work with async subfeatures.*\n    ";
      };
      readonly response_as_dict: {
        readonly type: 'boolean';
        readonly default: true;
        readonly description: "Optional : When set to **true** (default), the response is an object of responses with providers names as keys : <br> \n                  ``` {'google' : { 'status': 'success', ... }, } ``` <br>\n                When set to **false** the response structure is a list of response objects : <br> \n                   ``` [{'status': 'success', 'provider': 'google' ... }, ] ```. <br> \n                  ";
      };
      readonly attributes_as_list: {
        readonly type: 'boolean';
        readonly default: false;
        readonly description: "Optional : When set to **false** (default) the structure of the extracted items is list of objects having different attributes : <br>\n     ```{'items': [{'attribute_1': 'x1','attribute_2': 'y2'}, ... ]}``` <br>\n     When it is set to **true**, the response contains an object with each attribute as a list : <br>\n     ```{ 'attribute_1': ['x1','x2', ...], 'attribute_2': [y1, y2, ...]}``` ";
      };
      readonly show_original_response: {
        readonly type: 'boolean';
        readonly default: false;
        readonly description: 'Optional : Shows the original response of the provider.<br>\n        When set to **true**, a new attribute *original_response* will appear in the response object.';
      };
      readonly file: {
        readonly type: 'string';
        readonly format: 'binary';
        readonly description: 'File to analyse in binary format to be used with *content-type*: **multipart/form-data** <br> **Does not work with application/json !**';
      };
      readonly file_url: {
        readonly type: readonly ['string', 'null'];
        readonly format: 'uri';
        readonly description: 'File **URL** to analyse to be used with with *content-type*: **application/json**.';
        readonly examples: readonly ['http://edenai-resource-example.png'];
      };
      readonly language: {
        readonly type: readonly ['string', 'null'];
        readonly description: 'Language code of the language the document is written in (ex: fr (French), en (English), es (Spanish))';
        readonly examples: readonly ['en'];
      };
    };
    readonly required: readonly ['providers'];
    readonly $schema: 'http://json-schema.org/draft-04/schema#';
  };
  readonly response: {
    readonly '200': {
      readonly properties: {
        readonly clarifai: {
          readonly required: readonly ['text', 'status'];
          readonly title: 'ocrocrOcrDataClass';
          readonly type: 'object';
          readonly properties: {
            readonly text: {
              readonly title: 'Text';
              readonly type: 'string';
            };
            readonly bounding_boxes: {
              readonly title: 'Bounding Boxes';
              readonly type: 'array';
              readonly items: {
                readonly required: readonly ['text', 'left', 'top', 'width', 'height'];
                readonly title: 'Bounding_box';
                readonly type: 'object';
                readonly properties: {
                  readonly text: {
                    readonly title: 'Text';
                    readonly type: 'string';
                  };
                  readonly left: {
                    readonly title: 'Left';
                    readonly type: 'integer';
                  };
                  readonly top: {
                    readonly title: 'Top';
                    readonly type: 'integer';
                  };
                  readonly width: {
                    readonly title: 'Width';
                    readonly type: 'integer';
                  };
                  readonly height: {
                    readonly title: 'Height';
                    readonly type: 'integer';
                  };
                };
              };
            };
            readonly original_response: {
              readonly default: any;
              readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
              readonly title: 'Original Response';
            };
            readonly status: {
              readonly title: 'Status';
              readonly enum: readonly ['sucess', 'fail'];
              readonly type: 'string';
              readonly description: '`sucess` `fail`';
            };
          };
        };
        readonly base64: {
          readonly required: readonly ['text', 'status'];
          readonly title: 'ocrocrOcrDataClass';
          readonly type: 'object';
          readonly properties: {
            readonly text: {
              readonly title: 'Text';
              readonly type: 'string';
            };
            readonly bounding_boxes: {
              readonly title: 'Bounding Boxes';
              readonly type: 'array';
              readonly items: {
                readonly required: readonly ['text', 'left', 'top', 'width', 'height'];
                readonly title: 'Bounding_box';
                readonly type: 'object';
                readonly properties: {
                  readonly text: {
                    readonly title: 'Text';
                    readonly type: 'string';
                  };
                  readonly left: {
                    readonly title: 'Left';
                    readonly type: 'integer';
                  };
                  readonly top: {
                    readonly title: 'Top';
                    readonly type: 'integer';
                  };
                  readonly width: {
                    readonly title: 'Width';
                    readonly type: 'integer';
                  };
                  readonly height: {
                    readonly title: 'Height';
                    readonly type: 'integer';
                  };
                };
              };
            };
            readonly original_response: {
              readonly default: any;
              readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
              readonly title: 'Original Response';
            };
            readonly status: {
              readonly title: 'Status';
              readonly enum: readonly ['sucess', 'fail'];
              readonly type: 'string';
              readonly description: '`sucess` `fail`';
            };
          };
        };
        readonly microsoft: {
          readonly required: readonly ['text', 'status'];
          readonly title: 'ocrocrOcrDataClass';
          readonly type: 'object';
          readonly properties: {
            readonly text: {
              readonly title: 'Text';
              readonly type: 'string';
            };
            readonly bounding_boxes: {
              readonly title: 'Bounding Boxes';
              readonly type: 'array';
              readonly items: {
                readonly required: readonly ['text', 'left', 'top', 'width', 'height'];
                readonly title: 'Bounding_box';
                readonly type: 'object';
                readonly properties: {
                  readonly text: {
                    readonly title: 'Text';
                    readonly type: 'string';
                  };
                  readonly left: {
                    readonly title: 'Left';
                    readonly type: 'integer';
                  };
                  readonly top: {
                    readonly title: 'Top';
                    readonly type: 'integer';
                  };
                  readonly width: {
                    readonly title: 'Width';
                    readonly type: 'integer';
                  };
                  readonly height: {
                    readonly title: 'Height';
                    readonly type: 'integer';
                  };
                };
              };
            };
            readonly original_response: {
              readonly default: any;
              readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
              readonly title: 'Original Response';
            };
            readonly status: {
              readonly title: 'Status';
              readonly enum: readonly ['sucess', 'fail'];
              readonly type: 'string';
              readonly description: '`sucess` `fail`';
            };
          };
        };
        readonly api4ai: {
          readonly required: readonly ['text', 'status'];
          readonly title: 'ocrocrOcrDataClass';
          readonly type: 'object';
          readonly properties: {
            readonly text: {
              readonly title: 'Text';
              readonly type: 'string';
            };
            readonly bounding_boxes: {
              readonly title: 'Bounding Boxes';
              readonly type: 'array';
              readonly items: {
                readonly required: readonly ['text', 'left', 'top', 'width', 'height'];
                readonly title: 'Bounding_box';
                readonly type: 'object';
                readonly properties: {
                  readonly text: {
                    readonly title: 'Text';
                    readonly type: 'string';
                  };
                  readonly left: {
                    readonly title: 'Left';
                    readonly type: 'integer';
                  };
                  readonly top: {
                    readonly title: 'Top';
                    readonly type: 'integer';
                  };
                  readonly width: {
                    readonly title: 'Width';
                    readonly type: 'integer';
                  };
                  readonly height: {
                    readonly title: 'Height';
                    readonly type: 'integer';
                  };
                };
              };
            };
            readonly original_response: {
              readonly default: any;
              readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
              readonly title: 'Original Response';
            };
            readonly status: {
              readonly title: 'Status';
              readonly enum: readonly ['sucess', 'fail'];
              readonly type: 'string';
              readonly description: '`sucess` `fail`';
            };
          };
        };
        readonly google: {
          readonly required: readonly ['text', 'status'];
          readonly title: 'ocrocrOcrDataClass';
          readonly type: 'object';
          readonly properties: {
            readonly text: {
              readonly title: 'Text';
              readonly type: 'string';
            };
            readonly bounding_boxes: {
              readonly title: 'Bounding Boxes';
              readonly type: 'array';
              readonly items: {
                readonly required: readonly ['text', 'left', 'top', 'width', 'height'];
                readonly title: 'Bounding_box';
                readonly type: 'object';
                readonly properties: {
                  readonly text: {
                    readonly title: 'Text';
                    readonly type: 'string';
                  };
                  readonly left: {
                    readonly title: 'Left';
                    readonly type: 'integer';
                  };
                  readonly top: {
                    readonly title: 'Top';
                    readonly type: 'integer';
                  };
                  readonly width: {
                    readonly title: 'Width';
                    readonly type: 'integer';
                  };
                  readonly height: {
                    readonly title: 'Height';
                    readonly type: 'integer';
                  };
                };
              };
            };
            readonly original_response: {
              readonly default: any;
              readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
              readonly title: 'Original Response';
            };
            readonly status: {
              readonly title: 'Status';
              readonly enum: readonly ['sucess', 'fail'];
              readonly type: 'string';
              readonly description: '`sucess` `fail`';
            };
          };
        };
        readonly sentisight: {
          readonly required: readonly ['text', 'status'];
          readonly title: 'ocrocrOcrDataClass';
          readonly type: 'object';
          readonly properties: {
            readonly text: {
              readonly title: 'Text';
              readonly type: 'string';
            };
            readonly bounding_boxes: {
              readonly title: 'Bounding Boxes';
              readonly type: 'array';
              readonly items: {
                readonly required: readonly ['text', 'left', 'top', 'width', 'height'];
                readonly title: 'Bounding_box';
                readonly type: 'object';
                readonly properties: {
                  readonly text: {
                    readonly title: 'Text';
                    readonly type: 'string';
                  };
                  readonly left: {
                    readonly title: 'Left';
                    readonly type: 'integer';
                  };
                  readonly top: {
                    readonly title: 'Top';
                    readonly type: 'integer';
                  };
                  readonly width: {
                    readonly title: 'Width';
                    readonly type: 'integer';
                  };
                  readonly height: {
                    readonly title: 'Height';
                    readonly type: 'integer';
                  };
                };
              };
            };
            readonly original_response: {
              readonly default: any;
              readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
              readonly title: 'Original Response';
            };
            readonly status: {
              readonly title: 'Status';
              readonly enum: readonly ['sucess', 'fail'];
              readonly type: 'string';
              readonly description: '`sucess` `fail`';
            };
          };
        };
        readonly amazon: {
          readonly required: readonly ['text', 'status'];
          readonly title: 'ocrocrOcrDataClass';
          readonly type: 'object';
          readonly properties: {
            readonly text: {
              readonly title: 'Text';
              readonly type: 'string';
            };
            readonly bounding_boxes: {
              readonly title: 'Bounding Boxes';
              readonly type: 'array';
              readonly items: {
                readonly required: readonly ['text', 'left', 'top', 'width', 'height'];
                readonly title: 'Bounding_box';
                readonly type: 'object';
                readonly properties: {
                  readonly text: {
                    readonly title: 'Text';
                    readonly type: 'string';
                  };
                  readonly left: {
                    readonly title: 'Left';
                    readonly type: 'integer';
                  };
                  readonly top: {
                    readonly title: 'Top';
                    readonly type: 'integer';
                  };
                  readonly width: {
                    readonly title: 'Width';
                    readonly type: 'integer';
                  };
                  readonly height: {
                    readonly title: 'Height';
                    readonly type: 'integer';
                  };
                };
              };
            };
            readonly original_response: {
              readonly default: any;
              readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
              readonly title: 'Original Response';
            };
            readonly status: {
              readonly title: 'Status';
              readonly enum: readonly ['sucess', 'fail'];
              readonly type: 'string';
              readonly description: '`sucess` `fail`';
            };
          };
        };
      };
      readonly title: 'ocrocrResponseModel';
      readonly type: 'object';
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '400': {
      readonly type: 'object';
      readonly properties: {
        readonly error: {
          readonly type: 'object';
          readonly properties: {
            readonly type: {
              readonly type: 'string';
            };
            readonly message: {
              readonly type: 'object';
              readonly properties: {
                readonly '<parameter_name>': {
                  readonly type: 'array';
                  readonly items: {
                    readonly type: 'string';
                  };
                };
              };
              readonly required: readonly ['<parameter_name>'];
            };
          };
          readonly required: readonly ['message', 'type'];
        };
      };
      readonly required: readonly ['error'];
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '403': {
      readonly type: 'object';
      readonly properties: {
        readonly error: {
          readonly type: 'object';
          readonly properties: {
            readonly type: {
              readonly type: 'string';
            };
            readonly message: {
              readonly type: 'string';
            };
          };
          readonly required: readonly ['message', 'type'];
        };
      };
      readonly required: readonly ['error'];
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '404': {
      readonly type: 'object';
      readonly properties: {
        readonly details: {
          readonly type: 'string';
          readonly default: 'Not Found';
        };
      };
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '500': {
      readonly type: 'object';
      readonly properties: {
        readonly error: {
          readonly type: 'object';
          readonly properties: {
            readonly type: {
              readonly type: 'string';
            };
            readonly message: {
              readonly type: 'string';
            };
          };
          readonly required: readonly ['message', 'type'];
        };
      };
      readonly required: readonly ['error'];
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
  };
};
declare const OcrOcrTablesAsyncCreate: {
  readonly body: {
    readonly type: 'object';
    readonly properties: {
      readonly providers: {
        readonly type: 'string';
        readonly minLength: 1;
        readonly description: "It can be one (ex: **'amazon'** or **'google'**) or multiple provider(s) (ex: **'amazon,microsoft,google'**)             that the data will be redirected to in order to get the processed results.";
        readonly examples: readonly ['google,microsoft,amazon'];
      };
      readonly fallback_providers: {
        readonly type: 'string';
        readonly minLength: 1;
        readonly description: "Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.\n    To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.\n\nThey will be tried in the same order they are input, and it will stop to the first provider who doesn't fail.\n\n\n*Doesn't work with async subfeatures.*\n    ";
      };
      readonly show_original_response: {
        readonly type: 'boolean';
        readonly default: false;
        readonly description: 'Optional : Shows the original response of the provider.<br>\n        When set to **true**, a new attribute *original_response* will appear in the response object.';
      };
      readonly webhook_receiver: {
        readonly type: 'string';
        readonly format: 'uri';
        readonly minLength: 1;
        readonly description: 'Webhook receiver should be a valid https URL (ex : https://your.listner.com/endpoint).             After the processing is done, the webhook endpoint will receive a POST request with the result.';
      };
      readonly users_webhook_parameters: {
        readonly type: 'object';
        readonly additionalProperties: true;
        readonly description: "Json data that contains of additional parameters that will be sent back to the webhook receiver             (ex: api key for security or client's data ID to link the result internally).             Will only be used when webhook_receiver is set.";
      };
      readonly file: {
        readonly type: 'string';
        readonly format: 'binary';
        readonly description: 'File to analyse in binary format to be used with *content-type*: **multipart/form-data** <br> **Does not work with application/json !**';
      };
      readonly file_url: {
        readonly type: readonly ['string', 'null'];
        readonly format: 'uri';
        readonly description: 'File **URL** to analyse to be used with with *content-type*: **application/json**.';
        readonly examples: readonly ['http://edenai-resource-example.png'];
      };
      readonly language: {
        readonly type: readonly ['string', 'null'];
        readonly description: 'Language code of the language the document is written in (ex: fr (French), en (English), es (Spanish))';
        readonly examples: readonly ['en'];
      };
    };
    readonly required: readonly ['providers'];
    readonly $schema: 'http://json-schema.org/draft-04/schema#';
  };
  readonly response: {
    readonly '200': {
      readonly type: 'object';
      readonly properties: {
        readonly public_id: {
          readonly type: 'string';
          readonly format: 'uuid';
        };
      };
      readonly required: readonly ['public_id'];
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
  };
};
declare const OcrOcrTablesAsyncRetrieve: {
  readonly response: {
    readonly '200': {
      readonly type: 'object';
      readonly properties: {
        readonly jobs: {
          readonly type: 'array';
          readonly items: {
            readonly type: 'object';
            readonly properties: {
              readonly providers: {
                readonly type: 'string';
              };
              readonly nb: {
                readonly type: 'integer';
              };
              readonly nb_ok: {
                readonly type: 'integer';
              };
              readonly public_id: {
                readonly type: 'string';
                readonly format: 'uuid';
              };
              readonly state: {
                readonly enum: readonly ['finished', 'failed', 'Timeout error', 'processing'];
                readonly type: 'string';
                readonly description: '* `finished` - finished\n* `failed` - failed\n* `Timeout error` - Timeout error\n* `processing` - processing\n\n`finished` `failed` `Timeout error` `processing`';
              };
              readonly created_at: {
                readonly type: 'string';
                readonly format: 'date-time';
              };
            };
            readonly required: readonly [
              'created_at',
              'nb',
              'nb_ok',
              'providers',
              'public_id',
              'state'
            ];
          };
        };
      };
      readonly required: readonly ['jobs'];
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
  };
};
declare const OcrOcrTablesAsyncRetrieve2: {
  readonly metadata: {
    readonly allOf: readonly [
      {
        readonly type: 'object';
        readonly properties: {
          readonly public_id: {
            readonly type: 'string';
            readonly $schema: 'http://json-schema.org/draft-04/schema#';
          };
        };
        readonly required: readonly ['public_id'];
      },
      {
        readonly type: 'object';
        readonly properties: {
          readonly response_as_dict: {
            readonly type: 'boolean';
            readonly default: true;
            readonly $schema: 'http://json-schema.org/draft-04/schema#';
          };
          readonly show_original_response: {
            readonly type: 'boolean';
            readonly default: false;
            readonly $schema: 'http://json-schema.org/draft-04/schema#';
          };
        };
        readonly required: readonly [];
      }
    ];
  };
  readonly response: {
    readonly '200': {
      readonly properties: {
        readonly results: {
          readonly properties: {
            readonly google: {
              readonly required: readonly ['num_pages', 'id', 'final_status'];
              readonly title: 'ocrocr_tables_asyncOcrTablesAsyncDataClass';
              readonly type: 'object';
              readonly properties: {
                readonly pages: {
                  readonly title: 'Pages';
                  readonly type: 'array';
                  readonly items: {
                    readonly description: 'Page of a document\n\n    Attributes:\n        lines (Sequence[Line]): List of lines of the page\n    ';
                    readonly title: 'Page';
                    readonly type: 'object';
                    readonly properties: {
                      readonly lines: {
                        readonly description: 'List of lines';
                        readonly title: 'Lines';
                        readonly type: 'array';
                        readonly items: {
                          readonly description: 'Line of a document\n\n    Attributes:\n        text (str): Text detected in the line\n        bounding_boxes (Sequence[BoundingBox]): Bounding boxes of the words in the line\n        words (Sequence[Word]): List of words of the line\n        confidence (float): Confidence of the line\n    ';
                          readonly required: readonly ['text', 'bounding_box', 'confidence'];
                          readonly title: 'Line';
                          readonly type: 'object';
                          readonly properties: {
                            readonly text: {
                              readonly description: 'Text detected in the line';
                              readonly title: 'Text';
                              readonly type: 'string';
                            };
                            readonly words: {
                              readonly description: 'List of words';
                              readonly title: 'Words';
                              readonly type: 'array';
                              readonly items: {
                                readonly description: 'Word of a document\n\n    Attributes:\n        text (str): Text detected in the word\n        bounding_boxes (Sequence[BoundingBox]): Bounding boxes of the words in the word\n        confidence (float): Confidence score of the word\n    ';
                                readonly required: readonly ['text', 'bounding_box', 'confidence'];
                                readonly title: 'Word';
                                readonly type: 'object';
                                readonly properties: {
                                  readonly text: {
                                    readonly description: 'Text detected in the word';
                                    readonly title: 'Text';
                                    readonly type: 'string';
                                  };
                                  readonly bounding_box: {
                                    readonly description: 'Bounding box of a word in the image\n\n    Attributes:\n        left (float): Left coordinate of the bounding box\n        top (float): Top coordinate of the bounding box\n        width (float): Width of the bounding box\n        height (float): Height of the bounding box\n        text (str): Text detected in the bounding box\n\n    Constructor:\n        from_json (classmethod): Create a new instance of BoundingBox from a JSON object\n        from_normalized_vertices (classmethod): Create a new instance of BoundingBox from normalized vertices\n        unknown (classmethod): Return a invalid bouding_box with all field filled with `-1`\n    ';
                                    readonly required: readonly ['left', 'top', 'width', 'height'];
                                    readonly title: 'BoundingBox';
                                    readonly type: 'object';
                                    readonly properties: {
                                      readonly left: {
                                        readonly description: 'Left coordinate of the bounding box';
                                        readonly title: 'Left';
                                        readonly type: 'integer';
                                      };
                                      readonly top: {
                                        readonly description: 'Top coordinate of the bounding box';
                                        readonly title: 'Top';
                                        readonly type: 'integer';
                                      };
                                      readonly width: {
                                        readonly description: 'Width of the bounding box';
                                        readonly title: 'Width';
                                        readonly type: 'integer';
                                      };
                                      readonly height: {
                                        readonly description: 'Height of the bounding box';
                                        readonly title: 'Height';
                                        readonly type: 'integer';
                                      };
                                    };
                                  };
                                  readonly confidence: {
                                    readonly description: 'Confidence score of the word';
                                    readonly title: 'Confidence';
                                    readonly type: 'integer';
                                  };
                                };
                              };
                            };
                            readonly bounding_box: {
                              readonly description: 'Bounding box of a word in the image\n\n    Attributes:\n        left (float): Left coordinate of the bounding box\n        top (float): Top coordinate of the bounding box\n        width (float): Width of the bounding box\n        height (float): Height of the bounding box\n        text (str): Text detected in the bounding box\n\n    Constructor:\n        from_json (classmethod): Create a new instance of BoundingBox from a JSON object\n        from_normalized_vertices (classmethod): Create a new instance of BoundingBox from normalized vertices\n        unknown (classmethod): Return a invalid bouding_box with all field filled with `-1`\n    ';
                              readonly required: readonly ['left', 'top', 'width', 'height'];
                              readonly title: 'BoundingBox';
                              readonly type: 'object';
                              readonly properties: {
                                readonly left: {
                                  readonly description: 'Left coordinate of the bounding box';
                                  readonly title: 'Left';
                                  readonly type: 'integer';
                                };
                                readonly top: {
                                  readonly description: 'Top coordinate of the bounding box';
                                  readonly title: 'Top';
                                  readonly type: 'integer';
                                };
                                readonly width: {
                                  readonly description: 'Width of the bounding box';
                                  readonly title: 'Width';
                                  readonly type: 'integer';
                                };
                                readonly height: {
                                  readonly description: 'Height of the bounding box';
                                  readonly title: 'Height';
                                  readonly type: 'integer';
                                };
                              };
                            };
                            readonly confidence: {
                              readonly description: 'Confidence of the line';
                              readonly title: 'Confidence';
                              readonly type: 'integer';
                            };
                          };
                        };
                      };
                    };
                  };
                };
                readonly num_pages: {
                  readonly title: 'Num Pages';
                  readonly type: 'integer';
                };
                readonly original_response: {
                  readonly default: any;
                  readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
                  readonly title: 'Original Response';
                };
                readonly id: {
                  readonly title: 'Id';
                  readonly type: 'string';
                };
                readonly final_status: {
                  readonly title: 'Final Status';
                  readonly enum: readonly ['sucess', 'fail'];
                  readonly type: 'string';
                  readonly description: '`sucess` `fail`';
                };
                readonly error: {
                  readonly title: 'Error';
                  readonly type: 'object';
                  readonly additionalProperties: true;
                };
              };
            };
            readonly microsoft: {
              readonly required: readonly ['num_pages', 'id', 'final_status'];
              readonly title: 'ocrocr_tables_asyncOcrTablesAsyncDataClass';
              readonly type: 'object';
              readonly properties: {
                readonly pages: {
                  readonly title: 'Pages';
                  readonly type: 'array';
                  readonly items: {
                    readonly description: 'Page of a document\n\n    Attributes:\n        lines (Sequence[Line]): List of lines of the page\n    ';
                    readonly title: 'Page';
                    readonly type: 'object';
                    readonly properties: {
                      readonly lines: {
                        readonly description: 'List of lines';
                        readonly title: 'Lines';
                        readonly type: 'array';
                        readonly items: {
                          readonly description: 'Line of a document\n\n    Attributes:\n        text (str): Text detected in the line\n        bounding_boxes (Sequence[BoundingBox]): Bounding boxes of the words in the line\n        words (Sequence[Word]): List of words of the line\n        confidence (float): Confidence of the line\n    ';
                          readonly required: readonly ['text', 'bounding_box', 'confidence'];
                          readonly title: 'Line';
                          readonly type: 'object';
                          readonly properties: {
                            readonly text: {
                              readonly description: 'Text detected in the line';
                              readonly title: 'Text';
                              readonly type: 'string';
                            };
                            readonly words: {
                              readonly description: 'List of words';
                              readonly title: 'Words';
                              readonly type: 'array';
                              readonly items: {
                                readonly description: 'Word of a document\n\n    Attributes:\n        text (str): Text detected in the word\n        bounding_boxes (Sequence[BoundingBox]): Bounding boxes of the words in the word\n        confidence (float): Confidence score of the word\n    ';
                                readonly required: readonly ['text', 'bounding_box', 'confidence'];
                                readonly title: 'Word';
                                readonly type: 'object';
                                readonly properties: {
                                  readonly text: {
                                    readonly description: 'Text detected in the word';
                                    readonly title: 'Text';
                                    readonly type: 'string';
                                  };
                                  readonly bounding_box: {
                                    readonly description: 'Bounding box of a word in the image\n\n    Attributes:\n        left (float): Left coordinate of the bounding box\n        top (float): Top coordinate of the bounding box\n        width (float): Width of the bounding box\n        height (float): Height of the bounding box\n        text (str): Text detected in the bounding box\n\n    Constructor:\n        from_json (classmethod): Create a new instance of BoundingBox from a JSON object\n        from_normalized_vertices (classmethod): Create a new instance of BoundingBox from normalized vertices\n        unknown (classmethod): Return a invalid bouding_box with all field filled with `-1`\n    ';
                                    readonly required: readonly ['left', 'top', 'width', 'height'];
                                    readonly title: 'BoundingBox';
                                    readonly type: 'object';
                                    readonly properties: {
                                      readonly left: {
                                        readonly description: 'Left coordinate of the bounding box';
                                        readonly title: 'Left';
                                        readonly type: 'integer';
                                      };
                                      readonly top: {
                                        readonly description: 'Top coordinate of the bounding box';
                                        readonly title: 'Top';
                                        readonly type: 'integer';
                                      };
                                      readonly width: {
                                        readonly description: 'Width of the bounding box';
                                        readonly title: 'Width';
                                        readonly type: 'integer';
                                      };
                                      readonly height: {
                                        readonly description: 'Height of the bounding box';
                                        readonly title: 'Height';
                                        readonly type: 'integer';
                                      };
                                    };
                                  };
                                  readonly confidence: {
                                    readonly description: 'Confidence score of the word';
                                    readonly title: 'Confidence';
                                    readonly type: 'integer';
                                  };
                                };
                              };
                            };
                            readonly bounding_box: {
                              readonly description: 'Bounding box of a word in the image\n\n    Attributes:\n        left (float): Left coordinate of the bounding box\n        top (float): Top coordinate of the bounding box\n        width (float): Width of the bounding box\n        height (float): Height of the bounding box\n        text (str): Text detected in the bounding box\n\n    Constructor:\n        from_json (classmethod): Create a new instance of BoundingBox from a JSON object\n        from_normalized_vertices (classmethod): Create a new instance of BoundingBox from normalized vertices\n        unknown (classmethod): Return a invalid bouding_box with all field filled with `-1`\n    ';
                              readonly required: readonly ['left', 'top', 'width', 'height'];
                              readonly title: 'BoundingBox';
                              readonly type: 'object';
                              readonly properties: {
                                readonly left: {
                                  readonly description: 'Left coordinate of the bounding box';
                                  readonly title: 'Left';
                                  readonly type: 'integer';
                                };
                                readonly top: {
                                  readonly description: 'Top coordinate of the bounding box';
                                  readonly title: 'Top';
                                  readonly type: 'integer';
                                };
                                readonly width: {
                                  readonly description: 'Width of the bounding box';
                                  readonly title: 'Width';
                                  readonly type: 'integer';
                                };
                                readonly height: {
                                  readonly description: 'Height of the bounding box';
                                  readonly title: 'Height';
                                  readonly type: 'integer';
                                };
                              };
                            };
                            readonly confidence: {
                              readonly description: 'Confidence of the line';
                              readonly title: 'Confidence';
                              readonly type: 'integer';
                            };
                          };
                        };
                      };
                    };
                  };
                };
                readonly num_pages: {
                  readonly title: 'Num Pages';
                  readonly type: 'integer';
                };
                readonly original_response: {
                  readonly default: any;
                  readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
                  readonly title: 'Original Response';
                };
                readonly id: {
                  readonly title: 'Id';
                  readonly type: 'string';
                };
                readonly final_status: {
                  readonly title: 'Final Status';
                  readonly enum: readonly ['sucess', 'fail'];
                  readonly type: 'string';
                  readonly description: '`sucess` `fail`';
                };
                readonly error: {
                  readonly title: 'Error';
                  readonly type: 'object';
                  readonly additionalProperties: true;
                };
              };
            };
            readonly amazon: {
              readonly required: readonly ['num_pages', 'id', 'final_status'];
              readonly title: 'ocrocr_tables_asyncOcrTablesAsyncDataClass';
              readonly type: 'object';
              readonly properties: {
                readonly pages: {
                  readonly title: 'Pages';
                  readonly type: 'array';
                  readonly items: {
                    readonly description: 'Page of a document\n\n    Attributes:\n        lines (Sequence[Line]): List of lines of the page\n    ';
                    readonly title: 'Page';
                    readonly type: 'object';
                    readonly properties: {
                      readonly lines: {
                        readonly description: 'List of lines';
                        readonly title: 'Lines';
                        readonly type: 'array';
                        readonly items: {
                          readonly description: 'Line of a document\n\n    Attributes:\n        text (str): Text detected in the line\n        bounding_boxes (Sequence[BoundingBox]): Bounding boxes of the words in the line\n        words (Sequence[Word]): List of words of the line\n        confidence (float): Confidence of the line\n    ';
                          readonly required: readonly ['text', 'bounding_box', 'confidence'];
                          readonly title: 'Line';
                          readonly type: 'object';
                          readonly properties: {
                            readonly text: {
                              readonly description: 'Text detected in the line';
                              readonly title: 'Text';
                              readonly type: 'string';
                            };
                            readonly words: {
                              readonly description: 'List of words';
                              readonly title: 'Words';
                              readonly type: 'array';
                              readonly items: {
                                readonly description: 'Word of a document\n\n    Attributes:\n        text (str): Text detected in the word\n        bounding_boxes (Sequence[BoundingBox]): Bounding boxes of the words in the word\n        confidence (float): Confidence score of the word\n    ';
                                readonly required: readonly ['text', 'bounding_box', 'confidence'];
                                readonly title: 'Word';
                                readonly type: 'object';
                                readonly properties: {
                                  readonly text: {
                                    readonly description: 'Text detected in the word';
                                    readonly title: 'Text';
                                    readonly type: 'string';
                                  };
                                  readonly bounding_box: {
                                    readonly description: 'Bounding box of a word in the image\n\n    Attributes:\n        left (float): Left coordinate of the bounding box\n        top (float): Top coordinate of the bounding box\n        width (float): Width of the bounding box\n        height (float): Height of the bounding box\n        text (str): Text detected in the bounding box\n\n    Constructor:\n        from_json (classmethod): Create a new instance of BoundingBox from a JSON object\n        from_normalized_vertices (classmethod): Create a new instance of BoundingBox from normalized vertices\n        unknown (classmethod): Return a invalid bouding_box with all field filled with `-1`\n    ';
                                    readonly required: readonly ['left', 'top', 'width', 'height'];
                                    readonly title: 'BoundingBox';
                                    readonly type: 'object';
                                    readonly properties: {
                                      readonly left: {
                                        readonly description: 'Left coordinate of the bounding box';
                                        readonly title: 'Left';
                                        readonly type: 'integer';
                                      };
                                      readonly top: {
                                        readonly description: 'Top coordinate of the bounding box';
                                        readonly title: 'Top';
                                        readonly type: 'integer';
                                      };
                                      readonly width: {
                                        readonly description: 'Width of the bounding box';
                                        readonly title: 'Width';
                                        readonly type: 'integer';
                                      };
                                      readonly height: {
                                        readonly description: 'Height of the bounding box';
                                        readonly title: 'Height';
                                        readonly type: 'integer';
                                      };
                                    };
                                  };
                                  readonly confidence: {
                                    readonly description: 'Confidence score of the word';
                                    readonly title: 'Confidence';
                                    readonly type: 'integer';
                                  };
                                };
                              };
                            };
                            readonly bounding_box: {
                              readonly description: 'Bounding box of a word in the image\n\n    Attributes:\n        left (float): Left coordinate of the bounding box\n        top (float): Top coordinate of the bounding box\n        width (float): Width of the bounding box\n        height (float): Height of the bounding box\n        text (str): Text detected in the bounding box\n\n    Constructor:\n        from_json (classmethod): Create a new instance of BoundingBox from a JSON object\n        from_normalized_vertices (classmethod): Create a new instance of BoundingBox from normalized vertices\n        unknown (classmethod): Return a invalid bouding_box with all field filled with `-1`\n    ';
                              readonly required: readonly ['left', 'top', 'width', 'height'];
                              readonly title: 'BoundingBox';
                              readonly type: 'object';
                              readonly properties: {
                                readonly left: {
                                  readonly description: 'Left coordinate of the bounding box';
                                  readonly title: 'Left';
                                  readonly type: 'integer';
                                };
                                readonly top: {
                                  readonly description: 'Top coordinate of the bounding box';
                                  readonly title: 'Top';
                                  readonly type: 'integer';
                                };
                                readonly width: {
                                  readonly description: 'Width of the bounding box';
                                  readonly title: 'Width';
                                  readonly type: 'integer';
                                };
                                readonly height: {
                                  readonly description: 'Height of the bounding box';
                                  readonly title: 'Height';
                                  readonly type: 'integer';
                                };
                              };
                            };
                            readonly confidence: {
                              readonly description: 'Confidence of the line';
                              readonly title: 'Confidence';
                              readonly type: 'integer';
                            };
                          };
                        };
                      };
                    };
                  };
                };
                readonly num_pages: {
                  readonly title: 'Num Pages';
                  readonly type: 'integer';
                };
                readonly original_response: {
                  readonly default: any;
                  readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
                  readonly title: 'Original Response';
                };
                readonly id: {
                  readonly title: 'Id';
                  readonly type: 'string';
                };
                readonly final_status: {
                  readonly title: 'Final Status';
                  readonly enum: readonly ['sucess', 'fail'];
                  readonly type: 'string';
                  readonly description: '`sucess` `fail`';
                };
                readonly error: {
                  readonly title: 'Error';
                  readonly type: 'object';
                  readonly additionalProperties: true;
                };
              };
            };
          };
          readonly title: 'ocrocr_tables_asyncModel';
          readonly type: 'object';
        };
        readonly error: {
          readonly title: 'Error';
          readonly type: 'string';
        };
        readonly public_id: {
          readonly format: 'uuid';
          readonly title: 'Public Id';
          readonly type: 'string';
        };
        readonly status: {
          readonly title: 'Status';
          readonly type: 'string';
        };
      };
      readonly required: readonly ['results', 'error', 'public_id', 'status'];
      readonly title: 'asyncocrocr_tables_asyncResponseModel';
      readonly type: 'object';
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '400': {
      readonly type: 'object';
      readonly properties: {
        readonly error: {
          readonly type: 'object';
          readonly properties: {
            readonly type: {
              readonly type: 'string';
            };
            readonly message: {
              readonly type: 'object';
              readonly properties: {
                readonly '<parameter_name>': {
                  readonly type: 'array';
                  readonly items: {
                    readonly type: 'string';
                  };
                };
              };
              readonly required: readonly ['<parameter_name>'];
            };
          };
          readonly required: readonly ['message', 'type'];
        };
      };
      readonly required: readonly ['error'];
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '403': {
      readonly type: 'object';
      readonly properties: {
        readonly error: {
          readonly type: 'object';
          readonly properties: {
            readonly type: {
              readonly type: 'string';
            };
            readonly message: {
              readonly type: 'string';
            };
          };
          readonly required: readonly ['message', 'type'];
        };
      };
      readonly required: readonly ['error'];
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '404': {
      readonly type: 'object';
      readonly properties: {
        readonly details: {
          readonly type: 'string';
          readonly default: 'Not Found';
        };
      };
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '500': {
      readonly type: 'object';
      readonly properties: {
        readonly error: {
          readonly type: 'object';
          readonly properties: {
            readonly type: {
              readonly type: 'string';
            };
            readonly message: {
              readonly type: 'string';
            };
          };
          readonly required: readonly ['message', 'type'];
        };
      };
      readonly required: readonly ['error'];
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
  };
};
declare const OcrReceiptParserCreate: {
  readonly body: {
    readonly type: 'object';
    readonly properties: {
      readonly providers: {
        readonly type: 'string';
        readonly minLength: 1;
        readonly description: "It can be one (ex: **'amazon'** or **'google'**) or multiple provider(s) (ex: **'amazon,microsoft,google'**)             that the data will be redirected to in order to get the processed results.";
        readonly examples: readonly [
          'base64,dataleon,veryfi,amazon,google,microsoft,klippa,mindee,tabscanner'
        ];
      };
      readonly fallback_providers: {
        readonly type: 'string';
        readonly minLength: 1;
        readonly description: "Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.\n    To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.\n\nThey will be tried in the same order they are input, and it will stop to the first provider who doesn't fail.\n\n\n*Doesn't work with async subfeatures.*\n    ";
      };
      readonly response_as_dict: {
        readonly type: 'boolean';
        readonly default: true;
        readonly description: "Optional : When set to **true** (default), the response is an object of responses with providers names as keys : <br> \n                  ``` {'google' : { 'status': 'success', ... }, } ``` <br>\n                When set to **false** the response structure is a list of response objects : <br> \n                   ``` [{'status': 'success', 'provider': 'google' ... }, ] ```. <br> \n                  ";
      };
      readonly attributes_as_list: {
        readonly type: 'boolean';
        readonly default: false;
        readonly description: "Optional : When set to **false** (default) the structure of the extracted items is list of objects having different attributes : <br>\n     ```{'items': [{'attribute_1': 'x1','attribute_2': 'y2'}, ... ]}``` <br>\n     When it is set to **true**, the response contains an object with each attribute as a list : <br>\n     ```{ 'attribute_1': ['x1','x2', ...], 'attribute_2': [y1, y2, ...]}``` ";
      };
      readonly show_original_response: {
        readonly type: 'boolean';
        readonly default: false;
        readonly description: 'Optional : Shows the original response of the provider.<br>\n        When set to **true**, a new attribute *original_response* will appear in the response object.';
      };
      readonly file: {
        readonly type: 'string';
        readonly format: 'binary';
        readonly description: 'File to analyse in binary format to be used with *content-type*: **multipart/form-data** <br> **Does not work with application/json !**';
      };
      readonly file_url: {
        readonly type: readonly ['string', 'null'];
        readonly format: 'uri';
        readonly description: 'File **URL** to analyse to be used with with *content-type*: **application/json**.';
        readonly examples: readonly ['http://edenai-resource-example.jpg'];
      };
      readonly language: {
        readonly type: readonly ['string', 'null'];
        readonly description: 'Language code of the language the document is written in (ex: fr (French), en (English), es (Spanish))';
        readonly examples: readonly ['en'];
      };
    };
    readonly required: readonly ['providers'];
    readonly $schema: 'http://json-schema.org/draft-04/schema#';
  };
  readonly response: {
    readonly '200': {
      readonly properties: {
        readonly veryfi: {
          readonly required: readonly ['status'];
          readonly title: 'ocrreceipt_parserReceiptParserDataClass';
          readonly type: 'object';
          readonly properties: {
            readonly extracted_data: {
              readonly title: 'Extracted Data';
              readonly type: 'array';
              readonly items: {
                readonly title: 'InfosReceiptParserDataClass';
                readonly type: 'object';
                readonly properties: {
                  readonly invoice_number: {
                    readonly default: any;
                    readonly title: 'Invoice Number';
                    readonly type: 'string';
                  };
                  readonly invoice_total: {
                    readonly default: any;
                    readonly title: 'Invoice Total';
                    readonly type: 'integer';
                  };
                  readonly invoice_subtotal: {
                    readonly default: any;
                    readonly title: 'Invoice Subtotal';
                    readonly type: 'integer';
                  };
                  readonly barcodes: {
                    readonly title: 'Barcodes';
                    readonly type: 'array';
                    readonly items: {
                      readonly required: readonly ['value', 'type'];
                      readonly title: 'BarCode';
                      readonly type: 'object';
                      readonly properties: {
                        readonly value: {
                          readonly title: 'Value';
                          readonly type: 'string';
                        };
                        readonly type: {
                          readonly title: 'Type';
                          readonly type: 'string';
                        };
                      };
                    };
                  };
                  readonly category: {
                    readonly default: any;
                    readonly title: 'Category';
                    readonly type: 'string';
                  };
                  readonly date: {
                    readonly default: any;
                    readonly title: 'Date';
                    readonly type: 'string';
                  };
                  readonly due_date: {
                    readonly default: any;
                    readonly title: 'Due Date';
                    readonly type: 'string';
                  };
                  readonly time: {
                    readonly default: any;
                    readonly title: 'Time';
                    readonly type: 'string';
                  };
                  readonly customer_information: {
                    readonly title: 'CustomerInformation';
                    readonly type: 'object';
                    readonly properties: {
                      readonly customer_name: {
                        readonly default: any;
                        readonly title: 'Customer Name';
                        readonly type: 'string';
                      };
                    };
                  };
                  readonly merchant_information: {
                    readonly title: 'MerchantInformation';
                    readonly type: 'object';
                    readonly properties: {
                      readonly merchant_name: {
                        readonly default: any;
                        readonly title: 'Merchant Name';
                        readonly type: 'string';
                      };
                      readonly merchant_address: {
                        readonly default: any;
                        readonly title: 'Merchant Address';
                        readonly type: 'string';
                      };
                      readonly merchant_phone: {
                        readonly default: any;
                        readonly title: 'Merchant Phone';
                        readonly type: 'string';
                      };
                      readonly merchant_url: {
                        readonly default: any;
                        readonly title: 'Merchant Url';
                        readonly type: 'string';
                      };
                      readonly merchant_siret: {
                        readonly default: any;
                        readonly title: 'Merchant Siret';
                        readonly type: 'string';
                      };
                      readonly merchant_siren: {
                        readonly default: any;
                        readonly title: 'Merchant Siren';
                        readonly type: 'string';
                      };
                    };
                  };
                  readonly payment_information: {
                    readonly title: 'PaymentInformation';
                    readonly type: 'object';
                    readonly properties: {
                      readonly card_type: {
                        readonly default: any;
                        readonly title: 'Card Type';
                        readonly type: 'string';
                      };
                      readonly card_number: {
                        readonly default: any;
                        readonly title: 'Card Number';
                        readonly type: 'string';
                      };
                      readonly cash: {
                        readonly default: any;
                        readonly title: 'Cash';
                        readonly type: 'string';
                      };
                      readonly tip: {
                        readonly default: any;
                        readonly title: 'Tip';
                        readonly type: 'string';
                      };
                      readonly discount: {
                        readonly default: any;
                        readonly title: 'Discount';
                        readonly type: 'string';
                      };
                      readonly change: {
                        readonly default: any;
                        readonly title: 'Change';
                        readonly type: 'string';
                      };
                    };
                  };
                  readonly locale: {
                    readonly title: 'Locale';
                    readonly type: 'object';
                    readonly properties: {
                      readonly currency: {
                        readonly default: any;
                        readonly title: 'Currency';
                        readonly type: 'string';
                      };
                      readonly language: {
                        readonly default: any;
                        readonly title: 'Language';
                        readonly type: 'string';
                      };
                      readonly country: {
                        readonly default: any;
                        readonly title: 'Country';
                        readonly type: 'string';
                      };
                    };
                  };
                  readonly taxes: {
                    readonly title: 'Taxes';
                    readonly type: 'array';
                    readonly items: {
                      readonly title: 'Taxes';
                      readonly type: 'object';
                      readonly properties: {
                        readonly taxes: {
                          readonly default: any;
                          readonly title: 'Taxes';
                          readonly type: 'integer';
                        };
                        readonly rate: {
                          readonly default: any;
                          readonly title: 'Rate';
                          readonly type: 'integer';
                        };
                      };
                    };
                  };
                  readonly receipt_infos: {
                    readonly title: 'Receipt Infos';
                    readonly type: 'object';
                    readonly additionalProperties: true;
                  };
                  readonly item_lines: {
                    readonly title: 'Item Lines';
                    readonly type: 'array';
                    readonly items: {
                      readonly title: 'ItemLines';
                      readonly type: 'object';
                      readonly properties: {
                        readonly description: {
                          readonly default: any;
                          readonly title: 'Description';
                          readonly type: 'string';
                        };
                        readonly quantity: {
                          readonly default: any;
                          readonly title: 'Quantity';
                          readonly type: 'integer';
                        };
                        readonly amount: {
                          readonly default: any;
                          readonly title: 'Amount';
                          readonly type: 'integer';
                        };
                        readonly unit_price: {
                          readonly default: any;
                          readonly title: 'Unit Price';
                          readonly type: 'integer';
                        };
                      };
                    };
                  };
                };
              };
            };
            readonly original_response: {
              readonly default: any;
              readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
              readonly title: 'Original Response';
            };
            readonly status: {
              readonly title: 'Status';
              readonly enum: readonly ['sucess', 'fail'];
              readonly type: 'string';
              readonly description: '`sucess` `fail`';
            };
          };
        };
        readonly base64: {
          readonly required: readonly ['status'];
          readonly title: 'ocrreceipt_parserReceiptParserDataClass';
          readonly type: 'object';
          readonly properties: {
            readonly extracted_data: {
              readonly title: 'Extracted Data';
              readonly type: 'array';
              readonly items: {
                readonly title: 'InfosReceiptParserDataClass';
                readonly type: 'object';
                readonly properties: {
                  readonly invoice_number: {
                    readonly default: any;
                    readonly title: 'Invoice Number';
                    readonly type: 'string';
                  };
                  readonly invoice_total: {
                    readonly default: any;
                    readonly title: 'Invoice Total';
                    readonly type: 'integer';
                  };
                  readonly invoice_subtotal: {
                    readonly default: any;
                    readonly title: 'Invoice Subtotal';
                    readonly type: 'integer';
                  };
                  readonly barcodes: {
                    readonly title: 'Barcodes';
                    readonly type: 'array';
                    readonly items: {
                      readonly required: readonly ['value', 'type'];
                      readonly title: 'BarCode';
                      readonly type: 'object';
                      readonly properties: {
                        readonly value: {
                          readonly title: 'Value';
                          readonly type: 'string';
                        };
                        readonly type: {
                          readonly title: 'Type';
                          readonly type: 'string';
                        };
                      };
                    };
                  };
                  readonly category: {
                    readonly default: any;
                    readonly title: 'Category';
                    readonly type: 'string';
                  };
                  readonly date: {
                    readonly default: any;
                    readonly title: 'Date';
                    readonly type: 'string';
                  };
                  readonly due_date: {
                    readonly default: any;
                    readonly title: 'Due Date';
                    readonly type: 'string';
                  };
                  readonly time: {
                    readonly default: any;
                    readonly title: 'Time';
                    readonly type: 'string';
                  };
                  readonly customer_information: {
                    readonly title: 'CustomerInformation';
                    readonly type: 'object';
                    readonly properties: {
                      readonly customer_name: {
                        readonly default: any;
                        readonly title: 'Customer Name';
                        readonly type: 'string';
                      };
                    };
                  };
                  readonly merchant_information: {
                    readonly title: 'MerchantInformation';
                    readonly type: 'object';
                    readonly properties: {
                      readonly merchant_name: {
                        readonly default: any;
                        readonly title: 'Merchant Name';
                        readonly type: 'string';
                      };
                      readonly merchant_address: {
                        readonly default: any;
                        readonly title: 'Merchant Address';
                        readonly type: 'string';
                      };
                      readonly merchant_phone: {
                        readonly default: any;
                        readonly title: 'Merchant Phone';
                        readonly type: 'string';
                      };
                      readonly merchant_url: {
                        readonly default: any;
                        readonly title: 'Merchant Url';
                        readonly type: 'string';
                      };
                      readonly merchant_siret: {
                        readonly default: any;
                        readonly title: 'Merchant Siret';
                        readonly type: 'string';
                      };
                      readonly merchant_siren: {
                        readonly default: any;
                        readonly title: 'Merchant Siren';
                        readonly type: 'string';
                      };
                    };
                  };
                  readonly payment_information: {
                    readonly title: 'PaymentInformation';
                    readonly type: 'object';
                    readonly properties: {
                      readonly card_type: {
                        readonly default: any;
                        readonly title: 'Card Type';
                        readonly type: 'string';
                      };
                      readonly card_number: {
                        readonly default: any;
                        readonly title: 'Card Number';
                        readonly type: 'string';
                      };
                      readonly cash: {
                        readonly default: any;
                        readonly title: 'Cash';
                        readonly type: 'string';
                      };
                      readonly tip: {
                        readonly default: any;
                        readonly title: 'Tip';
                        readonly type: 'string';
                      };
                      readonly discount: {
                        readonly default: any;
                        readonly title: 'Discount';
                        readonly type: 'string';
                      };
                      readonly change: {
                        readonly default: any;
                        readonly title: 'Change';
                        readonly type: 'string';
                      };
                    };
                  };
                  readonly locale: {
                    readonly title: 'Locale';
                    readonly type: 'object';
                    readonly properties: {
                      readonly currency: {
                        readonly default: any;
                        readonly title: 'Currency';
                        readonly type: 'string';
                      };
                      readonly language: {
                        readonly default: any;
                        readonly title: 'Language';
                        readonly type: 'string';
                      };
                      readonly country: {
                        readonly default: any;
                        readonly title: 'Country';
                        readonly type: 'string';
                      };
                    };
                  };
                  readonly taxes: {
                    readonly title: 'Taxes';
                    readonly type: 'array';
                    readonly items: {
                      readonly title: 'Taxes';
                      readonly type: 'object';
                      readonly properties: {
                        readonly taxes: {
                          readonly default: any;
                          readonly title: 'Taxes';
                          readonly type: 'integer';
                        };
                        readonly rate: {
                          readonly default: any;
                          readonly title: 'Rate';
                          readonly type: 'integer';
                        };
                      };
                    };
                  };
                  readonly receipt_infos: {
                    readonly title: 'Receipt Infos';
                    readonly type: 'object';
                    readonly additionalProperties: true;
                  };
                  readonly item_lines: {
                    readonly title: 'Item Lines';
                    readonly type: 'array';
                    readonly items: {
                      readonly title: 'ItemLines';
                      readonly type: 'object';
                      readonly properties: {
                        readonly description: {
                          readonly default: any;
                          readonly title: 'Description';
                          readonly type: 'string';
                        };
                        readonly quantity: {
                          readonly default: any;
                          readonly title: 'Quantity';
                          readonly type: 'integer';
                        };
                        readonly amount: {
                          readonly default: any;
                          readonly title: 'Amount';
                          readonly type: 'integer';
                        };
                        readonly unit_price: {
                          readonly default: any;
                          readonly title: 'Unit Price';
                          readonly type: 'integer';
                        };
                      };
                    };
                  };
                };
              };
            };
            readonly original_response: {
              readonly default: any;
              readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
              readonly title: 'Original Response';
            };
            readonly status: {
              readonly title: 'Status';
              readonly enum: readonly ['sucess', 'fail'];
              readonly type: 'string';
              readonly description: '`sucess` `fail`';
            };
          };
        };
        readonly mindee: {
          readonly required: readonly ['status'];
          readonly title: 'ocrreceipt_parserReceiptParserDataClass';
          readonly type: 'object';
          readonly properties: {
            readonly extracted_data: {
              readonly title: 'Extracted Data';
              readonly type: 'array';
              readonly items: {
                readonly title: 'InfosReceiptParserDataClass';
                readonly type: 'object';
                readonly properties: {
                  readonly invoice_number: {
                    readonly default: any;
                    readonly title: 'Invoice Number';
                    readonly type: 'string';
                  };
                  readonly invoice_total: {
                    readonly default: any;
                    readonly title: 'Invoice Total';
                    readonly type: 'integer';
                  };
                  readonly invoice_subtotal: {
                    readonly default: any;
                    readonly title: 'Invoice Subtotal';
                    readonly type: 'integer';
                  };
                  readonly barcodes: {
                    readonly title: 'Barcodes';
                    readonly type: 'array';
                    readonly items: {
                      readonly required: readonly ['value', 'type'];
                      readonly title: 'BarCode';
                      readonly type: 'object';
                      readonly properties: {
                        readonly value: {
                          readonly title: 'Value';
                          readonly type: 'string';
                        };
                        readonly type: {
                          readonly title: 'Type';
                          readonly type: 'string';
                        };
                      };
                    };
                  };
                  readonly category: {
                    readonly default: any;
                    readonly title: 'Category';
                    readonly type: 'string';
                  };
                  readonly date: {
                    readonly default: any;
                    readonly title: 'Date';
                    readonly type: 'string';
                  };
                  readonly due_date: {
                    readonly default: any;
                    readonly title: 'Due Date';
                    readonly type: 'string';
                  };
                  readonly time: {
                    readonly default: any;
                    readonly title: 'Time';
                    readonly type: 'string';
                  };
                  readonly customer_information: {
                    readonly title: 'CustomerInformation';
                    readonly type: 'object';
                    readonly properties: {
                      readonly customer_name: {
                        readonly default: any;
                        readonly title: 'Customer Name';
                        readonly type: 'string';
                      };
                    };
                  };
                  readonly merchant_information: {
                    readonly title: 'MerchantInformation';
                    readonly type: 'object';
                    readonly properties: {
                      readonly merchant_name: {
                        readonly default: any;
                        readonly title: 'Merchant Name';
                        readonly type: 'string';
                      };
                      readonly merchant_address: {
                        readonly default: any;
                        readonly title: 'Merchant Address';
                        readonly type: 'string';
                      };
                      readonly merchant_phone: {
                        readonly default: any;
                        readonly title: 'Merchant Phone';
                        readonly type: 'string';
                      };
                      readonly merchant_url: {
                        readonly default: any;
                        readonly title: 'Merchant Url';
                        readonly type: 'string';
                      };
                      readonly merchant_siret: {
                        readonly default: any;
                        readonly title: 'Merchant Siret';
                        readonly type: 'string';
                      };
                      readonly merchant_siren: {
                        readonly default: any;
                        readonly title: 'Merchant Siren';
                        readonly type: 'string';
                      };
                    };
                  };
                  readonly payment_information: {
                    readonly title: 'PaymentInformation';
                    readonly type: 'object';
                    readonly properties: {
                      readonly card_type: {
                        readonly default: any;
                        readonly title: 'Card Type';
                        readonly type: 'string';
                      };
                      readonly card_number: {
                        readonly default: any;
                        readonly title: 'Card Number';
                        readonly type: 'string';
                      };
                      readonly cash: {
                        readonly default: any;
                        readonly title: 'Cash';
                        readonly type: 'string';
                      };
                      readonly tip: {
                        readonly default: any;
                        readonly title: 'Tip';
                        readonly type: 'string';
                      };
                      readonly discount: {
                        readonly default: any;
                        readonly title: 'Discount';
                        readonly type: 'string';
                      };
                      readonly change: {
                        readonly default: any;
                        readonly title: 'Change';
                        readonly type: 'string';
                      };
                    };
                  };
                  readonly locale: {
                    readonly title: 'Locale';
                    readonly type: 'object';
                    readonly properties: {
                      readonly currency: {
                        readonly default: any;
                        readonly title: 'Currency';
                        readonly type: 'string';
                      };
                      readonly language: {
                        readonly default: any;
                        readonly title: 'Language';
                        readonly type: 'string';
                      };
                      readonly country: {
                        readonly default: any;
                        readonly title: 'Country';
                        readonly type: 'string';
                      };
                    };
                  };
                  readonly taxes: {
                    readonly title: 'Taxes';
                    readonly type: 'array';
                    readonly items: {
                      readonly title: 'Taxes';
                      readonly type: 'object';
                      readonly properties: {
                        readonly taxes: {
                          readonly default: any;
                          readonly title: 'Taxes';
                          readonly type: 'integer';
                        };
                        readonly rate: {
                          readonly default: any;
                          readonly title: 'Rate';
                          readonly type: 'integer';
                        };
                      };
                    };
                  };
                  readonly receipt_infos: {
                    readonly title: 'Receipt Infos';
                    readonly type: 'object';
                    readonly additionalProperties: true;
                  };
                  readonly item_lines: {
                    readonly title: 'Item Lines';
                    readonly type: 'array';
                    readonly items: {
                      readonly title: 'ItemLines';
                      readonly type: 'object';
                      readonly properties: {
                        readonly description: {
                          readonly default: any;
                          readonly title: 'Description';
                          readonly type: 'string';
                        };
                        readonly quantity: {
                          readonly default: any;
                          readonly title: 'Quantity';
                          readonly type: 'integer';
                        };
                        readonly amount: {
                          readonly default: any;
                          readonly title: 'Amount';
                          readonly type: 'integer';
                        };
                        readonly unit_price: {
                          readonly default: any;
                          readonly title: 'Unit Price';
                          readonly type: 'integer';
                        };
                      };
                    };
                  };
                };
              };
            };
            readonly original_response: {
              readonly default: any;
              readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
              readonly title: 'Original Response';
            };
            readonly status: {
              readonly title: 'Status';
              readonly enum: readonly ['sucess', 'fail'];
              readonly type: 'string';
              readonly description: '`sucess` `fail`';
            };
          };
        };
        readonly microsoft: {
          readonly required: readonly ['status'];
          readonly title: 'ocrreceipt_parserReceiptParserDataClass';
          readonly type: 'object';
          readonly properties: {
            readonly extracted_data: {
              readonly title: 'Extracted Data';
              readonly type: 'array';
              readonly items: {
                readonly title: 'InfosReceiptParserDataClass';
                readonly type: 'object';
                readonly properties: {
                  readonly invoice_number: {
                    readonly default: any;
                    readonly title: 'Invoice Number';
                    readonly type: 'string';
                  };
                  readonly invoice_total: {
                    readonly default: any;
                    readonly title: 'Invoice Total';
                    readonly type: 'integer';
                  };
                  readonly invoice_subtotal: {
                    readonly default: any;
                    readonly title: 'Invoice Subtotal';
                    readonly type: 'integer';
                  };
                  readonly barcodes: {
                    readonly title: 'Barcodes';
                    readonly type: 'array';
                    readonly items: {
                      readonly required: readonly ['value', 'type'];
                      readonly title: 'BarCode';
                      readonly type: 'object';
                      readonly properties: {
                        readonly value: {
                          readonly title: 'Value';
                          readonly type: 'string';
                        };
                        readonly type: {
                          readonly title: 'Type';
                          readonly type: 'string';
                        };
                      };
                    };
                  };
                  readonly category: {
                    readonly default: any;
                    readonly title: 'Category';
                    readonly type: 'string';
                  };
                  readonly date: {
                    readonly default: any;
                    readonly title: 'Date';
                    readonly type: 'string';
                  };
                  readonly due_date: {
                    readonly default: any;
                    readonly title: 'Due Date';
                    readonly type: 'string';
                  };
                  readonly time: {
                    readonly default: any;
                    readonly title: 'Time';
                    readonly type: 'string';
                  };
                  readonly customer_information: {
                    readonly title: 'CustomerInformation';
                    readonly type: 'object';
                    readonly properties: {
                      readonly customer_name: {
                        readonly default: any;
                        readonly title: 'Customer Name';
                        readonly type: 'string';
                      };
                    };
                  };
                  readonly merchant_information: {
                    readonly title: 'MerchantInformation';
                    readonly type: 'object';
                    readonly properties: {
                      readonly merchant_name: {
                        readonly default: any;
                        readonly title: 'Merchant Name';
                        readonly type: 'string';
                      };
                      readonly merchant_address: {
                        readonly default: any;
                        readonly title: 'Merchant Address';
                        readonly type: 'string';
                      };
                      readonly merchant_phone: {
                        readonly default: any;
                        readonly title: 'Merchant Phone';
                        readonly type: 'string';
                      };
                      readonly merchant_url: {
                        readonly default: any;
                        readonly title: 'Merchant Url';
                        readonly type: 'string';
                      };
                      readonly merchant_siret: {
                        readonly default: any;
                        readonly title: 'Merchant Siret';
                        readonly type: 'string';
                      };
                      readonly merchant_siren: {
                        readonly default: any;
                        readonly title: 'Merchant Siren';
                        readonly type: 'string';
                      };
                    };
                  };
                  readonly payment_information: {
                    readonly title: 'PaymentInformation';
                    readonly type: 'object';
                    readonly properties: {
                      readonly card_type: {
                        readonly default: any;
                        readonly title: 'Card Type';
                        readonly type: 'string';
                      };
                      readonly card_number: {
                        readonly default: any;
                        readonly title: 'Card Number';
                        readonly type: 'string';
                      };
                      readonly cash: {
                        readonly default: any;
                        readonly title: 'Cash';
                        readonly type: 'string';
                      };
                      readonly tip: {
                        readonly default: any;
                        readonly title: 'Tip';
                        readonly type: 'string';
                      };
                      readonly discount: {
                        readonly default: any;
                        readonly title: 'Discount';
                        readonly type: 'string';
                      };
                      readonly change: {
                        readonly default: any;
                        readonly title: 'Change';
                        readonly type: 'string';
                      };
                    };
                  };
                  readonly locale: {
                    readonly title: 'Locale';
                    readonly type: 'object';
                    readonly properties: {
                      readonly currency: {
                        readonly default: any;
                        readonly title: 'Currency';
                        readonly type: 'string';
                      };
                      readonly language: {
                        readonly default: any;
                        readonly title: 'Language';
                        readonly type: 'string';
                      };
                      readonly country: {
                        readonly default: any;
                        readonly title: 'Country';
                        readonly type: 'string';
                      };
                    };
                  };
                  readonly taxes: {
                    readonly title: 'Taxes';
                    readonly type: 'array';
                    readonly items: {
                      readonly title: 'Taxes';
                      readonly type: 'object';
                      readonly properties: {
                        readonly taxes: {
                          readonly default: any;
                          readonly title: 'Taxes';
                          readonly type: 'integer';
                        };
                        readonly rate: {
                          readonly default: any;
                          readonly title: 'Rate';
                          readonly type: 'integer';
                        };
                      };
                    };
                  };
                  readonly receipt_infos: {
                    readonly title: 'Receipt Infos';
                    readonly type: 'object';
                    readonly additionalProperties: true;
                  };
                  readonly item_lines: {
                    readonly title: 'Item Lines';
                    readonly type: 'array';
                    readonly items: {
                      readonly title: 'ItemLines';
                      readonly type: 'object';
                      readonly properties: {
                        readonly description: {
                          readonly default: any;
                          readonly title: 'Description';
                          readonly type: 'string';
                        };
                        readonly quantity: {
                          readonly default: any;
                          readonly title: 'Quantity';
                          readonly type: 'integer';
                        };
                        readonly amount: {
                          readonly default: any;
                          readonly title: 'Amount';
                          readonly type: 'integer';
                        };
                        readonly unit_price: {
                          readonly default: any;
                          readonly title: 'Unit Price';
                          readonly type: 'integer';
                        };
                      };
                    };
                  };
                };
              };
            };
            readonly original_response: {
              readonly default: any;
              readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
              readonly title: 'Original Response';
            };
            readonly status: {
              readonly title: 'Status';
              readonly enum: readonly ['sucess', 'fail'];
              readonly type: 'string';
              readonly description: '`sucess` `fail`';
            };
          };
        };
        readonly tabscanner: {
          readonly required: readonly ['status'];
          readonly title: 'ocrreceipt_parserReceiptParserDataClass';
          readonly type: 'object';
          readonly properties: {
            readonly extracted_data: {
              readonly title: 'Extracted Data';
              readonly type: 'array';
              readonly items: {
                readonly title: 'InfosReceiptParserDataClass';
                readonly type: 'object';
                readonly properties: {
                  readonly invoice_number: {
                    readonly default: any;
                    readonly title: 'Invoice Number';
                    readonly type: 'string';
                  };
                  readonly invoice_total: {
                    readonly default: any;
                    readonly title: 'Invoice Total';
                    readonly type: 'integer';
                  };
                  readonly invoice_subtotal: {
                    readonly default: any;
                    readonly title: 'Invoice Subtotal';
                    readonly type: 'integer';
                  };
                  readonly barcodes: {
                    readonly title: 'Barcodes';
                    readonly type: 'array';
                    readonly items: {
                      readonly required: readonly ['value', 'type'];
                      readonly title: 'BarCode';
                      readonly type: 'object';
                      readonly properties: {
                        readonly value: {
                          readonly title: 'Value';
                          readonly type: 'string';
                        };
                        readonly type: {
                          readonly title: 'Type';
                          readonly type: 'string';
                        };
                      };
                    };
                  };
                  readonly category: {
                    readonly default: any;
                    readonly title: 'Category';
                    readonly type: 'string';
                  };
                  readonly date: {
                    readonly default: any;
                    readonly title: 'Date';
                    readonly type: 'string';
                  };
                  readonly due_date: {
                    readonly default: any;
                    readonly title: 'Due Date';
                    readonly type: 'string';
                  };
                  readonly time: {
                    readonly default: any;
                    readonly title: 'Time';
                    readonly type: 'string';
                  };
                  readonly customer_information: {
                    readonly title: 'CustomerInformation';
                    readonly type: 'object';
                    readonly properties: {
                      readonly customer_name: {
                        readonly default: any;
                        readonly title: 'Customer Name';
                        readonly type: 'string';
                      };
                    };
                  };
                  readonly merchant_information: {
                    readonly title: 'MerchantInformation';
                    readonly type: 'object';
                    readonly properties: {
                      readonly merchant_name: {
                        readonly default: any;
                        readonly title: 'Merchant Name';
                        readonly type: 'string';
                      };
                      readonly merchant_address: {
                        readonly default: any;
                        readonly title: 'Merchant Address';
                        readonly type: 'string';
                      };
                      readonly merchant_phone: {
                        readonly default: any;
                        readonly title: 'Merchant Phone';
                        readonly type: 'string';
                      };
                      readonly merchant_url: {
                        readonly default: any;
                        readonly title: 'Merchant Url';
                        readonly type: 'string';
                      };
                      readonly merchant_siret: {
                        readonly default: any;
                        readonly title: 'Merchant Siret';
                        readonly type: 'string';
                      };
                      readonly merchant_siren: {
                        readonly default: any;
                        readonly title: 'Merchant Siren';
                        readonly type: 'string';
                      };
                    };
                  };
                  readonly payment_information: {
                    readonly title: 'PaymentInformation';
                    readonly type: 'object';
                    readonly properties: {
                      readonly card_type: {
                        readonly default: any;
                        readonly title: 'Card Type';
                        readonly type: 'string';
                      };
                      readonly card_number: {
                        readonly default: any;
                        readonly title: 'Card Number';
                        readonly type: 'string';
                      };
                      readonly cash: {
                        readonly default: any;
                        readonly title: 'Cash';
                        readonly type: 'string';
                      };
                      readonly tip: {
                        readonly default: any;
                        readonly title: 'Tip';
                        readonly type: 'string';
                      };
                      readonly discount: {
                        readonly default: any;
                        readonly title: 'Discount';
                        readonly type: 'string';
                      };
                      readonly change: {
                        readonly default: any;
                        readonly title: 'Change';
                        readonly type: 'string';
                      };
                    };
                  };
                  readonly locale: {
                    readonly title: 'Locale';
                    readonly type: 'object';
                    readonly properties: {
                      readonly currency: {
                        readonly default: any;
                        readonly title: 'Currency';
                        readonly type: 'string';
                      };
                      readonly language: {
                        readonly default: any;
                        readonly title: 'Language';
                        readonly type: 'string';
                      };
                      readonly country: {
                        readonly default: any;
                        readonly title: 'Country';
                        readonly type: 'string';
                      };
                    };
                  };
                  readonly taxes: {
                    readonly title: 'Taxes';
                    readonly type: 'array';
                    readonly items: {
                      readonly title: 'Taxes';
                      readonly type: 'object';
                      readonly properties: {
                        readonly taxes: {
                          readonly default: any;
                          readonly title: 'Taxes';
                          readonly type: 'integer';
                        };
                        readonly rate: {
                          readonly default: any;
                          readonly title: 'Rate';
                          readonly type: 'integer';
                        };
                      };
                    };
                  };
                  readonly receipt_infos: {
                    readonly title: 'Receipt Infos';
                    readonly type: 'object';
                    readonly additionalProperties: true;
                  };
                  readonly item_lines: {
                    readonly title: 'Item Lines';
                    readonly type: 'array';
                    readonly items: {
                      readonly title: 'ItemLines';
                      readonly type: 'object';
                      readonly properties: {
                        readonly description: {
                          readonly default: any;
                          readonly title: 'Description';
                          readonly type: 'string';
                        };
                        readonly quantity: {
                          readonly default: any;
                          readonly title: 'Quantity';
                          readonly type: 'integer';
                        };
                        readonly amount: {
                          readonly default: any;
                          readonly title: 'Amount';
                          readonly type: 'integer';
                        };
                        readonly unit_price: {
                          readonly default: any;
                          readonly title: 'Unit Price';
                          readonly type: 'integer';
                        };
                      };
                    };
                  };
                };
              };
            };
            readonly original_response: {
              readonly default: any;
              readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
              readonly title: 'Original Response';
            };
            readonly status: {
              readonly title: 'Status';
              readonly enum: readonly ['sucess', 'fail'];
              readonly type: 'string';
              readonly description: '`sucess` `fail`';
            };
          };
        };
        readonly dataleon: {
          readonly required: readonly ['status'];
          readonly title: 'ocrreceipt_parserReceiptParserDataClass';
          readonly type: 'object';
          readonly properties: {
            readonly extracted_data: {
              readonly title: 'Extracted Data';
              readonly type: 'array';
              readonly items: {
                readonly title: 'InfosReceiptParserDataClass';
                readonly type: 'object';
                readonly properties: {
                  readonly invoice_number: {
                    readonly default: any;
                    readonly title: 'Invoice Number';
                    readonly type: 'string';
                  };
                  readonly invoice_total: {
                    readonly default: any;
                    readonly title: 'Invoice Total';
                    readonly type: 'integer';
                  };
                  readonly invoice_subtotal: {
                    readonly default: any;
                    readonly title: 'Invoice Subtotal';
                    readonly type: 'integer';
                  };
                  readonly barcodes: {
                    readonly title: 'Barcodes';
                    readonly type: 'array';
                    readonly items: {
                      readonly required: readonly ['value', 'type'];
                      readonly title: 'BarCode';
                      readonly type: 'object';
                      readonly properties: {
                        readonly value: {
                          readonly title: 'Value';
                          readonly type: 'string';
                        };
                        readonly type: {
                          readonly title: 'Type';
                          readonly type: 'string';
                        };
                      };
                    };
                  };
                  readonly category: {
                    readonly default: any;
                    readonly title: 'Category';
                    readonly type: 'string';
                  };
                  readonly date: {
                    readonly default: any;
                    readonly title: 'Date';
                    readonly type: 'string';
                  };
                  readonly due_date: {
                    readonly default: any;
                    readonly title: 'Due Date';
                    readonly type: 'string';
                  };
                  readonly time: {
                    readonly default: any;
                    readonly title: 'Time';
                    readonly type: 'string';
                  };
                  readonly customer_information: {
                    readonly title: 'CustomerInformation';
                    readonly type: 'object';
                    readonly properties: {
                      readonly customer_name: {
                        readonly default: any;
                        readonly title: 'Customer Name';
                        readonly type: 'string';
                      };
                    };
                  };
                  readonly merchant_information: {
                    readonly title: 'MerchantInformation';
                    readonly type: 'object';
                    readonly properties: {
                      readonly merchant_name: {
                        readonly default: any;
                        readonly title: 'Merchant Name';
                        readonly type: 'string';
                      };
                      readonly merchant_address: {
                        readonly default: any;
                        readonly title: 'Merchant Address';
                        readonly type: 'string';
                      };
                      readonly merchant_phone: {
                        readonly default: any;
                        readonly title: 'Merchant Phone';
                        readonly type: 'string';
                      };
                      readonly merchant_url: {
                        readonly default: any;
                        readonly title: 'Merchant Url';
                        readonly type: 'string';
                      };
                      readonly merchant_siret: {
                        readonly default: any;
                        readonly title: 'Merchant Siret';
                        readonly type: 'string';
                      };
                      readonly merchant_siren: {
                        readonly default: any;
                        readonly title: 'Merchant Siren';
                        readonly type: 'string';
                      };
                    };
                  };
                  readonly payment_information: {
                    readonly title: 'PaymentInformation';
                    readonly type: 'object';
                    readonly properties: {
                      readonly card_type: {
                        readonly default: any;
                        readonly title: 'Card Type';
                        readonly type: 'string';
                      };
                      readonly card_number: {
                        readonly default: any;
                        readonly title: 'Card Number';
                        readonly type: 'string';
                      };
                      readonly cash: {
                        readonly default: any;
                        readonly title: 'Cash';
                        readonly type: 'string';
                      };
                      readonly tip: {
                        readonly default: any;
                        readonly title: 'Tip';
                        readonly type: 'string';
                      };
                      readonly discount: {
                        readonly default: any;
                        readonly title: 'Discount';
                        readonly type: 'string';
                      };
                      readonly change: {
                        readonly default: any;
                        readonly title: 'Change';
                        readonly type: 'string';
                      };
                    };
                  };
                  readonly locale: {
                    readonly title: 'Locale';
                    readonly type: 'object';
                    readonly properties: {
                      readonly currency: {
                        readonly default: any;
                        readonly title: 'Currency';
                        readonly type: 'string';
                      };
                      readonly language: {
                        readonly default: any;
                        readonly title: 'Language';
                        readonly type: 'string';
                      };
                      readonly country: {
                        readonly default: any;
                        readonly title: 'Country';
                        readonly type: 'string';
                      };
                    };
                  };
                  readonly taxes: {
                    readonly title: 'Taxes';
                    readonly type: 'array';
                    readonly items: {
                      readonly title: 'Taxes';
                      readonly type: 'object';
                      readonly properties: {
                        readonly taxes: {
                          readonly default: any;
                          readonly title: 'Taxes';
                          readonly type: 'integer';
                        };
                        readonly rate: {
                          readonly default: any;
                          readonly title: 'Rate';
                          readonly type: 'integer';
                        };
                      };
                    };
                  };
                  readonly receipt_infos: {
                    readonly title: 'Receipt Infos';
                    readonly type: 'object';
                    readonly additionalProperties: true;
                  };
                  readonly item_lines: {
                    readonly title: 'Item Lines';
                    readonly type: 'array';
                    readonly items: {
                      readonly title: 'ItemLines';
                      readonly type: 'object';
                      readonly properties: {
                        readonly description: {
                          readonly default: any;
                          readonly title: 'Description';
                          readonly type: 'string';
                        };
                        readonly quantity: {
                          readonly default: any;
                          readonly title: 'Quantity';
                          readonly type: 'integer';
                        };
                        readonly amount: {
                          readonly default: any;
                          readonly title: 'Amount';
                          readonly type: 'integer';
                        };
                        readonly unit_price: {
                          readonly default: any;
                          readonly title: 'Unit Price';
                          readonly type: 'integer';
                        };
                      };
                    };
                  };
                };
              };
            };
            readonly original_response: {
              readonly default: any;
              readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
              readonly title: 'Original Response';
            };
            readonly status: {
              readonly title: 'Status';
              readonly enum: readonly ['sucess', 'fail'];
              readonly type: 'string';
              readonly description: '`sucess` `fail`';
            };
          };
        };
        readonly google: {
          readonly required: readonly ['status'];
          readonly title: 'ocrreceipt_parserReceiptParserDataClass';
          readonly type: 'object';
          readonly properties: {
            readonly extracted_data: {
              readonly title: 'Extracted Data';
              readonly type: 'array';
              readonly items: {
                readonly title: 'InfosReceiptParserDataClass';
                readonly type: 'object';
                readonly properties: {
                  readonly invoice_number: {
                    readonly default: any;
                    readonly title: 'Invoice Number';
                    readonly type: 'string';
                  };
                  readonly invoice_total: {
                    readonly default: any;
                    readonly title: 'Invoice Total';
                    readonly type: 'integer';
                  };
                  readonly invoice_subtotal: {
                    readonly default: any;
                    readonly title: 'Invoice Subtotal';
                    readonly type: 'integer';
                  };
                  readonly barcodes: {
                    readonly title: 'Barcodes';
                    readonly type: 'array';
                    readonly items: {
                      readonly required: readonly ['value', 'type'];
                      readonly title: 'BarCode';
                      readonly type: 'object';
                      readonly properties: {
                        readonly value: {
                          readonly title: 'Value';
                          readonly type: 'string';
                        };
                        readonly type: {
                          readonly title: 'Type';
                          readonly type: 'string';
                        };
                      };
                    };
                  };
                  readonly category: {
                    readonly default: any;
                    readonly title: 'Category';
                    readonly type: 'string';
                  };
                  readonly date: {
                    readonly default: any;
                    readonly title: 'Date';
                    readonly type: 'string';
                  };
                  readonly due_date: {
                    readonly default: any;
                    readonly title: 'Due Date';
                    readonly type: 'string';
                  };
                  readonly time: {
                    readonly default: any;
                    readonly title: 'Time';
                    readonly type: 'string';
                  };
                  readonly customer_information: {
                    readonly title: 'CustomerInformation';
                    readonly type: 'object';
                    readonly properties: {
                      readonly customer_name: {
                        readonly default: any;
                        readonly title: 'Customer Name';
                        readonly type: 'string';
                      };
                    };
                  };
                  readonly merchant_information: {
                    readonly title: 'MerchantInformation';
                    readonly type: 'object';
                    readonly properties: {
                      readonly merchant_name: {
                        readonly default: any;
                        readonly title: 'Merchant Name';
                        readonly type: 'string';
                      };
                      readonly merchant_address: {
                        readonly default: any;
                        readonly title: 'Merchant Address';
                        readonly type: 'string';
                      };
                      readonly merchant_phone: {
                        readonly default: any;
                        readonly title: 'Merchant Phone';
                        readonly type: 'string';
                      };
                      readonly merchant_url: {
                        readonly default: any;
                        readonly title: 'Merchant Url';
                        readonly type: 'string';
                      };
                      readonly merchant_siret: {
                        readonly default: any;
                        readonly title: 'Merchant Siret';
                        readonly type: 'string';
                      };
                      readonly merchant_siren: {
                        readonly default: any;
                        readonly title: 'Merchant Siren';
                        readonly type: 'string';
                      };
                    };
                  };
                  readonly payment_information: {
                    readonly title: 'PaymentInformation';
                    readonly type: 'object';
                    readonly properties: {
                      readonly card_type: {
                        readonly default: any;
                        readonly title: 'Card Type';
                        readonly type: 'string';
                      };
                      readonly card_number: {
                        readonly default: any;
                        readonly title: 'Card Number';
                        readonly type: 'string';
                      };
                      readonly cash: {
                        readonly default: any;
                        readonly title: 'Cash';
                        readonly type: 'string';
                      };
                      readonly tip: {
                        readonly default: any;
                        readonly title: 'Tip';
                        readonly type: 'string';
                      };
                      readonly discount: {
                        readonly default: any;
                        readonly title: 'Discount';
                        readonly type: 'string';
                      };
                      readonly change: {
                        readonly default: any;
                        readonly title: 'Change';
                        readonly type: 'string';
                      };
                    };
                  };
                  readonly locale: {
                    readonly title: 'Locale';
                    readonly type: 'object';
                    readonly properties: {
                      readonly currency: {
                        readonly default: any;
                        readonly title: 'Currency';
                        readonly type: 'string';
                      };
                      readonly language: {
                        readonly default: any;
                        readonly title: 'Language';
                        readonly type: 'string';
                      };
                      readonly country: {
                        readonly default: any;
                        readonly title: 'Country';
                        readonly type: 'string';
                      };
                    };
                  };
                  readonly taxes: {
                    readonly title: 'Taxes';
                    readonly type: 'array';
                    readonly items: {
                      readonly title: 'Taxes';
                      readonly type: 'object';
                      readonly properties: {
                        readonly taxes: {
                          readonly default: any;
                          readonly title: 'Taxes';
                          readonly type: 'integer';
                        };
                        readonly rate: {
                          readonly default: any;
                          readonly title: 'Rate';
                          readonly type: 'integer';
                        };
                      };
                    };
                  };
                  readonly receipt_infos: {
                    readonly title: 'Receipt Infos';
                    readonly type: 'object';
                    readonly additionalProperties: true;
                  };
                  readonly item_lines: {
                    readonly title: 'Item Lines';
                    readonly type: 'array';
                    readonly items: {
                      readonly title: 'ItemLines';
                      readonly type: 'object';
                      readonly properties: {
                        readonly description: {
                          readonly default: any;
                          readonly title: 'Description';
                          readonly type: 'string';
                        };
                        readonly quantity: {
                          readonly default: any;
                          readonly title: 'Quantity';
                          readonly type: 'integer';
                        };
                        readonly amount: {
                          readonly default: any;
                          readonly title: 'Amount';
                          readonly type: 'integer';
                        };
                        readonly unit_price: {
                          readonly default: any;
                          readonly title: 'Unit Price';
                          readonly type: 'integer';
                        };
                      };
                    };
                  };
                };
              };
            };
            readonly original_response: {
              readonly default: any;
              readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
              readonly title: 'Original Response';
            };
            readonly status: {
              readonly title: 'Status';
              readonly enum: readonly ['sucess', 'fail'];
              readonly type: 'string';
              readonly description: '`sucess` `fail`';
            };
          };
        };
        readonly klippa: {
          readonly required: readonly ['status'];
          readonly title: 'ocrreceipt_parserReceiptParserDataClass';
          readonly type: 'object';
          readonly properties: {
            readonly extracted_data: {
              readonly title: 'Extracted Data';
              readonly type: 'array';
              readonly items: {
                readonly title: 'InfosReceiptParserDataClass';
                readonly type: 'object';
                readonly properties: {
                  readonly invoice_number: {
                    readonly default: any;
                    readonly title: 'Invoice Number';
                    readonly type: 'string';
                  };
                  readonly invoice_total: {
                    readonly default: any;
                    readonly title: 'Invoice Total';
                    readonly type: 'integer';
                  };
                  readonly invoice_subtotal: {
                    readonly default: any;
                    readonly title: 'Invoice Subtotal';
                    readonly type: 'integer';
                  };
                  readonly barcodes: {
                    readonly title: 'Barcodes';
                    readonly type: 'array';
                    readonly items: {
                      readonly required: readonly ['value', 'type'];
                      readonly title: 'BarCode';
                      readonly type: 'object';
                      readonly properties: {
                        readonly value: {
                          readonly title: 'Value';
                          readonly type: 'string';
                        };
                        readonly type: {
                          readonly title: 'Type';
                          readonly type: 'string';
                        };
                      };
                    };
                  };
                  readonly category: {
                    readonly default: any;
                    readonly title: 'Category';
                    readonly type: 'string';
                  };
                  readonly date: {
                    readonly default: any;
                    readonly title: 'Date';
                    readonly type: 'string';
                  };
                  readonly due_date: {
                    readonly default: any;
                    readonly title: 'Due Date';
                    readonly type: 'string';
                  };
                  readonly time: {
                    readonly default: any;
                    readonly title: 'Time';
                    readonly type: 'string';
                  };
                  readonly customer_information: {
                    readonly title: 'CustomerInformation';
                    readonly type: 'object';
                    readonly properties: {
                      readonly customer_name: {
                        readonly default: any;
                        readonly title: 'Customer Name';
                        readonly type: 'string';
                      };
                    };
                  };
                  readonly merchant_information: {
                    readonly title: 'MerchantInformation';
                    readonly type: 'object';
                    readonly properties: {
                      readonly merchant_name: {
                        readonly default: any;
                        readonly title: 'Merchant Name';
                        readonly type: 'string';
                      };
                      readonly merchant_address: {
                        readonly default: any;
                        readonly title: 'Merchant Address';
                        readonly type: 'string';
                      };
                      readonly merchant_phone: {
                        readonly default: any;
                        readonly title: 'Merchant Phone';
                        readonly type: 'string';
                      };
                      readonly merchant_url: {
                        readonly default: any;
                        readonly title: 'Merchant Url';
                        readonly type: 'string';
                      };
                      readonly merchant_siret: {
                        readonly default: any;
                        readonly title: 'Merchant Siret';
                        readonly type: 'string';
                      };
                      readonly merchant_siren: {
                        readonly default: any;
                        readonly title: 'Merchant Siren';
                        readonly type: 'string';
                      };
                    };
                  };
                  readonly payment_information: {
                    readonly title: 'PaymentInformation';
                    readonly type: 'object';
                    readonly properties: {
                      readonly card_type: {
                        readonly default: any;
                        readonly title: 'Card Type';
                        readonly type: 'string';
                      };
                      readonly card_number: {
                        readonly default: any;
                        readonly title: 'Card Number';
                        readonly type: 'string';
                      };
                      readonly cash: {
                        readonly default: any;
                        readonly title: 'Cash';
                        readonly type: 'string';
                      };
                      readonly tip: {
                        readonly default: any;
                        readonly title: 'Tip';
                        readonly type: 'string';
                      };
                      readonly discount: {
                        readonly default: any;
                        readonly title: 'Discount';
                        readonly type: 'string';
                      };
                      readonly change: {
                        readonly default: any;
                        readonly title: 'Change';
                        readonly type: 'string';
                      };
                    };
                  };
                  readonly locale: {
                    readonly title: 'Locale';
                    readonly type: 'object';
                    readonly properties: {
                      readonly currency: {
                        readonly default: any;
                        readonly title: 'Currency';
                        readonly type: 'string';
                      };
                      readonly language: {
                        readonly default: any;
                        readonly title: 'Language';
                        readonly type: 'string';
                      };
                      readonly country: {
                        readonly default: any;
                        readonly title: 'Country';
                        readonly type: 'string';
                      };
                    };
                  };
                  readonly taxes: {
                    readonly title: 'Taxes';
                    readonly type: 'array';
                    readonly items: {
                      readonly title: 'Taxes';
                      readonly type: 'object';
                      readonly properties: {
                        readonly taxes: {
                          readonly default: any;
                          readonly title: 'Taxes';
                          readonly type: 'integer';
                        };
                        readonly rate: {
                          readonly default: any;
                          readonly title: 'Rate';
                          readonly type: 'integer';
                        };
                      };
                    };
                  };
                  readonly receipt_infos: {
                    readonly title: 'Receipt Infos';
                    readonly type: 'object';
                    readonly additionalProperties: true;
                  };
                  readonly item_lines: {
                    readonly title: 'Item Lines';
                    readonly type: 'array';
                    readonly items: {
                      readonly title: 'ItemLines';
                      readonly type: 'object';
                      readonly properties: {
                        readonly description: {
                          readonly default: any;
                          readonly title: 'Description';
                          readonly type: 'string';
                        };
                        readonly quantity: {
                          readonly default: any;
                          readonly title: 'Quantity';
                          readonly type: 'integer';
                        };
                        readonly amount: {
                          readonly default: any;
                          readonly title: 'Amount';
                          readonly type: 'integer';
                        };
                        readonly unit_price: {
                          readonly default: any;
                          readonly title: 'Unit Price';
                          readonly type: 'integer';
                        };
                      };
                    };
                  };
                };
              };
            };
            readonly original_response: {
              readonly default: any;
              readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
              readonly title: 'Original Response';
            };
            readonly status: {
              readonly title: 'Status';
              readonly enum: readonly ['sucess', 'fail'];
              readonly type: 'string';
              readonly description: '`sucess` `fail`';
            };
          };
        };
        readonly amazon: {
          readonly required: readonly ['status'];
          readonly title: 'ocrreceipt_parserReceiptParserDataClass';
          readonly type: 'object';
          readonly properties: {
            readonly extracted_data: {
              readonly title: 'Extracted Data';
              readonly type: 'array';
              readonly items: {
                readonly title: 'InfosReceiptParserDataClass';
                readonly type: 'object';
                readonly properties: {
                  readonly invoice_number: {
                    readonly default: any;
                    readonly title: 'Invoice Number';
                    readonly type: 'string';
                  };
                  readonly invoice_total: {
                    readonly default: any;
                    readonly title: 'Invoice Total';
                    readonly type: 'integer';
                  };
                  readonly invoice_subtotal: {
                    readonly default: any;
                    readonly title: 'Invoice Subtotal';
                    readonly type: 'integer';
                  };
                  readonly barcodes: {
                    readonly title: 'Barcodes';
                    readonly type: 'array';
                    readonly items: {
                      readonly required: readonly ['value', 'type'];
                      readonly title: 'BarCode';
                      readonly type: 'object';
                      readonly properties: {
                        readonly value: {
                          readonly title: 'Value';
                          readonly type: 'string';
                        };
                        readonly type: {
                          readonly title: 'Type';
                          readonly type: 'string';
                        };
                      };
                    };
                  };
                  readonly category: {
                    readonly default: any;
                    readonly title: 'Category';
                    readonly type: 'string';
                  };
                  readonly date: {
                    readonly default: any;
                    readonly title: 'Date';
                    readonly type: 'string';
                  };
                  readonly due_date: {
                    readonly default: any;
                    readonly title: 'Due Date';
                    readonly type: 'string';
                  };
                  readonly time: {
                    readonly default: any;
                    readonly title: 'Time';
                    readonly type: 'string';
                  };
                  readonly customer_information: {
                    readonly title: 'CustomerInformation';
                    readonly type: 'object';
                    readonly properties: {
                      readonly customer_name: {
                        readonly default: any;
                        readonly title: 'Customer Name';
                        readonly type: 'string';
                      };
                    };
                  };
                  readonly merchant_information: {
                    readonly title: 'MerchantInformation';
                    readonly type: 'object';
                    readonly properties: {
                      readonly merchant_name: {
                        readonly default: any;
                        readonly title: 'Merchant Name';
                        readonly type: 'string';
                      };
                      readonly merchant_address: {
                        readonly default: any;
                        readonly title: 'Merchant Address';
                        readonly type: 'string';
                      };
                      readonly merchant_phone: {
                        readonly default: any;
                        readonly title: 'Merchant Phone';
                        readonly type: 'string';
                      };
                      readonly merchant_url: {
                        readonly default: any;
                        readonly title: 'Merchant Url';
                        readonly type: 'string';
                      };
                      readonly merchant_siret: {
                        readonly default: any;
                        readonly title: 'Merchant Siret';
                        readonly type: 'string';
                      };
                      readonly merchant_siren: {
                        readonly default: any;
                        readonly title: 'Merchant Siren';
                        readonly type: 'string';
                      };
                    };
                  };
                  readonly payment_information: {
                    readonly title: 'PaymentInformation';
                    readonly type: 'object';
                    readonly properties: {
                      readonly card_type: {
                        readonly default: any;
                        readonly title: 'Card Type';
                        readonly type: 'string';
                      };
                      readonly card_number: {
                        readonly default: any;
                        readonly title: 'Card Number';
                        readonly type: 'string';
                      };
                      readonly cash: {
                        readonly default: any;
                        readonly title: 'Cash';
                        readonly type: 'string';
                      };
                      readonly tip: {
                        readonly default: any;
                        readonly title: 'Tip';
                        readonly type: 'string';
                      };
                      readonly discount: {
                        readonly default: any;
                        readonly title: 'Discount';
                        readonly type: 'string';
                      };
                      readonly change: {
                        readonly default: any;
                        readonly title: 'Change';
                        readonly type: 'string';
                      };
                    };
                  };
                  readonly locale: {
                    readonly title: 'Locale';
                    readonly type: 'object';
                    readonly properties: {
                      readonly currency: {
                        readonly default: any;
                        readonly title: 'Currency';
                        readonly type: 'string';
                      };
                      readonly language: {
                        readonly default: any;
                        readonly title: 'Language';
                        readonly type: 'string';
                      };
                      readonly country: {
                        readonly default: any;
                        readonly title: 'Country';
                        readonly type: 'string';
                      };
                    };
                  };
                  readonly taxes: {
                    readonly title: 'Taxes';
                    readonly type: 'array';
                    readonly items: {
                      readonly title: 'Taxes';
                      readonly type: 'object';
                      readonly properties: {
                        readonly taxes: {
                          readonly default: any;
                          readonly title: 'Taxes';
                          readonly type: 'integer';
                        };
                        readonly rate: {
                          readonly default: any;
                          readonly title: 'Rate';
                          readonly type: 'integer';
                        };
                      };
                    };
                  };
                  readonly receipt_infos: {
                    readonly title: 'Receipt Infos';
                    readonly type: 'object';
                    readonly additionalProperties: true;
                  };
                  readonly item_lines: {
                    readonly title: 'Item Lines';
                    readonly type: 'array';
                    readonly items: {
                      readonly title: 'ItemLines';
                      readonly type: 'object';
                      readonly properties: {
                        readonly description: {
                          readonly default: any;
                          readonly title: 'Description';
                          readonly type: 'string';
                        };
                        readonly quantity: {
                          readonly default: any;
                          readonly title: 'Quantity';
                          readonly type: 'integer';
                        };
                        readonly amount: {
                          readonly default: any;
                          readonly title: 'Amount';
                          readonly type: 'integer';
                        };
                        readonly unit_price: {
                          readonly default: any;
                          readonly title: 'Unit Price';
                          readonly type: 'integer';
                        };
                      };
                    };
                  };
                };
              };
            };
            readonly original_response: {
              readonly default: any;
              readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
              readonly title: 'Original Response';
            };
            readonly status: {
              readonly title: 'Status';
              readonly enum: readonly ['sucess', 'fail'];
              readonly type: 'string';
              readonly description: '`sucess` `fail`';
            };
          };
        };
        readonly 'eden-ai': {
          readonly required: readonly ['status'];
          readonly title: 'ocrreceipt_parserReceiptParserDataClass';
          readonly type: 'object';
          readonly properties: {
            readonly extracted_data: {
              readonly title: 'Extracted Data';
              readonly type: 'array';
              readonly items: {
                readonly title: 'InfosReceiptParserDataClass';
                readonly type: 'object';
                readonly properties: {
                  readonly invoice_number: {
                    readonly default: any;
                    readonly title: 'Invoice Number';
                    readonly type: 'string';
                  };
                  readonly invoice_total: {
                    readonly default: any;
                    readonly title: 'Invoice Total';
                    readonly type: 'integer';
                  };
                  readonly invoice_subtotal: {
                    readonly default: any;
                    readonly title: 'Invoice Subtotal';
                    readonly type: 'integer';
                  };
                  readonly barcodes: {
                    readonly title: 'Barcodes';
                    readonly type: 'array';
                    readonly items: {
                      readonly required: readonly ['value', 'type'];
                      readonly title: 'BarCode';
                      readonly type: 'object';
                      readonly properties: {
                        readonly value: {
                          readonly title: 'Value';
                          readonly type: 'string';
                        };
                        readonly type: {
                          readonly title: 'Type';
                          readonly type: 'string';
                        };
                      };
                    };
                  };
                  readonly category: {
                    readonly default: any;
                    readonly title: 'Category';
                    readonly type: 'string';
                  };
                  readonly date: {
                    readonly default: any;
                    readonly title: 'Date';
                    readonly type: 'string';
                  };
                  readonly due_date: {
                    readonly default: any;
                    readonly title: 'Due Date';
                    readonly type: 'string';
                  };
                  readonly time: {
                    readonly default: any;
                    readonly title: 'Time';
                    readonly type: 'string';
                  };
                  readonly customer_information: {
                    readonly title: 'CustomerInformation';
                    readonly type: 'object';
                    readonly properties: {
                      readonly customer_name: {
                        readonly default: any;
                        readonly title: 'Customer Name';
                        readonly type: 'string';
                      };
                    };
                  };
                  readonly merchant_information: {
                    readonly title: 'MerchantInformation';
                    readonly type: 'object';
                    readonly properties: {
                      readonly merchant_name: {
                        readonly default: any;
                        readonly title: 'Merchant Name';
                        readonly type: 'string';
                      };
                      readonly merchant_address: {
                        readonly default: any;
                        readonly title: 'Merchant Address';
                        readonly type: 'string';
                      };
                      readonly merchant_phone: {
                        readonly default: any;
                        readonly title: 'Merchant Phone';
                        readonly type: 'string';
                      };
                      readonly merchant_url: {
                        readonly default: any;
                        readonly title: 'Merchant Url';
                        readonly type: 'string';
                      };
                      readonly merchant_siret: {
                        readonly default: any;
                        readonly title: 'Merchant Siret';
                        readonly type: 'string';
                      };
                      readonly merchant_siren: {
                        readonly default: any;
                        readonly title: 'Merchant Siren';
                        readonly type: 'string';
                      };
                    };
                  };
                  readonly payment_information: {
                    readonly title: 'PaymentInformation';
                    readonly type: 'object';
                    readonly properties: {
                      readonly card_type: {
                        readonly default: any;
                        readonly title: 'Card Type';
                        readonly type: 'string';
                      };
                      readonly card_number: {
                        readonly default: any;
                        readonly title: 'Card Number';
                        readonly type: 'string';
                      };
                      readonly cash: {
                        readonly default: any;
                        readonly title: 'Cash';
                        readonly type: 'string';
                      };
                      readonly tip: {
                        readonly default: any;
                        readonly title: 'Tip';
                        readonly type: 'string';
                      };
                      readonly discount: {
                        readonly default: any;
                        readonly title: 'Discount';
                        readonly type: 'string';
                      };
                      readonly change: {
                        readonly default: any;
                        readonly title: 'Change';
                        readonly type: 'string';
                      };
                    };
                  };
                  readonly locale: {
                    readonly title: 'Locale';
                    readonly type: 'object';
                    readonly properties: {
                      readonly currency: {
                        readonly default: any;
                        readonly title: 'Currency';
                        readonly type: 'string';
                      };
                      readonly language: {
                        readonly default: any;
                        readonly title: 'Language';
                        readonly type: 'string';
                      };
                      readonly country: {
                        readonly default: any;
                        readonly title: 'Country';
                        readonly type: 'string';
                      };
                    };
                  };
                  readonly taxes: {
                    readonly title: 'Taxes';
                    readonly type: 'array';
                    readonly items: {
                      readonly title: 'Taxes';
                      readonly type: 'object';
                      readonly properties: {
                        readonly taxes: {
                          readonly default: any;
                          readonly title: 'Taxes';
                          readonly type: 'integer';
                        };
                        readonly rate: {
                          readonly default: any;
                          readonly title: 'Rate';
                          readonly type: 'integer';
                        };
                      };
                    };
                  };
                  readonly receipt_infos: {
                    readonly title: 'Receipt Infos';
                    readonly type: 'object';
                    readonly additionalProperties: true;
                  };
                  readonly item_lines: {
                    readonly title: 'Item Lines';
                    readonly type: 'array';
                    readonly items: {
                      readonly title: 'ItemLines';
                      readonly type: 'object';
                      readonly properties: {
                        readonly description: {
                          readonly default: any;
                          readonly title: 'Description';
                          readonly type: 'string';
                        };
                        readonly quantity: {
                          readonly default: any;
                          readonly title: 'Quantity';
                          readonly type: 'integer';
                        };
                        readonly amount: {
                          readonly default: any;
                          readonly title: 'Amount';
                          readonly type: 'integer';
                        };
                        readonly unit_price: {
                          readonly default: any;
                          readonly title: 'Unit Price';
                          readonly type: 'integer';
                        };
                      };
                    };
                  };
                };
              };
            };
            readonly original_response: {
              readonly default: any;
              readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
              readonly title: 'Original Response';
            };
            readonly status: {
              readonly title: 'Status';
              readonly enum: readonly ['sucess', 'fail'];
              readonly type: 'string';
              readonly description: '`sucess` `fail`';
            };
          };
        };
      };
      readonly title: 'ocrreceipt_parserResponseModel';
      readonly type: 'object';
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '400': {
      readonly type: 'object';
      readonly properties: {
        readonly error: {
          readonly type: 'object';
          readonly properties: {
            readonly type: {
              readonly type: 'string';
            };
            readonly message: {
              readonly type: 'object';
              readonly properties: {
                readonly '<parameter_name>': {
                  readonly type: 'array';
                  readonly items: {
                    readonly type: 'string';
                  };
                };
              };
              readonly required: readonly ['<parameter_name>'];
            };
          };
          readonly required: readonly ['message', 'type'];
        };
      };
      readonly required: readonly ['error'];
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '403': {
      readonly type: 'object';
      readonly properties: {
        readonly error: {
          readonly type: 'object';
          readonly properties: {
            readonly type: {
              readonly type: 'string';
            };
            readonly message: {
              readonly type: 'string';
            };
          };
          readonly required: readonly ['message', 'type'];
        };
      };
      readonly required: readonly ['error'];
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '404': {
      readonly type: 'object';
      readonly properties: {
        readonly details: {
          readonly type: 'string';
          readonly default: 'Not Found';
        };
      };
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '500': {
      readonly type: 'object';
      readonly properties: {
        readonly error: {
          readonly type: 'object';
          readonly properties: {
            readonly type: {
              readonly type: 'string';
            };
            readonly message: {
              readonly type: 'string';
            };
          };
          readonly required: readonly ['message', 'type'];
        };
      };
      readonly required: readonly ['error'];
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
  };
};
declare const OcrResumeParserCreate: {
  readonly body: {
    readonly type: 'object';
    readonly properties: {
      readonly providers: {
        readonly type: 'string';
        readonly minLength: 1;
        readonly description: "It can be one (ex: **'amazon'** or **'google'**) or multiple provider(s) (ex: **'amazon,microsoft,google'**)             that the data will be redirected to in order to get the processed results.";
        readonly examples: readonly ['hireability,affinda'];
      };
      readonly fallback_providers: {
        readonly type: 'string';
        readonly minLength: 1;
        readonly description: "Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.\n    To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.\n\nThey will be tried in the same order they are input, and it will stop to the first provider who doesn't fail.\n\n\n*Doesn't work with async subfeatures.*\n    ";
      };
      readonly response_as_dict: {
        readonly type: 'boolean';
        readonly default: true;
        readonly description: "Optional : When set to **true** (default), the response is an object of responses with providers names as keys : <br> \n                  ``` {'google' : { 'status': 'success', ... }, } ``` <br>\n                When set to **false** the response structure is a list of response objects : <br> \n                   ``` [{'status': 'success', 'provider': 'google' ... }, ] ```. <br> \n                  ";
      };
      readonly attributes_as_list: {
        readonly type: 'boolean';
        readonly default: false;
        readonly description: "Optional : When set to **false** (default) the structure of the extracted items is list of objects having different attributes : <br>\n     ```{'items': [{'attribute_1': 'x1','attribute_2': 'y2'}, ... ]}``` <br>\n     When it is set to **true**, the response contains an object with each attribute as a list : <br>\n     ```{ 'attribute_1': ['x1','x2', ...], 'attribute_2': [y1, y2, ...]}``` ";
      };
      readonly show_original_response: {
        readonly type: 'boolean';
        readonly default: false;
        readonly description: 'Optional : Shows the original response of the provider.<br>\n        When set to **true**, a new attribute *original_response* will appear in the response object.';
      };
      readonly file: {
        readonly type: 'string';
        readonly format: 'binary';
        readonly description: 'File to analyse in binary format to be used with *content-type*: **multipart/form-data** <br> **Does not work with application/json !**';
      };
      readonly file_url: {
        readonly type: readonly ['string', 'null'];
        readonly format: 'uri';
        readonly description: 'File **URL** to analyse to be used with with *content-type*: **application/json**.';
        readonly examples: readonly ['http://edenai-resource-example.pdf'];
      };
    };
    readonly required: readonly ['providers'];
    readonly $schema: 'http://json-schema.org/draft-04/schema#';
  };
  readonly response: {
    readonly '200': {
      readonly properties: {
        readonly affinda: {
          readonly required: readonly ['extracted_data', 'status'];
          readonly title: 'ocrresume_parserResumeParserDataClass';
          readonly type: 'object';
          readonly properties: {
            readonly extracted_data: {
              readonly required: readonly ['personal_infos', 'education', 'work_experience'];
              readonly title: 'ResumeExtractedData';
              readonly type: 'object';
              readonly properties: {
                readonly personal_infos: {
                  readonly required: readonly [
                    'name',
                    'address',
                    'self_summary',
                    'objective',
                    'date_of_birth',
                    'place_of_birth',
                    'current_profession',
                    'gender',
                    'nationality',
                    'martial_status',
                    'current_salary'
                  ];
                  readonly title: 'ResumePersonalInfo';
                  readonly type: 'object';
                  readonly properties: {
                    readonly name: {
                      readonly required: readonly [
                        'first_name',
                        'last_name',
                        'raw_name',
                        'middle',
                        'title',
                        'prefix',
                        'sufix'
                      ];
                      readonly title: 'ResumePersonalName';
                      readonly type: 'object';
                      readonly properties: {
                        readonly first_name: {
                          readonly title: 'First Name';
                          readonly type: 'string';
                        };
                        readonly last_name: {
                          readonly title: 'Last Name';
                          readonly type: 'string';
                        };
                        readonly raw_name: {
                          readonly title: 'Raw Name';
                          readonly type: 'string';
                        };
                        readonly middle: {
                          readonly title: 'Middle';
                          readonly type: 'string';
                        };
                        readonly title: {
                          readonly title: 'Title';
                          readonly type: 'string';
                        };
                        readonly prefix: {
                          readonly title: 'Prefix';
                          readonly type: 'string';
                        };
                        readonly sufix: {
                          readonly title: 'Sufix';
                          readonly type: 'string';
                        };
                      };
                    };
                    readonly address: {
                      readonly required: readonly [
                        'formatted_location',
                        'postal_code',
                        'region',
                        'country',
                        'country_code',
                        'raw_input_location',
                        'street',
                        'street_number',
                        'appartment_number',
                        'city'
                      ];
                      readonly title: 'ResumeLocation';
                      readonly type: 'object';
                      readonly properties: {
                        readonly formatted_location: {
                          readonly title: 'Formatted Location';
                          readonly type: 'string';
                        };
                        readonly postal_code: {
                          readonly title: 'Postal Code';
                          readonly type: 'string';
                        };
                        readonly region: {
                          readonly title: 'Region';
                          readonly type: 'string';
                        };
                        readonly country: {
                          readonly title: 'Country';
                          readonly type: 'string';
                        };
                        readonly country_code: {
                          readonly title: 'Country Code';
                          readonly type: 'string';
                        };
                        readonly raw_input_location: {
                          readonly title: 'Raw Input Location';
                          readonly type: 'string';
                        };
                        readonly street: {
                          readonly title: 'Street';
                          readonly type: 'string';
                        };
                        readonly street_number: {
                          readonly title: 'Street Number';
                          readonly type: 'string';
                        };
                        readonly appartment_number: {
                          readonly title: 'Appartment Number';
                          readonly type: 'string';
                        };
                        readonly city: {
                          readonly title: 'City';
                          readonly type: 'string';
                        };
                      };
                    };
                    readonly self_summary: {
                      readonly title: 'Self Summary';
                      readonly type: 'string';
                    };
                    readonly objective: {
                      readonly title: 'Objective';
                      readonly type: 'string';
                    };
                    readonly date_of_birth: {
                      readonly title: 'Date Of Birth';
                      readonly type: 'string';
                    };
                    readonly place_of_birth: {
                      readonly title: 'Place Of Birth';
                      readonly type: 'string';
                    };
                    readonly phones: {
                      readonly title: 'Phones';
                      readonly type: 'array';
                      readonly items: {
                        readonly type: 'string';
                      };
                    };
                    readonly mails: {
                      readonly title: 'Mails';
                      readonly type: 'array';
                      readonly items: {
                        readonly type: 'string';
                      };
                    };
                    readonly urls: {
                      readonly title: 'Urls';
                      readonly type: 'array';
                      readonly items: {
                        readonly type: 'string';
                      };
                    };
                    readonly fax: {
                      readonly title: 'Fax';
                      readonly type: 'array';
                      readonly items: {
                        readonly type: 'string';
                      };
                    };
                    readonly current_profession: {
                      readonly title: 'Current Profession';
                      readonly type: 'string';
                    };
                    readonly gender: {
                      readonly title: 'Gender';
                      readonly type: 'string';
                    };
                    readonly nationality: {
                      readonly title: 'Nationality';
                      readonly type: 'string';
                    };
                    readonly martial_status: {
                      readonly title: 'Martial Status';
                      readonly type: 'string';
                    };
                    readonly current_salary: {
                      readonly title: 'Current Salary';
                      readonly type: 'string';
                    };
                  };
                };
                readonly education: {
                  readonly required: readonly ['total_years_education'];
                  readonly title: 'ResumeEducation';
                  readonly type: 'object';
                  readonly properties: {
                    readonly total_years_education: {
                      readonly title: 'Total Years Education';
                      readonly type: 'integer';
                    };
                    readonly entries: {
                      readonly title: 'Entries';
                      readonly type: 'array';
                      readonly items: {
                        readonly required: readonly [
                          'title',
                          'start_date',
                          'end_date',
                          'location',
                          'establishment',
                          'description',
                          'gpa',
                          'accreditation'
                        ];
                        readonly title: 'ResumeEducationEntry';
                        readonly type: 'object';
                        readonly properties: {
                          readonly title: {
                            readonly title: 'Title';
                            readonly type: 'string';
                          };
                          readonly start_date: {
                            readonly title: 'Start Date';
                            readonly type: 'string';
                          };
                          readonly end_date: {
                            readonly title: 'End Date';
                            readonly type: 'string';
                          };
                          readonly location: {
                            readonly required: readonly [
                              'formatted_location',
                              'postal_code',
                              'region',
                              'country',
                              'country_code',
                              'raw_input_location',
                              'street',
                              'street_number',
                              'appartment_number',
                              'city'
                            ];
                            readonly title: 'ResumeLocation';
                            readonly type: 'object';
                            readonly properties: {
                              readonly formatted_location: {
                                readonly title: 'Formatted Location';
                                readonly type: 'string';
                              };
                              readonly postal_code: {
                                readonly title: 'Postal Code';
                                readonly type: 'string';
                              };
                              readonly region: {
                                readonly title: 'Region';
                                readonly type: 'string';
                              };
                              readonly country: {
                                readonly title: 'Country';
                                readonly type: 'string';
                              };
                              readonly country_code: {
                                readonly title: 'Country Code';
                                readonly type: 'string';
                              };
                              readonly raw_input_location: {
                                readonly title: 'Raw Input Location';
                                readonly type: 'string';
                              };
                              readonly street: {
                                readonly title: 'Street';
                                readonly type: 'string';
                              };
                              readonly street_number: {
                                readonly title: 'Street Number';
                                readonly type: 'string';
                              };
                              readonly appartment_number: {
                                readonly title: 'Appartment Number';
                                readonly type: 'string';
                              };
                              readonly city: {
                                readonly title: 'City';
                                readonly type: 'string';
                              };
                            };
                          };
                          readonly establishment: {
                            readonly title: 'Establishment';
                            readonly type: 'string';
                          };
                          readonly description: {
                            readonly title: 'Description';
                            readonly type: 'string';
                          };
                          readonly gpa: {
                            readonly title: 'Gpa';
                            readonly type: 'string';
                          };
                          readonly accreditation: {
                            readonly title: 'Accreditation';
                            readonly type: 'string';
                          };
                        };
                      };
                    };
                  };
                };
                readonly work_experience: {
                  readonly required: readonly ['total_years_experience'];
                  readonly title: 'ResumeWorkExp';
                  readonly type: 'object';
                  readonly properties: {
                    readonly total_years_experience: {
                      readonly title: 'Total Years Experience';
                      readonly type: 'string';
                    };
                    readonly entries: {
                      readonly title: 'Entries';
                      readonly type: 'array';
                      readonly items: {
                        readonly required: readonly [
                          'title',
                          'start_date',
                          'end_date',
                          'company',
                          'location',
                          'description',
                          'industry'
                        ];
                        readonly title: 'ResumeWorkExpEntry';
                        readonly type: 'object';
                        readonly properties: {
                          readonly title: {
                            readonly title: 'Title';
                            readonly type: 'string';
                          };
                          readonly start_date: {
                            readonly title: 'Start Date';
                            readonly type: 'string';
                          };
                          readonly end_date: {
                            readonly title: 'End Date';
                            readonly type: 'string';
                          };
                          readonly company: {
                            readonly title: 'Company';
                            readonly type: 'string';
                          };
                          readonly location: {
                            readonly required: readonly [
                              'formatted_location',
                              'postal_code',
                              'region',
                              'country',
                              'country_code',
                              'raw_input_location',
                              'street',
                              'street_number',
                              'appartment_number',
                              'city'
                            ];
                            readonly title: 'ResumeLocation';
                            readonly type: 'object';
                            readonly properties: {
                              readonly formatted_location: {
                                readonly title: 'Formatted Location';
                                readonly type: 'string';
                              };
                              readonly postal_code: {
                                readonly title: 'Postal Code';
                                readonly type: 'string';
                              };
                              readonly region: {
                                readonly title: 'Region';
                                readonly type: 'string';
                              };
                              readonly country: {
                                readonly title: 'Country';
                                readonly type: 'string';
                              };
                              readonly country_code: {
                                readonly title: 'Country Code';
                                readonly type: 'string';
                              };
                              readonly raw_input_location: {
                                readonly title: 'Raw Input Location';
                                readonly type: 'string';
                              };
                              readonly street: {
                                readonly title: 'Street';
                                readonly type: 'string';
                              };
                              readonly street_number: {
                                readonly title: 'Street Number';
                                readonly type: 'string';
                              };
                              readonly appartment_number: {
                                readonly title: 'Appartment Number';
                                readonly type: 'string';
                              };
                              readonly city: {
                                readonly title: 'City';
                                readonly type: 'string';
                              };
                            };
                          };
                          readonly description: {
                            readonly title: 'Description';
                            readonly type: 'string';
                          };
                          readonly industry: {
                            readonly title: 'Industry';
                            readonly type: 'string';
                          };
                        };
                      };
                    };
                  };
                };
                readonly languages: {
                  readonly title: 'Languages';
                  readonly type: 'array';
                  readonly items: {
                    readonly required: readonly ['name', 'code'];
                    readonly title: 'ResumeLang';
                    readonly type: 'object';
                    readonly properties: {
                      readonly name: {
                        readonly title: 'Name';
                        readonly type: 'string';
                      };
                      readonly code: {
                        readonly title: 'Code';
                        readonly type: 'string';
                      };
                    };
                  };
                };
                readonly skills: {
                  readonly title: 'Skills';
                  readonly type: 'array';
                  readonly items: {
                    readonly required: readonly ['name', 'type'];
                    readonly title: 'ResumeSkill';
                    readonly type: 'object';
                    readonly properties: {
                      readonly name: {
                        readonly title: 'Name';
                        readonly type: 'string';
                      };
                      readonly type: {
                        readonly title: 'Type';
                        readonly type: 'string';
                      };
                    };
                  };
                };
                readonly certifications: {
                  readonly title: 'Certifications';
                  readonly type: 'array';
                  readonly items: {
                    readonly required: readonly ['name', 'type'];
                    readonly title: 'ResumeSkill';
                    readonly type: 'object';
                    readonly properties: {
                      readonly name: {
                        readonly title: 'Name';
                        readonly type: 'string';
                      };
                      readonly type: {
                        readonly title: 'Type';
                        readonly type: 'string';
                      };
                    };
                  };
                };
                readonly courses: {
                  readonly title: 'Courses';
                  readonly type: 'array';
                  readonly items: {
                    readonly required: readonly ['name', 'type'];
                    readonly title: 'ResumeSkill';
                    readonly type: 'object';
                    readonly properties: {
                      readonly name: {
                        readonly title: 'Name';
                        readonly type: 'string';
                      };
                      readonly type: {
                        readonly title: 'Type';
                        readonly type: 'string';
                      };
                    };
                  };
                };
                readonly publications: {
                  readonly title: 'Publications';
                  readonly type: 'array';
                  readonly items: {
                    readonly required: readonly ['name', 'type'];
                    readonly title: 'ResumeSkill';
                    readonly type: 'object';
                    readonly properties: {
                      readonly name: {
                        readonly title: 'Name';
                        readonly type: 'string';
                      };
                      readonly type: {
                        readonly title: 'Type';
                        readonly type: 'string';
                      };
                    };
                  };
                };
                readonly interests: {
                  readonly title: 'Interests';
                  readonly type: 'array';
                  readonly items: {
                    readonly required: readonly ['name', 'type'];
                    readonly title: 'ResumeSkill';
                    readonly type: 'object';
                    readonly properties: {
                      readonly name: {
                        readonly title: 'Name';
                        readonly type: 'string';
                      };
                      readonly type: {
                        readonly title: 'Type';
                        readonly type: 'string';
                      };
                    };
                  };
                };
              };
            };
            readonly original_response: {
              readonly default: any;
              readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
              readonly title: 'Original Response';
            };
            readonly status: {
              readonly title: 'Status';
              readonly enum: readonly ['sucess', 'fail'];
              readonly type: 'string';
              readonly description: '`sucess` `fail`';
            };
          };
        };
        readonly hireability: {
          readonly required: readonly ['extracted_data', 'status'];
          readonly title: 'ocrresume_parserResumeParserDataClass';
          readonly type: 'object';
          readonly properties: {
            readonly extracted_data: {
              readonly required: readonly ['personal_infos', 'education', 'work_experience'];
              readonly title: 'ResumeExtractedData';
              readonly type: 'object';
              readonly properties: {
                readonly personal_infos: {
                  readonly required: readonly [
                    'name',
                    'address',
                    'self_summary',
                    'objective',
                    'date_of_birth',
                    'place_of_birth',
                    'current_profession',
                    'gender',
                    'nationality',
                    'martial_status',
                    'current_salary'
                  ];
                  readonly title: 'ResumePersonalInfo';
                  readonly type: 'object';
                  readonly properties: {
                    readonly name: {
                      readonly required: readonly [
                        'first_name',
                        'last_name',
                        'raw_name',
                        'middle',
                        'title',
                        'prefix',
                        'sufix'
                      ];
                      readonly title: 'ResumePersonalName';
                      readonly type: 'object';
                      readonly properties: {
                        readonly first_name: {
                          readonly title: 'First Name';
                          readonly type: 'string';
                        };
                        readonly last_name: {
                          readonly title: 'Last Name';
                          readonly type: 'string';
                        };
                        readonly raw_name: {
                          readonly title: 'Raw Name';
                          readonly type: 'string';
                        };
                        readonly middle: {
                          readonly title: 'Middle';
                          readonly type: 'string';
                        };
                        readonly title: {
                          readonly title: 'Title';
                          readonly type: 'string';
                        };
                        readonly prefix: {
                          readonly title: 'Prefix';
                          readonly type: 'string';
                        };
                        readonly sufix: {
                          readonly title: 'Sufix';
                          readonly type: 'string';
                        };
                      };
                    };
                    readonly address: {
                      readonly required: readonly [
                        'formatted_location',
                        'postal_code',
                        'region',
                        'country',
                        'country_code',
                        'raw_input_location',
                        'street',
                        'street_number',
                        'appartment_number',
                        'city'
                      ];
                      readonly title: 'ResumeLocation';
                      readonly type: 'object';
                      readonly properties: {
                        readonly formatted_location: {
                          readonly title: 'Formatted Location';
                          readonly type: 'string';
                        };
                        readonly postal_code: {
                          readonly title: 'Postal Code';
                          readonly type: 'string';
                        };
                        readonly region: {
                          readonly title: 'Region';
                          readonly type: 'string';
                        };
                        readonly country: {
                          readonly title: 'Country';
                          readonly type: 'string';
                        };
                        readonly country_code: {
                          readonly title: 'Country Code';
                          readonly type: 'string';
                        };
                        readonly raw_input_location: {
                          readonly title: 'Raw Input Location';
                          readonly type: 'string';
                        };
                        readonly street: {
                          readonly title: 'Street';
                          readonly type: 'string';
                        };
                        readonly street_number: {
                          readonly title: 'Street Number';
                          readonly type: 'string';
                        };
                        readonly appartment_number: {
                          readonly title: 'Appartment Number';
                          readonly type: 'string';
                        };
                        readonly city: {
                          readonly title: 'City';
                          readonly type: 'string';
                        };
                      };
                    };
                    readonly self_summary: {
                      readonly title: 'Self Summary';
                      readonly type: 'string';
                    };
                    readonly objective: {
                      readonly title: 'Objective';
                      readonly type: 'string';
                    };
                    readonly date_of_birth: {
                      readonly title: 'Date Of Birth';
                      readonly type: 'string';
                    };
                    readonly place_of_birth: {
                      readonly title: 'Place Of Birth';
                      readonly type: 'string';
                    };
                    readonly phones: {
                      readonly title: 'Phones';
                      readonly type: 'array';
                      readonly items: {
                        readonly type: 'string';
                      };
                    };
                    readonly mails: {
                      readonly title: 'Mails';
                      readonly type: 'array';
                      readonly items: {
                        readonly type: 'string';
                      };
                    };
                    readonly urls: {
                      readonly title: 'Urls';
                      readonly type: 'array';
                      readonly items: {
                        readonly type: 'string';
                      };
                    };
                    readonly fax: {
                      readonly title: 'Fax';
                      readonly type: 'array';
                      readonly items: {
                        readonly type: 'string';
                      };
                    };
                    readonly current_profession: {
                      readonly title: 'Current Profession';
                      readonly type: 'string';
                    };
                    readonly gender: {
                      readonly title: 'Gender';
                      readonly type: 'string';
                    };
                    readonly nationality: {
                      readonly title: 'Nationality';
                      readonly type: 'string';
                    };
                    readonly martial_status: {
                      readonly title: 'Martial Status';
                      readonly type: 'string';
                    };
                    readonly current_salary: {
                      readonly title: 'Current Salary';
                      readonly type: 'string';
                    };
                  };
                };
                readonly education: {
                  readonly required: readonly ['total_years_education'];
                  readonly title: 'ResumeEducation';
                  readonly type: 'object';
                  readonly properties: {
                    readonly total_years_education: {
                      readonly title: 'Total Years Education';
                      readonly type: 'integer';
                    };
                    readonly entries: {
                      readonly title: 'Entries';
                      readonly type: 'array';
                      readonly items: {
                        readonly required: readonly [
                          'title',
                          'start_date',
                          'end_date',
                          'location',
                          'establishment',
                          'description',
                          'gpa',
                          'accreditation'
                        ];
                        readonly title: 'ResumeEducationEntry';
                        readonly type: 'object';
                        readonly properties: {
                          readonly title: {
                            readonly title: 'Title';
                            readonly type: 'string';
                          };
                          readonly start_date: {
                            readonly title: 'Start Date';
                            readonly type: 'string';
                          };
                          readonly end_date: {
                            readonly title: 'End Date';
                            readonly type: 'string';
                          };
                          readonly location: {
                            readonly required: readonly [
                              'formatted_location',
                              'postal_code',
                              'region',
                              'country',
                              'country_code',
                              'raw_input_location',
                              'street',
                              'street_number',
                              'appartment_number',
                              'city'
                            ];
                            readonly title: 'ResumeLocation';
                            readonly type: 'object';
                            readonly properties: {
                              readonly formatted_location: {
                                readonly title: 'Formatted Location';
                                readonly type: 'string';
                              };
                              readonly postal_code: {
                                readonly title: 'Postal Code';
                                readonly type: 'string';
                              };
                              readonly region: {
                                readonly title: 'Region';
                                readonly type: 'string';
                              };
                              readonly country: {
                                readonly title: 'Country';
                                readonly type: 'string';
                              };
                              readonly country_code: {
                                readonly title: 'Country Code';
                                readonly type: 'string';
                              };
                              readonly raw_input_location: {
                                readonly title: 'Raw Input Location';
                                readonly type: 'string';
                              };
                              readonly street: {
                                readonly title: 'Street';
                                readonly type: 'string';
                              };
                              readonly street_number: {
                                readonly title: 'Street Number';
                                readonly type: 'string';
                              };
                              readonly appartment_number: {
                                readonly title: 'Appartment Number';
                                readonly type: 'string';
                              };
                              readonly city: {
                                readonly title: 'City';
                                readonly type: 'string';
                              };
                            };
                          };
                          readonly establishment: {
                            readonly title: 'Establishment';
                            readonly type: 'string';
                          };
                          readonly description: {
                            readonly title: 'Description';
                            readonly type: 'string';
                          };
                          readonly gpa: {
                            readonly title: 'Gpa';
                            readonly type: 'string';
                          };
                          readonly accreditation: {
                            readonly title: 'Accreditation';
                            readonly type: 'string';
                          };
                        };
                      };
                    };
                  };
                };
                readonly work_experience: {
                  readonly required: readonly ['total_years_experience'];
                  readonly title: 'ResumeWorkExp';
                  readonly type: 'object';
                  readonly properties: {
                    readonly total_years_experience: {
                      readonly title: 'Total Years Experience';
                      readonly type: 'string';
                    };
                    readonly entries: {
                      readonly title: 'Entries';
                      readonly type: 'array';
                      readonly items: {
                        readonly required: readonly [
                          'title',
                          'start_date',
                          'end_date',
                          'company',
                          'location',
                          'description',
                          'industry'
                        ];
                        readonly title: 'ResumeWorkExpEntry';
                        readonly type: 'object';
                        readonly properties: {
                          readonly title: {
                            readonly title: 'Title';
                            readonly type: 'string';
                          };
                          readonly start_date: {
                            readonly title: 'Start Date';
                            readonly type: 'string';
                          };
                          readonly end_date: {
                            readonly title: 'End Date';
                            readonly type: 'string';
                          };
                          readonly company: {
                            readonly title: 'Company';
                            readonly type: 'string';
                          };
                          readonly location: {
                            readonly required: readonly [
                              'formatted_location',
                              'postal_code',
                              'region',
                              'country',
                              'country_code',
                              'raw_input_location',
                              'street',
                              'street_number',
                              'appartment_number',
                              'city'
                            ];
                            readonly title: 'ResumeLocation';
                            readonly type: 'object';
                            readonly properties: {
                              readonly formatted_location: {
                                readonly title: 'Formatted Location';
                                readonly type: 'string';
                              };
                              readonly postal_code: {
                                readonly title: 'Postal Code';
                                readonly type: 'string';
                              };
                              readonly region: {
                                readonly title: 'Region';
                                readonly type: 'string';
                              };
                              readonly country: {
                                readonly title: 'Country';
                                readonly type: 'string';
                              };
                              readonly country_code: {
                                readonly title: 'Country Code';
                                readonly type: 'string';
                              };
                              readonly raw_input_location: {
                                readonly title: 'Raw Input Location';
                                readonly type: 'string';
                              };
                              readonly street: {
                                readonly title: 'Street';
                                readonly type: 'string';
                              };
                              readonly street_number: {
                                readonly title: 'Street Number';
                                readonly type: 'string';
                              };
                              readonly appartment_number: {
                                readonly title: 'Appartment Number';
                                readonly type: 'string';
                              };
                              readonly city: {
                                readonly title: 'City';
                                readonly type: 'string';
                              };
                            };
                          };
                          readonly description: {
                            readonly title: 'Description';
                            readonly type: 'string';
                          };
                          readonly industry: {
                            readonly title: 'Industry';
                            readonly type: 'string';
                          };
                        };
                      };
                    };
                  };
                };
                readonly languages: {
                  readonly title: 'Languages';
                  readonly type: 'array';
                  readonly items: {
                    readonly required: readonly ['name', 'code'];
                    readonly title: 'ResumeLang';
                    readonly type: 'object';
                    readonly properties: {
                      readonly name: {
                        readonly title: 'Name';
                        readonly type: 'string';
                      };
                      readonly code: {
                        readonly title: 'Code';
                        readonly type: 'string';
                      };
                    };
                  };
                };
                readonly skills: {
                  readonly title: 'Skills';
                  readonly type: 'array';
                  readonly items: {
                    readonly required: readonly ['name', 'type'];
                    readonly title: 'ResumeSkill';
                    readonly type: 'object';
                    readonly properties: {
                      readonly name: {
                        readonly title: 'Name';
                        readonly type: 'string';
                      };
                      readonly type: {
                        readonly title: 'Type';
                        readonly type: 'string';
                      };
                    };
                  };
                };
                readonly certifications: {
                  readonly title: 'Certifications';
                  readonly type: 'array';
                  readonly items: {
                    readonly required: readonly ['name', 'type'];
                    readonly title: 'ResumeSkill';
                    readonly type: 'object';
                    readonly properties: {
                      readonly name: {
                        readonly title: 'Name';
                        readonly type: 'string';
                      };
                      readonly type: {
                        readonly title: 'Type';
                        readonly type: 'string';
                      };
                    };
                  };
                };
                readonly courses: {
                  readonly title: 'Courses';
                  readonly type: 'array';
                  readonly items: {
                    readonly required: readonly ['name', 'type'];
                    readonly title: 'ResumeSkill';
                    readonly type: 'object';
                    readonly properties: {
                      readonly name: {
                        readonly title: 'Name';
                        readonly type: 'string';
                      };
                      readonly type: {
                        readonly title: 'Type';
                        readonly type: 'string';
                      };
                    };
                  };
                };
                readonly publications: {
                  readonly title: 'Publications';
                  readonly type: 'array';
                  readonly items: {
                    readonly required: readonly ['name', 'type'];
                    readonly title: 'ResumeSkill';
                    readonly type: 'object';
                    readonly properties: {
                      readonly name: {
                        readonly title: 'Name';
                        readonly type: 'string';
                      };
                      readonly type: {
                        readonly title: 'Type';
                        readonly type: 'string';
                      };
                    };
                  };
                };
                readonly interests: {
                  readonly title: 'Interests';
                  readonly type: 'array';
                  readonly items: {
                    readonly required: readonly ['name', 'type'];
                    readonly title: 'ResumeSkill';
                    readonly type: 'object';
                    readonly properties: {
                      readonly name: {
                        readonly title: 'Name';
                        readonly type: 'string';
                      };
                      readonly type: {
                        readonly title: 'Type';
                        readonly type: 'string';
                      };
                    };
                  };
                };
              };
            };
            readonly original_response: {
              readonly default: any;
              readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
              readonly title: 'Original Response';
            };
            readonly status: {
              readonly title: 'Status';
              readonly enum: readonly ['sucess', 'fail'];
              readonly type: 'string';
              readonly description: '`sucess` `fail`';
            };
          };
        };
        readonly 'eden-ai': {
          readonly required: readonly ['extracted_data', 'status'];
          readonly title: 'ocrresume_parserResumeParserDataClass';
          readonly type: 'object';
          readonly properties: {
            readonly extracted_data: {
              readonly required: readonly ['personal_infos', 'education', 'work_experience'];
              readonly title: 'ResumeExtractedData';
              readonly type: 'object';
              readonly properties: {
                readonly personal_infos: {
                  readonly required: readonly [
                    'name',
                    'address',
                    'self_summary',
                    'objective',
                    'date_of_birth',
                    'place_of_birth',
                    'current_profession',
                    'gender',
                    'nationality',
                    'martial_status',
                    'current_salary'
                  ];
                  readonly title: 'ResumePersonalInfo';
                  readonly type: 'object';
                  readonly properties: {
                    readonly name: {
                      readonly required: readonly [
                        'first_name',
                        'last_name',
                        'raw_name',
                        'middle',
                        'title',
                        'prefix',
                        'sufix'
                      ];
                      readonly title: 'ResumePersonalName';
                      readonly type: 'object';
                      readonly properties: {
                        readonly first_name: {
                          readonly title: 'First Name';
                          readonly type: 'string';
                        };
                        readonly last_name: {
                          readonly title: 'Last Name';
                          readonly type: 'string';
                        };
                        readonly raw_name: {
                          readonly title: 'Raw Name';
                          readonly type: 'string';
                        };
                        readonly middle: {
                          readonly title: 'Middle';
                          readonly type: 'string';
                        };
                        readonly title: {
                          readonly title: 'Title';
                          readonly type: 'string';
                        };
                        readonly prefix: {
                          readonly title: 'Prefix';
                          readonly type: 'string';
                        };
                        readonly sufix: {
                          readonly title: 'Sufix';
                          readonly type: 'string';
                        };
                      };
                    };
                    readonly address: {
                      readonly required: readonly [
                        'formatted_location',
                        'postal_code',
                        'region',
                        'country',
                        'country_code',
                        'raw_input_location',
                        'street',
                        'street_number',
                        'appartment_number',
                        'city'
                      ];
                      readonly title: 'ResumeLocation';
                      readonly type: 'object';
                      readonly properties: {
                        readonly formatted_location: {
                          readonly title: 'Formatted Location';
                          readonly type: 'string';
                        };
                        readonly postal_code: {
                          readonly title: 'Postal Code';
                          readonly type: 'string';
                        };
                        readonly region: {
                          readonly title: 'Region';
                          readonly type: 'string';
                        };
                        readonly country: {
                          readonly title: 'Country';
                          readonly type: 'string';
                        };
                        readonly country_code: {
                          readonly title: 'Country Code';
                          readonly type: 'string';
                        };
                        readonly raw_input_location: {
                          readonly title: 'Raw Input Location';
                          readonly type: 'string';
                        };
                        readonly street: {
                          readonly title: 'Street';
                          readonly type: 'string';
                        };
                        readonly street_number: {
                          readonly title: 'Street Number';
                          readonly type: 'string';
                        };
                        readonly appartment_number: {
                          readonly title: 'Appartment Number';
                          readonly type: 'string';
                        };
                        readonly city: {
                          readonly title: 'City';
                          readonly type: 'string';
                        };
                      };
                    };
                    readonly self_summary: {
                      readonly title: 'Self Summary';
                      readonly type: 'string';
                    };
                    readonly objective: {
                      readonly title: 'Objective';
                      readonly type: 'string';
                    };
                    readonly date_of_birth: {
                      readonly title: 'Date Of Birth';
                      readonly type: 'string';
                    };
                    readonly place_of_birth: {
                      readonly title: 'Place Of Birth';
                      readonly type: 'string';
                    };
                    readonly phones: {
                      readonly title: 'Phones';
                      readonly type: 'array';
                      readonly items: {
                        readonly type: 'string';
                      };
                    };
                    readonly mails: {
                      readonly title: 'Mails';
                      readonly type: 'array';
                      readonly items: {
                        readonly type: 'string';
                      };
                    };
                    readonly urls: {
                      readonly title: 'Urls';
                      readonly type: 'array';
                      readonly items: {
                        readonly type: 'string';
                      };
                    };
                    readonly fax: {
                      readonly title: 'Fax';
                      readonly type: 'array';
                      readonly items: {
                        readonly type: 'string';
                      };
                    };
                    readonly current_profession: {
                      readonly title: 'Current Profession';
                      readonly type: 'string';
                    };
                    readonly gender: {
                      readonly title: 'Gender';
                      readonly type: 'string';
                    };
                    readonly nationality: {
                      readonly title: 'Nationality';
                      readonly type: 'string';
                    };
                    readonly martial_status: {
                      readonly title: 'Martial Status';
                      readonly type: 'string';
                    };
                    readonly current_salary: {
                      readonly title: 'Current Salary';
                      readonly type: 'string';
                    };
                  };
                };
                readonly education: {
                  readonly required: readonly ['total_years_education'];
                  readonly title: 'ResumeEducation';
                  readonly type: 'object';
                  readonly properties: {
                    readonly total_years_education: {
                      readonly title: 'Total Years Education';
                      readonly type: 'integer';
                    };
                    readonly entries: {
                      readonly title: 'Entries';
                      readonly type: 'array';
                      readonly items: {
                        readonly required: readonly [
                          'title',
                          'start_date',
                          'end_date',
                          'location',
                          'establishment',
                          'description',
                          'gpa',
                          'accreditation'
                        ];
                        readonly title: 'ResumeEducationEntry';
                        readonly type: 'object';
                        readonly properties: {
                          readonly title: {
                            readonly title: 'Title';
                            readonly type: 'string';
                          };
                          readonly start_date: {
                            readonly title: 'Start Date';
                            readonly type: 'string';
                          };
                          readonly end_date: {
                            readonly title: 'End Date';
                            readonly type: 'string';
                          };
                          readonly location: {
                            readonly required: readonly [
                              'formatted_location',
                              'postal_code',
                              'region',
                              'country',
                              'country_code',
                              'raw_input_location',
                              'street',
                              'street_number',
                              'appartment_number',
                              'city'
                            ];
                            readonly title: 'ResumeLocation';
                            readonly type: 'object';
                            readonly properties: {
                              readonly formatted_location: {
                                readonly title: 'Formatted Location';
                                readonly type: 'string';
                              };
                              readonly postal_code: {
                                readonly title: 'Postal Code';
                                readonly type: 'string';
                              };
                              readonly region: {
                                readonly title: 'Region';
                                readonly type: 'string';
                              };
                              readonly country: {
                                readonly title: 'Country';
                                readonly type: 'string';
                              };
                              readonly country_code: {
                                readonly title: 'Country Code';
                                readonly type: 'string';
                              };
                              readonly raw_input_location: {
                                readonly title: 'Raw Input Location';
                                readonly type: 'string';
                              };
                              readonly street: {
                                readonly title: 'Street';
                                readonly type: 'string';
                              };
                              readonly street_number: {
                                readonly title: 'Street Number';
                                readonly type: 'string';
                              };
                              readonly appartment_number: {
                                readonly title: 'Appartment Number';
                                readonly type: 'string';
                              };
                              readonly city: {
                                readonly title: 'City';
                                readonly type: 'string';
                              };
                            };
                          };
                          readonly establishment: {
                            readonly title: 'Establishment';
                            readonly type: 'string';
                          };
                          readonly description: {
                            readonly title: 'Description';
                            readonly type: 'string';
                          };
                          readonly gpa: {
                            readonly title: 'Gpa';
                            readonly type: 'string';
                          };
                          readonly accreditation: {
                            readonly title: 'Accreditation';
                            readonly type: 'string';
                          };
                        };
                      };
                    };
                  };
                };
                readonly work_experience: {
                  readonly required: readonly ['total_years_experience'];
                  readonly title: 'ResumeWorkExp';
                  readonly type: 'object';
                  readonly properties: {
                    readonly total_years_experience: {
                      readonly title: 'Total Years Experience';
                      readonly type: 'string';
                    };
                    readonly entries: {
                      readonly title: 'Entries';
                      readonly type: 'array';
                      readonly items: {
                        readonly required: readonly [
                          'title',
                          'start_date',
                          'end_date',
                          'company',
                          'location',
                          'description',
                          'industry'
                        ];
                        readonly title: 'ResumeWorkExpEntry';
                        readonly type: 'object';
                        readonly properties: {
                          readonly title: {
                            readonly title: 'Title';
                            readonly type: 'string';
                          };
                          readonly start_date: {
                            readonly title: 'Start Date';
                            readonly type: 'string';
                          };
                          readonly end_date: {
                            readonly title: 'End Date';
                            readonly type: 'string';
                          };
                          readonly company: {
                            readonly title: 'Company';
                            readonly type: 'string';
                          };
                          readonly location: {
                            readonly required: readonly [
                              'formatted_location',
                              'postal_code',
                              'region',
                              'country',
                              'country_code',
                              'raw_input_location',
                              'street',
                              'street_number',
                              'appartment_number',
                              'city'
                            ];
                            readonly title: 'ResumeLocation';
                            readonly type: 'object';
                            readonly properties: {
                              readonly formatted_location: {
                                readonly title: 'Formatted Location';
                                readonly type: 'string';
                              };
                              readonly postal_code: {
                                readonly title: 'Postal Code';
                                readonly type: 'string';
                              };
                              readonly region: {
                                readonly title: 'Region';
                                readonly type: 'string';
                              };
                              readonly country: {
                                readonly title: 'Country';
                                readonly type: 'string';
                              };
                              readonly country_code: {
                                readonly title: 'Country Code';
                                readonly type: 'string';
                              };
                              readonly raw_input_location: {
                                readonly title: 'Raw Input Location';
                                readonly type: 'string';
                              };
                              readonly street: {
                                readonly title: 'Street';
                                readonly type: 'string';
                              };
                              readonly street_number: {
                                readonly title: 'Street Number';
                                readonly type: 'string';
                              };
                              readonly appartment_number: {
                                readonly title: 'Appartment Number';
                                readonly type: 'string';
                              };
                              readonly city: {
                                readonly title: 'City';
                                readonly type: 'string';
                              };
                            };
                          };
                          readonly description: {
                            readonly title: 'Description';
                            readonly type: 'string';
                          };
                          readonly industry: {
                            readonly title: 'Industry';
                            readonly type: 'string';
                          };
                        };
                      };
                    };
                  };
                };
                readonly languages: {
                  readonly title: 'Languages';
                  readonly type: 'array';
                  readonly items: {
                    readonly required: readonly ['name', 'code'];
                    readonly title: 'ResumeLang';
                    readonly type: 'object';
                    readonly properties: {
                      readonly name: {
                        readonly title: 'Name';
                        readonly type: 'string';
                      };
                      readonly code: {
                        readonly title: 'Code';
                        readonly type: 'string';
                      };
                    };
                  };
                };
                readonly skills: {
                  readonly title: 'Skills';
                  readonly type: 'array';
                  readonly items: {
                    readonly required: readonly ['name', 'type'];
                    readonly title: 'ResumeSkill';
                    readonly type: 'object';
                    readonly properties: {
                      readonly name: {
                        readonly title: 'Name';
                        readonly type: 'string';
                      };
                      readonly type: {
                        readonly title: 'Type';
                        readonly type: 'string';
                      };
                    };
                  };
                };
                readonly certifications: {
                  readonly title: 'Certifications';
                  readonly type: 'array';
                  readonly items: {
                    readonly required: readonly ['name', 'type'];
                    readonly title: 'ResumeSkill';
                    readonly type: 'object';
                    readonly properties: {
                      readonly name: {
                        readonly title: 'Name';
                        readonly type: 'string';
                      };
                      readonly type: {
                        readonly title: 'Type';
                        readonly type: 'string';
                      };
                    };
                  };
                };
                readonly courses: {
                  readonly title: 'Courses';
                  readonly type: 'array';
                  readonly items: {
                    readonly required: readonly ['name', 'type'];
                    readonly title: 'ResumeSkill';
                    readonly type: 'object';
                    readonly properties: {
                      readonly name: {
                        readonly title: 'Name';
                        readonly type: 'string';
                      };
                      readonly type: {
                        readonly title: 'Type';
                        readonly type: 'string';
                      };
                    };
                  };
                };
                readonly publications: {
                  readonly title: 'Publications';
                  readonly type: 'array';
                  readonly items: {
                    readonly required: readonly ['name', 'type'];
                    readonly title: 'ResumeSkill';
                    readonly type: 'object';
                    readonly properties: {
                      readonly name: {
                        readonly title: 'Name';
                        readonly type: 'string';
                      };
                      readonly type: {
                        readonly title: 'Type';
                        readonly type: 'string';
                      };
                    };
                  };
                };
                readonly interests: {
                  readonly title: 'Interests';
                  readonly type: 'array';
                  readonly items: {
                    readonly required: readonly ['name', 'type'];
                    readonly title: 'ResumeSkill';
                    readonly type: 'object';
                    readonly properties: {
                      readonly name: {
                        readonly title: 'Name';
                        readonly type: 'string';
                      };
                      readonly type: {
                        readonly title: 'Type';
                        readonly type: 'string';
                      };
                    };
                  };
                };
              };
            };
            readonly original_response: {
              readonly default: any;
              readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
              readonly title: 'Original Response';
            };
            readonly status: {
              readonly title: 'Status';
              readonly enum: readonly ['sucess', 'fail'];
              readonly type: 'string';
              readonly description: '`sucess` `fail`';
            };
          };
        };
      };
      readonly title: 'ocrresume_parserResponseModel';
      readonly type: 'object';
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '400': {
      readonly type: 'object';
      readonly properties: {
        readonly error: {
          readonly type: 'object';
          readonly properties: {
            readonly type: {
              readonly type: 'string';
            };
            readonly message: {
              readonly type: 'object';
              readonly properties: {
                readonly '<parameter_name>': {
                  readonly type: 'array';
                  readonly items: {
                    readonly type: 'string';
                  };
                };
              };
              readonly required: readonly ['<parameter_name>'];
            };
          };
          readonly required: readonly ['message', 'type'];
        };
      };
      readonly required: readonly ['error'];
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '403': {
      readonly type: 'object';
      readonly properties: {
        readonly error: {
          readonly type: 'object';
          readonly properties: {
            readonly type: {
              readonly type: 'string';
            };
            readonly message: {
              readonly type: 'string';
            };
          };
          readonly required: readonly ['message', 'type'];
        };
      };
      readonly required: readonly ['error'];
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '404': {
      readonly type: 'object';
      readonly properties: {
        readonly details: {
          readonly type: 'string';
          readonly default: 'Not Found';
        };
      };
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '500': {
      readonly type: 'object';
      readonly properties: {
        readonly error: {
          readonly type: 'object';
          readonly properties: {
            readonly type: {
              readonly type: 'string';
            };
            readonly message: {
              readonly type: 'string';
            };
          };
          readonly required: readonly ['message', 'type'];
        };
      };
      readonly required: readonly ['error'];
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
  };
};
declare const PipelineCreate: {
  readonly body: {
    readonly type: 'object';
    readonly properties: {
      readonly description: {
        readonly type: 'string';
        readonly minLength: 1;
        readonly examples: readonly [
          '[\n  {\n    "feature": "ocr",\n    "subfeature": "ocr",\n    "params": {\n      "language": "auto-detect",\n      "providers": "google"\n    }\n  },\n  {\n    "feature": "translation",\n    "subfeature": "automatic_translation",\n    "params": {\n      "source_language": "auto-detect",\n      "target_language": "fr",\n      "providers": "google"\n    }\n  },\n  {\n    "feature": "text",\n    "subfeature": "summarize",\n    "params": {\n      "providers": "openai"\n    }\n  }\n]'
        ];
      };
      readonly text: {
        readonly type: 'string';
        readonly minLength: 1;
        readonly description: 'The input text for the first feature of the pipeline';
      };
      readonly texts: {
        readonly type: 'string';
        readonly minLength: 1;
        readonly description: 'List of texts for the first feature of the pipeline';
      };
      readonly file: {
        readonly type: 'string';
        readonly format: 'binary';
        readonly description: 'The input file for the first feature of the pipeline';
        readonly examples: readonly ['<file_content>'];
      };
      readonly return_only_last: {
        readonly type: 'boolean';
        readonly default: true;
        readonly description: 'This parameter allows user to choose to output only the final result or all the intermediate results.';
      };
    };
    readonly required: readonly ['description'];
    readonly $schema: 'http://json-schema.org/draft-04/schema#';
  };
  readonly response: {
    readonly '200': {
      readonly oneOf: readonly [];
      readonly discriminator: {
        readonly propertyName: 'type';
        readonly mapping: {};
      };
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
  };
};
declare const TextAiDetectionCreate: {
  readonly body: {
    readonly type: 'object';
    readonly properties: {
      readonly providers: {
        readonly type: 'string';
        readonly minLength: 1;
        readonly description: "It can be one (ex: **'amazon'** or **'google'**) or multiple provider(s) (ex: **'amazon,microsoft,google'**)             that the data will be redirected to in order to get the processed results.";
        readonly examples: readonly ['originalityai,sapling'];
      };
      readonly fallback_providers: {
        readonly type: 'string';
        readonly minLength: 1;
        readonly description: "Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.\n    To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.\n\nThey will be tried in the same order they are input, and it will stop to the first provider who doesn't fail.\n\n\n*Doesn't work with async subfeatures.*\n    ";
      };
      readonly response_as_dict: {
        readonly type: 'boolean';
        readonly default: true;
        readonly description: "Optional : When set to **true** (default), the response is an object of responses with providers names as keys : <br> \n                  ``` {'google' : { 'status': 'success', ... }, } ``` <br>\n                When set to **false** the response structure is a list of response objects : <br> \n                   ``` [{'status': 'success', 'provider': 'google' ... }, ] ```. <br> \n                  ";
      };
      readonly attributes_as_list: {
        readonly type: 'boolean';
        readonly default: false;
        readonly description: "Optional : When set to **false** (default) the structure of the extracted items is list of objects having different attributes : <br>\n     ```{'items': [{'attribute_1': 'x1','attribute_2': 'y2'}, ... ]}``` <br>\n     When it is set to **true**, the response contains an object with each attribute as a list : <br>\n     ```{ 'attribute_1': ['x1','x2', ...], 'attribute_2': [y1, y2, ...]}``` ";
      };
      readonly show_original_response: {
        readonly type: 'boolean';
        readonly default: false;
        readonly description: 'Optional : Shows the original response of the provider.<br>\n        When set to **true**, a new attribute *original_response* will appear in the response object.';
      };
      readonly text: {
        readonly type: 'string';
        readonly minLength: 1;
        readonly description: 'Text to analyze';
        readonly examples: readonly [
          'The panther, also known as the black panther, is a magnificent and enigmatic creature that captivates the imagination of many. It is not a distinct species itself, but rather a melanistic variant of leopards and jaguars. The mesmerizing black coat of the panther is a result of a genetic mutation that increases the production of dark pigment, melanin.         Panthers are highly adaptable predators, found primarily in dense forests and jungles across Africa, Asia, and the Americas. Their stealthy nature and exceptional agility make them formidable hunters. They are solitary creatures, preferring to roam alone in their vast territories, which can span over a hundred square miles.         Equipped with incredible strength and sharp retractable claws, panthers are skilled climbers and swimmers. Their keen senses, including sharp vision and acute hearing, aid them in locating prey, often stalking their victims from the cover of trees or thick underbrush before launching a precise and powerful attack.         The diet of a panther consists mainly of deer, wild boar, and smaller mammals. However, they are opportunistic hunters and can also target livestock and domestic animals in areas where their habitats overlap with human settlements. Unfortunately, this sometimes leads to conflicts with humans, resulting in the panther being perceived as a threat.         Despite their association with darkness and mystery, panthers play a vital role in maintaining the balance of ecosystems. As apex predators, they help control populations of herbivores, preventing overgrazing and maintaining healthy prey dynamics.         Conservation efforts are crucial to the survival of panther populations worldwide. Habitat loss, poaching, and illegal wildlife trade pose significant threats to their existence. Various organizations and governments are working tirelessly to protect these magnificent creatures through initiatives such as establishing protected areas, promoting sustainable land use practices, and raising awareness about their importance in the natural world.'
        ];
      };
      readonly language: {
        readonly type: readonly ['string', 'null'];
        readonly description: 'Language code for the language the input text is written in (eg: en, fr).';
      };
    };
    readonly required: readonly ['providers', 'text'];
    readonly $schema: 'http://json-schema.org/draft-04/schema#';
  };
  readonly response: {
    readonly '200': {
      readonly properties: {
        readonly sapling: {
          readonly required: readonly ['ai_score', 'status'];
          readonly title: 'textai_detectionAiDetectionDataClass';
          readonly type: 'object';
          readonly properties: {
            readonly ai_score: {
              readonly title: 'Ai Score';
              readonly type: 'integer';
            };
            readonly items: {
              readonly title: 'Items';
              readonly type: 'array';
              readonly items: {
                readonly required: readonly ['text', 'prediction', 'ai_score'];
                readonly title: 'AiDetectionItem';
                readonly type: 'object';
                readonly properties: {
                  readonly text: {
                    readonly title: 'Text';
                    readonly type: 'string';
                  };
                  readonly prediction: {
                    readonly title: 'Prediction';
                    readonly type: 'string';
                  };
                  readonly ai_score: {
                    readonly title: 'Ai Score';
                    readonly type: 'integer';
                  };
                };
              };
            };
            readonly original_response: {
              readonly default: any;
              readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
              readonly title: 'Original Response';
            };
            readonly status: {
              readonly title: 'Status';
              readonly enum: readonly ['sucess', 'fail'];
              readonly type: 'string';
              readonly description: '`sucess` `fail`';
            };
          };
        };
        readonly originalityai: {
          readonly required: readonly ['ai_score', 'status'];
          readonly title: 'textai_detectionAiDetectionDataClass';
          readonly type: 'object';
          readonly properties: {
            readonly ai_score: {
              readonly title: 'Ai Score';
              readonly type: 'integer';
            };
            readonly items: {
              readonly title: 'Items';
              readonly type: 'array';
              readonly items: {
                readonly required: readonly ['text', 'prediction', 'ai_score'];
                readonly title: 'AiDetectionItem';
                readonly type: 'object';
                readonly properties: {
                  readonly text: {
                    readonly title: 'Text';
                    readonly type: 'string';
                  };
                  readonly prediction: {
                    readonly title: 'Prediction';
                    readonly type: 'string';
                  };
                  readonly ai_score: {
                    readonly title: 'Ai Score';
                    readonly type: 'integer';
                  };
                };
              };
            };
            readonly original_response: {
              readonly default: any;
              readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
              readonly title: 'Original Response';
            };
            readonly status: {
              readonly title: 'Status';
              readonly enum: readonly ['sucess', 'fail'];
              readonly type: 'string';
              readonly description: '`sucess` `fail`';
            };
          };
        };
      };
      readonly title: 'textai_detectionResponseModel';
      readonly type: 'object';
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '400': {
      readonly type: 'object';
      readonly properties: {
        readonly error: {
          readonly type: 'object';
          readonly properties: {
            readonly type: {
              readonly type: 'string';
            };
            readonly message: {
              readonly type: 'object';
              readonly properties: {
                readonly '<parameter_name>': {
                  readonly type: 'array';
                  readonly items: {
                    readonly type: 'string';
                  };
                };
              };
              readonly required: readonly ['<parameter_name>'];
            };
          };
          readonly required: readonly ['message', 'type'];
        };
      };
      readonly required: readonly ['error'];
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '403': {
      readonly type: 'object';
      readonly properties: {
        readonly error: {
          readonly type: 'object';
          readonly properties: {
            readonly type: {
              readonly type: 'string';
            };
            readonly message: {
              readonly type: 'string';
            };
          };
          readonly required: readonly ['message', 'type'];
        };
      };
      readonly required: readonly ['error'];
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '404': {
      readonly type: 'object';
      readonly properties: {
        readonly details: {
          readonly type: 'string';
          readonly default: 'Not Found';
        };
      };
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '500': {
      readonly type: 'object';
      readonly properties: {
        readonly error: {
          readonly type: 'object';
          readonly properties: {
            readonly type: {
              readonly type: 'string';
            };
            readonly message: {
              readonly type: 'string';
            };
          };
          readonly required: readonly ['message', 'type'];
        };
      };
      readonly required: readonly ['error'];
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
  };
};
declare const TextAnonymizationCreate: {
  readonly body: {
    readonly type: 'object';
    readonly properties: {
      readonly providers: {
        readonly type: 'string';
        readonly minLength: 1;
        readonly description: "It can be one (ex: **'amazon'** or **'google'**) or multiple provider(s) (ex: **'amazon,microsoft,google'**)             that the data will be redirected to in order to get the processed results.";
        readonly examples: readonly ['microsoft,amazon,emvista,oneai,openai'];
      };
      readonly fallback_providers: {
        readonly type: 'string';
        readonly minLength: 1;
        readonly description: "Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.\n    To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.\n\nThey will be tried in the same order they are input, and it will stop to the first provider who doesn't fail.\n\n\n*Doesn't work with async subfeatures.*\n    ";
      };
      readonly response_as_dict: {
        readonly type: 'boolean';
        readonly default: true;
        readonly description: "Optional : When set to **true** (default), the response is an object of responses with providers names as keys : <br> \n                  ``` {'google' : { 'status': 'success', ... }, } ``` <br>\n                When set to **false** the response structure is a list of response objects : <br> \n                   ``` [{'status': 'success', 'provider': 'google' ... }, ] ```. <br> \n                  ";
      };
      readonly attributes_as_list: {
        readonly type: 'boolean';
        readonly default: false;
        readonly description: "Optional : When set to **false** (default) the structure of the extracted items is list of objects having different attributes : <br>\n     ```{'items': [{'attribute_1': 'x1','attribute_2': 'y2'}, ... ]}``` <br>\n     When it is set to **true**, the response contains an object with each attribute as a list : <br>\n     ```{ 'attribute_1': ['x1','x2', ...], 'attribute_2': [y1, y2, ...]}``` ";
      };
      readonly show_original_response: {
        readonly type: 'boolean';
        readonly default: false;
        readonly description: 'Optional : Shows the original response of the provider.<br>\n        When set to **true**, a new attribute *original_response* will appear in the response object.';
      };
      readonly text: {
        readonly type: 'string';
        readonly minLength: 1;
        readonly description: 'Text to analyze';
        readonly examples: readonly [
          "Overall I am satisfied with my experience at Amazon, but two areas of major improvement needed. First is the product reviews and pricing. There are thousands of positive reviews for so many items, and it's clear that the reviews are bogus or not really associated with that product. There needs to be a way to only view products sold by Amazon directly, because many market sellers way overprice items that can be purchased cheaper elsewhere (like Walmart, Target, etc). The second issue is they make it too difficult to get help when there's an issue with an order."
        ];
      };
      readonly language: {
        readonly type: readonly ['string', 'null'];
        readonly description: 'Language code for the language the input text is written in (eg: en, fr).';
        readonly examples: readonly ['en'];
      };
    };
    readonly required: readonly ['providers', 'text'];
    readonly $schema: 'http://json-schema.org/draft-04/schema#';
  };
  readonly response: {
    readonly '200': {
      readonly properties: {
        readonly emvista: {
          readonly required: readonly ['result', 'status'];
          readonly title: 'textanonymizationAnonymizationDataClass';
          readonly type: 'object';
          readonly properties: {
            readonly result: {
              readonly title: 'Result';
              readonly type: 'string';
            };
            readonly entities: {
              readonly title: 'Entities';
              readonly type: 'array';
              readonly items: {
                readonly description: 'This model represents an entity extracted from the text.\n\n    Attributes:\n        offset (int): The offset of the entity in the text.\n        length (int): The lenght of the entity in the text.\n        category (CategoryType): The category of the entity.\n        subcategory (SubCategoryType): The subcategory of the entity.\n        original_label (str): The original label of the entity.\n        content (str): The content of the entity.\n    ';
                readonly required: readonly [
                  'offset',
                  'length',
                  'category',
                  'subcategory',
                  'original_label',
                  'content',
                  'confidence_score'
                ];
                readonly title: 'AnonymizationEntity';
                readonly type: 'object';
                readonly properties: {
                  readonly offset: {
                    readonly minimum: 0;
                    readonly title: 'Offset';
                    readonly type: 'integer';
                  };
                  readonly length: {
                    readonly exclusiveMinimum: true;
                    readonly title: 'Length';
                    readonly type: 'integer';
                  };
                  readonly category: {
                    readonly description: 'This enum are used to categorize the entities extracted from the text.\n\n`PersonalInformation` `FinancialInformation` `IdentificationNumbers` `Miscellaneous` `OrganizationInformation` `DateAndTime` `LocationInformation` `Other`';
                    readonly enum: readonly [
                      'PersonalInformation',
                      'FinancialInformation',
                      'IdentificationNumbers',
                      'Miscellaneous',
                      'OrganizationInformation',
                      'DateAndTime',
                      'LocationInformation',
                      'Other'
                    ];
                    readonly title: 'CategoryType';
                    readonly type: 'string';
                  };
                  readonly subcategory: {
                    readonly anyOf: readonly [
                      {
                        readonly enum: readonly [
                          'CreditCard',
                          'CardExpiry',
                          'BankAccountNumber',
                          'BankRoutingNumber',
                          'SwiftCode',
                          'TaxIdentificationNumber'
                        ];
                        readonly title: 'FinancialInformationSubCategoryType';
                        readonly type: 'string';
                        readonly description: '`CreditCard` `CardExpiry` `BankAccountNumber` `BankRoutingNumber` `SwiftCode` `TaxIdentificationNumber`';
                      },
                      {
                        readonly enum: readonly ['Name', 'Age', 'Email', 'Phone', 'PersonType'];
                        readonly title: 'PersonalInformationSubCategoryType';
                        readonly type: 'string';
                        readonly description: '`Name` `Age` `Email` `Phone` `PersonType`';
                      },
                      {
                        readonly enum: readonly [
                          'SocialSecurityNumber',
                          'NationalIdentificationNumber',
                          'NationalHealthService',
                          'ResidentRegistrationNumber',
                          'DriverLicenseNumber',
                          'PassportNumber'
                        ];
                        readonly title: 'IdentificationNumbersSubCategoryType';
                        readonly type: 'string';
                        readonly description: '`SocialSecurityNumber` `NationalIdentificationNumber` `NationalHealthService` `ResidentRegistrationNumber` `DriverLicenseNumber` `PassportNumber`';
                      },
                      {
                        readonly enum: readonly [
                          'URL',
                          'IP',
                          'MAC',
                          'VehicleIdentificationNumber',
                          'LicensePlate',
                          'VoterNumber',
                          'AWSKeys',
                          'AzureKeys',
                          'Password'
                        ];
                        readonly title: 'MiscellaneousSubCategoryType';
                        readonly type: 'string';
                        readonly description: '`URL` `IP` `MAC` `VehicleIdentificationNumber` `LicensePlate` `VoterNumber` `AWSKeys` `AzureKeys` `Password`';
                      },
                      {
                        readonly enum: readonly ['CompanyName', 'CompanyNumber', 'BuisnessNumber'];
                        readonly title: 'OrganizationSubCategoryType';
                        readonly type: 'string';
                        readonly description: '`CompanyName` `CompanyNumber` `BuisnessNumber`';
                      },
                      {
                        readonly enum: readonly ['Date', 'Time', 'DateTime', 'Duration'];
                        readonly title: 'DateAndTimeSubCategoryType';
                        readonly type: 'string';
                        readonly description: '`Date` `Time` `DateTime` `Duration`';
                      },
                      {
                        readonly enum: readonly ['Address', 'Location'];
                        readonly title: 'LocationInformationSubCategoryType';
                        readonly type: 'string';
                        readonly description: '`Address` `Location`';
                      },
                      {
                        readonly enum: readonly ['Other', 'Anonymized', 'Nerd', 'Wsd', 'Unknown'];
                        readonly title: 'OtherSubCategoryType';
                        readonly type: 'string';
                        readonly description: '`Other` `Anonymized` `Nerd` `Wsd` `Unknown`';
                      }
                    ];
                    readonly title: 'Subcategory';
                  };
                  readonly original_label: {
                    readonly minLength: 1;
                    readonly title: 'Original Label';
                    readonly type: 'string';
                  };
                  readonly content: {
                    readonly minLength: 1;
                    readonly title: 'Content';
                    readonly type: 'string';
                  };
                  readonly confidence_score: {
                    readonly maximum: 1;
                    readonly minimum: 0;
                    readonly title: 'Confidence Score';
                    readonly type: 'integer';
                  };
                };
              };
            };
            readonly original_response: {
              readonly default: any;
              readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
              readonly title: 'Original Response';
            };
            readonly status: {
              readonly title: 'Status';
              readonly enum: readonly ['sucess', 'fail'];
              readonly type: 'string';
              readonly description: '`sucess` `fail`';
            };
          };
        };
        readonly microsoft: {
          readonly required: readonly ['result', 'status'];
          readonly title: 'textanonymizationAnonymizationDataClass';
          readonly type: 'object';
          readonly properties: {
            readonly result: {
              readonly title: 'Result';
              readonly type: 'string';
            };
            readonly entities: {
              readonly title: 'Entities';
              readonly type: 'array';
              readonly items: {
                readonly description: 'This model represents an entity extracted from the text.\n\n    Attributes:\n        offset (int): The offset of the entity in the text.\n        length (int): The lenght of the entity in the text.\n        category (CategoryType): The category of the entity.\n        subcategory (SubCategoryType): The subcategory of the entity.\n        original_label (str): The original label of the entity.\n        content (str): The content of the entity.\n    ';
                readonly required: readonly [
                  'offset',
                  'length',
                  'category',
                  'subcategory',
                  'original_label',
                  'content',
                  'confidence_score'
                ];
                readonly title: 'AnonymizationEntity';
                readonly type: 'object';
                readonly properties: {
                  readonly offset: {
                    readonly minimum: 0;
                    readonly title: 'Offset';
                    readonly type: 'integer';
                  };
                  readonly length: {
                    readonly exclusiveMinimum: true;
                    readonly title: 'Length';
                    readonly type: 'integer';
                  };
                  readonly category: {
                    readonly description: 'This enum are used to categorize the entities extracted from the text.\n\n`PersonalInformation` `FinancialInformation` `IdentificationNumbers` `Miscellaneous` `OrganizationInformation` `DateAndTime` `LocationInformation` `Other`';
                    readonly enum: readonly [
                      'PersonalInformation',
                      'FinancialInformation',
                      'IdentificationNumbers',
                      'Miscellaneous',
                      'OrganizationInformation',
                      'DateAndTime',
                      'LocationInformation',
                      'Other'
                    ];
                    readonly title: 'CategoryType';
                    readonly type: 'string';
                  };
                  readonly subcategory: {
                    readonly anyOf: readonly [
                      {
                        readonly enum: readonly [
                          'CreditCard',
                          'CardExpiry',
                          'BankAccountNumber',
                          'BankRoutingNumber',
                          'SwiftCode',
                          'TaxIdentificationNumber'
                        ];
                        readonly title: 'FinancialInformationSubCategoryType';
                        readonly type: 'string';
                        readonly description: '`CreditCard` `CardExpiry` `BankAccountNumber` `BankRoutingNumber` `SwiftCode` `TaxIdentificationNumber`';
                      },
                      {
                        readonly enum: readonly ['Name', 'Age', 'Email', 'Phone', 'PersonType'];
                        readonly title: 'PersonalInformationSubCategoryType';
                        readonly type: 'string';
                        readonly description: '`Name` `Age` `Email` `Phone` `PersonType`';
                      },
                      {
                        readonly enum: readonly [
                          'SocialSecurityNumber',
                          'NationalIdentificationNumber',
                          'NationalHealthService',
                          'ResidentRegistrationNumber',
                          'DriverLicenseNumber',
                          'PassportNumber'
                        ];
                        readonly title: 'IdentificationNumbersSubCategoryType';
                        readonly type: 'string';
                        readonly description: '`SocialSecurityNumber` `NationalIdentificationNumber` `NationalHealthService` `ResidentRegistrationNumber` `DriverLicenseNumber` `PassportNumber`';
                      },
                      {
                        readonly enum: readonly [
                          'URL',
                          'IP',
                          'MAC',
                          'VehicleIdentificationNumber',
                          'LicensePlate',
                          'VoterNumber',
                          'AWSKeys',
                          'AzureKeys',
                          'Password'
                        ];
                        readonly title: 'MiscellaneousSubCategoryType';
                        readonly type: 'string';
                        readonly description: '`URL` `IP` `MAC` `VehicleIdentificationNumber` `LicensePlate` `VoterNumber` `AWSKeys` `AzureKeys` `Password`';
                      },
                      {
                        readonly enum: readonly ['CompanyName', 'CompanyNumber', 'BuisnessNumber'];
                        readonly title: 'OrganizationSubCategoryType';
                        readonly type: 'string';
                        readonly description: '`CompanyName` `CompanyNumber` `BuisnessNumber`';
                      },
                      {
                        readonly enum: readonly ['Date', 'Time', 'DateTime', 'Duration'];
                        readonly title: 'DateAndTimeSubCategoryType';
                        readonly type: 'string';
                        readonly description: '`Date` `Time` `DateTime` `Duration`';
                      },
                      {
                        readonly enum: readonly ['Address', 'Location'];
                        readonly title: 'LocationInformationSubCategoryType';
                        readonly type: 'string';
                        readonly description: '`Address` `Location`';
                      },
                      {
                        readonly enum: readonly ['Other', 'Anonymized', 'Nerd', 'Wsd', 'Unknown'];
                        readonly title: 'OtherSubCategoryType';
                        readonly type: 'string';
                        readonly description: '`Other` `Anonymized` `Nerd` `Wsd` `Unknown`';
                      }
                    ];
                    readonly title: 'Subcategory';
                  };
                  readonly original_label: {
                    readonly minLength: 1;
                    readonly title: 'Original Label';
                    readonly type: 'string';
                  };
                  readonly content: {
                    readonly minLength: 1;
                    readonly title: 'Content';
                    readonly type: 'string';
                  };
                  readonly confidence_score: {
                    readonly maximum: 1;
                    readonly minimum: 0;
                    readonly title: 'Confidence Score';
                    readonly type: 'integer';
                  };
                };
              };
            };
            readonly original_response: {
              readonly default: any;
              readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
              readonly title: 'Original Response';
            };
            readonly status: {
              readonly title: 'Status';
              readonly enum: readonly ['sucess', 'fail'];
              readonly type: 'string';
              readonly description: '`sucess` `fail`';
            };
          };
        };
        readonly oneai: {
          readonly required: readonly ['result', 'status'];
          readonly title: 'textanonymizationAnonymizationDataClass';
          readonly type: 'object';
          readonly properties: {
            readonly result: {
              readonly title: 'Result';
              readonly type: 'string';
            };
            readonly entities: {
              readonly title: 'Entities';
              readonly type: 'array';
              readonly items: {
                readonly description: 'This model represents an entity extracted from the text.\n\n    Attributes:\n        offset (int): The offset of the entity in the text.\n        length (int): The lenght of the entity in the text.\n        category (CategoryType): The category of the entity.\n        subcategory (SubCategoryType): The subcategory of the entity.\n        original_label (str): The original label of the entity.\n        content (str): The content of the entity.\n    ';
                readonly required: readonly [
                  'offset',
                  'length',
                  'category',
                  'subcategory',
                  'original_label',
                  'content',
                  'confidence_score'
                ];
                readonly title: 'AnonymizationEntity';
                readonly type: 'object';
                readonly properties: {
                  readonly offset: {
                    readonly minimum: 0;
                    readonly title: 'Offset';
                    readonly type: 'integer';
                  };
                  readonly length: {
                    readonly exclusiveMinimum: true;
                    readonly title: 'Length';
                    readonly type: 'integer';
                  };
                  readonly category: {
                    readonly description: 'This enum are used to categorize the entities extracted from the text.\n\n`PersonalInformation` `FinancialInformation` `IdentificationNumbers` `Miscellaneous` `OrganizationInformation` `DateAndTime` `LocationInformation` `Other`';
                    readonly enum: readonly [
                      'PersonalInformation',
                      'FinancialInformation',
                      'IdentificationNumbers',
                      'Miscellaneous',
                      'OrganizationInformation',
                      'DateAndTime',
                      'LocationInformation',
                      'Other'
                    ];
                    readonly title: 'CategoryType';
                    readonly type: 'string';
                  };
                  readonly subcategory: {
                    readonly anyOf: readonly [
                      {
                        readonly enum: readonly [
                          'CreditCard',
                          'CardExpiry',
                          'BankAccountNumber',
                          'BankRoutingNumber',
                          'SwiftCode',
                          'TaxIdentificationNumber'
                        ];
                        readonly title: 'FinancialInformationSubCategoryType';
                        readonly type: 'string';
                        readonly description: '`CreditCard` `CardExpiry` `BankAccountNumber` `BankRoutingNumber` `SwiftCode` `TaxIdentificationNumber`';
                      },
                      {
                        readonly enum: readonly ['Name', 'Age', 'Email', 'Phone', 'PersonType'];
                        readonly title: 'PersonalInformationSubCategoryType';
                        readonly type: 'string';
                        readonly description: '`Name` `Age` `Email` `Phone` `PersonType`';
                      },
                      {
                        readonly enum: readonly [
                          'SocialSecurityNumber',
                          'NationalIdentificationNumber',
                          'NationalHealthService',
                          'ResidentRegistrationNumber',
                          'DriverLicenseNumber',
                          'PassportNumber'
                        ];
                        readonly title: 'IdentificationNumbersSubCategoryType';
                        readonly type: 'string';
                        readonly description: '`SocialSecurityNumber` `NationalIdentificationNumber` `NationalHealthService` `ResidentRegistrationNumber` `DriverLicenseNumber` `PassportNumber`';
                      },
                      {
                        readonly enum: readonly [
                          'URL',
                          'IP',
                          'MAC',
                          'VehicleIdentificationNumber',
                          'LicensePlate',
                          'VoterNumber',
                          'AWSKeys',
                          'AzureKeys',
                          'Password'
                        ];
                        readonly title: 'MiscellaneousSubCategoryType';
                        readonly type: 'string';
                        readonly description: '`URL` `IP` `MAC` `VehicleIdentificationNumber` `LicensePlate` `VoterNumber` `AWSKeys` `AzureKeys` `Password`';
                      },
                      {
                        readonly enum: readonly ['CompanyName', 'CompanyNumber', 'BuisnessNumber'];
                        readonly title: 'OrganizationSubCategoryType';
                        readonly type: 'string';
                        readonly description: '`CompanyName` `CompanyNumber` `BuisnessNumber`';
                      },
                      {
                        readonly enum: readonly ['Date', 'Time', 'DateTime', 'Duration'];
                        readonly title: 'DateAndTimeSubCategoryType';
                        readonly type: 'string';
                        readonly description: '`Date` `Time` `DateTime` `Duration`';
                      },
                      {
                        readonly enum: readonly ['Address', 'Location'];
                        readonly title: 'LocationInformationSubCategoryType';
                        readonly type: 'string';
                        readonly description: '`Address` `Location`';
                      },
                      {
                        readonly enum: readonly ['Other', 'Anonymized', 'Nerd', 'Wsd', 'Unknown'];
                        readonly title: 'OtherSubCategoryType';
                        readonly type: 'string';
                        readonly description: '`Other` `Anonymized` `Nerd` `Wsd` `Unknown`';
                      }
                    ];
                    readonly title: 'Subcategory';
                  };
                  readonly original_label: {
                    readonly minLength: 1;
                    readonly title: 'Original Label';
                    readonly type: 'string';
                  };
                  readonly content: {
                    readonly minLength: 1;
                    readonly title: 'Content';
                    readonly type: 'string';
                  };
                  readonly confidence_score: {
                    readonly maximum: 1;
                    readonly minimum: 0;
                    readonly title: 'Confidence Score';
                    readonly type: 'integer';
                  };
                };
              };
            };
            readonly original_response: {
              readonly default: any;
              readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
              readonly title: 'Original Response';
            };
            readonly status: {
              readonly title: 'Status';
              readonly enum: readonly ['sucess', 'fail'];
              readonly type: 'string';
              readonly description: '`sucess` `fail`';
            };
          };
        };
        readonly openai: {
          readonly required: readonly ['result', 'status'];
          readonly title: 'textanonymizationAnonymizationDataClass';
          readonly type: 'object';
          readonly properties: {
            readonly result: {
              readonly title: 'Result';
              readonly type: 'string';
            };
            readonly entities: {
              readonly title: 'Entities';
              readonly type: 'array';
              readonly items: {
                readonly description: 'This model represents an entity extracted from the text.\n\n    Attributes:\n        offset (int): The offset of the entity in the text.\n        length (int): The lenght of the entity in the text.\n        category (CategoryType): The category of the entity.\n        subcategory (SubCategoryType): The subcategory of the entity.\n        original_label (str): The original label of the entity.\n        content (str): The content of the entity.\n    ';
                readonly required: readonly [
                  'offset',
                  'length',
                  'category',
                  'subcategory',
                  'original_label',
                  'content',
                  'confidence_score'
                ];
                readonly title: 'AnonymizationEntity';
                readonly type: 'object';
                readonly properties: {
                  readonly offset: {
                    readonly minimum: 0;
                    readonly title: 'Offset';
                    readonly type: 'integer';
                  };
                  readonly length: {
                    readonly exclusiveMinimum: true;
                    readonly title: 'Length';
                    readonly type: 'integer';
                  };
                  readonly category: {
                    readonly description: 'This enum are used to categorize the entities extracted from the text.\n\n`PersonalInformation` `FinancialInformation` `IdentificationNumbers` `Miscellaneous` `OrganizationInformation` `DateAndTime` `LocationInformation` `Other`';
                    readonly enum: readonly [
                      'PersonalInformation',
                      'FinancialInformation',
                      'IdentificationNumbers',
                      'Miscellaneous',
                      'OrganizationInformation',
                      'DateAndTime',
                      'LocationInformation',
                      'Other'
                    ];
                    readonly title: 'CategoryType';
                    readonly type: 'string';
                  };
                  readonly subcategory: {
                    readonly anyOf: readonly [
                      {
                        readonly enum: readonly [
                          'CreditCard',
                          'CardExpiry',
                          'BankAccountNumber',
                          'BankRoutingNumber',
                          'SwiftCode',
                          'TaxIdentificationNumber'
                        ];
                        readonly title: 'FinancialInformationSubCategoryType';
                        readonly type: 'string';
                        readonly description: '`CreditCard` `CardExpiry` `BankAccountNumber` `BankRoutingNumber` `SwiftCode` `TaxIdentificationNumber`';
                      },
                      {
                        readonly enum: readonly ['Name', 'Age', 'Email', 'Phone', 'PersonType'];
                        readonly title: 'PersonalInformationSubCategoryType';
                        readonly type: 'string';
                        readonly description: '`Name` `Age` `Email` `Phone` `PersonType`';
                      },
                      {
                        readonly enum: readonly [
                          'SocialSecurityNumber',
                          'NationalIdentificationNumber',
                          'NationalHealthService',
                          'ResidentRegistrationNumber',
                          'DriverLicenseNumber',
                          'PassportNumber'
                        ];
                        readonly title: 'IdentificationNumbersSubCategoryType';
                        readonly type: 'string';
                        readonly description: '`SocialSecurityNumber` `NationalIdentificationNumber` `NationalHealthService` `ResidentRegistrationNumber` `DriverLicenseNumber` `PassportNumber`';
                      },
                      {
                        readonly enum: readonly [
                          'URL',
                          'IP',
                          'MAC',
                          'VehicleIdentificationNumber',
                          'LicensePlate',
                          'VoterNumber',
                          'AWSKeys',
                          'AzureKeys',
                          'Password'
                        ];
                        readonly title: 'MiscellaneousSubCategoryType';
                        readonly type: 'string';
                        readonly description: '`URL` `IP` `MAC` `VehicleIdentificationNumber` `LicensePlate` `VoterNumber` `AWSKeys` `AzureKeys` `Password`';
                      },
                      {
                        readonly enum: readonly ['CompanyName', 'CompanyNumber', 'BuisnessNumber'];
                        readonly title: 'OrganizationSubCategoryType';
                        readonly type: 'string';
                        readonly description: '`CompanyName` `CompanyNumber` `BuisnessNumber`';
                      },
                      {
                        readonly enum: readonly ['Date', 'Time', 'DateTime', 'Duration'];
                        readonly title: 'DateAndTimeSubCategoryType';
                        readonly type: 'string';
                        readonly description: '`Date` `Time` `DateTime` `Duration`';
                      },
                      {
                        readonly enum: readonly ['Address', 'Location'];
                        readonly title: 'LocationInformationSubCategoryType';
                        readonly type: 'string';
                        readonly description: '`Address` `Location`';
                      },
                      {
                        readonly enum: readonly ['Other', 'Anonymized', 'Nerd', 'Wsd', 'Unknown'];
                        readonly title: 'OtherSubCategoryType';
                        readonly type: 'string';
                        readonly description: '`Other` `Anonymized` `Nerd` `Wsd` `Unknown`';
                      }
                    ];
                    readonly title: 'Subcategory';
                  };
                  readonly original_label: {
                    readonly minLength: 1;
                    readonly title: 'Original Label';
                    readonly type: 'string';
                  };
                  readonly content: {
                    readonly minLength: 1;
                    readonly title: 'Content';
                    readonly type: 'string';
                  };
                  readonly confidence_score: {
                    readonly maximum: 1;
                    readonly minimum: 0;
                    readonly title: 'Confidence Score';
                    readonly type: 'integer';
                  };
                };
              };
            };
            readonly original_response: {
              readonly default: any;
              readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
              readonly title: 'Original Response';
            };
            readonly status: {
              readonly title: 'Status';
              readonly enum: readonly ['sucess', 'fail'];
              readonly type: 'string';
              readonly description: '`sucess` `fail`';
            };
          };
        };
        readonly amazon: {
          readonly required: readonly ['result', 'status'];
          readonly title: 'textanonymizationAnonymizationDataClass';
          readonly type: 'object';
          readonly properties: {
            readonly result: {
              readonly title: 'Result';
              readonly type: 'string';
            };
            readonly entities: {
              readonly title: 'Entities';
              readonly type: 'array';
              readonly items: {
                readonly description: 'This model represents an entity extracted from the text.\n\n    Attributes:\n        offset (int): The offset of the entity in the text.\n        length (int): The lenght of the entity in the text.\n        category (CategoryType): The category of the entity.\n        subcategory (SubCategoryType): The subcategory of the entity.\n        original_label (str): The original label of the entity.\n        content (str): The content of the entity.\n    ';
                readonly required: readonly [
                  'offset',
                  'length',
                  'category',
                  'subcategory',
                  'original_label',
                  'content',
                  'confidence_score'
                ];
                readonly title: 'AnonymizationEntity';
                readonly type: 'object';
                readonly properties: {
                  readonly offset: {
                    readonly minimum: 0;
                    readonly title: 'Offset';
                    readonly type: 'integer';
                  };
                  readonly length: {
                    readonly exclusiveMinimum: true;
                    readonly title: 'Length';
                    readonly type: 'integer';
                  };
                  readonly category: {
                    readonly description: 'This enum are used to categorize the entities extracted from the text.\n\n`PersonalInformation` `FinancialInformation` `IdentificationNumbers` `Miscellaneous` `OrganizationInformation` `DateAndTime` `LocationInformation` `Other`';
                    readonly enum: readonly [
                      'PersonalInformation',
                      'FinancialInformation',
                      'IdentificationNumbers',
                      'Miscellaneous',
                      'OrganizationInformation',
                      'DateAndTime',
                      'LocationInformation',
                      'Other'
                    ];
                    readonly title: 'CategoryType';
                    readonly type: 'string';
                  };
                  readonly subcategory: {
                    readonly anyOf: readonly [
                      {
                        readonly enum: readonly [
                          'CreditCard',
                          'CardExpiry',
                          'BankAccountNumber',
                          'BankRoutingNumber',
                          'SwiftCode',
                          'TaxIdentificationNumber'
                        ];
                        readonly title: 'FinancialInformationSubCategoryType';
                        readonly type: 'string';
                        readonly description: '`CreditCard` `CardExpiry` `BankAccountNumber` `BankRoutingNumber` `SwiftCode` `TaxIdentificationNumber`';
                      },
                      {
                        readonly enum: readonly ['Name', 'Age', 'Email', 'Phone', 'PersonType'];
                        readonly title: 'PersonalInformationSubCategoryType';
                        readonly type: 'string';
                        readonly description: '`Name` `Age` `Email` `Phone` `PersonType`';
                      },
                      {
                        readonly enum: readonly [
                          'SocialSecurityNumber',
                          'NationalIdentificationNumber',
                          'NationalHealthService',
                          'ResidentRegistrationNumber',
                          'DriverLicenseNumber',
                          'PassportNumber'
                        ];
                        readonly title: 'IdentificationNumbersSubCategoryType';
                        readonly type: 'string';
                        readonly description: '`SocialSecurityNumber` `NationalIdentificationNumber` `NationalHealthService` `ResidentRegistrationNumber` `DriverLicenseNumber` `PassportNumber`';
                      },
                      {
                        readonly enum: readonly [
                          'URL',
                          'IP',
                          'MAC',
                          'VehicleIdentificationNumber',
                          'LicensePlate',
                          'VoterNumber',
                          'AWSKeys',
                          'AzureKeys',
                          'Password'
                        ];
                        readonly title: 'MiscellaneousSubCategoryType';
                        readonly type: 'string';
                        readonly description: '`URL` `IP` `MAC` `VehicleIdentificationNumber` `LicensePlate` `VoterNumber` `AWSKeys` `AzureKeys` `Password`';
                      },
                      {
                        readonly enum: readonly ['CompanyName', 'CompanyNumber', 'BuisnessNumber'];
                        readonly title: 'OrganizationSubCategoryType';
                        readonly type: 'string';
                        readonly description: '`CompanyName` `CompanyNumber` `BuisnessNumber`';
                      },
                      {
                        readonly enum: readonly ['Date', 'Time', 'DateTime', 'Duration'];
                        readonly title: 'DateAndTimeSubCategoryType';
                        readonly type: 'string';
                        readonly description: '`Date` `Time` `DateTime` `Duration`';
                      },
                      {
                        readonly enum: readonly ['Address', 'Location'];
                        readonly title: 'LocationInformationSubCategoryType';
                        readonly type: 'string';
                        readonly description: '`Address` `Location`';
                      },
                      {
                        readonly enum: readonly ['Other', 'Anonymized', 'Nerd', 'Wsd', 'Unknown'];
                        readonly title: 'OtherSubCategoryType';
                        readonly type: 'string';
                        readonly description: '`Other` `Anonymized` `Nerd` `Wsd` `Unknown`';
                      }
                    ];
                    readonly title: 'Subcategory';
                  };
                  readonly original_label: {
                    readonly minLength: 1;
                    readonly title: 'Original Label';
                    readonly type: 'string';
                  };
                  readonly content: {
                    readonly minLength: 1;
                    readonly title: 'Content';
                    readonly type: 'string';
                  };
                  readonly confidence_score: {
                    readonly maximum: 1;
                    readonly minimum: 0;
                    readonly title: 'Confidence Score';
                    readonly type: 'integer';
                  };
                };
              };
            };
            readonly original_response: {
              readonly default: any;
              readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
              readonly title: 'Original Response';
            };
            readonly status: {
              readonly title: 'Status';
              readonly enum: readonly ['sucess', 'fail'];
              readonly type: 'string';
              readonly description: '`sucess` `fail`';
            };
          };
        };
      };
      readonly title: 'textanonymizationResponseModel';
      readonly type: 'object';
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '400': {
      readonly type: 'object';
      readonly properties: {
        readonly error: {
          readonly type: 'object';
          readonly properties: {
            readonly type: {
              readonly type: 'string';
            };
            readonly message: {
              readonly type: 'object';
              readonly properties: {
                readonly '<parameter_name>': {
                  readonly type: 'array';
                  readonly items: {
                    readonly type: 'string';
                  };
                };
              };
              readonly required: readonly ['<parameter_name>'];
            };
          };
          readonly required: readonly ['message', 'type'];
        };
      };
      readonly required: readonly ['error'];
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '403': {
      readonly type: 'object';
      readonly properties: {
        readonly error: {
          readonly type: 'object';
          readonly properties: {
            readonly type: {
              readonly type: 'string';
            };
            readonly message: {
              readonly type: 'string';
            };
          };
          readonly required: readonly ['message', 'type'];
        };
      };
      readonly required: readonly ['error'];
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '404': {
      readonly type: 'object';
      readonly properties: {
        readonly details: {
          readonly type: 'string';
          readonly default: 'Not Found';
        };
      };
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '500': {
      readonly type: 'object';
      readonly properties: {
        readonly error: {
          readonly type: 'object';
          readonly properties: {
            readonly type: {
              readonly type: 'string';
            };
            readonly message: {
              readonly type: 'string';
            };
          };
          readonly required: readonly ['message', 'type'];
        };
      };
      readonly required: readonly ['error'];
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
  };
};
declare const TextChatCreate: {
  readonly body: {
    readonly type: 'object';
    readonly properties: {
      readonly providers: {
        readonly type: 'string';
        readonly minLength: 1;
        readonly description: "It can be one (ex: **'amazon'** or **'google'**) or multiple provider(s) (ex: **'amazon,microsoft,google'**)             that the data will be redirected to in order to get the processed results.";
        readonly examples: readonly ['google,openai'];
      };
      readonly fallback_providers: {
        readonly type: 'string';
        readonly minLength: 1;
        readonly description: "Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.\n    To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.\n\nThey will be tried in the same order they are input, and it will stop to the first provider who doesn't fail.\n\n\n*Doesn't work with async subfeatures.*\n    ";
      };
      readonly response_as_dict: {
        readonly type: 'boolean';
        readonly default: true;
        readonly description: "Optional : When set to **true** (default), the response is an object of responses with providers names as keys : <br> \n                  ``` {'google' : { 'status': 'success', ... }, } ``` <br>\n                When set to **false** the response structure is a list of response objects : <br> \n                   ``` [{'status': 'success', 'provider': 'google' ... }, ] ```. <br> \n                  ";
      };
      readonly attributes_as_list: {
        readonly type: 'boolean';
        readonly default: false;
        readonly description: "Optional : When set to **false** (default) the structure of the extracted items is list of objects having different attributes : <br>\n     ```{'items': [{'attribute_1': 'x1','attribute_2': 'y2'}, ... ]}``` <br>\n     When it is set to **true**, the response contains an object with each attribute as a list : <br>\n     ```{ 'attribute_1': ['x1','x2', ...], 'attribute_2': [y1, y2, ...]}``` ";
      };
      readonly show_original_response: {
        readonly type: 'boolean';
        readonly default: false;
        readonly description: 'Optional : Shows the original response of the provider.<br>\n        When set to **true**, a new attribute *original_response* will appear in the response object.';
      };
      readonly settings: {
        readonly type: readonly ['object', 'null'];
        readonly additionalProperties: {
          readonly type: 'string';
          readonly minLength: 1;
          readonly description: 'The model id/name specified for the provider';
          readonly maxLength: 50;
        };
        readonly description: "A dictionnary or a json object to specify specific models to use for some providers. <br>                     It can be in the following format: {'google' : 'google_model', ibm': 'ibm_model'...}.\n                     **Caution**: setting models can be done only with `Content-Type` : `application/json`.\n                     ";
      };
      readonly text: {
        readonly type: readonly ['string', 'null'];
        readonly description: 'Start your conversation here...';
        readonly examples: readonly [
          'Barack Hussein Obama is an American politician who served as the 44th president of the United States from 2009 to 2017. A member of the Democratic Party, Obama was the first African-American president of the United States. He previously served as a U.S. senator from Illinois from 2005 to 2008 and as an Illinois state senator from 1997 to 2004.'
        ];
      };
      readonly chatbot_global_action: {
        readonly type: readonly ['string', 'null'];
        readonly description: "A system message that helps set the behavior of the assistant. For example, 'You are a helpful assistant'.";
        readonly examples: readonly [
          'You are a keyword extractor. Extract Only the word from the text provided.'
        ];
      };
      readonly previous_history: {
        readonly type: 'array';
        readonly items: {
          readonly type: 'object';
          readonly additionalProperties: true;
          readonly description: "A dictionary representing a single conversation in the previous history. Must contain 'role' and 'message' fields.";
        };
        readonly description: "A list containing all the previous conversations between the user and the chatbot AI. Each item in the list should be a dictionary with two keys: 'role' and 'message'. The 'role' key specifies the role of the speaker and can have the values 'user' or 'assistant'. The 'message' key contains the text of the conversation from the respective role. For example: [{'role': 'user', 'message': 'Hello'}, {'role': 'assistant', 'message': 'Hi, how can I help you?'}, ...]. This format allows easy identification of the speaker's role and their corresponding message.";
      };
      readonly temperature: {
        readonly type: 'number';
        readonly format: 'double';
        readonly maximum: 2;
        readonly minimum: 0;
        readonly default: 0;
        readonly description: 'Higher values mean the model will take more risks and value 0 (argmax sampling) works better for scenarios with a well-defined answer.';
      };
      readonly max_tokens: {
        readonly type: 'integer';
        readonly maximum: 4048;
        readonly minimum: 1;
        readonly default: 1000;
        readonly description: "The maximum number of tokens to generate in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length.";
        readonly examples: readonly [100];
      };
    };
    readonly required: readonly ['providers'];
    readonly $schema: 'http://json-schema.org/draft-04/schema#';
  };
  readonly response: {
    readonly '200': {
      readonly properties: {
        readonly openai: {
          readonly required: readonly ['generated_text', 'status'];
          readonly title: 'textchatChatDataClass';
          readonly type: 'object';
          readonly properties: {
            readonly generated_text: {
              readonly title: 'Generated Text';
              readonly type: 'string';
            };
            readonly message: {
              readonly title: 'Message';
              readonly type: 'array';
              readonly items: {
                readonly required: readonly ['role', 'message'];
                readonly title: 'ChatMessageDataClass';
                readonly type: 'object';
                readonly properties: {
                  readonly role: {
                    readonly title: 'Role';
                    readonly type: 'string';
                  };
                  readonly message: {
                    readonly title: 'Message';
                    readonly type: 'string';
                  };
                };
              };
            };
            readonly original_response: {
              readonly default: any;
              readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
              readonly title: 'Original Response';
            };
            readonly status: {
              readonly title: 'Status';
              readonly enum: readonly ['sucess', 'fail'];
              readonly type: 'string';
              readonly description: '`sucess` `fail`';
            };
          };
        };
        readonly google: {
          readonly required: readonly ['generated_text', 'status'];
          readonly title: 'textchatChatDataClass';
          readonly type: 'object';
          readonly properties: {
            readonly generated_text: {
              readonly title: 'Generated Text';
              readonly type: 'string';
            };
            readonly message: {
              readonly title: 'Message';
              readonly type: 'array';
              readonly items: {
                readonly required: readonly ['role', 'message'];
                readonly title: 'ChatMessageDataClass';
                readonly type: 'object';
                readonly properties: {
                  readonly role: {
                    readonly title: 'Role';
                    readonly type: 'string';
                  };
                  readonly message: {
                    readonly title: 'Message';
                    readonly type: 'string';
                  };
                };
              };
            };
            readonly original_response: {
              readonly default: any;
              readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
              readonly title: 'Original Response';
            };
            readonly status: {
              readonly title: 'Status';
              readonly enum: readonly ['sucess', 'fail'];
              readonly type: 'string';
              readonly description: '`sucess` `fail`';
            };
          };
        };
      };
      readonly title: 'textchatResponseModel';
      readonly type: 'object';
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '400': {
      readonly type: 'object';
      readonly properties: {
        readonly error: {
          readonly type: 'object';
          readonly properties: {
            readonly type: {
              readonly type: 'string';
            };
            readonly message: {
              readonly type: 'object';
              readonly properties: {
                readonly '<parameter_name>': {
                  readonly type: 'array';
                  readonly items: {
                    readonly type: 'string';
                  };
                };
              };
              readonly required: readonly ['<parameter_name>'];
            };
          };
          readonly required: readonly ['message', 'type'];
        };
      };
      readonly required: readonly ['error'];
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '403': {
      readonly type: 'object';
      readonly properties: {
        readonly error: {
          readonly type: 'object';
          readonly properties: {
            readonly type: {
              readonly type: 'string';
            };
            readonly message: {
              readonly type: 'string';
            };
          };
          readonly required: readonly ['message', 'type'];
        };
      };
      readonly required: readonly ['error'];
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '404': {
      readonly type: 'object';
      readonly properties: {
        readonly details: {
          readonly type: 'string';
          readonly default: 'Not Found';
        };
      };
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '500': {
      readonly type: 'object';
      readonly properties: {
        readonly error: {
          readonly type: 'object';
          readonly properties: {
            readonly type: {
              readonly type: 'string';
            };
            readonly message: {
              readonly type: 'string';
            };
          };
          readonly required: readonly ['message', 'type'];
        };
      };
      readonly required: readonly ['error'];
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
  };
};
declare const TextCodeGenerationCreate: {
  readonly body: {
    readonly type: 'object';
    readonly properties: {
      readonly providers: {
        readonly type: 'string';
        readonly minLength: 1;
        readonly description: "It can be one (ex: **'amazon'** or **'google'**) or multiple provider(s) (ex: **'amazon,microsoft,google'**)             that the data will be redirected to in order to get the processed results.";
        readonly examples: readonly ['openai,google'];
      };
      readonly fallback_providers: {
        readonly type: 'string';
        readonly minLength: 1;
        readonly description: "Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.\n    To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.\n\nThey will be tried in the same order they are input, and it will stop to the first provider who doesn't fail.\n\n\n*Doesn't work with async subfeatures.*\n    ";
      };
      readonly response_as_dict: {
        readonly type: 'boolean';
        readonly default: true;
        readonly description: "Optional : When set to **true** (default), the response is an object of responses with providers names as keys : <br> \n                  ``` {'google' : { 'status': 'success', ... }, } ``` <br>\n                When set to **false** the response structure is a list of response objects : <br> \n                   ``` [{'status': 'success', 'provider': 'google' ... }, ] ```. <br> \n                  ";
      };
      readonly attributes_as_list: {
        readonly type: 'boolean';
        readonly default: false;
        readonly description: "Optional : When set to **false** (default) the structure of the extracted items is list of objects having different attributes : <br>\n     ```{'items': [{'attribute_1': 'x1','attribute_2': 'y2'}, ... ]}``` <br>\n     When it is set to **true**, the response contains an object with each attribute as a list : <br>\n     ```{ 'attribute_1': ['x1','x2', ...], 'attribute_2': [y1, y2, ...]}``` ";
      };
      readonly show_original_response: {
        readonly type: 'boolean';
        readonly default: false;
        readonly description: 'Optional : Shows the original response of the provider.<br>\n        When set to **true**, a new attribute *original_response* will appear in the response object.';
      };
      readonly prompt: {
        readonly type: readonly ['string', 'null'];
        readonly description: 'Entrer the source code that will be used as a context.';
      };
      readonly instruction: {
        readonly type: 'string';
        readonly minLength: 1;
        readonly description: 'Entrer the instruction you want to be followed.';
        readonly examples: readonly ['Write a function in python that calculates fibonacci'];
      };
      readonly temperature: {
        readonly type: 'number';
        readonly format: 'double';
        readonly maximum: 1;
        readonly minimum: 0;
        readonly default: 0;
        readonly description: 'Higher values mean the model will take more risks and value 0 (argmax sampling) works better for scenarios with a well-defined answer.';
        readonly examples: readonly [0.1];
      };
      readonly max_tokens: {
        readonly type: 'integer';
        readonly maximum: 4096;
        readonly minimum: 1;
        readonly default: 1000;
        readonly description: "The maximum number of tokens to generate in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length.";
        readonly examples: readonly [100];
      };
    };
    readonly required: readonly ['instruction', 'providers'];
    readonly $schema: 'http://json-schema.org/draft-04/schema#';
  };
  readonly response: {
    readonly '200': {
      readonly properties: {
        readonly openai: {
          readonly required: readonly ['generated_text', 'status'];
          readonly title: 'textcode_generationCodeGenerationDataClass';
          readonly type: 'object';
          readonly properties: {
            readonly generated_text: {
              readonly title: 'Generated Text';
              readonly type: 'string';
            };
            readonly original_response: {
              readonly default: any;
              readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
              readonly title: 'Original Response';
            };
            readonly status: {
              readonly title: 'Status';
              readonly enum: readonly ['sucess', 'fail'];
              readonly type: 'string';
              readonly description: '`sucess` `fail`';
            };
          };
        };
        readonly google: {
          readonly required: readonly ['generated_text', 'status'];
          readonly title: 'textcode_generationCodeGenerationDataClass';
          readonly type: 'object';
          readonly properties: {
            readonly generated_text: {
              readonly title: 'Generated Text';
              readonly type: 'string';
            };
            readonly original_response: {
              readonly default: any;
              readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
              readonly title: 'Original Response';
            };
            readonly status: {
              readonly title: 'Status';
              readonly enum: readonly ['sucess', 'fail'];
              readonly type: 'string';
              readonly description: '`sucess` `fail`';
            };
          };
        };
      };
      readonly title: 'textcode_generationResponseModel';
      readonly type: 'object';
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '400': {
      readonly type: 'object';
      readonly properties: {
        readonly error: {
          readonly type: 'object';
          readonly properties: {
            readonly type: {
              readonly type: 'string';
            };
            readonly message: {
              readonly type: 'object';
              readonly properties: {
                readonly '<parameter_name>': {
                  readonly type: 'array';
                  readonly items: {
                    readonly type: 'string';
                  };
                };
              };
              readonly required: readonly ['<parameter_name>'];
            };
          };
          readonly required: readonly ['message', 'type'];
        };
      };
      readonly required: readonly ['error'];
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '403': {
      readonly type: 'object';
      readonly properties: {
        readonly error: {
          readonly type: 'object';
          readonly properties: {
            readonly type: {
              readonly type: 'string';
            };
            readonly message: {
              readonly type: 'string';
            };
          };
          readonly required: readonly ['message', 'type'];
        };
      };
      readonly required: readonly ['error'];
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '404': {
      readonly type: 'object';
      readonly properties: {
        readonly details: {
          readonly type: 'string';
          readonly default: 'Not Found';
        };
      };
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '500': {
      readonly type: 'object';
      readonly properties: {
        readonly error: {
          readonly type: 'object';
          readonly properties: {
            readonly type: {
              readonly type: 'string';
            };
            readonly message: {
              readonly type: 'string';
            };
          };
          readonly required: readonly ['message', 'type'];
        };
      };
      readonly required: readonly ['error'];
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
  };
};
declare const TextCustomClassificationCreate: {
  readonly body: {
    readonly type: 'object';
    readonly properties: {
      readonly providers: {
        readonly type: 'string';
        readonly minLength: 1;
        readonly description: "It can be one (ex: **'amazon'** or **'google'**) or multiple provider(s) (ex: **'amazon,microsoft,google'**)             that the data will be redirected to in order to get the processed results.";
        readonly examples: readonly ['cohere,openai'];
      };
      readonly fallback_providers: {
        readonly type: 'string';
        readonly minLength: 1;
        readonly description: "Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.\n    To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.\n\nThey will be tried in the same order they are input, and it will stop to the first provider who doesn't fail.\n\n\n*Doesn't work with async subfeatures.*\n    ";
      };
      readonly response_as_dict: {
        readonly type: 'boolean';
        readonly default: true;
        readonly description: "Optional : When set to **true** (default), the response is an object of responses with providers names as keys : <br> \n                  ``` {'google' : { 'status': 'success', ... }, } ``` <br>\n                When set to **false** the response structure is a list of response objects : <br> \n                   ``` [{'status': 'success', 'provider': 'google' ... }, ] ```. <br> \n                  ";
      };
      readonly attributes_as_list: {
        readonly type: 'boolean';
        readonly default: false;
        readonly description: "Optional : When set to **false** (default) the structure of the extracted items is list of objects having different attributes : <br>\n     ```{'items': [{'attribute_1': 'x1','attribute_2': 'y2'}, ... ]}``` <br>\n     When it is set to **true**, the response contains an object with each attribute as a list : <br>\n     ```{ 'attribute_1': ['x1','x2', ...], 'attribute_2': [y1, y2, ...]}``` ";
      };
      readonly show_original_response: {
        readonly type: 'boolean';
        readonly default: false;
        readonly description: 'Optional : Shows the original response of the provider.<br>\n        When set to **true**, a new attribute *original_response* will appear in the response object.';
      };
      readonly texts: {
        readonly type: 'array';
        readonly items: {
          readonly type: 'string';
          readonly minLength: 1;
          readonly examples: readonly ['Confirm your email address'];
        };
        readonly description: 'List of texts to classify';
      };
      readonly labels: {
        readonly type: 'array';
        readonly items: {
          readonly type: 'string';
          readonly minLength: 1;
          readonly examples: readonly ['spam'];
        };
        readonly description: 'List of the labels (classes) you want the texts to be classified as.';
      };
      readonly examples: {
        readonly type: 'array';
        readonly items: {
          readonly type: 'array';
          readonly items: {
            readonly type: 'string';
            readonly minLength: 1;
            readonly examples: readonly ['I need help please wire me $1000 right now'];
          };
          readonly maxItems: 2;
          readonly minItems: 2;
        };
        readonly description: "List of text/label pairs (eg: [['I need help please wire me $1000 right now', 'spam'],]";
      };
    };
    readonly required: readonly ['examples', 'labels', 'providers', 'texts'];
    readonly $schema: 'http://json-schema.org/draft-04/schema#';
  };
  readonly response: {
    readonly '200': {
      readonly properties: {
        readonly openai: {
          readonly required: readonly ['status'];
          readonly title: 'textcustom_classificationCustomClassificationDataClass';
          readonly type: 'object';
          readonly properties: {
            readonly classifications: {
              readonly title: 'Classifications';
              readonly type: 'array';
              readonly items: {
                readonly required: readonly ['input', 'label', 'confidence'];
                readonly title: 'ItemCustomClassificationDataClass';
                readonly type: 'object';
                readonly properties: {
                  readonly input: {
                    readonly title: 'Input';
                    readonly type: 'string';
                  };
                  readonly label: {
                    readonly title: 'Label';
                    readonly type: 'string';
                  };
                  readonly confidence: {
                    readonly title: 'Confidence';
                    readonly type: 'integer';
                  };
                };
              };
            };
            readonly original_response: {
              readonly default: any;
              readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
              readonly title: 'Original Response';
            };
            readonly status: {
              readonly title: 'Status';
              readonly enum: readonly ['sucess', 'fail'];
              readonly type: 'string';
              readonly description: '`sucess` `fail`';
            };
          };
        };
        readonly cohere: {
          readonly required: readonly ['status'];
          readonly title: 'textcustom_classificationCustomClassificationDataClass';
          readonly type: 'object';
          readonly properties: {
            readonly classifications: {
              readonly title: 'Classifications';
              readonly type: 'array';
              readonly items: {
                readonly required: readonly ['input', 'label', 'confidence'];
                readonly title: 'ItemCustomClassificationDataClass';
                readonly type: 'object';
                readonly properties: {
                  readonly input: {
                    readonly title: 'Input';
                    readonly type: 'string';
                  };
                  readonly label: {
                    readonly title: 'Label';
                    readonly type: 'string';
                  };
                  readonly confidence: {
                    readonly title: 'Confidence';
                    readonly type: 'integer';
                  };
                };
              };
            };
            readonly original_response: {
              readonly default: any;
              readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
              readonly title: 'Original Response';
            };
            readonly status: {
              readonly title: 'Status';
              readonly enum: readonly ['sucess', 'fail'];
              readonly type: 'string';
              readonly description: '`sucess` `fail`';
            };
          };
        };
      };
      readonly title: 'textcustom_classificationResponseModel';
      readonly type: 'object';
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '400': {
      readonly type: 'object';
      readonly properties: {
        readonly error: {
          readonly type: 'object';
          readonly properties: {
            readonly type: {
              readonly type: 'string';
            };
            readonly message: {
              readonly type: 'object';
              readonly properties: {
                readonly '<parameter_name>': {
                  readonly type: 'array';
                  readonly items: {
                    readonly type: 'string';
                  };
                };
              };
              readonly required: readonly ['<parameter_name>'];
            };
          };
          readonly required: readonly ['message', 'type'];
        };
      };
      readonly required: readonly ['error'];
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '403': {
      readonly type: 'object';
      readonly properties: {
        readonly error: {
          readonly type: 'object';
          readonly properties: {
            readonly type: {
              readonly type: 'string';
            };
            readonly message: {
              readonly type: 'string';
            };
          };
          readonly required: readonly ['message', 'type'];
        };
      };
      readonly required: readonly ['error'];
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '404': {
      readonly type: 'object';
      readonly properties: {
        readonly details: {
          readonly type: 'string';
          readonly default: 'Not Found';
        };
      };
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '500': {
      readonly type: 'object';
      readonly properties: {
        readonly error: {
          readonly type: 'object';
          readonly properties: {
            readonly type: {
              readonly type: 'string';
            };
            readonly message: {
              readonly type: 'string';
            };
          };
          readonly required: readonly ['message', 'type'];
        };
      };
      readonly required: readonly ['error'];
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
  };
};
declare const TextCustomNamedEntityRecognitionCreate: {
  readonly body: {
    readonly type: 'object';
    readonly properties: {
      readonly providers: {
        readonly type: 'string';
        readonly minLength: 1;
        readonly description: "It can be one (ex: **'amazon'** or **'google'**) or multiple provider(s) (ex: **'amazon,microsoft,google'**)             that the data will be redirected to in order to get the processed results.";
        readonly examples: readonly ['openai,cohere'];
      };
      readonly fallback_providers: {
        readonly type: 'string';
        readonly minLength: 1;
        readonly description: "Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.\n    To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.\n\nThey will be tried in the same order they are input, and it will stop to the first provider who doesn't fail.\n\n\n*Doesn't work with async subfeatures.*\n    ";
      };
      readonly response_as_dict: {
        readonly type: 'boolean';
        readonly default: true;
        readonly description: "Optional : When set to **true** (default), the response is an object of responses with providers names as keys : <br> \n                  ``` {'google' : { 'status': 'success', ... }, } ``` <br>\n                When set to **false** the response structure is a list of response objects : <br> \n                   ``` [{'status': 'success', 'provider': 'google' ... }, ] ```. <br> \n                  ";
      };
      readonly attributes_as_list: {
        readonly type: 'boolean';
        readonly default: false;
        readonly description: "Optional : When set to **false** (default) the structure of the extracted items is list of objects having different attributes : <br>\n     ```{'items': [{'attribute_1': 'x1','attribute_2': 'y2'}, ... ]}``` <br>\n     When it is set to **true**, the response contains an object with each attribute as a list : <br>\n     ```{ 'attribute_1': ['x1','x2', ...], 'attribute_2': [y1, y2, ...]}``` ";
      };
      readonly show_original_response: {
        readonly type: 'boolean';
        readonly default: false;
        readonly description: 'Optional : Shows the original response of the provider.<br>\n        When set to **true**, a new attribute *original_response* will appear in the response object.';
      };
      readonly text: {
        readonly type: 'string';
        readonly minLength: 1;
        readonly description: 'Enter your input text.';
        readonly examples: readonly [
          'Barack Hussein Obama is an American politician who served as the 44th president of the United States from 2009 to 2017. A member of the Democratic Party, Obama was the first African-American president of the United States. He previously served as a U.S. senator from Illinois from 2005 to 2008 and as an Illinois state senator from 1997 to 2004.'
        ];
      };
      readonly entities: {
        readonly type: 'array';
        readonly items: {
          readonly type: 'string';
          readonly minLength: 1;
          readonly examples: readonly ['Politician'];
        };
        readonly description: "List of entities (at least two) to extract from your text eg : ['job', 'country'].";
        readonly minItems: 2;
      };
      readonly examples: {
        readonly type: 'array';
        readonly items: {
          readonly type: 'object';
          readonly additionalProperties: true;
        };
        readonly description: "List of examples eg : [{'text': 'an input text', 'entities' : [{'entity':'entity_1', 'category':'category_1'}, ...]}, ...]";
      };
    };
    readonly required: readonly ['entities', 'providers', 'text'];
    readonly $schema: 'http://json-schema.org/draft-04/schema#';
  };
  readonly response: {
    readonly '200': {
      readonly properties: {
        readonly openai: {
          readonly required: readonly ['status'];
          readonly title: 'textcustom_named_entity_recognitionCustomNamedEntityRecognitionDataClass';
          readonly type: 'object';
          readonly properties: {
            readonly items: {
              readonly title: 'Items';
              readonly type: 'array';
              readonly items: {
                readonly required: readonly ['entity', 'category'];
                readonly title: 'InfosCustomNamedEntityRecognitionDataClass';
                readonly type: 'object';
                readonly properties: {
                  readonly entity: {
                    readonly title: 'Entity';
                    readonly type: 'string';
                  };
                  readonly category: {
                    readonly title: 'Category';
                    readonly type: 'string';
                  };
                };
              };
            };
            readonly original_response: {
              readonly default: any;
              readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
              readonly title: 'Original Response';
            };
            readonly status: {
              readonly title: 'Status';
              readonly enum: readonly ['sucess', 'fail'];
              readonly type: 'string';
              readonly description: '`sucess` `fail`';
            };
          };
        };
        readonly cohere: {
          readonly required: readonly ['status'];
          readonly title: 'textcustom_named_entity_recognitionCustomNamedEntityRecognitionDataClass';
          readonly type: 'object';
          readonly properties: {
            readonly items: {
              readonly title: 'Items';
              readonly type: 'array';
              readonly items: {
                readonly required: readonly ['entity', 'category'];
                readonly title: 'InfosCustomNamedEntityRecognitionDataClass';
                readonly type: 'object';
                readonly properties: {
                  readonly entity: {
                    readonly title: 'Entity';
                    readonly type: 'string';
                  };
                  readonly category: {
                    readonly title: 'Category';
                    readonly type: 'string';
                  };
                };
              };
            };
            readonly original_response: {
              readonly default: any;
              readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
              readonly title: 'Original Response';
            };
            readonly status: {
              readonly title: 'Status';
              readonly enum: readonly ['sucess', 'fail'];
              readonly type: 'string';
              readonly description: '`sucess` `fail`';
            };
          };
        };
        readonly 'eden-ai': {
          readonly required: readonly ['status'];
          readonly title: 'textcustom_named_entity_recognitionCustomNamedEntityRecognitionDataClass';
          readonly type: 'object';
          readonly properties: {
            readonly items: {
              readonly title: 'Items';
              readonly type: 'array';
              readonly items: {
                readonly required: readonly ['entity', 'category'];
                readonly title: 'InfosCustomNamedEntityRecognitionDataClass';
                readonly type: 'object';
                readonly properties: {
                  readonly entity: {
                    readonly title: 'Entity';
                    readonly type: 'string';
                  };
                  readonly category: {
                    readonly title: 'Category';
                    readonly type: 'string';
                  };
                };
              };
            };
            readonly original_response: {
              readonly default: any;
              readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
              readonly title: 'Original Response';
            };
            readonly status: {
              readonly title: 'Status';
              readonly enum: readonly ['sucess', 'fail'];
              readonly type: 'string';
              readonly description: '`sucess` `fail`';
            };
          };
        };
      };
      readonly title: 'textcustom_named_entity_recognitionResponseModel';
      readonly type: 'object';
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '400': {
      readonly type: 'object';
      readonly properties: {
        readonly error: {
          readonly type: 'object';
          readonly properties: {
            readonly type: {
              readonly type: 'string';
            };
            readonly message: {
              readonly type: 'object';
              readonly properties: {
                readonly '<parameter_name>': {
                  readonly type: 'array';
                  readonly items: {
                    readonly type: 'string';
                  };
                };
              };
              readonly required: readonly ['<parameter_name>'];
            };
          };
          readonly required: readonly ['message', 'type'];
        };
      };
      readonly required: readonly ['error'];
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '403': {
      readonly type: 'object';
      readonly properties: {
        readonly error: {
          readonly type: 'object';
          readonly properties: {
            readonly type: {
              readonly type: 'string';
            };
            readonly message: {
              readonly type: 'string';
            };
          };
          readonly required: readonly ['message', 'type'];
        };
      };
      readonly required: readonly ['error'];
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '404': {
      readonly type: 'object';
      readonly properties: {
        readonly details: {
          readonly type: 'string';
          readonly default: 'Not Found';
        };
      };
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '500': {
      readonly type: 'object';
      readonly properties: {
        readonly error: {
          readonly type: 'object';
          readonly properties: {
            readonly type: {
              readonly type: 'string';
            };
            readonly message: {
              readonly type: 'string';
            };
          };
          readonly required: readonly ['message', 'type'];
        };
      };
      readonly required: readonly ['error'];
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
  };
};
declare const TextEmbeddingsCreate: {
  readonly body: {
    readonly type: 'object';
    readonly properties: {
      readonly providers: {
        readonly type: 'string';
        readonly minLength: 1;
        readonly description: "It can be one (ex: **'amazon'** or **'google'**) or multiple provider(s) (ex: **'amazon,microsoft,google'**)             that the data will be redirected to in order to get the processed results.";
        readonly examples: readonly ['openai,google'];
      };
      readonly fallback_providers: {
        readonly type: 'string';
        readonly minLength: 1;
        readonly description: "Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.\n    To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.\n\nThey will be tried in the same order they are input, and it will stop to the first provider who doesn't fail.\n\n\n*Doesn't work with async subfeatures.*\n    ";
      };
      readonly response_as_dict: {
        readonly type: 'boolean';
        readonly default: true;
        readonly description: "Optional : When set to **true** (default), the response is an object of responses with providers names as keys : <br> \n                  ``` {'google' : { 'status': 'success', ... }, } ``` <br>\n                When set to **false** the response structure is a list of response objects : <br> \n                   ``` [{'status': 'success', 'provider': 'google' ... }, ] ```. <br> \n                  ";
      };
      readonly attributes_as_list: {
        readonly type: 'boolean';
        readonly default: false;
        readonly description: "Optional : When set to **false** (default) the structure of the extracted items is list of objects having different attributes : <br>\n     ```{'items': [{'attribute_1': 'x1','attribute_2': 'y2'}, ... ]}``` <br>\n     When it is set to **true**, the response contains an object with each attribute as a list : <br>\n     ```{ 'attribute_1': ['x1','x2', ...], 'attribute_2': [y1, y2, ...]}``` ";
      };
      readonly show_original_response: {
        readonly type: 'boolean';
        readonly default: false;
        readonly description: 'Optional : Shows the original response of the provider.<br>\n        When set to **true**, a new attribute *original_response* will appear in the response object.';
      };
      readonly texts: {
        readonly type: 'array';
        readonly items: {
          readonly type: 'string';
          readonly minLength: 1;
          readonly examples: readonly ['Hello world'];
        };
        readonly description: 'List of texts to transform into embeddings.';
      };
    };
    readonly required: readonly ['providers', 'texts'];
    readonly $schema: 'http://json-schema.org/draft-04/schema#';
  };
  readonly response: {
    readonly '200': {
      readonly properties: {
        readonly openai: {
          readonly required: readonly ['status'];
          readonly title: 'textembeddingsEmbeddingsDataClass';
          readonly type: 'object';
          readonly properties: {
            readonly items: {
              readonly title: 'Items';
              readonly type: 'array';
              readonly items: {
                readonly required: readonly ['embedding'];
                readonly title: 'EmbeddingDataClass';
                readonly type: 'object';
                readonly properties: {
                  readonly embedding: {
                    readonly title: 'Embedding';
                    readonly type: 'array';
                    readonly items: {
                      readonly type: 'integer';
                    };
                  };
                };
              };
            };
            readonly original_response: {
              readonly default: any;
              readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
              readonly title: 'Original Response';
            };
            readonly status: {
              readonly title: 'Status';
              readonly enum: readonly ['sucess', 'fail'];
              readonly type: 'string';
              readonly description: '`sucess` `fail`';
            };
          };
        };
        readonly google: {
          readonly required: readonly ['status'];
          readonly title: 'textembeddingsEmbeddingsDataClass';
          readonly type: 'object';
          readonly properties: {
            readonly items: {
              readonly title: 'Items';
              readonly type: 'array';
              readonly items: {
                readonly required: readonly ['embedding'];
                readonly title: 'EmbeddingDataClass';
                readonly type: 'object';
                readonly properties: {
                  readonly embedding: {
                    readonly title: 'Embedding';
                    readonly type: 'array';
                    readonly items: {
                      readonly type: 'integer';
                    };
                  };
                };
              };
            };
            readonly original_response: {
              readonly default: any;
              readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
              readonly title: 'Original Response';
            };
            readonly status: {
              readonly title: 'Status';
              readonly enum: readonly ['sucess', 'fail'];
              readonly type: 'string';
              readonly description: '`sucess` `fail`';
            };
          };
        };
        readonly cohere: {
          readonly required: readonly ['status'];
          readonly title: 'textembeddingsEmbeddingsDataClass';
          readonly type: 'object';
          readonly properties: {
            readonly items: {
              readonly title: 'Items';
              readonly type: 'array';
              readonly items: {
                readonly required: readonly ['embedding'];
                readonly title: 'EmbeddingDataClass';
                readonly type: 'object';
                readonly properties: {
                  readonly embedding: {
                    readonly title: 'Embedding';
                    readonly type: 'array';
                    readonly items: {
                      readonly type: 'integer';
                    };
                  };
                };
              };
            };
            readonly original_response: {
              readonly default: any;
              readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
              readonly title: 'Original Response';
            };
            readonly status: {
              readonly title: 'Status';
              readonly enum: readonly ['sucess', 'fail'];
              readonly type: 'string';
              readonly description: '`sucess` `fail`';
            };
          };
        };
      };
      readonly title: 'textembeddingsResponseModel';
      readonly type: 'object';
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '400': {
      readonly type: 'object';
      readonly properties: {
        readonly error: {
          readonly type: 'object';
          readonly properties: {
            readonly type: {
              readonly type: 'string';
            };
            readonly message: {
              readonly type: 'object';
              readonly properties: {
                readonly '<parameter_name>': {
                  readonly type: 'array';
                  readonly items: {
                    readonly type: 'string';
                  };
                };
              };
              readonly required: readonly ['<parameter_name>'];
            };
          };
          readonly required: readonly ['message', 'type'];
        };
      };
      readonly required: readonly ['error'];
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '403': {
      readonly type: 'object';
      readonly properties: {
        readonly error: {
          readonly type: 'object';
          readonly properties: {
            readonly type: {
              readonly type: 'string';
            };
            readonly message: {
              readonly type: 'string';
            };
          };
          readonly required: readonly ['message', 'type'];
        };
      };
      readonly required: readonly ['error'];
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '404': {
      readonly type: 'object';
      readonly properties: {
        readonly details: {
          readonly type: 'string';
          readonly default: 'Not Found';
        };
      };
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '500': {
      readonly type: 'object';
      readonly properties: {
        readonly error: {
          readonly type: 'object';
          readonly properties: {
            readonly type: {
              readonly type: 'string';
            };
            readonly message: {
              readonly type: 'string';
            };
          };
          readonly required: readonly ['message', 'type'];
        };
      };
      readonly required: readonly ['error'];
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
  };
};
declare const TextEntitySentimentCreate: {
  readonly body: {
    readonly type: 'object';
    readonly properties: {
      readonly providers: {
        readonly type: 'string';
        readonly minLength: 1;
        readonly description: "It can be one (ex: **'amazon'** or **'google'**) or multiple provider(s) (ex: **'amazon,microsoft,google'**)             that the data will be redirected to in order to get the processed results.";
        readonly examples: readonly ['google,amazon'];
      };
      readonly fallback_providers: {
        readonly type: 'string';
        readonly minLength: 1;
        readonly description: "Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.\n    To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.\n\nThey will be tried in the same order they are input, and it will stop to the first provider who doesn't fail.\n\n\n*Doesn't work with async subfeatures.*\n    ";
      };
      readonly response_as_dict: {
        readonly type: 'boolean';
        readonly default: true;
        readonly description: "Optional : When set to **true** (default), the response is an object of responses with providers names as keys : <br> \n                  ``` {'google' : { 'status': 'success', ... }, } ``` <br>\n                When set to **false** the response structure is a list of response objects : <br> \n                   ``` [{'status': 'success', 'provider': 'google' ... }, ] ```. <br> \n                  ";
      };
      readonly attributes_as_list: {
        readonly type: 'boolean';
        readonly default: false;
        readonly description: "Optional : When set to **false** (default) the structure of the extracted items is list of objects having different attributes : <br>\n     ```{'items': [{'attribute_1': 'x1','attribute_2': 'y2'}, ... ]}``` <br>\n     When it is set to **true**, the response contains an object with each attribute as a list : <br>\n     ```{ 'attribute_1': ['x1','x2', ...], 'attribute_2': [y1, y2, ...]}``` ";
      };
      readonly show_original_response: {
        readonly type: 'boolean';
        readonly default: false;
        readonly description: 'Optional : Shows the original response of the provider.<br>\n        When set to **true**, a new attribute *original_response* will appear in the response object.';
      };
      readonly text: {
        readonly type: 'string';
        readonly minLength: 1;
        readonly description: 'Text to analyze';
        readonly examples: readonly [
          "Overall I am satisfied with my experience at Amazon, but two areas of major improvement needed. First is the product reviews and pricing. There are thousands of positive reviews for so many items, and it's clear that the reviews are bogus or not really associated with that product. There needs to be a way to only view products sold by Amazon directly, because many market sellers way overprice items that can be purchased cheaper elsewhere (like Walmart, Target, etc). The second issue is they make it too difficult to get help when there's an issue with an order."
        ];
      };
      readonly language: {
        readonly type: readonly ['string', 'null'];
        readonly description: 'Language code for the language the input text is written in (eg: en, fr).';
        readonly examples: readonly ['en'];
      };
    };
    readonly required: readonly ['providers', 'text'];
    readonly $schema: 'http://json-schema.org/draft-04/schema#';
  };
  readonly response: {
    readonly '200': {
      readonly properties: {
        readonly google: {
          readonly required: readonly ['items', 'status'];
          readonly title: 'textentity_sentimentEntitySentimentDataClass';
          readonly type: 'object';
          readonly properties: {
            readonly items: {
              readonly title: 'Items';
              readonly type: 'array';
              readonly items: {
                readonly required: readonly ['type', 'text', 'sentiment'];
                readonly title: 'Entity';
                readonly type: 'object';
                readonly properties: {
                  readonly type: {
                    readonly description: 'Recognized Entity type';
                    readonly title: 'Type';
                    readonly type: 'string';
                  };
                  readonly text: {
                    readonly description: 'Text corresponding to the entity';
                    readonly title: 'Text';
                    readonly type: 'string';
                  };
                  readonly sentiment: {
                    readonly title: 'Sentiment';
                    readonly enum: readonly ['Positive', 'Negative', 'Neutral', 'Mixed'];
                    readonly type: 'string';
                    readonly description: '`Positive` `Negative` `Neutral` `Mixed`';
                  };
                  readonly begin_offset: {
                    readonly default: any;
                    readonly title: 'Begin Offset';
                    readonly type: 'integer';
                  };
                  readonly end_offset: {
                    readonly default: any;
                    readonly title: 'End Offset';
                    readonly type: 'integer';
                  };
                };
              };
            };
            readonly original_response: {
              readonly default: any;
              readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
              readonly title: 'Original Response';
            };
            readonly status: {
              readonly title: 'Status';
              readonly enum: readonly ['sucess', 'fail'];
              readonly type: 'string';
              readonly description: '`sucess` `fail`';
            };
          };
        };
        readonly amazon: {
          readonly required: readonly ['items', 'status'];
          readonly title: 'textentity_sentimentEntitySentimentDataClass';
          readonly type: 'object';
          readonly properties: {
            readonly items: {
              readonly title: 'Items';
              readonly type: 'array';
              readonly items: {
                readonly required: readonly ['type', 'text', 'sentiment'];
                readonly title: 'Entity';
                readonly type: 'object';
                readonly properties: {
                  readonly type: {
                    readonly description: 'Recognized Entity type';
                    readonly title: 'Type';
                    readonly type: 'string';
                  };
                  readonly text: {
                    readonly description: 'Text corresponding to the entity';
                    readonly title: 'Text';
                    readonly type: 'string';
                  };
                  readonly sentiment: {
                    readonly title: 'Sentiment';
                    readonly enum: readonly ['Positive', 'Negative', 'Neutral', 'Mixed'];
                    readonly type: 'string';
                    readonly description: '`Positive` `Negative` `Neutral` `Mixed`';
                  };
                  readonly begin_offset: {
                    readonly default: any;
                    readonly title: 'Begin Offset';
                    readonly type: 'integer';
                  };
                  readonly end_offset: {
                    readonly default: any;
                    readonly title: 'End Offset';
                    readonly type: 'integer';
                  };
                };
              };
            };
            readonly original_response: {
              readonly default: any;
              readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
              readonly title: 'Original Response';
            };
            readonly status: {
              readonly title: 'Status';
              readonly enum: readonly ['sucess', 'fail'];
              readonly type: 'string';
              readonly description: '`sucess` `fail`';
            };
          };
        };
      };
      readonly title: 'textentity_sentimentResponseModel';
      readonly type: 'object';
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '400': {
      readonly type: 'object';
      readonly properties: {
        readonly error: {
          readonly type: 'object';
          readonly properties: {
            readonly type: {
              readonly type: 'string';
            };
            readonly message: {
              readonly type: 'object';
              readonly properties: {
                readonly '<parameter_name>': {
                  readonly type: 'array';
                  readonly items: {
                    readonly type: 'string';
                  };
                };
              };
              readonly required: readonly ['<parameter_name>'];
            };
          };
          readonly required: readonly ['message', 'type'];
        };
      };
      readonly required: readonly ['error'];
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '403': {
      readonly type: 'object';
      readonly properties: {
        readonly error: {
          readonly type: 'object';
          readonly properties: {
            readonly type: {
              readonly type: 'string';
            };
            readonly message: {
              readonly type: 'string';
            };
          };
          readonly required: readonly ['message', 'type'];
        };
      };
      readonly required: readonly ['error'];
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '404': {
      readonly type: 'object';
      readonly properties: {
        readonly details: {
          readonly type: 'string';
          readonly default: 'Not Found';
        };
      };
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '500': {
      readonly type: 'object';
      readonly properties: {
        readonly error: {
          readonly type: 'object';
          readonly properties: {
            readonly type: {
              readonly type: 'string';
            };
            readonly message: {
              readonly type: 'string';
            };
          };
          readonly required: readonly ['message', 'type'];
        };
      };
      readonly required: readonly ['error'];
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
  };
};
declare const TextGenerationCreate: {
  readonly body: {
    readonly type: 'object';
    readonly properties: {
      readonly providers: {
        readonly type: 'string';
        readonly minLength: 1;
        readonly description: "It can be one (ex: **'amazon'** or **'google'**) or multiple provider(s) (ex: **'amazon,microsoft,google'**)             that the data will be redirected to in order to get the processed results.";
        readonly examples: readonly ['cohere,openai,google'];
      };
      readonly fallback_providers: {
        readonly type: 'string';
        readonly minLength: 1;
        readonly description: "Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.\n    To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.\n\nThey will be tried in the same order they are input, and it will stop to the first provider who doesn't fail.\n\n\n*Doesn't work with async subfeatures.*\n    ";
      };
      readonly response_as_dict: {
        readonly type: 'boolean';
        readonly default: true;
        readonly description: "Optional : When set to **true** (default), the response is an object of responses with providers names as keys : <br> \n                  ``` {'google' : { 'status': 'success', ... }, } ``` <br>\n                When set to **false** the response structure is a list of response objects : <br> \n                   ``` [{'status': 'success', 'provider': 'google' ... }, ] ```. <br> \n                  ";
      };
      readonly attributes_as_list: {
        readonly type: 'boolean';
        readonly default: false;
        readonly description: "Optional : When set to **false** (default) the structure of the extracted items is list of objects having different attributes : <br>\n     ```{'items': [{'attribute_1': 'x1','attribute_2': 'y2'}, ... ]}``` <br>\n     When it is set to **true**, the response contains an object with each attribute as a list : <br>\n     ```{ 'attribute_1': ['x1','x2', ...], 'attribute_2': [y1, y2, ...]}``` ";
      };
      readonly show_original_response: {
        readonly type: 'boolean';
        readonly default: false;
        readonly description: 'Optional : Shows the original response of the provider.<br>\n        When set to **true**, a new attribute *original_response* will appear in the response object.';
      };
      readonly settings: {
        readonly type: readonly ['object', 'null'];
        readonly additionalProperties: {
          readonly type: 'string';
          readonly minLength: 1;
          readonly description: 'The model id/name specified for the provider';
          readonly maxLength: 50;
        };
        readonly description: "A dictionnary or a json object to specify specific models to use for some providers. <br>                     It can be in the following format: {'google' : 'google_model', ibm': 'ibm_model'...}.\n                     **Caution**: setting models can be done only with `Content-Type` : `application/json`.\n                     ";
      };
      readonly text: {
        readonly type: 'string';
        readonly minLength: 1;
        readonly description: 'Enter your prompt';
        readonly examples: readonly [
          'The following is a conversation with an AI assistant. The assistant is helpful, creative, clever, and very friendly.\n\nHuman: Hello, who are you?'
        ];
      };
      readonly temperature: {
        readonly type: 'number';
        readonly format: 'double';
        readonly maximum: 1;
        readonly minimum: 0;
        readonly default: 0;
        readonly description: 'Higher values mean the model will take more risks and value 0 (argmax sampling) works better for scenarios with a well-defined answer.';
      };
      readonly max_tokens: {
        readonly type: 'integer';
        readonly maximum: 2048;
        readonly minimum: 1;
        readonly default: 1000;
        readonly description: "The maximum number of tokens to generate in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length.";
        readonly examples: readonly [10];
      };
    };
    readonly required: readonly ['providers', 'text'];
    readonly $schema: 'http://json-schema.org/draft-04/schema#';
  };
  readonly response: {
    readonly '200': {
      readonly properties: {
        readonly openai: {
          readonly required: readonly ['generated_text', 'status'];
          readonly title: 'textgenerationGenerationDataClass';
          readonly type: 'object';
          readonly properties: {
            readonly generated_text: {
              readonly title: 'Generated Text';
              readonly type: 'string';
            };
            readonly original_response: {
              readonly default: any;
              readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
              readonly title: 'Original Response';
            };
            readonly status: {
              readonly title: 'Status';
              readonly enum: readonly ['sucess', 'fail'];
              readonly type: 'string';
              readonly description: '`sucess` `fail`';
            };
          };
        };
        readonly google: {
          readonly required: readonly ['generated_text', 'status'];
          readonly title: 'textgenerationGenerationDataClass';
          readonly type: 'object';
          readonly properties: {
            readonly generated_text: {
              readonly title: 'Generated Text';
              readonly type: 'string';
            };
            readonly original_response: {
              readonly default: any;
              readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
              readonly title: 'Original Response';
            };
            readonly status: {
              readonly title: 'Status';
              readonly enum: readonly ['sucess', 'fail'];
              readonly type: 'string';
              readonly description: '`sucess` `fail`';
            };
          };
        };
        readonly cohere: {
          readonly required: readonly ['generated_text', 'status'];
          readonly title: 'textgenerationGenerationDataClass';
          readonly type: 'object';
          readonly properties: {
            readonly generated_text: {
              readonly title: 'Generated Text';
              readonly type: 'string';
            };
            readonly original_response: {
              readonly default: any;
              readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
              readonly title: 'Original Response';
            };
            readonly status: {
              readonly title: 'Status';
              readonly enum: readonly ['sucess', 'fail'];
              readonly type: 'string';
              readonly description: '`sucess` `fail`';
            };
          };
        };
      };
      readonly title: 'textgenerationResponseModel';
      readonly type: 'object';
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '400': {
      readonly type: 'object';
      readonly properties: {
        readonly error: {
          readonly type: 'object';
          readonly properties: {
            readonly type: {
              readonly type: 'string';
            };
            readonly message: {
              readonly type: 'object';
              readonly properties: {
                readonly '<parameter_name>': {
                  readonly type: 'array';
                  readonly items: {
                    readonly type: 'string';
                  };
                };
              };
              readonly required: readonly ['<parameter_name>'];
            };
          };
          readonly required: readonly ['message', 'type'];
        };
      };
      readonly required: readonly ['error'];
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '403': {
      readonly type: 'object';
      readonly properties: {
        readonly error: {
          readonly type: 'object';
          readonly properties: {
            readonly type: {
              readonly type: 'string';
            };
            readonly message: {
              readonly type: 'string';
            };
          };
          readonly required: readonly ['message', 'type'];
        };
      };
      readonly required: readonly ['error'];
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '404': {
      readonly type: 'object';
      readonly properties: {
        readonly details: {
          readonly type: 'string';
          readonly default: 'Not Found';
        };
      };
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '500': {
      readonly type: 'object';
      readonly properties: {
        readonly error: {
          readonly type: 'object';
          readonly properties: {
            readonly type: {
              readonly type: 'string';
            };
            readonly message: {
              readonly type: 'string';
            };
          };
          readonly required: readonly ['message', 'type'];
        };
      };
      readonly required: readonly ['error'];
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
  };
};
declare const TextKeywordExtractionCreate: {
  readonly body: {
    readonly type: 'object';
    readonly properties: {
      readonly providers: {
        readonly type: 'string';
        readonly minLength: 1;
        readonly description: "It can be one (ex: **'amazon'** or **'google'**) or multiple provider(s) (ex: **'amazon,microsoft,google'**)             that the data will be redirected to in order to get the processed results.";
        readonly examples: readonly ['microsoft,tenstorrent,oneai,ibm,emvista,amazon,openai'];
      };
      readonly fallback_providers: {
        readonly type: 'string';
        readonly minLength: 1;
        readonly description: "Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.\n    To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.\n\nThey will be tried in the same order they are input, and it will stop to the first provider who doesn't fail.\n\n\n*Doesn't work with async subfeatures.*\n    ";
      };
      readonly response_as_dict: {
        readonly type: 'boolean';
        readonly default: true;
        readonly description: "Optional : When set to **true** (default), the response is an object of responses with providers names as keys : <br> \n                  ``` {'google' : { 'status': 'success', ... }, } ``` <br>\n                When set to **false** the response structure is a list of response objects : <br> \n                   ``` [{'status': 'success', 'provider': 'google' ... }, ] ```. <br> \n                  ";
      };
      readonly attributes_as_list: {
        readonly type: 'boolean';
        readonly default: false;
        readonly description: "Optional : When set to **false** (default) the structure of the extracted items is list of objects having different attributes : <br>\n     ```{'items': [{'attribute_1': 'x1','attribute_2': 'y2'}, ... ]}``` <br>\n     When it is set to **true**, the response contains an object with each attribute as a list : <br>\n     ```{ 'attribute_1': ['x1','x2', ...], 'attribute_2': [y1, y2, ...]}``` ";
      };
      readonly show_original_response: {
        readonly type: 'boolean';
        readonly default: false;
        readonly description: 'Optional : Shows the original response of the provider.<br>\n        When set to **true**, a new attribute *original_response* will appear in the response object.';
      };
      readonly text: {
        readonly type: 'string';
        readonly minLength: 1;
        readonly description: 'Text to analyze';
        readonly examples: readonly [
          'Barack Hussein Obama is an American politician who served as the 44th president of the United States from 2009 to 2017. A member of the Democratic Party, Obama was the first African-American president of the United States. He previously served as a U.S. senator from Illinois from 2005 to 2008 and as an Illinois state senator from 1997 to 2004.'
        ];
      };
      readonly language: {
        readonly type: readonly ['string', 'null'];
        readonly description: 'Language code for the language the input text is written in (eg: en, fr).';
        readonly examples: readonly ['en'];
      };
    };
    readonly required: readonly ['providers', 'text'];
    readonly $schema: 'http://json-schema.org/draft-04/schema#';
  };
  readonly response: {
    readonly '200': {
      readonly properties: {
        readonly emvista: {
          readonly required: readonly ['status'];
          readonly title: 'textkeyword_extractionKeywordExtractionDataClass';
          readonly type: 'object';
          readonly properties: {
            readonly items: {
              readonly title: 'Items';
              readonly type: 'array';
              readonly items: {
                readonly required: readonly ['keyword', 'importance'];
                readonly title: 'InfosKeywordExtractionDataClass';
                readonly type: 'object';
                readonly properties: {
                  readonly keyword: {
                    readonly title: 'Keyword';
                    readonly type: 'string';
                  };
                  readonly importance: {
                    readonly title: 'Importance';
                    readonly type: 'integer';
                  };
                };
              };
            };
            readonly original_response: {
              readonly default: any;
              readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
              readonly title: 'Original Response';
            };
            readonly status: {
              readonly title: 'Status';
              readonly enum: readonly ['sucess', 'fail'];
              readonly type: 'string';
              readonly description: '`sucess` `fail`';
            };
          };
        };
        readonly tenstorrent: {
          readonly required: readonly ['status'];
          readonly title: 'textkeyword_extractionKeywordExtractionDataClass';
          readonly type: 'object';
          readonly properties: {
            readonly items: {
              readonly title: 'Items';
              readonly type: 'array';
              readonly items: {
                readonly required: readonly ['keyword', 'importance'];
                readonly title: 'InfosKeywordExtractionDataClass';
                readonly type: 'object';
                readonly properties: {
                  readonly keyword: {
                    readonly title: 'Keyword';
                    readonly type: 'string';
                  };
                  readonly importance: {
                    readonly title: 'Importance';
                    readonly type: 'integer';
                  };
                };
              };
            };
            readonly original_response: {
              readonly default: any;
              readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
              readonly title: 'Original Response';
            };
            readonly status: {
              readonly title: 'Status';
              readonly enum: readonly ['sucess', 'fail'];
              readonly type: 'string';
              readonly description: '`sucess` `fail`';
            };
          };
        };
        readonly microsoft: {
          readonly required: readonly ['status'];
          readonly title: 'textkeyword_extractionKeywordExtractionDataClass';
          readonly type: 'object';
          readonly properties: {
            readonly items: {
              readonly title: 'Items';
              readonly type: 'array';
              readonly items: {
                readonly required: readonly ['keyword', 'importance'];
                readonly title: 'InfosKeywordExtractionDataClass';
                readonly type: 'object';
                readonly properties: {
                  readonly keyword: {
                    readonly title: 'Keyword';
                    readonly type: 'string';
                  };
                  readonly importance: {
                    readonly title: 'Importance';
                    readonly type: 'integer';
                  };
                };
              };
            };
            readonly original_response: {
              readonly default: any;
              readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
              readonly title: 'Original Response';
            };
            readonly status: {
              readonly title: 'Status';
              readonly enum: readonly ['sucess', 'fail'];
              readonly type: 'string';
              readonly description: '`sucess` `fail`';
            };
          };
        };
        readonly ibm: {
          readonly required: readonly ['status'];
          readonly title: 'textkeyword_extractionKeywordExtractionDataClass';
          readonly type: 'object';
          readonly properties: {
            readonly items: {
              readonly title: 'Items';
              readonly type: 'array';
              readonly items: {
                readonly required: readonly ['keyword', 'importance'];
                readonly title: 'InfosKeywordExtractionDataClass';
                readonly type: 'object';
                readonly properties: {
                  readonly keyword: {
                    readonly title: 'Keyword';
                    readonly type: 'string';
                  };
                  readonly importance: {
                    readonly title: 'Importance';
                    readonly type: 'integer';
                  };
                };
              };
            };
            readonly original_response: {
              readonly default: any;
              readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
              readonly title: 'Original Response';
            };
            readonly status: {
              readonly title: 'Status';
              readonly enum: readonly ['sucess', 'fail'];
              readonly type: 'string';
              readonly description: '`sucess` `fail`';
            };
          };
        };
        readonly oneai: {
          readonly required: readonly ['status'];
          readonly title: 'textkeyword_extractionKeywordExtractionDataClass';
          readonly type: 'object';
          readonly properties: {
            readonly items: {
              readonly title: 'Items';
              readonly type: 'array';
              readonly items: {
                readonly required: readonly ['keyword', 'importance'];
                readonly title: 'InfosKeywordExtractionDataClass';
                readonly type: 'object';
                readonly properties: {
                  readonly keyword: {
                    readonly title: 'Keyword';
                    readonly type: 'string';
                  };
                  readonly importance: {
                    readonly title: 'Importance';
                    readonly type: 'integer';
                  };
                };
              };
            };
            readonly original_response: {
              readonly default: any;
              readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
              readonly title: 'Original Response';
            };
            readonly status: {
              readonly title: 'Status';
              readonly enum: readonly ['sucess', 'fail'];
              readonly type: 'string';
              readonly description: '`sucess` `fail`';
            };
          };
        };
        readonly openai: {
          readonly required: readonly ['status'];
          readonly title: 'textkeyword_extractionKeywordExtractionDataClass';
          readonly type: 'object';
          readonly properties: {
            readonly items: {
              readonly title: 'Items';
              readonly type: 'array';
              readonly items: {
                readonly required: readonly ['keyword', 'importance'];
                readonly title: 'InfosKeywordExtractionDataClass';
                readonly type: 'object';
                readonly properties: {
                  readonly keyword: {
                    readonly title: 'Keyword';
                    readonly type: 'string';
                  };
                  readonly importance: {
                    readonly title: 'Importance';
                    readonly type: 'integer';
                  };
                };
              };
            };
            readonly original_response: {
              readonly default: any;
              readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
              readonly title: 'Original Response';
            };
            readonly status: {
              readonly title: 'Status';
              readonly enum: readonly ['sucess', 'fail'];
              readonly type: 'string';
              readonly description: '`sucess` `fail`';
            };
          };
        };
        readonly amazon: {
          readonly required: readonly ['status'];
          readonly title: 'textkeyword_extractionKeywordExtractionDataClass';
          readonly type: 'object';
          readonly properties: {
            readonly items: {
              readonly title: 'Items';
              readonly type: 'array';
              readonly items: {
                readonly required: readonly ['keyword', 'importance'];
                readonly title: 'InfosKeywordExtractionDataClass';
                readonly type: 'object';
                readonly properties: {
                  readonly keyword: {
                    readonly title: 'Keyword';
                    readonly type: 'string';
                  };
                  readonly importance: {
                    readonly title: 'Importance';
                    readonly type: 'integer';
                  };
                };
              };
            };
            readonly original_response: {
              readonly default: any;
              readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
              readonly title: 'Original Response';
            };
            readonly status: {
              readonly title: 'Status';
              readonly enum: readonly ['sucess', 'fail'];
              readonly type: 'string';
              readonly description: '`sucess` `fail`';
            };
          };
        };
        readonly 'eden-ai': {
          readonly required: readonly ['status'];
          readonly title: 'textkeyword_extractionKeywordExtractionDataClass';
          readonly type: 'object';
          readonly properties: {
            readonly items: {
              readonly title: 'Items';
              readonly type: 'array';
              readonly items: {
                readonly required: readonly ['keyword', 'importance'];
                readonly title: 'InfosKeywordExtractionDataClass';
                readonly type: 'object';
                readonly properties: {
                  readonly keyword: {
                    readonly title: 'Keyword';
                    readonly type: 'string';
                  };
                  readonly importance: {
                    readonly title: 'Importance';
                    readonly type: 'integer';
                  };
                };
              };
            };
            readonly original_response: {
              readonly default: any;
              readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
              readonly title: 'Original Response';
            };
            readonly status: {
              readonly title: 'Status';
              readonly enum: readonly ['sucess', 'fail'];
              readonly type: 'string';
              readonly description: '`sucess` `fail`';
            };
          };
        };
      };
      readonly title: 'textkeyword_extractionResponseModel';
      readonly type: 'object';
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '400': {
      readonly type: 'object';
      readonly properties: {
        readonly error: {
          readonly type: 'object';
          readonly properties: {
            readonly type: {
              readonly type: 'string';
            };
            readonly message: {
              readonly type: 'object';
              readonly properties: {
                readonly '<parameter_name>': {
                  readonly type: 'array';
                  readonly items: {
                    readonly type: 'string';
                  };
                };
              };
              readonly required: readonly ['<parameter_name>'];
            };
          };
          readonly required: readonly ['message', 'type'];
        };
      };
      readonly required: readonly ['error'];
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '403': {
      readonly type: 'object';
      readonly properties: {
        readonly error: {
          readonly type: 'object';
          readonly properties: {
            readonly type: {
              readonly type: 'string';
            };
            readonly message: {
              readonly type: 'string';
            };
          };
          readonly required: readonly ['message', 'type'];
        };
      };
      readonly required: readonly ['error'];
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '404': {
      readonly type: 'object';
      readonly properties: {
        readonly details: {
          readonly type: 'string';
          readonly default: 'Not Found';
        };
      };
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '500': {
      readonly type: 'object';
      readonly properties: {
        readonly error: {
          readonly type: 'object';
          readonly properties: {
            readonly type: {
              readonly type: 'string';
            };
            readonly message: {
              readonly type: 'string';
            };
          };
          readonly required: readonly ['message', 'type'];
        };
      };
      readonly required: readonly ['error'];
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
  };
};
declare const TextModerationCreate: {
  readonly body: {
    readonly type: 'object';
    readonly properties: {
      readonly providers: {
        readonly type: 'string';
        readonly minLength: 1;
        readonly description: "It can be one (ex: **'amazon'** or **'google'**) or multiple provider(s) (ex: **'amazon,microsoft,google'**)             that the data will be redirected to in order to get the processed results.";
        readonly examples: readonly ['microsoft,openai,google,clarifai'];
      };
      readonly fallback_providers: {
        readonly type: 'string';
        readonly minLength: 1;
        readonly description: "Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.\n    To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.\n\nThey will be tried in the same order they are input, and it will stop to the first provider who doesn't fail.\n\n\n*Doesn't work with async subfeatures.*\n    ";
      };
      readonly response_as_dict: {
        readonly type: 'boolean';
        readonly default: true;
        readonly description: "Optional : When set to **true** (default), the response is an object of responses with providers names as keys : <br> \n                  ``` {'google' : { 'status': 'success', ... }, } ``` <br>\n                When set to **false** the response structure is a list of response objects : <br> \n                   ``` [{'status': 'success', 'provider': 'google' ... }, ] ```. <br> \n                  ";
      };
      readonly attributes_as_list: {
        readonly type: 'boolean';
        readonly default: false;
        readonly description: "Optional : When set to **false** (default) the structure of the extracted items is list of objects having different attributes : <br>\n     ```{'items': [{'attribute_1': 'x1','attribute_2': 'y2'}, ... ]}``` <br>\n     When it is set to **true**, the response contains an object with each attribute as a list : <br>\n     ```{ 'attribute_1': ['x1','x2', ...], 'attribute_2': [y1, y2, ...]}``` ";
      };
      readonly show_original_response: {
        readonly type: 'boolean';
        readonly default: false;
        readonly description: 'Optional : Shows the original response of the provider.<br>\n        When set to **true**, a new attribute *original_response* will appear in the response object.';
      };
      readonly text: {
        readonly type: 'string';
        readonly minLength: 1;
        readonly description: 'Text to analyze';
        readonly examples: readonly [
          'Is this a crap email abcdef@abcd.com, phone: 0617730730, IP: 255.255.255.255, 1 Microsoft Way, Redmond, WA 98052'
        ];
      };
      readonly language: {
        readonly type: readonly ['string', 'null'];
        readonly description: 'Language code for the language the input text is written in (eg: en, fr).';
        readonly examples: readonly ['en'];
      };
    };
    readonly required: readonly ['providers', 'text'];
    readonly $schema: 'http://json-schema.org/draft-04/schema#';
  };
  readonly response: {
    readonly '200': {
      readonly properties: {
        readonly clarifai: {
          readonly required: readonly ['nsfw_likelihood', 'status'];
          readonly title: 'textmoderationModerationDataClass';
          readonly type: 'object';
          readonly properties: {
            readonly nsfw_likelihood: {
              readonly title: 'Nsfw Likelihood';
              readonly type: 'integer';
            };
            readonly items: {
              readonly title: 'Items';
              readonly type: 'array';
              readonly items: {
                readonly required: readonly ['label', 'likelihood'];
                readonly title: 'TextModerationItem';
                readonly type: 'object';
                readonly properties: {
                  readonly label: {
                    readonly title: 'Label';
                    readonly type: 'string';
                  };
                  readonly likelihood: {
                    readonly title: 'Likelihood';
                    readonly type: 'integer';
                  };
                };
              };
            };
            readonly original_response: {
              readonly default: any;
              readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
              readonly title: 'Original Response';
            };
            readonly status: {
              readonly title: 'Status';
              readonly enum: readonly ['sucess', 'fail'];
              readonly type: 'string';
              readonly description: '`sucess` `fail`';
            };
          };
        };
        readonly openai: {
          readonly required: readonly ['nsfw_likelihood', 'status'];
          readonly title: 'textmoderationModerationDataClass';
          readonly type: 'object';
          readonly properties: {
            readonly nsfw_likelihood: {
              readonly title: 'Nsfw Likelihood';
              readonly type: 'integer';
            };
            readonly items: {
              readonly title: 'Items';
              readonly type: 'array';
              readonly items: {
                readonly required: readonly ['label', 'likelihood'];
                readonly title: 'TextModerationItem';
                readonly type: 'object';
                readonly properties: {
                  readonly label: {
                    readonly title: 'Label';
                    readonly type: 'string';
                  };
                  readonly likelihood: {
                    readonly title: 'Likelihood';
                    readonly type: 'integer';
                  };
                };
              };
            };
            readonly original_response: {
              readonly default: any;
              readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
              readonly title: 'Original Response';
            };
            readonly status: {
              readonly title: 'Status';
              readonly enum: readonly ['sucess', 'fail'];
              readonly type: 'string';
              readonly description: '`sucess` `fail`';
            };
          };
        };
        readonly google: {
          readonly required: readonly ['nsfw_likelihood', 'status'];
          readonly title: 'textmoderationModerationDataClass';
          readonly type: 'object';
          readonly properties: {
            readonly nsfw_likelihood: {
              readonly title: 'Nsfw Likelihood';
              readonly type: 'integer';
            };
            readonly items: {
              readonly title: 'Items';
              readonly type: 'array';
              readonly items: {
                readonly required: readonly ['label', 'likelihood'];
                readonly title: 'TextModerationItem';
                readonly type: 'object';
                readonly properties: {
                  readonly label: {
                    readonly title: 'Label';
                    readonly type: 'string';
                  };
                  readonly likelihood: {
                    readonly title: 'Likelihood';
                    readonly type: 'integer';
                  };
                };
              };
            };
            readonly original_response: {
              readonly default: any;
              readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
              readonly title: 'Original Response';
            };
            readonly status: {
              readonly title: 'Status';
              readonly enum: readonly ['sucess', 'fail'];
              readonly type: 'string';
              readonly description: '`sucess` `fail`';
            };
          };
        };
        readonly microsoft: {
          readonly required: readonly ['nsfw_likelihood', 'status'];
          readonly title: 'textmoderationModerationDataClass';
          readonly type: 'object';
          readonly properties: {
            readonly nsfw_likelihood: {
              readonly title: 'Nsfw Likelihood';
              readonly type: 'integer';
            };
            readonly items: {
              readonly title: 'Items';
              readonly type: 'array';
              readonly items: {
                readonly required: readonly ['label', 'likelihood'];
                readonly title: 'TextModerationItem';
                readonly type: 'object';
                readonly properties: {
                  readonly label: {
                    readonly title: 'Label';
                    readonly type: 'string';
                  };
                  readonly likelihood: {
                    readonly title: 'Likelihood';
                    readonly type: 'integer';
                  };
                };
              };
            };
            readonly original_response: {
              readonly default: any;
              readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
              readonly title: 'Original Response';
            };
            readonly status: {
              readonly title: 'Status';
              readonly enum: readonly ['sucess', 'fail'];
              readonly type: 'string';
              readonly description: '`sucess` `fail`';
            };
          };
        };
      };
      readonly title: 'textmoderationResponseModel';
      readonly type: 'object';
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '400': {
      readonly type: 'object';
      readonly properties: {
        readonly error: {
          readonly type: 'object';
          readonly properties: {
            readonly type: {
              readonly type: 'string';
            };
            readonly message: {
              readonly type: 'object';
              readonly properties: {
                readonly '<parameter_name>': {
                  readonly type: 'array';
                  readonly items: {
                    readonly type: 'string';
                  };
                };
              };
              readonly required: readonly ['<parameter_name>'];
            };
          };
          readonly required: readonly ['message', 'type'];
        };
      };
      readonly required: readonly ['error'];
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '403': {
      readonly type: 'object';
      readonly properties: {
        readonly error: {
          readonly type: 'object';
          readonly properties: {
            readonly type: {
              readonly type: 'string';
            };
            readonly message: {
              readonly type: 'string';
            };
          };
          readonly required: readonly ['message', 'type'];
        };
      };
      readonly required: readonly ['error'];
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '404': {
      readonly type: 'object';
      readonly properties: {
        readonly details: {
          readonly type: 'string';
          readonly default: 'Not Found';
        };
      };
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '500': {
      readonly type: 'object';
      readonly properties: {
        readonly error: {
          readonly type: 'object';
          readonly properties: {
            readonly type: {
              readonly type: 'string';
            };
            readonly message: {
              readonly type: 'string';
            };
          };
          readonly required: readonly ['message', 'type'];
        };
      };
      readonly required: readonly ['error'];
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
  };
};
declare const TextNamedEntityRecognitionCreate: {
  readonly body: {
    readonly type: 'object';
    readonly properties: {
      readonly providers: {
        readonly type: 'string';
        readonly minLength: 1;
        readonly description: "It can be one (ex: **'amazon'** or **'google'**) or multiple provider(s) (ex: **'amazon,microsoft,google'**)             that the data will be redirected to in order to get the processed results.";
        readonly examples: readonly [
          'amazon,google,openai,lettria,microsoft,neuralspace,ibm,oneai,tenstorrent'
        ];
      };
      readonly fallback_providers: {
        readonly type: 'string';
        readonly minLength: 1;
        readonly description: "Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.\n    To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.\n\nThey will be tried in the same order they are input, and it will stop to the first provider who doesn't fail.\n\n\n*Doesn't work with async subfeatures.*\n    ";
      };
      readonly response_as_dict: {
        readonly type: 'boolean';
        readonly default: true;
        readonly description: "Optional : When set to **true** (default), the response is an object of responses with providers names as keys : <br> \n                  ``` {'google' : { 'status': 'success', ... }, } ``` <br>\n                When set to **false** the response structure is a list of response objects : <br> \n                   ``` [{'status': 'success', 'provider': 'google' ... }, ] ```. <br> \n                  ";
      };
      readonly attributes_as_list: {
        readonly type: 'boolean';
        readonly default: false;
        readonly description: "Optional : When set to **false** (default) the structure of the extracted items is list of objects having different attributes : <br>\n     ```{'items': [{'attribute_1': 'x1','attribute_2': 'y2'}, ... ]}``` <br>\n     When it is set to **true**, the response contains an object with each attribute as a list : <br>\n     ```{ 'attribute_1': ['x1','x2', ...], 'attribute_2': [y1, y2, ...]}``` ";
      };
      readonly show_original_response: {
        readonly type: 'boolean';
        readonly default: false;
        readonly description: 'Optional : Shows the original response of the provider.<br>\n        When set to **true**, a new attribute *original_response* will appear in the response object.';
      };
      readonly text: {
        readonly type: 'string';
        readonly minLength: 1;
        readonly description: 'Text to analyze';
        readonly examples: readonly [
          'Barack Hussein Obama is an American politician who served as the 44th president of the United States from 2009 to 2017. A member of the Democratic Party, Obama was the first African-American president of the United States. He previously served as a U.S. senator from Illinois from 2005 to 2008 and as an Illinois state senator from 1997 to 2004.'
        ];
      };
      readonly language: {
        readonly type: readonly ['string', 'null'];
        readonly description: 'Language code for the language the input text is written in (eg: en, fr).';
        readonly examples: readonly ['en'];
      };
    };
    readonly required: readonly ['providers', 'text'];
    readonly $schema: 'http://json-schema.org/draft-04/schema#';
  };
  readonly response: {
    readonly '200': {
      readonly properties: {
        readonly lettria: {
          readonly required: readonly ['status'];
          readonly title: 'textnamed_entity_recognitionNamedEntityRecognitionDataClass';
          readonly type: 'object';
          readonly properties: {
            readonly items: {
              readonly title: 'Items';
              readonly type: 'array';
              readonly items: {
                readonly required: readonly ['entity', 'category', 'importance'];
                readonly title: 'InfosNamedEntityRecognitionDataClass';
                readonly type: 'object';
                readonly properties: {
                  readonly entity: {
                    readonly title: 'Entity';
                    readonly type: 'string';
                  };
                  readonly category: {
                    readonly title: 'Category';
                    readonly type: 'string';
                  };
                  readonly importance: {
                    readonly title: 'Importance';
                    readonly type: 'integer';
                  };
                };
              };
            };
            readonly original_response: {
              readonly default: any;
              readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
              readonly title: 'Original Response';
            };
            readonly status: {
              readonly title: 'Status';
              readonly enum: readonly ['sucess', 'fail'];
              readonly type: 'string';
              readonly description: '`sucess` `fail`';
            };
          };
        };
        readonly tenstorrent: {
          readonly required: readonly ['status'];
          readonly title: 'textnamed_entity_recognitionNamedEntityRecognitionDataClass';
          readonly type: 'object';
          readonly properties: {
            readonly items: {
              readonly title: 'Items';
              readonly type: 'array';
              readonly items: {
                readonly required: readonly ['entity', 'category', 'importance'];
                readonly title: 'InfosNamedEntityRecognitionDataClass';
                readonly type: 'object';
                readonly properties: {
                  readonly entity: {
                    readonly title: 'Entity';
                    readonly type: 'string';
                  };
                  readonly category: {
                    readonly title: 'Category';
                    readonly type: 'string';
                  };
                  readonly importance: {
                    readonly title: 'Importance';
                    readonly type: 'integer';
                  };
                };
              };
            };
            readonly original_response: {
              readonly default: any;
              readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
              readonly title: 'Original Response';
            };
            readonly status: {
              readonly title: 'Status';
              readonly enum: readonly ['sucess', 'fail'];
              readonly type: 'string';
              readonly description: '`sucess` `fail`';
            };
          };
        };
        readonly microsoft: {
          readonly required: readonly ['status'];
          readonly title: 'textnamed_entity_recognitionNamedEntityRecognitionDataClass';
          readonly type: 'object';
          readonly properties: {
            readonly items: {
              readonly title: 'Items';
              readonly type: 'array';
              readonly items: {
                readonly required: readonly ['entity', 'category', 'importance'];
                readonly title: 'InfosNamedEntityRecognitionDataClass';
                readonly type: 'object';
                readonly properties: {
                  readonly entity: {
                    readonly title: 'Entity';
                    readonly type: 'string';
                  };
                  readonly category: {
                    readonly title: 'Category';
                    readonly type: 'string';
                  };
                  readonly importance: {
                    readonly title: 'Importance';
                    readonly type: 'integer';
                  };
                };
              };
            };
            readonly original_response: {
              readonly default: any;
              readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
              readonly title: 'Original Response';
            };
            readonly status: {
              readonly title: 'Status';
              readonly enum: readonly ['sucess', 'fail'];
              readonly type: 'string';
              readonly description: '`sucess` `fail`';
            };
          };
        };
        readonly openai: {
          readonly required: readonly ['status'];
          readonly title: 'textnamed_entity_recognitionNamedEntityRecognitionDataClass';
          readonly type: 'object';
          readonly properties: {
            readonly items: {
              readonly title: 'Items';
              readonly type: 'array';
              readonly items: {
                readonly required: readonly ['entity', 'category', 'importance'];
                readonly title: 'InfosNamedEntityRecognitionDataClass';
                readonly type: 'object';
                readonly properties: {
                  readonly entity: {
                    readonly title: 'Entity';
                    readonly type: 'string';
                  };
                  readonly category: {
                    readonly title: 'Category';
                    readonly type: 'string';
                  };
                  readonly importance: {
                    readonly title: 'Importance';
                    readonly type: 'integer';
                  };
                };
              };
            };
            readonly original_response: {
              readonly default: any;
              readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
              readonly title: 'Original Response';
            };
            readonly status: {
              readonly title: 'Status';
              readonly enum: readonly ['sucess', 'fail'];
              readonly type: 'string';
              readonly description: '`sucess` `fail`';
            };
          };
        };
        readonly ibm: {
          readonly required: readonly ['status'];
          readonly title: 'textnamed_entity_recognitionNamedEntityRecognitionDataClass';
          readonly type: 'object';
          readonly properties: {
            readonly items: {
              readonly title: 'Items';
              readonly type: 'array';
              readonly items: {
                readonly required: readonly ['entity', 'category', 'importance'];
                readonly title: 'InfosNamedEntityRecognitionDataClass';
                readonly type: 'object';
                readonly properties: {
                  readonly entity: {
                    readonly title: 'Entity';
                    readonly type: 'string';
                  };
                  readonly category: {
                    readonly title: 'Category';
                    readonly type: 'string';
                  };
                  readonly importance: {
                    readonly title: 'Importance';
                    readonly type: 'integer';
                  };
                };
              };
            };
            readonly original_response: {
              readonly default: any;
              readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
              readonly title: 'Original Response';
            };
            readonly status: {
              readonly title: 'Status';
              readonly enum: readonly ['sucess', 'fail'];
              readonly type: 'string';
              readonly description: '`sucess` `fail`';
            };
          };
        };
        readonly oneai: {
          readonly required: readonly ['status'];
          readonly title: 'textnamed_entity_recognitionNamedEntityRecognitionDataClass';
          readonly type: 'object';
          readonly properties: {
            readonly items: {
              readonly title: 'Items';
              readonly type: 'array';
              readonly items: {
                readonly required: readonly ['entity', 'category', 'importance'];
                readonly title: 'InfosNamedEntityRecognitionDataClass';
                readonly type: 'object';
                readonly properties: {
                  readonly entity: {
                    readonly title: 'Entity';
                    readonly type: 'string';
                  };
                  readonly category: {
                    readonly title: 'Category';
                    readonly type: 'string';
                  };
                  readonly importance: {
                    readonly title: 'Importance';
                    readonly type: 'integer';
                  };
                };
              };
            };
            readonly original_response: {
              readonly default: any;
              readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
              readonly title: 'Original Response';
            };
            readonly status: {
              readonly title: 'Status';
              readonly enum: readonly ['sucess', 'fail'];
              readonly type: 'string';
              readonly description: '`sucess` `fail`';
            };
          };
        };
        readonly google: {
          readonly required: readonly ['status'];
          readonly title: 'textnamed_entity_recognitionNamedEntityRecognitionDataClass';
          readonly type: 'object';
          readonly properties: {
            readonly items: {
              readonly title: 'Items';
              readonly type: 'array';
              readonly items: {
                readonly required: readonly ['entity', 'category', 'importance'];
                readonly title: 'InfosNamedEntityRecognitionDataClass';
                readonly type: 'object';
                readonly properties: {
                  readonly entity: {
                    readonly title: 'Entity';
                    readonly type: 'string';
                  };
                  readonly category: {
                    readonly title: 'Category';
                    readonly type: 'string';
                  };
                  readonly importance: {
                    readonly title: 'Importance';
                    readonly type: 'integer';
                  };
                };
              };
            };
            readonly original_response: {
              readonly default: any;
              readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
              readonly title: 'Original Response';
            };
            readonly status: {
              readonly title: 'Status';
              readonly enum: readonly ['sucess', 'fail'];
              readonly type: 'string';
              readonly description: '`sucess` `fail`';
            };
          };
        };
        readonly neuralspace: {
          readonly required: readonly ['status'];
          readonly title: 'textnamed_entity_recognitionNamedEntityRecognitionDataClass';
          readonly type: 'object';
          readonly properties: {
            readonly items: {
              readonly title: 'Items';
              readonly type: 'array';
              readonly items: {
                readonly required: readonly ['entity', 'category', 'importance'];
                readonly title: 'InfosNamedEntityRecognitionDataClass';
                readonly type: 'object';
                readonly properties: {
                  readonly entity: {
                    readonly title: 'Entity';
                    readonly type: 'string';
                  };
                  readonly category: {
                    readonly title: 'Category';
                    readonly type: 'string';
                  };
                  readonly importance: {
                    readonly title: 'Importance';
                    readonly type: 'integer';
                  };
                };
              };
            };
            readonly original_response: {
              readonly default: any;
              readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
              readonly title: 'Original Response';
            };
            readonly status: {
              readonly title: 'Status';
              readonly enum: readonly ['sucess', 'fail'];
              readonly type: 'string';
              readonly description: '`sucess` `fail`';
            };
          };
        };
        readonly amazon: {
          readonly required: readonly ['status'];
          readonly title: 'textnamed_entity_recognitionNamedEntityRecognitionDataClass';
          readonly type: 'object';
          readonly properties: {
            readonly items: {
              readonly title: 'Items';
              readonly type: 'array';
              readonly items: {
                readonly required: readonly ['entity', 'category', 'importance'];
                readonly title: 'InfosNamedEntityRecognitionDataClass';
                readonly type: 'object';
                readonly properties: {
                  readonly entity: {
                    readonly title: 'Entity';
                    readonly type: 'string';
                  };
                  readonly category: {
                    readonly title: 'Category';
                    readonly type: 'string';
                  };
                  readonly importance: {
                    readonly title: 'Importance';
                    readonly type: 'integer';
                  };
                };
              };
            };
            readonly original_response: {
              readonly default: any;
              readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
              readonly title: 'Original Response';
            };
            readonly status: {
              readonly title: 'Status';
              readonly enum: readonly ['sucess', 'fail'];
              readonly type: 'string';
              readonly description: '`sucess` `fail`';
            };
          };
        };
        readonly 'eden-ai': {
          readonly required: readonly ['status'];
          readonly title: 'textnamed_entity_recognitionNamedEntityRecognitionDataClass';
          readonly type: 'object';
          readonly properties: {
            readonly items: {
              readonly title: 'Items';
              readonly type: 'array';
              readonly items: {
                readonly required: readonly ['entity', 'category', 'importance'];
                readonly title: 'InfosNamedEntityRecognitionDataClass';
                readonly type: 'object';
                readonly properties: {
                  readonly entity: {
                    readonly title: 'Entity';
                    readonly type: 'string';
                  };
                  readonly category: {
                    readonly title: 'Category';
                    readonly type: 'string';
                  };
                  readonly importance: {
                    readonly title: 'Importance';
                    readonly type: 'integer';
                  };
                };
              };
            };
            readonly original_response: {
              readonly default: any;
              readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
              readonly title: 'Original Response';
            };
            readonly status: {
              readonly title: 'Status';
              readonly enum: readonly ['sucess', 'fail'];
              readonly type: 'string';
              readonly description: '`sucess` `fail`';
            };
          };
        };
      };
      readonly title: 'textnamed_entity_recognitionResponseModel';
      readonly type: 'object';
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '400': {
      readonly type: 'object';
      readonly properties: {
        readonly error: {
          readonly type: 'object';
          readonly properties: {
            readonly type: {
              readonly type: 'string';
            };
            readonly message: {
              readonly type: 'object';
              readonly properties: {
                readonly '<parameter_name>': {
                  readonly type: 'array';
                  readonly items: {
                    readonly type: 'string';
                  };
                };
              };
              readonly required: readonly ['<parameter_name>'];
            };
          };
          readonly required: readonly ['message', 'type'];
        };
      };
      readonly required: readonly ['error'];
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '403': {
      readonly type: 'object';
      readonly properties: {
        readonly error: {
          readonly type: 'object';
          readonly properties: {
            readonly type: {
              readonly type: 'string';
            };
            readonly message: {
              readonly type: 'string';
            };
          };
          readonly required: readonly ['message', 'type'];
        };
      };
      readonly required: readonly ['error'];
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '404': {
      readonly type: 'object';
      readonly properties: {
        readonly details: {
          readonly type: 'string';
          readonly default: 'Not Found';
        };
      };
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '500': {
      readonly type: 'object';
      readonly properties: {
        readonly error: {
          readonly type: 'object';
          readonly properties: {
            readonly type: {
              readonly type: 'string';
            };
            readonly message: {
              readonly type: 'string';
            };
          };
          readonly required: readonly ['message', 'type'];
        };
      };
      readonly required: readonly ['error'];
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
  };
};
declare const TextPlagiaDetectionCreate: {
  readonly body: {
    readonly type: 'object';
    readonly properties: {
      readonly providers: {
        readonly type: 'string';
        readonly minLength: 1;
        readonly description: "It can be one (ex: **'amazon'** or **'google'**) or multiple provider(s) (ex: **'amazon,microsoft,google'**)             that the data will be redirected to in order to get the processed results.";
        readonly examples: readonly ['originalityai'];
      };
      readonly fallback_providers: {
        readonly type: 'string';
        readonly minLength: 1;
        readonly description: "Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.\n    To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.\n\nThey will be tried in the same order they are input, and it will stop to the first provider who doesn't fail.\n\n\n*Doesn't work with async subfeatures.*\n    ";
      };
      readonly response_as_dict: {
        readonly type: 'boolean';
        readonly default: true;
        readonly description: "Optional : When set to **true** (default), the response is an object of responses with providers names as keys : <br> \n                  ``` {'google' : { 'status': 'success', ... }, } ``` <br>\n                When set to **false** the response structure is a list of response objects : <br> \n                   ``` [{'status': 'success', 'provider': 'google' ... }, ] ```. <br> \n                  ";
      };
      readonly attributes_as_list: {
        readonly type: 'boolean';
        readonly default: false;
        readonly description: "Optional : When set to **false** (default) the structure of the extracted items is list of objects having different attributes : <br>\n     ```{'items': [{'attribute_1': 'x1','attribute_2': 'y2'}, ... ]}``` <br>\n     When it is set to **true**, the response contains an object with each attribute as a list : <br>\n     ```{ 'attribute_1': ['x1','x2', ...], 'attribute_2': [y1, y2, ...]}``` ";
      };
      readonly show_original_response: {
        readonly type: 'boolean';
        readonly default: false;
        readonly description: 'Optional : Shows the original response of the provider.<br>\n        When set to **true**, a new attribute *original_response* will appear in the response object.';
      };
      readonly text: {
        readonly type: 'string';
        readonly minLength: 1;
        readonly description: 'A text content on which a plagiarism detection analysis will be run';
        readonly examples: readonly [
          "The Galaxy S23 launch may be far behind us, but Samsung likely has plenty more to announce in 2023.             That's if history repeats itself. Should Samsung stick to its annual routine, we can expect to see new             foldable phones and wearable devices in August. The company also previewed new designs for bendable phones and tablets             earlier this year, hinting that the company may be planning to expand beyond the Z Fold and Z Flip in the near future.             Though Samsung regularly releases new products across many categories, including TVs, home appliances and monitors,             I'm most interested in where its mobile devices are headed. Samsung is one of the world's largest smartphone manufacturers             by market share, meaning it has more influence than most other tech companies on the devices we carry in our pockets each day.             Wearables have also become a large part of how Samsung intends to differentiate its phones from those of other Android device makers.             It's a strategy to create a web of products that keep people hooked, much like Apple's range of devices."
        ];
      };
      readonly title: {
        readonly type: readonly ['string', 'null'];
        readonly description: 'Content title';
        readonly examples: readonly ["n'importe nawak"];
      };
    };
    readonly required: readonly ['providers', 'text'];
    readonly $schema: 'http://json-schema.org/draft-04/schema#';
  };
  readonly response: {
    readonly '200': {
      readonly properties: {
        readonly originalityai: {
          readonly required: readonly ['plagia_score', 'status'];
          readonly title: 'textplagia_detectionPlagiaDetectionDataClass';
          readonly type: 'object';
          readonly properties: {
            readonly plagia_score: {
              readonly title: 'Plagia Score';
              readonly type: 'integer';
            };
            readonly items: {
              readonly title: 'Items';
              readonly type: 'array';
              readonly items: {
                readonly required: readonly ['text'];
                readonly title: 'PlagiaDetectionItem';
                readonly type: 'object';
                readonly properties: {
                  readonly text: {
                    readonly title: 'Text';
                    readonly type: 'string';
                  };
                  readonly candidates: {
                    readonly title: 'Candidates';
                    readonly type: 'array';
                    readonly items: {
                      readonly required: readonly [
                        'url',
                        'plagia_score',
                        'prediction',
                        'plagiarized_text'
                      ];
                      readonly title: 'PlagiaDetectionCandidate';
                      readonly type: 'object';
                      readonly properties: {
                        readonly url: {
                          readonly title: 'Url';
                          readonly type: 'string';
                        };
                        readonly plagia_score: {
                          readonly title: 'Plagia Score';
                          readonly type: 'integer';
                        };
                        readonly prediction: {
                          readonly title: 'Prediction';
                          readonly type: 'string';
                        };
                        readonly plagiarized_text: {
                          readonly title: 'Plagiarized Text';
                          readonly type: 'string';
                        };
                      };
                    };
                  };
                };
              };
            };
            readonly original_response: {
              readonly default: any;
              readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
              readonly title: 'Original Response';
            };
            readonly status: {
              readonly title: 'Status';
              readonly enum: readonly ['sucess', 'fail'];
              readonly type: 'string';
              readonly description: '`sucess` `fail`';
            };
          };
        };
      };
      readonly title: 'textplagia_detectionResponseModel';
      readonly type: 'object';
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '400': {
      readonly type: 'object';
      readonly properties: {
        readonly error: {
          readonly type: 'object';
          readonly properties: {
            readonly type: {
              readonly type: 'string';
            };
            readonly message: {
              readonly type: 'object';
              readonly properties: {
                readonly '<parameter_name>': {
                  readonly type: 'array';
                  readonly items: {
                    readonly type: 'string';
                  };
                };
              };
              readonly required: readonly ['<parameter_name>'];
            };
          };
          readonly required: readonly ['message', 'type'];
        };
      };
      readonly required: readonly ['error'];
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '403': {
      readonly type: 'object';
      readonly properties: {
        readonly error: {
          readonly type: 'object';
          readonly properties: {
            readonly type: {
              readonly type: 'string';
            };
            readonly message: {
              readonly type: 'string';
            };
          };
          readonly required: readonly ['message', 'type'];
        };
      };
      readonly required: readonly ['error'];
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '404': {
      readonly type: 'object';
      readonly properties: {
        readonly details: {
          readonly type: 'string';
          readonly default: 'Not Found';
        };
      };
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '500': {
      readonly type: 'object';
      readonly properties: {
        readonly error: {
          readonly type: 'object';
          readonly properties: {
            readonly type: {
              readonly type: 'string';
            };
            readonly message: {
              readonly type: 'string';
            };
          };
          readonly required: readonly ['message', 'type'];
        };
      };
      readonly required: readonly ['error'];
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
  };
};
declare const TextPromptOptimizationCreate: {
  readonly body: {
    readonly type: 'object';
    readonly properties: {
      readonly providers: {
        readonly type: 'string';
        readonly minLength: 1;
        readonly description: "It can be one (ex: **'amazon'** or **'google'**) or multiple provider(s) (ex: **'amazon,microsoft,google'**)             that the data will be redirected to in order to get the processed results.";
        readonly examples: readonly ['openai'];
      };
      readonly fallback_providers: {
        readonly type: 'string';
        readonly minLength: 1;
        readonly description: "Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.\n    To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.\n\nThey will be tried in the same order they are input, and it will stop to the first provider who doesn't fail.\n\n\n*Doesn't work with async subfeatures.*\n    ";
      };
      readonly response_as_dict: {
        readonly type: 'boolean';
        readonly default: true;
        readonly description: "Optional : When set to **true** (default), the response is an object of responses with providers names as keys : <br> \n                  ``` {'google' : { 'status': 'success', ... }, } ``` <br>\n                When set to **false** the response structure is a list of response objects : <br> \n                   ``` [{'status': 'success', 'provider': 'google' ... }, ] ```. <br> \n                  ";
      };
      readonly attributes_as_list: {
        readonly type: 'boolean';
        readonly default: false;
        readonly description: "Optional : When set to **false** (default) the structure of the extracted items is list of objects having different attributes : <br>\n     ```{'items': [{'attribute_1': 'x1','attribute_2': 'y2'}, ... ]}``` <br>\n     When it is set to **true**, the response contains an object with each attribute as a list : <br>\n     ```{ 'attribute_1': ['x1','x2', ...], 'attribute_2': [y1, y2, ...]}``` ";
      };
      readonly show_original_response: {
        readonly type: 'boolean';
        readonly default: false;
        readonly description: 'Optional : Shows the original response of the provider.<br>\n        When set to **true**, a new attribute *original_response* will appear in the response object.';
      };
      readonly text: {
        readonly type: 'string';
        readonly minLength: 1;
        readonly description: 'Description of the desired prompt.';
        readonly examples: readonly [
          'Entity extractor, i give you an entity or multiple entities and a text and i want the entitites extracted from the text'
        ];
      };
      readonly target_provider: {
        readonly description: '* `google` - google\n* `openai` - openai\n* `cohere` - cohere';
        readonly enum: readonly ['google', 'openai', 'cohere'];
        readonly type: 'string';
        readonly examples: readonly ['google'];
      };
    };
    readonly required: readonly ['providers', 'target_provider', 'text'];
    readonly $schema: 'http://json-schema.org/draft-04/schema#';
  };
  readonly response: {
    readonly '200': {
      readonly properties: {
        readonly openai: {
          readonly required: readonly ['missing_information', 'status'];
          readonly title: 'textprompt_optimizationPromptOptimizationDataClass';
          readonly type: 'object';
          readonly properties: {
            readonly missing_information: {
              readonly title: 'Missing Information';
              readonly type: 'string';
            };
            readonly items: {
              readonly title: 'Items';
              readonly type: 'array';
              readonly items: {
                readonly required: readonly ['text'];
                readonly title: 'PromptDataClass';
                readonly type: 'object';
                readonly properties: {
                  readonly text: {
                    readonly title: 'Text';
                    readonly type: 'string';
                  };
                };
              };
            };
            readonly original_response: {
              readonly default: any;
              readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
              readonly title: 'Original Response';
            };
            readonly status: {
              readonly title: 'Status';
              readonly enum: readonly ['sucess', 'fail'];
              readonly type: 'string';
              readonly description: '`sucess` `fail`';
            };
          };
        };
      };
      readonly title: 'textprompt_optimizationResponseModel';
      readonly type: 'object';
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '400': {
      readonly type: 'object';
      readonly properties: {
        readonly error: {
          readonly type: 'object';
          readonly properties: {
            readonly type: {
              readonly type: 'string';
            };
            readonly message: {
              readonly type: 'object';
              readonly properties: {
                readonly '<parameter_name>': {
                  readonly type: 'array';
                  readonly items: {
                    readonly type: 'string';
                  };
                };
              };
              readonly required: readonly ['<parameter_name>'];
            };
          };
          readonly required: readonly ['message', 'type'];
        };
      };
      readonly required: readonly ['error'];
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '403': {
      readonly type: 'object';
      readonly properties: {
        readonly error: {
          readonly type: 'object';
          readonly properties: {
            readonly type: {
              readonly type: 'string';
            };
            readonly message: {
              readonly type: 'string';
            };
          };
          readonly required: readonly ['message', 'type'];
        };
      };
      readonly required: readonly ['error'];
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '404': {
      readonly type: 'object';
      readonly properties: {
        readonly details: {
          readonly type: 'string';
          readonly default: 'Not Found';
        };
      };
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '500': {
      readonly type: 'object';
      readonly properties: {
        readonly error: {
          readonly type: 'object';
          readonly properties: {
            readonly type: {
              readonly type: 'string';
            };
            readonly message: {
              readonly type: 'string';
            };
          };
          readonly required: readonly ['message', 'type'];
        };
      };
      readonly required: readonly ['error'];
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
  };
};
declare const TextQuestionAnswerCreate: {
  readonly body: {
    readonly type: 'object';
    readonly properties: {
      readonly providers: {
        readonly type: 'string';
        readonly minLength: 1;
        readonly description: "It can be one (ex: **'amazon'** or **'google'**) or multiple provider(s) (ex: **'amazon,microsoft,google'**)             that the data will be redirected to in order to get the processed results.";
        readonly examples: readonly ['openai,tenstorrent'];
      };
      readonly fallback_providers: {
        readonly type: 'string';
        readonly minLength: 1;
        readonly description: "Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.\n    To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.\n\nThey will be tried in the same order they are input, and it will stop to the first provider who doesn't fail.\n\n\n*Doesn't work with async subfeatures.*\n    ";
      };
      readonly response_as_dict: {
        readonly type: 'boolean';
        readonly default: true;
        readonly description: "Optional : When set to **true** (default), the response is an object of responses with providers names as keys : <br> \n                  ``` {'google' : { 'status': 'success', ... }, } ``` <br>\n                When set to **false** the response structure is a list of response objects : <br> \n                   ``` [{'status': 'success', 'provider': 'google' ... }, ] ```. <br> \n                  ";
      };
      readonly attributes_as_list: {
        readonly type: 'boolean';
        readonly default: false;
        readonly description: "Optional : When set to **false** (default) the structure of the extracted items is list of objects having different attributes : <br>\n     ```{'items': [{'attribute_1': 'x1','attribute_2': 'y2'}, ... ]}``` <br>\n     When it is set to **true**, the response contains an object with each attribute as a list : <br>\n     ```{ 'attribute_1': ['x1','x2', ...], 'attribute_2': [y1, y2, ...]}``` ";
      };
      readonly show_original_response: {
        readonly type: 'boolean';
        readonly default: false;
        readonly description: 'Optional : Shows the original response of the provider.<br>\n        When set to **true**, a new attribute *original_response* will appear in the response object.';
      };
      readonly texts: {
        readonly type: 'array';
        readonly items: {
          readonly type: 'string';
          readonly minLength: 1;
          readonly examples: readonly [
            'The bar-shouldered dove (Geopelia humeralis) is a species of dove, in the family Columbidae, native to Australia and southern New Guinea. Its typical habitat consists of areas of thick vegetation where water is present, damp gullies, forests and gorges, mangroves, plantations, swamps, eucalyptus woodland, tropical and sub-tropical shrubland, and river margins. It can be found in both inland and coastal regions.'
          ];
        };
        readonly description: 'List of texts to analyze';
      };
      readonly question: {
        readonly type: 'string';
        readonly minLength: 1;
        readonly description: 'Question about the text content';
        readonly examples: readonly ['What is the scientific name of bar-shouldered dove?'];
      };
      readonly temperature: {
        readonly type: 'number';
        readonly format: 'double';
        readonly maximum: 1;
        readonly minimum: 0;
        readonly default: 0;
        readonly description: 'Higher values mean the model will take more risks and value 0 (argmax sampling) works better for scenarios with a well-defined answer.';
      };
      readonly examples_context: {
        readonly type: 'string';
        readonly minLength: 1;
        readonly description: 'example text serving as context';
        readonly examples: readonly ['In 2017, U.S. life expectancy was 78.6 years.'];
      };
      readonly examples: {
        readonly type: 'array';
        readonly items: {
          readonly type: 'array';
          readonly items: {
            readonly type: 'string';
            readonly minLength: 1;
            readonly examples: readonly ['What is human life expectancy in the United States?'];
          };
          readonly maxItems: 2;
          readonly minItems: 2;
        };
        readonly description: "List of question/answer pairs (eg: [['When was Barack Obama elected president?', 'in 2009.'],]";
      };
    };
    readonly required: readonly ['examples', 'examples_context', 'providers', 'question', 'texts'];
    readonly $schema: 'http://json-schema.org/draft-04/schema#';
  };
  readonly response: {
    readonly '200': {
      readonly properties: {
        readonly tenstorrent: {
          readonly required: readonly ['status'];
          readonly title: 'textquestion_answerQuestionAnswerDataClass';
          readonly type: 'object';
          readonly properties: {
            readonly answers: {
              readonly title: 'Answers';
              readonly type: 'array';
              readonly items: {
                readonly type: 'string';
              };
            };
            readonly original_response: {
              readonly default: any;
              readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
              readonly title: 'Original Response';
            };
            readonly status: {
              readonly title: 'Status';
              readonly enum: readonly ['sucess', 'fail'];
              readonly type: 'string';
              readonly description: '`sucess` `fail`';
            };
          };
        };
        readonly openai: {
          readonly required: readonly ['status'];
          readonly title: 'textquestion_answerQuestionAnswerDataClass';
          readonly type: 'object';
          readonly properties: {
            readonly answers: {
              readonly title: 'Answers';
              readonly type: 'array';
              readonly items: {
                readonly type: 'string';
              };
            };
            readonly original_response: {
              readonly default: any;
              readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
              readonly title: 'Original Response';
            };
            readonly status: {
              readonly title: 'Status';
              readonly enum: readonly ['sucess', 'fail'];
              readonly type: 'string';
              readonly description: '`sucess` `fail`';
            };
          };
        };
        readonly huggingface: {
          readonly required: readonly ['status'];
          readonly title: 'textquestion_answerQuestionAnswerDataClass';
          readonly type: 'object';
          readonly properties: {
            readonly answers: {
              readonly title: 'Answers';
              readonly type: 'array';
              readonly items: {
                readonly type: 'string';
              };
            };
            readonly original_response: {
              readonly default: any;
              readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
              readonly title: 'Original Response';
            };
            readonly status: {
              readonly title: 'Status';
              readonly enum: readonly ['sucess', 'fail'];
              readonly type: 'string';
              readonly description: '`sucess` `fail`';
            };
          };
        };
        readonly 'eden-ai': {
          readonly required: readonly ['status'];
          readonly title: 'textquestion_answerQuestionAnswerDataClass';
          readonly type: 'object';
          readonly properties: {
            readonly answers: {
              readonly title: 'Answers';
              readonly type: 'array';
              readonly items: {
                readonly type: 'string';
              };
            };
            readonly original_response: {
              readonly default: any;
              readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
              readonly title: 'Original Response';
            };
            readonly status: {
              readonly title: 'Status';
              readonly enum: readonly ['sucess', 'fail'];
              readonly type: 'string';
              readonly description: '`sucess` `fail`';
            };
          };
        };
      };
      readonly title: 'textquestion_answerResponseModel';
      readonly type: 'object';
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '400': {
      readonly type: 'object';
      readonly properties: {
        readonly error: {
          readonly type: 'object';
          readonly properties: {
            readonly type: {
              readonly type: 'string';
            };
            readonly message: {
              readonly type: 'object';
              readonly properties: {
                readonly '<parameter_name>': {
                  readonly type: 'array';
                  readonly items: {
                    readonly type: 'string';
                  };
                };
              };
              readonly required: readonly ['<parameter_name>'];
            };
          };
          readonly required: readonly ['message', 'type'];
        };
      };
      readonly required: readonly ['error'];
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '403': {
      readonly type: 'object';
      readonly properties: {
        readonly error: {
          readonly type: 'object';
          readonly properties: {
            readonly type: {
              readonly type: 'string';
            };
            readonly message: {
              readonly type: 'string';
            };
          };
          readonly required: readonly ['message', 'type'];
        };
      };
      readonly required: readonly ['error'];
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '404': {
      readonly type: 'object';
      readonly properties: {
        readonly details: {
          readonly type: 'string';
          readonly default: 'Not Found';
        };
      };
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '500': {
      readonly type: 'object';
      readonly properties: {
        readonly error: {
          readonly type: 'object';
          readonly properties: {
            readonly type: {
              readonly type: 'string';
            };
            readonly message: {
              readonly type: 'string';
            };
          };
          readonly required: readonly ['message', 'type'];
        };
      };
      readonly required: readonly ['error'];
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
  };
};
declare const TextSearchCreate: {
  readonly body: {
    readonly type: 'object';
    readonly properties: {
      readonly providers: {
        readonly type: 'string';
        readonly minLength: 1;
        readonly description: "It can be one (ex: **'amazon'** or **'google'**) or multiple provider(s) (ex: **'amazon,microsoft,google'**)             that the data will be redirected to in order to get the processed results.";
        readonly examples: readonly ['openai'];
      };
      readonly fallback_providers: {
        readonly type: 'string';
        readonly minLength: 1;
        readonly description: "Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.\n    To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.\n\nThey will be tried in the same order they are input, and it will stop to the first provider who doesn't fail.\n\n\n*Doesn't work with async subfeatures.*\n    ";
      };
      readonly response_as_dict: {
        readonly type: 'boolean';
        readonly default: true;
        readonly description: "Optional : When set to **true** (default), the response is an object of responses with providers names as keys : <br> \n                  ``` {'google' : { 'status': 'success', ... }, } ``` <br>\n                When set to **false** the response structure is a list of response objects : <br> \n                   ``` [{'status': 'success', 'provider': 'google' ... }, ] ```. <br> \n                  ";
      };
      readonly attributes_as_list: {
        readonly type: 'boolean';
        readonly default: false;
        readonly description: "Optional : When set to **false** (default) the structure of the extracted items is list of objects having different attributes : <br>\n     ```{'items': [{'attribute_1': 'x1','attribute_2': 'y2'}, ... ]}``` <br>\n     When it is set to **true**, the response contains an object with each attribute as a list : <br>\n     ```{ 'attribute_1': ['x1','x2', ...], 'attribute_2': [y1, y2, ...]}``` ";
      };
      readonly show_original_response: {
        readonly type: 'boolean';
        readonly default: false;
        readonly description: 'Optional : Shows the original response of the provider.<br>\n        When set to **true**, a new attribute *original_response* will appear in the response object.';
      };
      readonly texts: {
        readonly type: 'array';
        readonly items: {
          readonly type: 'string';
          readonly minLength: 1;
          readonly examples: readonly [
            'In Roman mythology, Romulus and Remus (Latin: [ˈroːmʊlʊs], [ˈrɛmʊs]) are twin brothers whose story tells of the events that led to the founding of the city of Rome and the Roman Kingdom by Romulus.'
          ];
        };
        readonly description: 'A list of texts to search in.';
        readonly minItems: 2;
      };
      readonly query: {
        readonly type: 'string';
        readonly minLength: 1;
        readonly description: 'Your text query.';
        readonly examples: readonly ['Rome'];
      };
    };
    readonly required: readonly ['providers', 'query', 'texts'];
    readonly $schema: 'http://json-schema.org/draft-04/schema#';
  };
  readonly response: {
    readonly '200': {
      readonly properties: {
        readonly openai: {
          readonly required: readonly ['status'];
          readonly title: 'textsearchSearchDataClass';
          readonly type: 'object';
          readonly properties: {
            readonly items: {
              readonly title: 'Items';
              readonly type: 'array';
              readonly items: {
                readonly required: readonly ['object', 'document', 'score'];
                readonly title: 'InfosSearchDataClass';
                readonly type: 'object';
                readonly properties: {
                  readonly object: {
                    readonly title: 'Object';
                    readonly type: 'string';
                  };
                  readonly document: {
                    readonly title: 'Document';
                    readonly type: 'integer';
                  };
                  readonly score: {
                    readonly title: 'Score';
                    readonly type: 'integer';
                  };
                };
              };
            };
            readonly original_response: {
              readonly default: any;
              readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
              readonly title: 'Original Response';
            };
            readonly status: {
              readonly title: 'Status';
              readonly enum: readonly ['sucess', 'fail'];
              readonly type: 'string';
              readonly description: '`sucess` `fail`';
            };
          };
        };
      };
      readonly title: 'textsearchResponseModel';
      readonly type: 'object';
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '400': {
      readonly type: 'object';
      readonly properties: {
        readonly error: {
          readonly type: 'object';
          readonly properties: {
            readonly type: {
              readonly type: 'string';
            };
            readonly message: {
              readonly type: 'object';
              readonly properties: {
                readonly '<parameter_name>': {
                  readonly type: 'array';
                  readonly items: {
                    readonly type: 'string';
                  };
                };
              };
              readonly required: readonly ['<parameter_name>'];
            };
          };
          readonly required: readonly ['message', 'type'];
        };
      };
      readonly required: readonly ['error'];
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '403': {
      readonly type: 'object';
      readonly properties: {
        readonly error: {
          readonly type: 'object';
          readonly properties: {
            readonly type: {
              readonly type: 'string';
            };
            readonly message: {
              readonly type: 'string';
            };
          };
          readonly required: readonly ['message', 'type'];
        };
      };
      readonly required: readonly ['error'];
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '404': {
      readonly type: 'object';
      readonly properties: {
        readonly details: {
          readonly type: 'string';
          readonly default: 'Not Found';
        };
      };
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '500': {
      readonly type: 'object';
      readonly properties: {
        readonly error: {
          readonly type: 'object';
          readonly properties: {
            readonly type: {
              readonly type: 'string';
            };
            readonly message: {
              readonly type: 'string';
            };
          };
          readonly required: readonly ['message', 'type'];
        };
      };
      readonly required: readonly ['error'];
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
  };
};
declare const TextSentimentAnalysisCreate: {
  readonly body: {
    readonly type: 'object';
    readonly properties: {
      readonly providers: {
        readonly type: 'string';
        readonly minLength: 1;
        readonly description: "It can be one (ex: **'amazon'** or **'google'**) or multiple provider(s) (ex: **'amazon,microsoft,google'**)             that the data will be redirected to in order to get the processed results.";
        readonly examples: readonly [
          'connexun,amazon,google,microsoft,tenstorrent,sapling,oneai,emvista,openai,ibm,lettria'
        ];
      };
      readonly fallback_providers: {
        readonly type: 'string';
        readonly minLength: 1;
        readonly description: "Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.\n    To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.\n\nThey will be tried in the same order they are input, and it will stop to the first provider who doesn't fail.\n\n\n*Doesn't work with async subfeatures.*\n    ";
      };
      readonly response_as_dict: {
        readonly type: 'boolean';
        readonly default: true;
        readonly description: "Optional : When set to **true** (default), the response is an object of responses with providers names as keys : <br> \n                  ``` {'google' : { 'status': 'success', ... }, } ``` <br>\n                When set to **false** the response structure is a list of response objects : <br> \n                   ``` [{'status': 'success', 'provider': 'google' ... }, ] ```. <br> \n                  ";
      };
      readonly attributes_as_list: {
        readonly type: 'boolean';
        readonly default: false;
        readonly description: "Optional : When set to **false** (default) the structure of the extracted items is list of objects having different attributes : <br>\n     ```{'items': [{'attribute_1': 'x1','attribute_2': 'y2'}, ... ]}``` <br>\n     When it is set to **true**, the response contains an object with each attribute as a list : <br>\n     ```{ 'attribute_1': ['x1','x2', ...], 'attribute_2': [y1, y2, ...]}``` ";
      };
      readonly show_original_response: {
        readonly type: 'boolean';
        readonly default: false;
        readonly description: 'Optional : Shows the original response of the provider.<br>\n        When set to **true**, a new attribute *original_response* will appear in the response object.';
      };
      readonly text: {
        readonly type: 'string';
        readonly minLength: 1;
        readonly description: 'Text to analyze';
        readonly examples: readonly [
          "Overall I am satisfied with my experience at Amazon, but two areas of major improvement needed. First is the product reviews and pricing. There are thousands of positive reviews for so many items, and it's clear that the reviews are bogus or not really associated with that product. There needs to be a way to only view products sold by Amazon directly, because many market sellers way overprice items that can be purchased cheaper elsewhere (like Walmart, Target, etc). The second issue is they make it too difficult to get help when there's an issue with an order."
        ];
      };
      readonly language: {
        readonly type: readonly ['string', 'null'];
        readonly description: 'Language code for the language the input text is written in (eg: en, fr).';
        readonly examples: readonly ['en'];
      };
    };
    readonly required: readonly ['providers', 'text'];
    readonly $schema: 'http://json-schema.org/draft-04/schema#';
  };
  readonly response: {
    readonly '200': {
      readonly properties: {
        readonly emvista: {
          readonly required: readonly ['general_sentiment', 'general_sentiment_rate', 'status'];
          readonly title: 'textsentiment_analysisSentimentAnalysisDataClass';
          readonly type: 'object';
          readonly properties: {
            readonly general_sentiment: {
              readonly title: 'General Sentiment';
              readonly enum: readonly ['Positive', 'Negative', 'Neutral'];
              readonly type: 'string';
              readonly description: '`Positive` `Negative` `Neutral`';
            };
            readonly general_sentiment_rate: {
              readonly maximum: 1;
              readonly minimum: 0;
              readonly title: 'General Sentiment Rate';
              readonly type: 'integer';
            };
            readonly items: {
              readonly title: 'Items';
              readonly type: 'array';
              readonly items: {
                readonly description: "This class is used in SentimentAnalysisDataClass to describe each segment analyzed.\n\n    Args:\n        - segment (str): The segment analyzed\n        - sentiment (Literal['Positve', 'Negative', 'Neutral']) (Case is ignore): Sentiment of segment\n        - sentiment_rate (float between 0 and 1): Rate of sentiment\n    ";
                readonly required: readonly ['segment', 'sentiment', 'sentiment_rate'];
                readonly title: 'SegmentSentimentAnalysisDataClass';
                readonly type: 'object';
                readonly properties: {
                  readonly segment: {
                    readonly title: 'Segment';
                    readonly type: 'string';
                  };
                  readonly sentiment: {
                    readonly title: 'Sentiment';
                    readonly enum: readonly ['Positive', 'Negative', 'Neutral'];
                    readonly type: 'string';
                    readonly description: '`Positive` `Negative` `Neutral`';
                  };
                  readonly sentiment_rate: {
                    readonly maximum: 1;
                    readonly minimum: 0;
                    readonly title: 'Sentiment Rate';
                    readonly type: 'integer';
                  };
                };
              };
            };
            readonly original_response: {
              readonly default: any;
              readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
              readonly title: 'Original Response';
            };
            readonly status: {
              readonly title: 'Status';
              readonly enum: readonly ['sucess', 'fail'];
              readonly type: 'string';
              readonly description: '`sucess` `fail`';
            };
          };
        };
        readonly lettria: {
          readonly required: readonly ['general_sentiment', 'general_sentiment_rate', 'status'];
          readonly title: 'textsentiment_analysisSentimentAnalysisDataClass';
          readonly type: 'object';
          readonly properties: {
            readonly general_sentiment: {
              readonly title: 'General Sentiment';
              readonly enum: readonly ['Positive', 'Negative', 'Neutral'];
              readonly type: 'string';
              readonly description: '`Positive` `Negative` `Neutral`';
            };
            readonly general_sentiment_rate: {
              readonly maximum: 1;
              readonly minimum: 0;
              readonly title: 'General Sentiment Rate';
              readonly type: 'integer';
            };
            readonly items: {
              readonly title: 'Items';
              readonly type: 'array';
              readonly items: {
                readonly description: "This class is used in SentimentAnalysisDataClass to describe each segment analyzed.\n\n    Args:\n        - segment (str): The segment analyzed\n        - sentiment (Literal['Positve', 'Negative', 'Neutral']) (Case is ignore): Sentiment of segment\n        - sentiment_rate (float between 0 and 1): Rate of sentiment\n    ";
                readonly required: readonly ['segment', 'sentiment', 'sentiment_rate'];
                readonly title: 'SegmentSentimentAnalysisDataClass';
                readonly type: 'object';
                readonly properties: {
                  readonly segment: {
                    readonly title: 'Segment';
                    readonly type: 'string';
                  };
                  readonly sentiment: {
                    readonly title: 'Sentiment';
                    readonly enum: readonly ['Positive', 'Negative', 'Neutral'];
                    readonly type: 'string';
                    readonly description: '`Positive` `Negative` `Neutral`';
                  };
                  readonly sentiment_rate: {
                    readonly maximum: 1;
                    readonly minimum: 0;
                    readonly title: 'Sentiment Rate';
                    readonly type: 'integer';
                  };
                };
              };
            };
            readonly original_response: {
              readonly default: any;
              readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
              readonly title: 'Original Response';
            };
            readonly status: {
              readonly title: 'Status';
              readonly enum: readonly ['sucess', 'fail'];
              readonly type: 'string';
              readonly description: '`sucess` `fail`';
            };
          };
        };
        readonly sapling: {
          readonly required: readonly ['general_sentiment', 'general_sentiment_rate', 'status'];
          readonly title: 'textsentiment_analysisSentimentAnalysisDataClass';
          readonly type: 'object';
          readonly properties: {
            readonly general_sentiment: {
              readonly title: 'General Sentiment';
              readonly enum: readonly ['Positive', 'Negative', 'Neutral'];
              readonly type: 'string';
              readonly description: '`Positive` `Negative` `Neutral`';
            };
            readonly general_sentiment_rate: {
              readonly maximum: 1;
              readonly minimum: 0;
              readonly title: 'General Sentiment Rate';
              readonly type: 'integer';
            };
            readonly items: {
              readonly title: 'Items';
              readonly type: 'array';
              readonly items: {
                readonly description: "This class is used in SentimentAnalysisDataClass to describe each segment analyzed.\n\n    Args:\n        - segment (str): The segment analyzed\n        - sentiment (Literal['Positve', 'Negative', 'Neutral']) (Case is ignore): Sentiment of segment\n        - sentiment_rate (float between 0 and 1): Rate of sentiment\n    ";
                readonly required: readonly ['segment', 'sentiment', 'sentiment_rate'];
                readonly title: 'SegmentSentimentAnalysisDataClass';
                readonly type: 'object';
                readonly properties: {
                  readonly segment: {
                    readonly title: 'Segment';
                    readonly type: 'string';
                  };
                  readonly sentiment: {
                    readonly title: 'Sentiment';
                    readonly enum: readonly ['Positive', 'Negative', 'Neutral'];
                    readonly type: 'string';
                    readonly description: '`Positive` `Negative` `Neutral`';
                  };
                  readonly sentiment_rate: {
                    readonly maximum: 1;
                    readonly minimum: 0;
                    readonly title: 'Sentiment Rate';
                    readonly type: 'integer';
                  };
                };
              };
            };
            readonly original_response: {
              readonly default: any;
              readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
              readonly title: 'Original Response';
            };
            readonly status: {
              readonly title: 'Status';
              readonly enum: readonly ['sucess', 'fail'];
              readonly type: 'string';
              readonly description: '`sucess` `fail`';
            };
          };
        };
        readonly tenstorrent: {
          readonly required: readonly ['general_sentiment', 'general_sentiment_rate', 'status'];
          readonly title: 'textsentiment_analysisSentimentAnalysisDataClass';
          readonly type: 'object';
          readonly properties: {
            readonly general_sentiment: {
              readonly title: 'General Sentiment';
              readonly enum: readonly ['Positive', 'Negative', 'Neutral'];
              readonly type: 'string';
              readonly description: '`Positive` `Negative` `Neutral`';
            };
            readonly general_sentiment_rate: {
              readonly maximum: 1;
              readonly minimum: 0;
              readonly title: 'General Sentiment Rate';
              readonly type: 'integer';
            };
            readonly items: {
              readonly title: 'Items';
              readonly type: 'array';
              readonly items: {
                readonly description: "This class is used in SentimentAnalysisDataClass to describe each segment analyzed.\n\n    Args:\n        - segment (str): The segment analyzed\n        - sentiment (Literal['Positve', 'Negative', 'Neutral']) (Case is ignore): Sentiment of segment\n        - sentiment_rate (float between 0 and 1): Rate of sentiment\n    ";
                readonly required: readonly ['segment', 'sentiment', 'sentiment_rate'];
                readonly title: 'SegmentSentimentAnalysisDataClass';
                readonly type: 'object';
                readonly properties: {
                  readonly segment: {
                    readonly title: 'Segment';
                    readonly type: 'string';
                  };
                  readonly sentiment: {
                    readonly title: 'Sentiment';
                    readonly enum: readonly ['Positive', 'Negative', 'Neutral'];
                    readonly type: 'string';
                    readonly description: '`Positive` `Negative` `Neutral`';
                  };
                  readonly sentiment_rate: {
                    readonly maximum: 1;
                    readonly minimum: 0;
                    readonly title: 'Sentiment Rate';
                    readonly type: 'integer';
                  };
                };
              };
            };
            readonly original_response: {
              readonly default: any;
              readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
              readonly title: 'Original Response';
            };
            readonly status: {
              readonly title: 'Status';
              readonly enum: readonly ['sucess', 'fail'];
              readonly type: 'string';
              readonly description: '`sucess` `fail`';
            };
          };
        };
        readonly microsoft: {
          readonly required: readonly ['general_sentiment', 'general_sentiment_rate', 'status'];
          readonly title: 'textsentiment_analysisSentimentAnalysisDataClass';
          readonly type: 'object';
          readonly properties: {
            readonly general_sentiment: {
              readonly title: 'General Sentiment';
              readonly enum: readonly ['Positive', 'Negative', 'Neutral'];
              readonly type: 'string';
              readonly description: '`Positive` `Negative` `Neutral`';
            };
            readonly general_sentiment_rate: {
              readonly maximum: 1;
              readonly minimum: 0;
              readonly title: 'General Sentiment Rate';
              readonly type: 'integer';
            };
            readonly items: {
              readonly title: 'Items';
              readonly type: 'array';
              readonly items: {
                readonly description: "This class is used in SentimentAnalysisDataClass to describe each segment analyzed.\n\n    Args:\n        - segment (str): The segment analyzed\n        - sentiment (Literal['Positve', 'Negative', 'Neutral']) (Case is ignore): Sentiment of segment\n        - sentiment_rate (float between 0 and 1): Rate of sentiment\n    ";
                readonly required: readonly ['segment', 'sentiment', 'sentiment_rate'];
                readonly title: 'SegmentSentimentAnalysisDataClass';
                readonly type: 'object';
                readonly properties: {
                  readonly segment: {
                    readonly title: 'Segment';
                    readonly type: 'string';
                  };
                  readonly sentiment: {
                    readonly title: 'Sentiment';
                    readonly enum: readonly ['Positive', 'Negative', 'Neutral'];
                    readonly type: 'string';
                    readonly description: '`Positive` `Negative` `Neutral`';
                  };
                  readonly sentiment_rate: {
                    readonly maximum: 1;
                    readonly minimum: 0;
                    readonly title: 'Sentiment Rate';
                    readonly type: 'integer';
                  };
                };
              };
            };
            readonly original_response: {
              readonly default: any;
              readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
              readonly title: 'Original Response';
            };
            readonly status: {
              readonly title: 'Status';
              readonly enum: readonly ['sucess', 'fail'];
              readonly type: 'string';
              readonly description: '`sucess` `fail`';
            };
          };
        };
        readonly connexun: {
          readonly required: readonly ['general_sentiment', 'general_sentiment_rate', 'status'];
          readonly title: 'textsentiment_analysisSentimentAnalysisDataClass';
          readonly type: 'object';
          readonly properties: {
            readonly general_sentiment: {
              readonly title: 'General Sentiment';
              readonly enum: readonly ['Positive', 'Negative', 'Neutral'];
              readonly type: 'string';
              readonly description: '`Positive` `Negative` `Neutral`';
            };
            readonly general_sentiment_rate: {
              readonly maximum: 1;
              readonly minimum: 0;
              readonly title: 'General Sentiment Rate';
              readonly type: 'integer';
            };
            readonly items: {
              readonly title: 'Items';
              readonly type: 'array';
              readonly items: {
                readonly description: "This class is used in SentimentAnalysisDataClass to describe each segment analyzed.\n\n    Args:\n        - segment (str): The segment analyzed\n        - sentiment (Literal['Positve', 'Negative', 'Neutral']) (Case is ignore): Sentiment of segment\n        - sentiment_rate (float between 0 and 1): Rate of sentiment\n    ";
                readonly required: readonly ['segment', 'sentiment', 'sentiment_rate'];
                readonly title: 'SegmentSentimentAnalysisDataClass';
                readonly type: 'object';
                readonly properties: {
                  readonly segment: {
                    readonly title: 'Segment';
                    readonly type: 'string';
                  };
                  readonly sentiment: {
                    readonly title: 'Sentiment';
                    readonly enum: readonly ['Positive', 'Negative', 'Neutral'];
                    readonly type: 'string';
                    readonly description: '`Positive` `Negative` `Neutral`';
                  };
                  readonly sentiment_rate: {
                    readonly maximum: 1;
                    readonly minimum: 0;
                    readonly title: 'Sentiment Rate';
                    readonly type: 'integer';
                  };
                };
              };
            };
            readonly original_response: {
              readonly default: any;
              readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
              readonly title: 'Original Response';
            };
            readonly status: {
              readonly title: 'Status';
              readonly enum: readonly ['sucess', 'fail'];
              readonly type: 'string';
              readonly description: '`sucess` `fail`';
            };
          };
        };
        readonly openai: {
          readonly required: readonly ['general_sentiment', 'general_sentiment_rate', 'status'];
          readonly title: 'textsentiment_analysisSentimentAnalysisDataClass';
          readonly type: 'object';
          readonly properties: {
            readonly general_sentiment: {
              readonly title: 'General Sentiment';
              readonly enum: readonly ['Positive', 'Negative', 'Neutral'];
              readonly type: 'string';
              readonly description: '`Positive` `Negative` `Neutral`';
            };
            readonly general_sentiment_rate: {
              readonly maximum: 1;
              readonly minimum: 0;
              readonly title: 'General Sentiment Rate';
              readonly type: 'integer';
            };
            readonly items: {
              readonly title: 'Items';
              readonly type: 'array';
              readonly items: {
                readonly description: "This class is used in SentimentAnalysisDataClass to describe each segment analyzed.\n\n    Args:\n        - segment (str): The segment analyzed\n        - sentiment (Literal['Positve', 'Negative', 'Neutral']) (Case is ignore): Sentiment of segment\n        - sentiment_rate (float between 0 and 1): Rate of sentiment\n    ";
                readonly required: readonly ['segment', 'sentiment', 'sentiment_rate'];
                readonly title: 'SegmentSentimentAnalysisDataClass';
                readonly type: 'object';
                readonly properties: {
                  readonly segment: {
                    readonly title: 'Segment';
                    readonly type: 'string';
                  };
                  readonly sentiment: {
                    readonly title: 'Sentiment';
                    readonly enum: readonly ['Positive', 'Negative', 'Neutral'];
                    readonly type: 'string';
                    readonly description: '`Positive` `Negative` `Neutral`';
                  };
                  readonly sentiment_rate: {
                    readonly maximum: 1;
                    readonly minimum: 0;
                    readonly title: 'Sentiment Rate';
                    readonly type: 'integer';
                  };
                };
              };
            };
            readonly original_response: {
              readonly default: any;
              readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
              readonly title: 'Original Response';
            };
            readonly status: {
              readonly title: 'Status';
              readonly enum: readonly ['sucess', 'fail'];
              readonly type: 'string';
              readonly description: '`sucess` `fail`';
            };
          };
        };
        readonly ibm: {
          readonly required: readonly ['general_sentiment', 'general_sentiment_rate', 'status'];
          readonly title: 'textsentiment_analysisSentimentAnalysisDataClass';
          readonly type: 'object';
          readonly properties: {
            readonly general_sentiment: {
              readonly title: 'General Sentiment';
              readonly enum: readonly ['Positive', 'Negative', 'Neutral'];
              readonly type: 'string';
              readonly description: '`Positive` `Negative` `Neutral`';
            };
            readonly general_sentiment_rate: {
              readonly maximum: 1;
              readonly minimum: 0;
              readonly title: 'General Sentiment Rate';
              readonly type: 'integer';
            };
            readonly items: {
              readonly title: 'Items';
              readonly type: 'array';
              readonly items: {
                readonly description: "This class is used in SentimentAnalysisDataClass to describe each segment analyzed.\n\n    Args:\n        - segment (str): The segment analyzed\n        - sentiment (Literal['Positve', 'Negative', 'Neutral']) (Case is ignore): Sentiment of segment\n        - sentiment_rate (float between 0 and 1): Rate of sentiment\n    ";
                readonly required: readonly ['segment', 'sentiment', 'sentiment_rate'];
                readonly title: 'SegmentSentimentAnalysisDataClass';
                readonly type: 'object';
                readonly properties: {
                  readonly segment: {
                    readonly title: 'Segment';
                    readonly type: 'string';
                  };
                  readonly sentiment: {
                    readonly title: 'Sentiment';
                    readonly enum: readonly ['Positive', 'Negative', 'Neutral'];
                    readonly type: 'string';
                    readonly description: '`Positive` `Negative` `Neutral`';
                  };
                  readonly sentiment_rate: {
                    readonly maximum: 1;
                    readonly minimum: 0;
                    readonly title: 'Sentiment Rate';
                    readonly type: 'integer';
                  };
                };
              };
            };
            readonly original_response: {
              readonly default: any;
              readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
              readonly title: 'Original Response';
            };
            readonly status: {
              readonly title: 'Status';
              readonly enum: readonly ['sucess', 'fail'];
              readonly type: 'string';
              readonly description: '`sucess` `fail`';
            };
          };
        };
        readonly oneai: {
          readonly required: readonly ['general_sentiment', 'general_sentiment_rate', 'status'];
          readonly title: 'textsentiment_analysisSentimentAnalysisDataClass';
          readonly type: 'object';
          readonly properties: {
            readonly general_sentiment: {
              readonly title: 'General Sentiment';
              readonly enum: readonly ['Positive', 'Negative', 'Neutral'];
              readonly type: 'string';
              readonly description: '`Positive` `Negative` `Neutral`';
            };
            readonly general_sentiment_rate: {
              readonly maximum: 1;
              readonly minimum: 0;
              readonly title: 'General Sentiment Rate';
              readonly type: 'integer';
            };
            readonly items: {
              readonly title: 'Items';
              readonly type: 'array';
              readonly items: {
                readonly description: "This class is used in SentimentAnalysisDataClass to describe each segment analyzed.\n\n    Args:\n        - segment (str): The segment analyzed\n        - sentiment (Literal['Positve', 'Negative', 'Neutral']) (Case is ignore): Sentiment of segment\n        - sentiment_rate (float between 0 and 1): Rate of sentiment\n    ";
                readonly required: readonly ['segment', 'sentiment', 'sentiment_rate'];
                readonly title: 'SegmentSentimentAnalysisDataClass';
                readonly type: 'object';
                readonly properties: {
                  readonly segment: {
                    readonly title: 'Segment';
                    readonly type: 'string';
                  };
                  readonly sentiment: {
                    readonly title: 'Sentiment';
                    readonly enum: readonly ['Positive', 'Negative', 'Neutral'];
                    readonly type: 'string';
                    readonly description: '`Positive` `Negative` `Neutral`';
                  };
                  readonly sentiment_rate: {
                    readonly maximum: 1;
                    readonly minimum: 0;
                    readonly title: 'Sentiment Rate';
                    readonly type: 'integer';
                  };
                };
              };
            };
            readonly original_response: {
              readonly default: any;
              readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
              readonly title: 'Original Response';
            };
            readonly status: {
              readonly title: 'Status';
              readonly enum: readonly ['sucess', 'fail'];
              readonly type: 'string';
              readonly description: '`sucess` `fail`';
            };
          };
        };
        readonly google: {
          readonly required: readonly ['general_sentiment', 'general_sentiment_rate', 'status'];
          readonly title: 'textsentiment_analysisSentimentAnalysisDataClass';
          readonly type: 'object';
          readonly properties: {
            readonly general_sentiment: {
              readonly title: 'General Sentiment';
              readonly enum: readonly ['Positive', 'Negative', 'Neutral'];
              readonly type: 'string';
              readonly description: '`Positive` `Negative` `Neutral`';
            };
            readonly general_sentiment_rate: {
              readonly maximum: 1;
              readonly minimum: 0;
              readonly title: 'General Sentiment Rate';
              readonly type: 'integer';
            };
            readonly items: {
              readonly title: 'Items';
              readonly type: 'array';
              readonly items: {
                readonly description: "This class is used in SentimentAnalysisDataClass to describe each segment analyzed.\n\n    Args:\n        - segment (str): The segment analyzed\n        - sentiment (Literal['Positve', 'Negative', 'Neutral']) (Case is ignore): Sentiment of segment\n        - sentiment_rate (float between 0 and 1): Rate of sentiment\n    ";
                readonly required: readonly ['segment', 'sentiment', 'sentiment_rate'];
                readonly title: 'SegmentSentimentAnalysisDataClass';
                readonly type: 'object';
                readonly properties: {
                  readonly segment: {
                    readonly title: 'Segment';
                    readonly type: 'string';
                  };
                  readonly sentiment: {
                    readonly title: 'Sentiment';
                    readonly enum: readonly ['Positive', 'Negative', 'Neutral'];
                    readonly type: 'string';
                    readonly description: '`Positive` `Negative` `Neutral`';
                  };
                  readonly sentiment_rate: {
                    readonly maximum: 1;
                    readonly minimum: 0;
                    readonly title: 'Sentiment Rate';
                    readonly type: 'integer';
                  };
                };
              };
            };
            readonly original_response: {
              readonly default: any;
              readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
              readonly title: 'Original Response';
            };
            readonly status: {
              readonly title: 'Status';
              readonly enum: readonly ['sucess', 'fail'];
              readonly type: 'string';
              readonly description: '`sucess` `fail`';
            };
          };
        };
        readonly amazon: {
          readonly required: readonly ['general_sentiment', 'general_sentiment_rate', 'status'];
          readonly title: 'textsentiment_analysisSentimentAnalysisDataClass';
          readonly type: 'object';
          readonly properties: {
            readonly general_sentiment: {
              readonly title: 'General Sentiment';
              readonly enum: readonly ['Positive', 'Negative', 'Neutral'];
              readonly type: 'string';
              readonly description: '`Positive` `Negative` `Neutral`';
            };
            readonly general_sentiment_rate: {
              readonly maximum: 1;
              readonly minimum: 0;
              readonly title: 'General Sentiment Rate';
              readonly type: 'integer';
            };
            readonly items: {
              readonly title: 'Items';
              readonly type: 'array';
              readonly items: {
                readonly description: "This class is used in SentimentAnalysisDataClass to describe each segment analyzed.\n\n    Args:\n        - segment (str): The segment analyzed\n        - sentiment (Literal['Positve', 'Negative', 'Neutral']) (Case is ignore): Sentiment of segment\n        - sentiment_rate (float between 0 and 1): Rate of sentiment\n    ";
                readonly required: readonly ['segment', 'sentiment', 'sentiment_rate'];
                readonly title: 'SegmentSentimentAnalysisDataClass';
                readonly type: 'object';
                readonly properties: {
                  readonly segment: {
                    readonly title: 'Segment';
                    readonly type: 'string';
                  };
                  readonly sentiment: {
                    readonly title: 'Sentiment';
                    readonly enum: readonly ['Positive', 'Negative', 'Neutral'];
                    readonly type: 'string';
                    readonly description: '`Positive` `Negative` `Neutral`';
                  };
                  readonly sentiment_rate: {
                    readonly maximum: 1;
                    readonly minimum: 0;
                    readonly title: 'Sentiment Rate';
                    readonly type: 'integer';
                  };
                };
              };
            };
            readonly original_response: {
              readonly default: any;
              readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
              readonly title: 'Original Response';
            };
            readonly status: {
              readonly title: 'Status';
              readonly enum: readonly ['sucess', 'fail'];
              readonly type: 'string';
              readonly description: '`sucess` `fail`';
            };
          };
        };
      };
      readonly title: 'textsentiment_analysisResponseModel';
      readonly type: 'object';
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '400': {
      readonly type: 'object';
      readonly properties: {
        readonly error: {
          readonly type: 'object';
          readonly properties: {
            readonly type: {
              readonly type: 'string';
            };
            readonly message: {
              readonly type: 'object';
              readonly properties: {
                readonly '<parameter_name>': {
                  readonly type: 'array';
                  readonly items: {
                    readonly type: 'string';
                  };
                };
              };
              readonly required: readonly ['<parameter_name>'];
            };
          };
          readonly required: readonly ['message', 'type'];
        };
      };
      readonly required: readonly ['error'];
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '403': {
      readonly type: 'object';
      readonly properties: {
        readonly error: {
          readonly type: 'object';
          readonly properties: {
            readonly type: {
              readonly type: 'string';
            };
            readonly message: {
              readonly type: 'string';
            };
          };
          readonly required: readonly ['message', 'type'];
        };
      };
      readonly required: readonly ['error'];
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '404': {
      readonly type: 'object';
      readonly properties: {
        readonly details: {
          readonly type: 'string';
          readonly default: 'Not Found';
        };
      };
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '500': {
      readonly type: 'object';
      readonly properties: {
        readonly error: {
          readonly type: 'object';
          readonly properties: {
            readonly type: {
              readonly type: 'string';
            };
            readonly message: {
              readonly type: 'string';
            };
          };
          readonly required: readonly ['message', 'type'];
        };
      };
      readonly required: readonly ['error'];
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
  };
};
declare const TextSpellCheckCreate: {
  readonly body: {
    readonly type: 'object';
    readonly properties: {
      readonly providers: {
        readonly type: 'string';
        readonly minLength: 1;
        readonly description: "It can be one (ex: **'amazon'** or **'google'**) or multiple provider(s) (ex: **'amazon,microsoft,google'**)             that the data will be redirected to in order to get the processed results.";
        readonly examples: readonly ['cohere,prowritingaid,openai,microsoft,sapling'];
      };
      readonly fallback_providers: {
        readonly type: 'string';
        readonly minLength: 1;
        readonly description: "Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.\n    To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.\n\nThey will be tried in the same order they are input, and it will stop to the first provider who doesn't fail.\n\n\n*Doesn't work with async subfeatures.*\n    ";
      };
      readonly response_as_dict: {
        readonly type: 'boolean';
        readonly default: true;
        readonly description: "Optional : When set to **true** (default), the response is an object of responses with providers names as keys : <br> \n                  ``` {'google' : { 'status': 'success', ... }, } ``` <br>\n                When set to **false** the response structure is a list of response objects : <br> \n                   ``` [{'status': 'success', 'provider': 'google' ... }, ] ```. <br> \n                  ";
      };
      readonly attributes_as_list: {
        readonly type: 'boolean';
        readonly default: false;
        readonly description: "Optional : When set to **false** (default) the structure of the extracted items is list of objects having different attributes : <br>\n     ```{'items': [{'attribute_1': 'x1','attribute_2': 'y2'}, ... ]}``` <br>\n     When it is set to **true**, the response contains an object with each attribute as a list : <br>\n     ```{ 'attribute_1': ['x1','x2', ...], 'attribute_2': [y1, y2, ...]}``` ";
      };
      readonly show_original_response: {
        readonly type: 'boolean';
        readonly default: false;
        readonly description: 'Optional : Shows the original response of the provider.<br>\n        When set to **true**, a new attribute *original_response* will appear in the response object.';
      };
      readonly text: {
        readonly type: 'string';
        readonly minLength: 1;
        readonly description: 'Text to analyze';
        readonly examples: readonly ['Hollo, wrld! How re yu?'];
      };
      readonly language: {
        readonly type: readonly ['string', 'null'];
        readonly description: 'Language code for the language the input text is written in (eg: en, fr).';
        readonly examples: readonly ['en'];
      };
    };
    readonly required: readonly ['providers', 'text'];
    readonly $schema: 'http://json-schema.org/draft-04/schema#';
  };
  readonly response: {
    readonly '200': {
      readonly properties: {
        readonly prowritingaid: {
          readonly required: readonly ['text', 'status'];
          readonly title: 'textspell_checkSpellCheckDataClass';
          readonly type: 'object';
          readonly properties: {
            readonly text: {
              readonly title: 'Text';
              readonly type: 'string';
            };
            readonly items: {
              readonly title: 'Items';
              readonly type: 'array';
              readonly items: {
                readonly description: '\n    Represents a spell check item with suggestions.\n\n    Args:\n        text (str): The text to spell check.\n        type (str, optional): The type of the text.\n        offset (int): The offset of the text.\n        length (int): The length of the text.\n        suggestions (Sequence[SuggestionItem], optional): The list of suggestions for the misspelled text.\n\n    Raises:\n        ValueError: If the offset or length is not positive.\n\n    Returns:\n        SpellCheckItem: An instance of the SpellCheckItem class.\n    ';
                readonly required: readonly ['text', 'type', 'offset', 'length'];
                readonly title: 'SpellCheckItem';
                readonly type: 'object';
                readonly properties: {
                  readonly text: {
                    readonly title: 'Text';
                    readonly type: 'string';
                  };
                  readonly type: {
                    readonly title: 'Type';
                    readonly type: 'string';
                  };
                  readonly offset: {
                    readonly minimum: 0;
                    readonly title: 'Offset';
                    readonly type: 'integer';
                  };
                  readonly length: {
                    readonly minimum: 0;
                    readonly title: 'Length';
                    readonly type: 'integer';
                  };
                  readonly suggestions: {
                    readonly title: 'Suggestions';
                    readonly type: 'array';
                    readonly items: {
                      readonly description: '\n    Represents a suggestion for a misspelled word.\n\n    Args:\n        suggestion (str): The suggested text.\n        score (float, optional): The score of the suggested text (between 0 and 1).\n\n    Raises:\n        ValueError: If the score is not between 0 and 1.\n\n    Returns:\n        SuggestionItem: An instance of the SuggestionItem class.\n    ';
                      readonly required: readonly ['suggestion', 'score'];
                      readonly title: 'SuggestionItem';
                      readonly type: 'object';
                      readonly properties: {
                        readonly suggestion: {
                          readonly title: 'Suggestion';
                          readonly type: 'string';
                        };
                        readonly score: {
                          readonly maximum: 1;
                          readonly minimum: 0;
                          readonly title: 'Score';
                          readonly type: 'integer';
                        };
                      };
                    };
                  };
                };
              };
            };
            readonly original_response: {
              readonly default: any;
              readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
              readonly title: 'Original Response';
            };
            readonly status: {
              readonly title: 'Status';
              readonly enum: readonly ['sucess', 'fail'];
              readonly type: 'string';
              readonly description: '`sucess` `fail`';
            };
          };
        };
        readonly sapling: {
          readonly required: readonly ['text', 'status'];
          readonly title: 'textspell_checkSpellCheckDataClass';
          readonly type: 'object';
          readonly properties: {
            readonly text: {
              readonly title: 'Text';
              readonly type: 'string';
            };
            readonly items: {
              readonly title: 'Items';
              readonly type: 'array';
              readonly items: {
                readonly description: '\n    Represents a spell check item with suggestions.\n\n    Args:\n        text (str): The text to spell check.\n        type (str, optional): The type of the text.\n        offset (int): The offset of the text.\n        length (int): The length of the text.\n        suggestions (Sequence[SuggestionItem], optional): The list of suggestions for the misspelled text.\n\n    Raises:\n        ValueError: If the offset or length is not positive.\n\n    Returns:\n        SpellCheckItem: An instance of the SpellCheckItem class.\n    ';
                readonly required: readonly ['text', 'type', 'offset', 'length'];
                readonly title: 'SpellCheckItem';
                readonly type: 'object';
                readonly properties: {
                  readonly text: {
                    readonly title: 'Text';
                    readonly type: 'string';
                  };
                  readonly type: {
                    readonly title: 'Type';
                    readonly type: 'string';
                  };
                  readonly offset: {
                    readonly minimum: 0;
                    readonly title: 'Offset';
                    readonly type: 'integer';
                  };
                  readonly length: {
                    readonly minimum: 0;
                    readonly title: 'Length';
                    readonly type: 'integer';
                  };
                  readonly suggestions: {
                    readonly title: 'Suggestions';
                    readonly type: 'array';
                    readonly items: {
                      readonly description: '\n    Represents a suggestion for a misspelled word.\n\n    Args:\n        suggestion (str): The suggested text.\n        score (float, optional): The score of the suggested text (between 0 and 1).\n\n    Raises:\n        ValueError: If the score is not between 0 and 1.\n\n    Returns:\n        SuggestionItem: An instance of the SuggestionItem class.\n    ';
                      readonly required: readonly ['suggestion', 'score'];
                      readonly title: 'SuggestionItem';
                      readonly type: 'object';
                      readonly properties: {
                        readonly suggestion: {
                          readonly title: 'Suggestion';
                          readonly type: 'string';
                        };
                        readonly score: {
                          readonly maximum: 1;
                          readonly minimum: 0;
                          readonly title: 'Score';
                          readonly type: 'integer';
                        };
                      };
                    };
                  };
                };
              };
            };
            readonly original_response: {
              readonly default: any;
              readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
              readonly title: 'Original Response';
            };
            readonly status: {
              readonly title: 'Status';
              readonly enum: readonly ['sucess', 'fail'];
              readonly type: 'string';
              readonly description: '`sucess` `fail`';
            };
          };
        };
        readonly microsoft: {
          readonly required: readonly ['text', 'status'];
          readonly title: 'textspell_checkSpellCheckDataClass';
          readonly type: 'object';
          readonly properties: {
            readonly text: {
              readonly title: 'Text';
              readonly type: 'string';
            };
            readonly items: {
              readonly title: 'Items';
              readonly type: 'array';
              readonly items: {
                readonly description: '\n    Represents a spell check item with suggestions.\n\n    Args:\n        text (str): The text to spell check.\n        type (str, optional): The type of the text.\n        offset (int): The offset of the text.\n        length (int): The length of the text.\n        suggestions (Sequence[SuggestionItem], optional): The list of suggestions for the misspelled text.\n\n    Raises:\n        ValueError: If the offset or length is not positive.\n\n    Returns:\n        SpellCheckItem: An instance of the SpellCheckItem class.\n    ';
                readonly required: readonly ['text', 'type', 'offset', 'length'];
                readonly title: 'SpellCheckItem';
                readonly type: 'object';
                readonly properties: {
                  readonly text: {
                    readonly title: 'Text';
                    readonly type: 'string';
                  };
                  readonly type: {
                    readonly title: 'Type';
                    readonly type: 'string';
                  };
                  readonly offset: {
                    readonly minimum: 0;
                    readonly title: 'Offset';
                    readonly type: 'integer';
                  };
                  readonly length: {
                    readonly minimum: 0;
                    readonly title: 'Length';
                    readonly type: 'integer';
                  };
                  readonly suggestions: {
                    readonly title: 'Suggestions';
                    readonly type: 'array';
                    readonly items: {
                      readonly description: '\n    Represents a suggestion for a misspelled word.\n\n    Args:\n        suggestion (str): The suggested text.\n        score (float, optional): The score of the suggested text (between 0 and 1).\n\n    Raises:\n        ValueError: If the score is not between 0 and 1.\n\n    Returns:\n        SuggestionItem: An instance of the SuggestionItem class.\n    ';
                      readonly required: readonly ['suggestion', 'score'];
                      readonly title: 'SuggestionItem';
                      readonly type: 'object';
                      readonly properties: {
                        readonly suggestion: {
                          readonly title: 'Suggestion';
                          readonly type: 'string';
                        };
                        readonly score: {
                          readonly maximum: 1;
                          readonly minimum: 0;
                          readonly title: 'Score';
                          readonly type: 'integer';
                        };
                      };
                    };
                  };
                };
              };
            };
            readonly original_response: {
              readonly default: any;
              readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
              readonly title: 'Original Response';
            };
            readonly status: {
              readonly title: 'Status';
              readonly enum: readonly ['sucess', 'fail'];
              readonly type: 'string';
              readonly description: '`sucess` `fail`';
            };
          };
        };
        readonly cohere: {
          readonly required: readonly ['text', 'status'];
          readonly title: 'textspell_checkSpellCheckDataClass';
          readonly type: 'object';
          readonly properties: {
            readonly text: {
              readonly title: 'Text';
              readonly type: 'string';
            };
            readonly items: {
              readonly title: 'Items';
              readonly type: 'array';
              readonly items: {
                readonly description: '\n    Represents a spell check item with suggestions.\n\n    Args:\n        text (str): The text to spell check.\n        type (str, optional): The type of the text.\n        offset (int): The offset of the text.\n        length (int): The length of the text.\n        suggestions (Sequence[SuggestionItem], optional): The list of suggestions for the misspelled text.\n\n    Raises:\n        ValueError: If the offset or length is not positive.\n\n    Returns:\n        SpellCheckItem: An instance of the SpellCheckItem class.\n    ';
                readonly required: readonly ['text', 'type', 'offset', 'length'];
                readonly title: 'SpellCheckItem';
                readonly type: 'object';
                readonly properties: {
                  readonly text: {
                    readonly title: 'Text';
                    readonly type: 'string';
                  };
                  readonly type: {
                    readonly title: 'Type';
                    readonly type: 'string';
                  };
                  readonly offset: {
                    readonly minimum: 0;
                    readonly title: 'Offset';
                    readonly type: 'integer';
                  };
                  readonly length: {
                    readonly minimum: 0;
                    readonly title: 'Length';
                    readonly type: 'integer';
                  };
                  readonly suggestions: {
                    readonly title: 'Suggestions';
                    readonly type: 'array';
                    readonly items: {
                      readonly description: '\n    Represents a suggestion for a misspelled word.\n\n    Args:\n        suggestion (str): The suggested text.\n        score (float, optional): The score of the suggested text (between 0 and 1).\n\n    Raises:\n        ValueError: If the score is not between 0 and 1.\n\n    Returns:\n        SuggestionItem: An instance of the SuggestionItem class.\n    ';
                      readonly required: readonly ['suggestion', 'score'];
                      readonly title: 'SuggestionItem';
                      readonly type: 'object';
                      readonly properties: {
                        readonly suggestion: {
                          readonly title: 'Suggestion';
                          readonly type: 'string';
                        };
                        readonly score: {
                          readonly maximum: 1;
                          readonly minimum: 0;
                          readonly title: 'Score';
                          readonly type: 'integer';
                        };
                      };
                    };
                  };
                };
              };
            };
            readonly original_response: {
              readonly default: any;
              readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
              readonly title: 'Original Response';
            };
            readonly status: {
              readonly title: 'Status';
              readonly enum: readonly ['sucess', 'fail'];
              readonly type: 'string';
              readonly description: '`sucess` `fail`';
            };
          };
        };
        readonly openai: {
          readonly required: readonly ['text', 'status'];
          readonly title: 'textspell_checkSpellCheckDataClass';
          readonly type: 'object';
          readonly properties: {
            readonly text: {
              readonly title: 'Text';
              readonly type: 'string';
            };
            readonly items: {
              readonly title: 'Items';
              readonly type: 'array';
              readonly items: {
                readonly description: '\n    Represents a spell check item with suggestions.\n\n    Args:\n        text (str): The text to spell check.\n        type (str, optional): The type of the text.\n        offset (int): The offset of the text.\n        length (int): The length of the text.\n        suggestions (Sequence[SuggestionItem], optional): The list of suggestions for the misspelled text.\n\n    Raises:\n        ValueError: If the offset or length is not positive.\n\n    Returns:\n        SpellCheckItem: An instance of the SpellCheckItem class.\n    ';
                readonly required: readonly ['text', 'type', 'offset', 'length'];
                readonly title: 'SpellCheckItem';
                readonly type: 'object';
                readonly properties: {
                  readonly text: {
                    readonly title: 'Text';
                    readonly type: 'string';
                  };
                  readonly type: {
                    readonly title: 'Type';
                    readonly type: 'string';
                  };
                  readonly offset: {
                    readonly minimum: 0;
                    readonly title: 'Offset';
                    readonly type: 'integer';
                  };
                  readonly length: {
                    readonly minimum: 0;
                    readonly title: 'Length';
                    readonly type: 'integer';
                  };
                  readonly suggestions: {
                    readonly title: 'Suggestions';
                    readonly type: 'array';
                    readonly items: {
                      readonly description: '\n    Represents a suggestion for a misspelled word.\n\n    Args:\n        suggestion (str): The suggested text.\n        score (float, optional): The score of the suggested text (between 0 and 1).\n\n    Raises:\n        ValueError: If the score is not between 0 and 1.\n\n    Returns:\n        SuggestionItem: An instance of the SuggestionItem class.\n    ';
                      readonly required: readonly ['suggestion', 'score'];
                      readonly title: 'SuggestionItem';
                      readonly type: 'object';
                      readonly properties: {
                        readonly suggestion: {
                          readonly title: 'Suggestion';
                          readonly type: 'string';
                        };
                        readonly score: {
                          readonly maximum: 1;
                          readonly minimum: 0;
                          readonly title: 'Score';
                          readonly type: 'integer';
                        };
                      };
                    };
                  };
                };
              };
            };
            readonly original_response: {
              readonly default: any;
              readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
              readonly title: 'Original Response';
            };
            readonly status: {
              readonly title: 'Status';
              readonly enum: readonly ['sucess', 'fail'];
              readonly type: 'string';
              readonly description: '`sucess` `fail`';
            };
          };
        };
      };
      readonly title: 'textspell_checkResponseModel';
      readonly type: 'object';
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '400': {
      readonly type: 'object';
      readonly properties: {
        readonly error: {
          readonly type: 'object';
          readonly properties: {
            readonly type: {
              readonly type: 'string';
            };
            readonly message: {
              readonly type: 'object';
              readonly properties: {
                readonly '<parameter_name>': {
                  readonly type: 'array';
                  readonly items: {
                    readonly type: 'string';
                  };
                };
              };
              readonly required: readonly ['<parameter_name>'];
            };
          };
          readonly required: readonly ['message', 'type'];
        };
      };
      readonly required: readonly ['error'];
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '403': {
      readonly type: 'object';
      readonly properties: {
        readonly error: {
          readonly type: 'object';
          readonly properties: {
            readonly type: {
              readonly type: 'string';
            };
            readonly message: {
              readonly type: 'string';
            };
          };
          readonly required: readonly ['message', 'type'];
        };
      };
      readonly required: readonly ['error'];
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '404': {
      readonly type: 'object';
      readonly properties: {
        readonly details: {
          readonly type: 'string';
          readonly default: 'Not Found';
        };
      };
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '500': {
      readonly type: 'object';
      readonly properties: {
        readonly error: {
          readonly type: 'object';
          readonly properties: {
            readonly type: {
              readonly type: 'string';
            };
            readonly message: {
              readonly type: 'string';
            };
          };
          readonly required: readonly ['message', 'type'];
        };
      };
      readonly required: readonly ['error'];
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
  };
};
declare const TextSummarizeCreate: {
  readonly body: {
    readonly type: 'object';
    readonly properties: {
      readonly providers: {
        readonly type: 'string';
        readonly minLength: 1;
        readonly description: "It can be one (ex: **'amazon'** or **'google'**) or multiple provider(s) (ex: **'amazon,microsoft,google'**)             that the data will be redirected to in order to get the processed results.";
        readonly examples: readonly ['cohere,openai,microsoft,emvista,oneai,connexun'];
      };
      readonly fallback_providers: {
        readonly type: 'string';
        readonly minLength: 1;
        readonly description: "Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.\n    To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.\n\nThey will be tried in the same order they are input, and it will stop to the first provider who doesn't fail.\n\n\n*Doesn't work with async subfeatures.*\n    ";
      };
      readonly response_as_dict: {
        readonly type: 'boolean';
        readonly default: true;
        readonly description: "Optional : When set to **true** (default), the response is an object of responses with providers names as keys : <br> \n                  ``` {'google' : { 'status': 'success', ... }, } ``` <br>\n                When set to **false** the response structure is a list of response objects : <br> \n                   ``` [{'status': 'success', 'provider': 'google' ... }, ] ```. <br> \n                  ";
      };
      readonly attributes_as_list: {
        readonly type: 'boolean';
        readonly default: false;
        readonly description: "Optional : When set to **false** (default) the structure of the extracted items is list of objects having different attributes : <br>\n     ```{'items': [{'attribute_1': 'x1','attribute_2': 'y2'}, ... ]}``` <br>\n     When it is set to **true**, the response contains an object with each attribute as a list : <br>\n     ```{ 'attribute_1': ['x1','x2', ...], 'attribute_2': [y1, y2, ...]}``` ";
      };
      readonly show_original_response: {
        readonly type: 'boolean';
        readonly default: false;
        readonly description: 'Optional : Shows the original response of the provider.<br>\n        When set to **true**, a new attribute *original_response* will appear in the response object.';
      };
      readonly text: {
        readonly type: 'string';
        readonly minLength: 1;
        readonly description: 'Text to analyze';
        readonly examples: readonly [
          'Barack Hussein Obama is an American politician who served as the 44th president of the United States from 2009 to 2017. A member of the Democratic Party, Obama was the first African-American president of the United States. He previously served as a U.S. senator from Illinois from 2005 to 2008 and as an Illinois state senator from 1997 to 2004.'
        ];
      };
      readonly language: {
        readonly type: readonly ['string', 'null'];
        readonly description: 'Language code for the language the input text is written in (eg: en, fr).';
        readonly examples: readonly ['en'];
      };
      readonly settings: {
        readonly type: readonly ['object', 'null'];
        readonly additionalProperties: {
          readonly type: 'string';
          readonly minLength: 1;
          readonly description: 'The model id/name specified for the provider';
          readonly maxLength: 50;
        };
        readonly description: "A dictionnary or a json object to specify specific models to use for some providers. <br>                     It can be in the following format: {'google' : 'google_model', ibm': 'ibm_model'...}.\n                     **Caution**: setting models can be done only with `Content-Type` : `application/json`.\n                     ";
      };
      readonly output_sentences: {
        readonly type: 'integer';
        readonly minimum: 1;
        readonly default: 1;
        readonly examples: readonly [3];
      };
    };
    readonly required: readonly ['providers', 'text'];
    readonly $schema: 'http://json-schema.org/draft-04/schema#';
  };
  readonly response: {
    readonly '200': {
      readonly properties: {
        readonly emvista: {
          readonly required: readonly ['result', 'status'];
          readonly title: 'textsummarizeSummarizeDataClass';
          readonly type: 'object';
          readonly properties: {
            readonly result: {
              readonly title: 'Result';
              readonly type: 'string';
            };
            readonly original_response: {
              readonly default: any;
              readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
              readonly title: 'Original Response';
            };
            readonly status: {
              readonly title: 'Status';
              readonly enum: readonly ['sucess', 'fail'];
              readonly type: 'string';
              readonly description: '`sucess` `fail`';
            };
          };
        };
        readonly writesonic: {
          readonly required: readonly ['result', 'status'];
          readonly title: 'textsummarizeSummarizeDataClass';
          readonly type: 'object';
          readonly properties: {
            readonly result: {
              readonly title: 'Result';
              readonly type: 'string';
            };
            readonly original_response: {
              readonly default: any;
              readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
              readonly title: 'Original Response';
            };
            readonly status: {
              readonly title: 'Status';
              readonly enum: readonly ['sucess', 'fail'];
              readonly type: 'string';
              readonly description: '`sucess` `fail`';
            };
          };
        };
        readonly microsoft: {
          readonly required: readonly ['result', 'status'];
          readonly title: 'textsummarizeSummarizeDataClass';
          readonly type: 'object';
          readonly properties: {
            readonly result: {
              readonly title: 'Result';
              readonly type: 'string';
            };
            readonly original_response: {
              readonly default: any;
              readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
              readonly title: 'Original Response';
            };
            readonly status: {
              readonly title: 'Status';
              readonly enum: readonly ['sucess', 'fail'];
              readonly type: 'string';
              readonly description: '`sucess` `fail`';
            };
          };
        };
        readonly connexun: {
          readonly required: readonly ['result', 'status'];
          readonly title: 'textsummarizeSummarizeDataClass';
          readonly type: 'object';
          readonly properties: {
            readonly result: {
              readonly title: 'Result';
              readonly type: 'string';
            };
            readonly original_response: {
              readonly default: any;
              readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
              readonly title: 'Original Response';
            };
            readonly status: {
              readonly title: 'Status';
              readonly enum: readonly ['sucess', 'fail'];
              readonly type: 'string';
              readonly description: '`sucess` `fail`';
            };
          };
        };
        readonly cohere: {
          readonly required: readonly ['result', 'status'];
          readonly title: 'textsummarizeSummarizeDataClass';
          readonly type: 'object';
          readonly properties: {
            readonly result: {
              readonly title: 'Result';
              readonly type: 'string';
            };
            readonly original_response: {
              readonly default: any;
              readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
              readonly title: 'Original Response';
            };
            readonly status: {
              readonly title: 'Status';
              readonly enum: readonly ['sucess', 'fail'];
              readonly type: 'string';
              readonly description: '`sucess` `fail`';
            };
          };
        };
        readonly meaningcloud: {
          readonly required: readonly ['result', 'status'];
          readonly title: 'textsummarizeSummarizeDataClass';
          readonly type: 'object';
          readonly properties: {
            readonly result: {
              readonly title: 'Result';
              readonly type: 'string';
            };
            readonly original_response: {
              readonly default: any;
              readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
              readonly title: 'Original Response';
            };
            readonly status: {
              readonly title: 'Status';
              readonly enum: readonly ['sucess', 'fail'];
              readonly type: 'string';
              readonly description: '`sucess` `fail`';
            };
          };
        };
        readonly oneai: {
          readonly required: readonly ['result', 'status'];
          readonly title: 'textsummarizeSummarizeDataClass';
          readonly type: 'object';
          readonly properties: {
            readonly result: {
              readonly title: 'Result';
              readonly type: 'string';
            };
            readonly original_response: {
              readonly default: any;
              readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
              readonly title: 'Original Response';
            };
            readonly status: {
              readonly title: 'Status';
              readonly enum: readonly ['sucess', 'fail'];
              readonly type: 'string';
              readonly description: '`sucess` `fail`';
            };
          };
        };
        readonly openai: {
          readonly required: readonly ['result', 'status'];
          readonly title: 'textsummarizeSummarizeDataClass';
          readonly type: 'object';
          readonly properties: {
            readonly result: {
              readonly title: 'Result';
              readonly type: 'string';
            };
            readonly original_response: {
              readonly default: any;
              readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
              readonly title: 'Original Response';
            };
            readonly status: {
              readonly title: 'Status';
              readonly enum: readonly ['sucess', 'fail'];
              readonly type: 'string';
              readonly description: '`sucess` `fail`';
            };
          };
        };
        readonly huggingface: {
          readonly required: readonly ['result', 'status'];
          readonly title: 'textsummarizeSummarizeDataClass';
          readonly type: 'object';
          readonly properties: {
            readonly result: {
              readonly title: 'Result';
              readonly type: 'string';
            };
            readonly original_response: {
              readonly default: any;
              readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
              readonly title: 'Original Response';
            };
            readonly status: {
              readonly title: 'Status';
              readonly enum: readonly ['sucess', 'fail'];
              readonly type: 'string';
              readonly description: '`sucess` `fail`';
            };
          };
        };
      };
      readonly title: 'textsummarizeResponseModel';
      readonly type: 'object';
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '400': {
      readonly type: 'object';
      readonly properties: {
        readonly error: {
          readonly type: 'object';
          readonly properties: {
            readonly type: {
              readonly type: 'string';
            };
            readonly message: {
              readonly type: 'object';
              readonly properties: {
                readonly '<parameter_name>': {
                  readonly type: 'array';
                  readonly items: {
                    readonly type: 'string';
                  };
                };
              };
              readonly required: readonly ['<parameter_name>'];
            };
          };
          readonly required: readonly ['message', 'type'];
        };
      };
      readonly required: readonly ['error'];
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '403': {
      readonly type: 'object';
      readonly properties: {
        readonly error: {
          readonly type: 'object';
          readonly properties: {
            readonly type: {
              readonly type: 'string';
            };
            readonly message: {
              readonly type: 'string';
            };
          };
          readonly required: readonly ['message', 'type'];
        };
      };
      readonly required: readonly ['error'];
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '404': {
      readonly type: 'object';
      readonly properties: {
        readonly details: {
          readonly type: 'string';
          readonly default: 'Not Found';
        };
      };
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '500': {
      readonly type: 'object';
      readonly properties: {
        readonly error: {
          readonly type: 'object';
          readonly properties: {
            readonly type: {
              readonly type: 'string';
            };
            readonly message: {
              readonly type: 'string';
            };
          };
          readonly required: readonly ['message', 'type'];
        };
      };
      readonly required: readonly ['error'];
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
  };
};
declare const TextSyntaxAnalysisCreate: {
  readonly body: {
    readonly type: 'object';
    readonly properties: {
      readonly providers: {
        readonly type: 'string';
        readonly minLength: 1;
        readonly description: "It can be one (ex: **'amazon'** or **'google'**) or multiple provider(s) (ex: **'amazon,microsoft,google'**)             that the data will be redirected to in order to get the processed results.";
        readonly examples: readonly ['google,lettria,ibm,emvista,amazon'];
      };
      readonly fallback_providers: {
        readonly type: 'string';
        readonly minLength: 1;
        readonly description: "Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.\n    To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.\n\nThey will be tried in the same order they are input, and it will stop to the first provider who doesn't fail.\n\n\n*Doesn't work with async subfeatures.*\n    ";
      };
      readonly response_as_dict: {
        readonly type: 'boolean';
        readonly default: true;
        readonly description: "Optional : When set to **true** (default), the response is an object of responses with providers names as keys : <br> \n                  ``` {'google' : { 'status': 'success', ... }, } ``` <br>\n                When set to **false** the response structure is a list of response objects : <br> \n                   ``` [{'status': 'success', 'provider': 'google' ... }, ] ```. <br> \n                  ";
      };
      readonly attributes_as_list: {
        readonly type: 'boolean';
        readonly default: false;
        readonly description: "Optional : When set to **false** (default) the structure of the extracted items is list of objects having different attributes : <br>\n     ```{'items': [{'attribute_1': 'x1','attribute_2': 'y2'}, ... ]}``` <br>\n     When it is set to **true**, the response contains an object with each attribute as a list : <br>\n     ```{ 'attribute_1': ['x1','x2', ...], 'attribute_2': [y1, y2, ...]}``` ";
      };
      readonly show_original_response: {
        readonly type: 'boolean';
        readonly default: false;
        readonly description: 'Optional : Shows the original response of the provider.<br>\n        When set to **true**, a new attribute *original_response* will appear in the response object.';
      };
      readonly text: {
        readonly type: 'string';
        readonly minLength: 1;
        readonly description: 'Text to analyze';
        readonly examples: readonly [
          'Barack Hussein Obama is an American politician who served as the 44th president of the United States from 2009 to 2017. A member of the Democratic Party, Obama was the first African-American president of the United States. He previously served as a U.S. senator from Illinois from 2005 to 2008 and as an Illinois state senator from 1997 to 2004.'
        ];
      };
      readonly language: {
        readonly type: readonly ['string', 'null'];
        readonly description: 'Language code for the language the input text is written in (eg: en, fr).';
        readonly examples: readonly ['en'];
      };
    };
    readonly required: readonly ['providers', 'text'];
    readonly $schema: 'http://json-schema.org/draft-04/schema#';
  };
  readonly response: {
    readonly '200': {
      readonly properties: {
        readonly emvista: {
          readonly required: readonly ['status'];
          readonly title: 'textsyntax_analysisSyntaxAnalysisDataClass';
          readonly type: 'object';
          readonly properties: {
            readonly items: {
              readonly title: 'Items';
              readonly type: 'array';
              readonly items: {
                readonly required: readonly ['word', 'importance', 'tag', 'lemma'];
                readonly title: 'InfosSyntaxAnalysisDataClass';
                readonly type: 'object';
                readonly properties: {
                  readonly word: {
                    readonly title: 'Word';
                    readonly type: 'string';
                  };
                  readonly importance: {
                    readonly title: 'Importance';
                    readonly type: 'integer';
                  };
                  readonly tag: {
                    readonly title: 'Tag';
                    readonly type: 'string';
                  };
                  readonly lemma: {
                    readonly title: 'Lemma';
                    readonly type: 'string';
                  };
                  readonly others: {
                    readonly title: 'Others';
                    readonly type: 'object';
                    readonly additionalProperties: true;
                  };
                };
              };
            };
            readonly original_response: {
              readonly default: any;
              readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
              readonly title: 'Original Response';
            };
            readonly status: {
              readonly title: 'Status';
              readonly enum: readonly ['sucess', 'fail'];
              readonly type: 'string';
              readonly description: '`sucess` `fail`';
            };
          };
        };
        readonly lettria: {
          readonly required: readonly ['status'];
          readonly title: 'textsyntax_analysisSyntaxAnalysisDataClass';
          readonly type: 'object';
          readonly properties: {
            readonly items: {
              readonly title: 'Items';
              readonly type: 'array';
              readonly items: {
                readonly required: readonly ['word', 'importance', 'tag', 'lemma'];
                readonly title: 'InfosSyntaxAnalysisDataClass';
                readonly type: 'object';
                readonly properties: {
                  readonly word: {
                    readonly title: 'Word';
                    readonly type: 'string';
                  };
                  readonly importance: {
                    readonly title: 'Importance';
                    readonly type: 'integer';
                  };
                  readonly tag: {
                    readonly title: 'Tag';
                    readonly type: 'string';
                  };
                  readonly lemma: {
                    readonly title: 'Lemma';
                    readonly type: 'string';
                  };
                  readonly others: {
                    readonly title: 'Others';
                    readonly type: 'object';
                    readonly additionalProperties: true;
                  };
                };
              };
            };
            readonly original_response: {
              readonly default: any;
              readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
              readonly title: 'Original Response';
            };
            readonly status: {
              readonly title: 'Status';
              readonly enum: readonly ['sucess', 'fail'];
              readonly type: 'string';
              readonly description: '`sucess` `fail`';
            };
          };
        };
        readonly ibm: {
          readonly required: readonly ['status'];
          readonly title: 'textsyntax_analysisSyntaxAnalysisDataClass';
          readonly type: 'object';
          readonly properties: {
            readonly items: {
              readonly title: 'Items';
              readonly type: 'array';
              readonly items: {
                readonly required: readonly ['word', 'importance', 'tag', 'lemma'];
                readonly title: 'InfosSyntaxAnalysisDataClass';
                readonly type: 'object';
                readonly properties: {
                  readonly word: {
                    readonly title: 'Word';
                    readonly type: 'string';
                  };
                  readonly importance: {
                    readonly title: 'Importance';
                    readonly type: 'integer';
                  };
                  readonly tag: {
                    readonly title: 'Tag';
                    readonly type: 'string';
                  };
                  readonly lemma: {
                    readonly title: 'Lemma';
                    readonly type: 'string';
                  };
                  readonly others: {
                    readonly title: 'Others';
                    readonly type: 'object';
                    readonly additionalProperties: true;
                  };
                };
              };
            };
            readonly original_response: {
              readonly default: any;
              readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
              readonly title: 'Original Response';
            };
            readonly status: {
              readonly title: 'Status';
              readonly enum: readonly ['sucess', 'fail'];
              readonly type: 'string';
              readonly description: '`sucess` `fail`';
            };
          };
        };
        readonly google: {
          readonly required: readonly ['status'];
          readonly title: 'textsyntax_analysisSyntaxAnalysisDataClass';
          readonly type: 'object';
          readonly properties: {
            readonly items: {
              readonly title: 'Items';
              readonly type: 'array';
              readonly items: {
                readonly required: readonly ['word', 'importance', 'tag', 'lemma'];
                readonly title: 'InfosSyntaxAnalysisDataClass';
                readonly type: 'object';
                readonly properties: {
                  readonly word: {
                    readonly title: 'Word';
                    readonly type: 'string';
                  };
                  readonly importance: {
                    readonly title: 'Importance';
                    readonly type: 'integer';
                  };
                  readonly tag: {
                    readonly title: 'Tag';
                    readonly type: 'string';
                  };
                  readonly lemma: {
                    readonly title: 'Lemma';
                    readonly type: 'string';
                  };
                  readonly others: {
                    readonly title: 'Others';
                    readonly type: 'object';
                    readonly additionalProperties: true;
                  };
                };
              };
            };
            readonly original_response: {
              readonly default: any;
              readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
              readonly title: 'Original Response';
            };
            readonly status: {
              readonly title: 'Status';
              readonly enum: readonly ['sucess', 'fail'];
              readonly type: 'string';
              readonly description: '`sucess` `fail`';
            };
          };
        };
        readonly amazon: {
          readonly required: readonly ['status'];
          readonly title: 'textsyntax_analysisSyntaxAnalysisDataClass';
          readonly type: 'object';
          readonly properties: {
            readonly items: {
              readonly title: 'Items';
              readonly type: 'array';
              readonly items: {
                readonly required: readonly ['word', 'importance', 'tag', 'lemma'];
                readonly title: 'InfosSyntaxAnalysisDataClass';
                readonly type: 'object';
                readonly properties: {
                  readonly word: {
                    readonly title: 'Word';
                    readonly type: 'string';
                  };
                  readonly importance: {
                    readonly title: 'Importance';
                    readonly type: 'integer';
                  };
                  readonly tag: {
                    readonly title: 'Tag';
                    readonly type: 'string';
                  };
                  readonly lemma: {
                    readonly title: 'Lemma';
                    readonly type: 'string';
                  };
                  readonly others: {
                    readonly title: 'Others';
                    readonly type: 'object';
                    readonly additionalProperties: true;
                  };
                };
              };
            };
            readonly original_response: {
              readonly default: any;
              readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
              readonly title: 'Original Response';
            };
            readonly status: {
              readonly title: 'Status';
              readonly enum: readonly ['sucess', 'fail'];
              readonly type: 'string';
              readonly description: '`sucess` `fail`';
            };
          };
        };
        readonly 'eden-ai': {
          readonly required: readonly ['status'];
          readonly title: 'textsyntax_analysisSyntaxAnalysisDataClass';
          readonly type: 'object';
          readonly properties: {
            readonly items: {
              readonly title: 'Items';
              readonly type: 'array';
              readonly items: {
                readonly required: readonly ['word', 'importance', 'tag', 'lemma'];
                readonly title: 'InfosSyntaxAnalysisDataClass';
                readonly type: 'object';
                readonly properties: {
                  readonly word: {
                    readonly title: 'Word';
                    readonly type: 'string';
                  };
                  readonly importance: {
                    readonly title: 'Importance';
                    readonly type: 'integer';
                  };
                  readonly tag: {
                    readonly title: 'Tag';
                    readonly type: 'string';
                  };
                  readonly lemma: {
                    readonly title: 'Lemma';
                    readonly type: 'string';
                  };
                  readonly others: {
                    readonly title: 'Others';
                    readonly type: 'object';
                    readonly additionalProperties: true;
                  };
                };
              };
            };
            readonly original_response: {
              readonly default: any;
              readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
              readonly title: 'Original Response';
            };
            readonly status: {
              readonly title: 'Status';
              readonly enum: readonly ['sucess', 'fail'];
              readonly type: 'string';
              readonly description: '`sucess` `fail`';
            };
          };
        };
      };
      readonly title: 'textsyntax_analysisResponseModel';
      readonly type: 'object';
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '400': {
      readonly type: 'object';
      readonly properties: {
        readonly error: {
          readonly type: 'object';
          readonly properties: {
            readonly type: {
              readonly type: 'string';
            };
            readonly message: {
              readonly type: 'object';
              readonly properties: {
                readonly '<parameter_name>': {
                  readonly type: 'array';
                  readonly items: {
                    readonly type: 'string';
                  };
                };
              };
              readonly required: readonly ['<parameter_name>'];
            };
          };
          readonly required: readonly ['message', 'type'];
        };
      };
      readonly required: readonly ['error'];
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '403': {
      readonly type: 'object';
      readonly properties: {
        readonly error: {
          readonly type: 'object';
          readonly properties: {
            readonly type: {
              readonly type: 'string';
            };
            readonly message: {
              readonly type: 'string';
            };
          };
          readonly required: readonly ['message', 'type'];
        };
      };
      readonly required: readonly ['error'];
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '404': {
      readonly type: 'object';
      readonly properties: {
        readonly details: {
          readonly type: 'string';
          readonly default: 'Not Found';
        };
      };
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '500': {
      readonly type: 'object';
      readonly properties: {
        readonly error: {
          readonly type: 'object';
          readonly properties: {
            readonly type: {
              readonly type: 'string';
            };
            readonly message: {
              readonly type: 'string';
            };
          };
          readonly required: readonly ['message', 'type'];
        };
      };
      readonly required: readonly ['error'];
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
  };
};
declare const TextTopicExtractionCreate: {
  readonly body: {
    readonly type: 'object';
    readonly properties: {
      readonly providers: {
        readonly type: 'string';
        readonly minLength: 1;
        readonly description: "It can be one (ex: **'amazon'** or **'google'**) or multiple provider(s) (ex: **'amazon,microsoft,google'**)             that the data will be redirected to in order to get the processed results.";
        readonly examples: readonly ['google,ibm,openai,tenstorrent'];
      };
      readonly fallback_providers: {
        readonly type: 'string';
        readonly minLength: 1;
        readonly description: "Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.\n    To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.\n\nThey will be tried in the same order they are input, and it will stop to the first provider who doesn't fail.\n\n\n*Doesn't work with async subfeatures.*\n    ";
      };
      readonly response_as_dict: {
        readonly type: 'boolean';
        readonly default: true;
        readonly description: "Optional : When set to **true** (default), the response is an object of responses with providers names as keys : <br> \n                  ``` {'google' : { 'status': 'success', ... }, } ``` <br>\n                When set to **false** the response structure is a list of response objects : <br> \n                   ``` [{'status': 'success', 'provider': 'google' ... }, ] ```. <br> \n                  ";
      };
      readonly attributes_as_list: {
        readonly type: 'boolean';
        readonly default: false;
        readonly description: "Optional : When set to **false** (default) the structure of the extracted items is list of objects having different attributes : <br>\n     ```{'items': [{'attribute_1': 'x1','attribute_2': 'y2'}, ... ]}``` <br>\n     When it is set to **true**, the response contains an object with each attribute as a list : <br>\n     ```{ 'attribute_1': ['x1','x2', ...], 'attribute_2': [y1, y2, ...]}``` ";
      };
      readonly show_original_response: {
        readonly type: 'boolean';
        readonly default: false;
        readonly description: 'Optional : Shows the original response of the provider.<br>\n        When set to **true**, a new attribute *original_response* will appear in the response object.';
      };
      readonly text: {
        readonly type: 'string';
        readonly minLength: 1;
        readonly description: 'Text to analyze';
        readonly examples: readonly [
          'That actor on TV makes movies in Hollywood and also stars in a variety of popular new TV shows.'
        ];
      };
      readonly language: {
        readonly type: readonly ['string', 'null'];
        readonly description: 'Language code for the language the input text is written in (eg: en, fr).';
        readonly examples: readonly ['en'];
      };
    };
    readonly required: readonly ['providers', 'text'];
    readonly $schema: 'http://json-schema.org/draft-04/schema#';
  };
  readonly response: {
    readonly '200': {
      readonly properties: {
        readonly openai: {
          readonly required: readonly ['status'];
          readonly title: 'texttopic_extractionTopicExtractionDataClass';
          readonly type: 'object';
          readonly properties: {
            readonly items: {
              readonly title: 'Items';
              readonly type: 'array';
              readonly items: {
                readonly required: readonly ['category', 'importance'];
                readonly title: 'ExtractedTopic';
                readonly type: 'object';
                readonly properties: {
                  readonly category: {
                    readonly title: 'Category';
                    readonly type: 'string';
                  };
                  readonly importance: {
                    readonly title: 'Importance';
                    readonly type: 'integer';
                  };
                };
              };
            };
            readonly original_response: {
              readonly default: any;
              readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
              readonly title: 'Original Response';
            };
            readonly status: {
              readonly title: 'Status';
              readonly enum: readonly ['sucess', 'fail'];
              readonly type: 'string';
              readonly description: '`sucess` `fail`';
            };
          };
        };
        readonly google: {
          readonly required: readonly ['status'];
          readonly title: 'texttopic_extractionTopicExtractionDataClass';
          readonly type: 'object';
          readonly properties: {
            readonly items: {
              readonly title: 'Items';
              readonly type: 'array';
              readonly items: {
                readonly required: readonly ['category', 'importance'];
                readonly title: 'ExtractedTopic';
                readonly type: 'object';
                readonly properties: {
                  readonly category: {
                    readonly title: 'Category';
                    readonly type: 'string';
                  };
                  readonly importance: {
                    readonly title: 'Importance';
                    readonly type: 'integer';
                  };
                };
              };
            };
            readonly original_response: {
              readonly default: any;
              readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
              readonly title: 'Original Response';
            };
            readonly status: {
              readonly title: 'Status';
              readonly enum: readonly ['sucess', 'fail'];
              readonly type: 'string';
              readonly description: '`sucess` `fail`';
            };
          };
        };
        readonly tenstorrent: {
          readonly required: readonly ['status'];
          readonly title: 'texttopic_extractionTopicExtractionDataClass';
          readonly type: 'object';
          readonly properties: {
            readonly items: {
              readonly title: 'Items';
              readonly type: 'array';
              readonly items: {
                readonly required: readonly ['category', 'importance'];
                readonly title: 'ExtractedTopic';
                readonly type: 'object';
                readonly properties: {
                  readonly category: {
                    readonly title: 'Category';
                    readonly type: 'string';
                  };
                  readonly importance: {
                    readonly title: 'Importance';
                    readonly type: 'integer';
                  };
                };
              };
            };
            readonly original_response: {
              readonly default: any;
              readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
              readonly title: 'Original Response';
            };
            readonly status: {
              readonly title: 'Status';
              readonly enum: readonly ['sucess', 'fail'];
              readonly type: 'string';
              readonly description: '`sucess` `fail`';
            };
          };
        };
        readonly ibm: {
          readonly required: readonly ['status'];
          readonly title: 'texttopic_extractionTopicExtractionDataClass';
          readonly type: 'object';
          readonly properties: {
            readonly items: {
              readonly title: 'Items';
              readonly type: 'array';
              readonly items: {
                readonly required: readonly ['category', 'importance'];
                readonly title: 'ExtractedTopic';
                readonly type: 'object';
                readonly properties: {
                  readonly category: {
                    readonly title: 'Category';
                    readonly type: 'string';
                  };
                  readonly importance: {
                    readonly title: 'Importance';
                    readonly type: 'integer';
                  };
                };
              };
            };
            readonly original_response: {
              readonly default: any;
              readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
              readonly title: 'Original Response';
            };
            readonly status: {
              readonly title: 'Status';
              readonly enum: readonly ['sucess', 'fail'];
              readonly type: 'string';
              readonly description: '`sucess` `fail`';
            };
          };
        };
        readonly 'eden-ai': {
          readonly required: readonly ['status'];
          readonly title: 'texttopic_extractionTopicExtractionDataClass';
          readonly type: 'object';
          readonly properties: {
            readonly items: {
              readonly title: 'Items';
              readonly type: 'array';
              readonly items: {
                readonly required: readonly ['category', 'importance'];
                readonly title: 'ExtractedTopic';
                readonly type: 'object';
                readonly properties: {
                  readonly category: {
                    readonly title: 'Category';
                    readonly type: 'string';
                  };
                  readonly importance: {
                    readonly title: 'Importance';
                    readonly type: 'integer';
                  };
                };
              };
            };
            readonly original_response: {
              readonly default: any;
              readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
              readonly title: 'Original Response';
            };
            readonly status: {
              readonly title: 'Status';
              readonly enum: readonly ['sucess', 'fail'];
              readonly type: 'string';
              readonly description: '`sucess` `fail`';
            };
          };
        };
      };
      readonly title: 'texttopic_extractionResponseModel';
      readonly type: 'object';
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '400': {
      readonly type: 'object';
      readonly properties: {
        readonly error: {
          readonly type: 'object';
          readonly properties: {
            readonly type: {
              readonly type: 'string';
            };
            readonly message: {
              readonly type: 'object';
              readonly properties: {
                readonly '<parameter_name>': {
                  readonly type: 'array';
                  readonly items: {
                    readonly type: 'string';
                  };
                };
              };
              readonly required: readonly ['<parameter_name>'];
            };
          };
          readonly required: readonly ['message', 'type'];
        };
      };
      readonly required: readonly ['error'];
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '403': {
      readonly type: 'object';
      readonly properties: {
        readonly error: {
          readonly type: 'object';
          readonly properties: {
            readonly type: {
              readonly type: 'string';
            };
            readonly message: {
              readonly type: 'string';
            };
          };
          readonly required: readonly ['message', 'type'];
        };
      };
      readonly required: readonly ['error'];
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '404': {
      readonly type: 'object';
      readonly properties: {
        readonly details: {
          readonly type: 'string';
          readonly default: 'Not Found';
        };
      };
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '500': {
      readonly type: 'object';
      readonly properties: {
        readonly error: {
          readonly type: 'object';
          readonly properties: {
            readonly type: {
              readonly type: 'string';
            };
            readonly message: {
              readonly type: 'string';
            };
          };
          readonly required: readonly ['message', 'type'];
        };
      };
      readonly required: readonly ['error'];
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
  };
};
declare const TranslationAutomaticTranslationCreate: {
  readonly body: {
    readonly type: 'object';
    readonly properties: {
      readonly providers: {
        readonly type: 'string';
        readonly minLength: 1;
        readonly description: "It can be one (ex: **'amazon'** or **'google'**) or multiple provider(s) (ex: **'amazon,microsoft,google'**)             that the data will be redirected to in order to get the processed results.";
        readonly examples: readonly [
          'google,amazon,neuralspace,modernmt,phedone,deepl,openai,microsoft,ibm'
        ];
      };
      readonly fallback_providers: {
        readonly type: 'string';
        readonly minLength: 1;
        readonly description: "Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.\n    To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.\n\nThey will be tried in the same order they are input, and it will stop to the first provider who doesn't fail.\n\n\n*Doesn't work with async subfeatures.*\n    ";
      };
      readonly response_as_dict: {
        readonly type: 'boolean';
        readonly default: true;
        readonly description: "Optional : When set to **true** (default), the response is an object of responses with providers names as keys : <br> \n                  ``` {'google' : { 'status': 'success', ... }, } ``` <br>\n                When set to **false** the response structure is a list of response objects : <br> \n                   ``` [{'status': 'success', 'provider': 'google' ... }, ] ```. <br> \n                  ";
      };
      readonly attributes_as_list: {
        readonly type: 'boolean';
        readonly default: false;
        readonly description: "Optional : When set to **false** (default) the structure of the extracted items is list of objects having different attributes : <br>\n     ```{'items': [{'attribute_1': 'x1','attribute_2': 'y2'}, ... ]}``` <br>\n     When it is set to **true**, the response contains an object with each attribute as a list : <br>\n     ```{ 'attribute_1': ['x1','x2', ...], 'attribute_2': [y1, y2, ...]}``` ";
      };
      readonly show_original_response: {
        readonly type: 'boolean';
        readonly default: false;
        readonly description: 'Optional : Shows the original response of the provider.<br>\n        When set to **true**, a new attribute *original_response* will appear in the response object.';
      };
      readonly text: {
        readonly type: 'string';
        readonly minLength: 1;
        readonly description: 'Text to analyze';
        readonly examples: readonly [
          '人工智能 亦稱智械、機器智能，指由人製造出來的機器所表現出來的智慧。通常人工智能是指通过普通電腦程式來呈現人類智能的技術。該詞也指出研究這樣的智能系統是否能夠實現，以及如何實現。同时，通過醫學、神經科學、機器人學及統計學等的進步，常態預測則認為人類的很多職業也逐漸被其取代。'
        ];
      };
      readonly source_language: {
        readonly type: readonly ['string', 'null'];
        readonly description: 'Source language code (ex: en, fr)';
        readonly examples: readonly ['zh'];
      };
      readonly target_language: {
        readonly type: 'string';
        readonly minLength: 1;
        readonly description: 'Target language code (ex: en, fr)';
        readonly examples: readonly ['en'];
      };
    };
    readonly required: readonly ['providers', 'target_language', 'text'];
    readonly $schema: 'http://json-schema.org/draft-04/schema#';
  };
  readonly response: {
    readonly '200': {
      readonly properties: {
        readonly modernmt: {
          readonly required: readonly ['text', 'status'];
          readonly title: 'translationautomatic_translationAutomaticTranslationDataClass';
          readonly type: 'object';
          readonly properties: {
            readonly text: {
              readonly title: 'Text';
              readonly type: 'string';
            };
            readonly original_response: {
              readonly default: any;
              readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
              readonly title: 'Original Response';
            };
            readonly status: {
              readonly title: 'Status';
              readonly enum: readonly ['sucess', 'fail'];
              readonly type: 'string';
              readonly description: '`sucess` `fail`';
            };
          };
        };
        readonly deepl: {
          readonly required: readonly ['text', 'status'];
          readonly title: 'translationautomatic_translationAutomaticTranslationDataClass';
          readonly type: 'object';
          readonly properties: {
            readonly text: {
              readonly title: 'Text';
              readonly type: 'string';
            };
            readonly original_response: {
              readonly default: any;
              readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
              readonly title: 'Original Response';
            };
            readonly status: {
              readonly title: 'Status';
              readonly enum: readonly ['sucess', 'fail'];
              readonly type: 'string';
              readonly description: '`sucess` `fail`';
            };
          };
        };
        readonly microsoft: {
          readonly required: readonly ['text', 'status'];
          readonly title: 'translationautomatic_translationAutomaticTranslationDataClass';
          readonly type: 'object';
          readonly properties: {
            readonly text: {
              readonly title: 'Text';
              readonly type: 'string';
            };
            readonly original_response: {
              readonly default: any;
              readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
              readonly title: 'Original Response';
            };
            readonly status: {
              readonly title: 'Status';
              readonly enum: readonly ['sucess', 'fail'];
              readonly type: 'string';
              readonly description: '`sucess` `fail`';
            };
          };
        };
        readonly phedone: {
          readonly required: readonly ['text', 'status'];
          readonly title: 'translationautomatic_translationAutomaticTranslationDataClass';
          readonly type: 'object';
          readonly properties: {
            readonly text: {
              readonly title: 'Text';
              readonly type: 'string';
            };
            readonly original_response: {
              readonly default: any;
              readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
              readonly title: 'Original Response';
            };
            readonly status: {
              readonly title: 'Status';
              readonly enum: readonly ['sucess', 'fail'];
              readonly type: 'string';
              readonly description: '`sucess` `fail`';
            };
          };
        };
        readonly openai: {
          readonly required: readonly ['text', 'status'];
          readonly title: 'translationautomatic_translationAutomaticTranslationDataClass';
          readonly type: 'object';
          readonly properties: {
            readonly text: {
              readonly title: 'Text';
              readonly type: 'string';
            };
            readonly original_response: {
              readonly default: any;
              readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
              readonly title: 'Original Response';
            };
            readonly status: {
              readonly title: 'Status';
              readonly enum: readonly ['sucess', 'fail'];
              readonly type: 'string';
              readonly description: '`sucess` `fail`';
            };
          };
        };
        readonly ibm: {
          readonly required: readonly ['text', 'status'];
          readonly title: 'translationautomatic_translationAutomaticTranslationDataClass';
          readonly type: 'object';
          readonly properties: {
            readonly text: {
              readonly title: 'Text';
              readonly type: 'string';
            };
            readonly original_response: {
              readonly default: any;
              readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
              readonly title: 'Original Response';
            };
            readonly status: {
              readonly title: 'Status';
              readonly enum: readonly ['sucess', 'fail'];
              readonly type: 'string';
              readonly description: '`sucess` `fail`';
            };
          };
        };
        readonly google: {
          readonly required: readonly ['text', 'status'];
          readonly title: 'translationautomatic_translationAutomaticTranslationDataClass';
          readonly type: 'object';
          readonly properties: {
            readonly text: {
              readonly title: 'Text';
              readonly type: 'string';
            };
            readonly original_response: {
              readonly default: any;
              readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
              readonly title: 'Original Response';
            };
            readonly status: {
              readonly title: 'Status';
              readonly enum: readonly ['sucess', 'fail'];
              readonly type: 'string';
              readonly description: '`sucess` `fail`';
            };
          };
        };
        readonly neuralspace: {
          readonly required: readonly ['text', 'status'];
          readonly title: 'translationautomatic_translationAutomaticTranslationDataClass';
          readonly type: 'object';
          readonly properties: {
            readonly text: {
              readonly title: 'Text';
              readonly type: 'string';
            };
            readonly original_response: {
              readonly default: any;
              readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
              readonly title: 'Original Response';
            };
            readonly status: {
              readonly title: 'Status';
              readonly enum: readonly ['sucess', 'fail'];
              readonly type: 'string';
              readonly description: '`sucess` `fail`';
            };
          };
        };
        readonly huggingface: {
          readonly required: readonly ['text', 'status'];
          readonly title: 'translationautomatic_translationAutomaticTranslationDataClass';
          readonly type: 'object';
          readonly properties: {
            readonly text: {
              readonly title: 'Text';
              readonly type: 'string';
            };
            readonly original_response: {
              readonly default: any;
              readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
              readonly title: 'Original Response';
            };
            readonly status: {
              readonly title: 'Status';
              readonly enum: readonly ['sucess', 'fail'];
              readonly type: 'string';
              readonly description: '`sucess` `fail`';
            };
          };
        };
        readonly amazon: {
          readonly required: readonly ['text', 'status'];
          readonly title: 'translationautomatic_translationAutomaticTranslationDataClass';
          readonly type: 'object';
          readonly properties: {
            readonly text: {
              readonly title: 'Text';
              readonly type: 'string';
            };
            readonly original_response: {
              readonly default: any;
              readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
              readonly title: 'Original Response';
            };
            readonly status: {
              readonly title: 'Status';
              readonly enum: readonly ['sucess', 'fail'];
              readonly type: 'string';
              readonly description: '`sucess` `fail`';
            };
          };
        };
      };
      readonly title: 'translationautomatic_translationResponseModel';
      readonly type: 'object';
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '400': {
      readonly type: 'object';
      readonly properties: {
        readonly error: {
          readonly type: 'object';
          readonly properties: {
            readonly type: {
              readonly type: 'string';
            };
            readonly message: {
              readonly type: 'object';
              readonly properties: {
                readonly '<parameter_name>': {
                  readonly type: 'array';
                  readonly items: {
                    readonly type: 'string';
                  };
                };
              };
              readonly required: readonly ['<parameter_name>'];
            };
          };
          readonly required: readonly ['message', 'type'];
        };
      };
      readonly required: readonly ['error'];
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '403': {
      readonly type: 'object';
      readonly properties: {
        readonly error: {
          readonly type: 'object';
          readonly properties: {
            readonly type: {
              readonly type: 'string';
            };
            readonly message: {
              readonly type: 'string';
            };
          };
          readonly required: readonly ['message', 'type'];
        };
      };
      readonly required: readonly ['error'];
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '404': {
      readonly type: 'object';
      readonly properties: {
        readonly details: {
          readonly type: 'string';
          readonly default: 'Not Found';
        };
      };
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '500': {
      readonly type: 'object';
      readonly properties: {
        readonly error: {
          readonly type: 'object';
          readonly properties: {
            readonly type: {
              readonly type: 'string';
            };
            readonly message: {
              readonly type: 'string';
            };
          };
          readonly required: readonly ['message', 'type'];
        };
      };
      readonly required: readonly ['error'];
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
  };
};
declare const TranslationDocumentTranslationCreate: {
  readonly body: {
    readonly type: 'object';
    readonly properties: {
      readonly providers: {
        readonly type: 'string';
        readonly minLength: 1;
        readonly description: "It can be one (ex: **'amazon'** or **'google'**) or multiple provider(s) (ex: **'amazon,microsoft,google'**)             that the data will be redirected to in order to get the processed results.";
        readonly examples: readonly ['google,deepl'];
      };
      readonly fallback_providers: {
        readonly type: 'string';
        readonly minLength: 1;
        readonly description: "Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.\n    To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.\n\nThey will be tried in the same order they are input, and it will stop to the first provider who doesn't fail.\n\n\n*Doesn't work with async subfeatures.*\n    ";
      };
      readonly response_as_dict: {
        readonly type: 'boolean';
        readonly default: true;
        readonly description: "Optional : When set to **true** (default), the response is an object of responses with providers names as keys : <br> \n                  ``` {'google' : { 'status': 'success', ... }, } ``` <br>\n                When set to **false** the response structure is a list of response objects : <br> \n                   ``` [{'status': 'success', 'provider': 'google' ... }, ] ```. <br> \n                  ";
      };
      readonly attributes_as_list: {
        readonly type: 'boolean';
        readonly default: false;
        readonly description: "Optional : When set to **false** (default) the structure of the extracted items is list of objects having different attributes : <br>\n     ```{'items': [{'attribute_1': 'x1','attribute_2': 'y2'}, ... ]}``` <br>\n     When it is set to **true**, the response contains an object with each attribute as a list : <br>\n     ```{ 'attribute_1': ['x1','x2', ...], 'attribute_2': [y1, y2, ...]}``` ";
      };
      readonly show_original_response: {
        readonly type: 'boolean';
        readonly default: false;
        readonly description: 'Optional : Shows the original response of the provider.<br>\n        When set to **true**, a new attribute *original_response* will appear in the response object.';
      };
      readonly file: {
        readonly type: 'string';
        readonly format: 'binary';
        readonly description: 'File to analyse in binary format to be used with *content-type*: **multipart/form-data** <br> **Does not work with application/json !**';
      };
      readonly file_url: {
        readonly type: readonly ['string', 'null'];
        readonly format: 'uri';
        readonly description: 'File **URL** to analyse to be used with with *content-type*: **application/json**.';
        readonly examples: readonly ['http://edenai-resource-example.pdf'];
      };
      readonly source_language: {
        readonly type: readonly ['string', 'null'];
        readonly description: 'Source language code (ex: en, fr)';
        readonly examples: readonly ['en'];
      };
      readonly target_language: {
        readonly type: 'string';
        readonly minLength: 1;
        readonly description: 'Target language code (ex: en, fr)';
        readonly examples: readonly ['fr'];
      };
    };
    readonly required: readonly ['providers', 'target_language'];
    readonly $schema: 'http://json-schema.org/draft-04/schema#';
  };
  readonly response: {
    readonly '200': {
      readonly properties: {
        readonly google: {
          readonly required: readonly ['file', 'document_resource_url', 'status'];
          readonly title: 'translationdocument_translationDocumentTranslationDataClass';
          readonly type: 'object';
          readonly properties: {
            readonly file: {
              readonly title: 'File';
              readonly type: 'string';
            };
            readonly document_resource_url: {
              readonly title: 'Document Resource Url';
              readonly type: 'string';
            };
            readonly original_response: {
              readonly default: any;
              readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
              readonly title: 'Original Response';
            };
            readonly status: {
              readonly title: 'Status';
              readonly enum: readonly ['sucess', 'fail'];
              readonly type: 'string';
              readonly description: '`sucess` `fail`';
            };
          };
        };
        readonly deepl: {
          readonly required: readonly ['file', 'document_resource_url', 'status'];
          readonly title: 'translationdocument_translationDocumentTranslationDataClass';
          readonly type: 'object';
          readonly properties: {
            readonly file: {
              readonly title: 'File';
              readonly type: 'string';
            };
            readonly document_resource_url: {
              readonly title: 'Document Resource Url';
              readonly type: 'string';
            };
            readonly original_response: {
              readonly default: any;
              readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
              readonly title: 'Original Response';
            };
            readonly status: {
              readonly title: 'Status';
              readonly enum: readonly ['sucess', 'fail'];
              readonly type: 'string';
              readonly description: '`sucess` `fail`';
            };
          };
        };
      };
      readonly title: 'translationdocument_translationResponseModel';
      readonly type: 'object';
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '400': {
      readonly type: 'object';
      readonly properties: {
        readonly error: {
          readonly type: 'object';
          readonly properties: {
            readonly type: {
              readonly type: 'string';
            };
            readonly message: {
              readonly type: 'object';
              readonly properties: {
                readonly '<parameter_name>': {
                  readonly type: 'array';
                  readonly items: {
                    readonly type: 'string';
                  };
                };
              };
              readonly required: readonly ['<parameter_name>'];
            };
          };
          readonly required: readonly ['message', 'type'];
        };
      };
      readonly required: readonly ['error'];
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '403': {
      readonly type: 'object';
      readonly properties: {
        readonly error: {
          readonly type: 'object';
          readonly properties: {
            readonly type: {
              readonly type: 'string';
            };
            readonly message: {
              readonly type: 'string';
            };
          };
          readonly required: readonly ['message', 'type'];
        };
      };
      readonly required: readonly ['error'];
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '404': {
      readonly type: 'object';
      readonly properties: {
        readonly details: {
          readonly type: 'string';
          readonly default: 'Not Found';
        };
      };
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '500': {
      readonly type: 'object';
      readonly properties: {
        readonly error: {
          readonly type: 'object';
          readonly properties: {
            readonly type: {
              readonly type: 'string';
            };
            readonly message: {
              readonly type: 'string';
            };
          };
          readonly required: readonly ['message', 'type'];
        };
      };
      readonly required: readonly ['error'];
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
  };
};
declare const TranslationLanguageDetectionCreate: {
  readonly body: {
    readonly type: 'object';
    readonly properties: {
      readonly providers: {
        readonly type: 'string';
        readonly minLength: 1;
        readonly description: "It can be one (ex: **'amazon'** or **'google'**) or multiple provider(s) (ex: **'amazon,microsoft,google'**)             that the data will be redirected to in order to get the processed results.";
        readonly examples: readonly [
          'google,neuralspace,oneai,modernmt,amazon,ibm,openai,microsoft'
        ];
      };
      readonly fallback_providers: {
        readonly type: 'string';
        readonly minLength: 1;
        readonly description: "Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.\n    To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.\n\nThey will be tried in the same order they are input, and it will stop to the first provider who doesn't fail.\n\n\n*Doesn't work with async subfeatures.*\n    ";
      };
      readonly response_as_dict: {
        readonly type: 'boolean';
        readonly default: true;
        readonly description: "Optional : When set to **true** (default), the response is an object of responses with providers names as keys : <br> \n                  ``` {'google' : { 'status': 'success', ... }, } ``` <br>\n                When set to **false** the response structure is a list of response objects : <br> \n                   ``` [{'status': 'success', 'provider': 'google' ... }, ] ```. <br> \n                  ";
      };
      readonly attributes_as_list: {
        readonly type: 'boolean';
        readonly default: false;
        readonly description: "Optional : When set to **false** (default) the structure of the extracted items is list of objects having different attributes : <br>\n     ```{'items': [{'attribute_1': 'x1','attribute_2': 'y2'}, ... ]}``` <br>\n     When it is set to **true**, the response contains an object with each attribute as a list : <br>\n     ```{ 'attribute_1': ['x1','x2', ...], 'attribute_2': [y1, y2, ...]}``` ";
      };
      readonly show_original_response: {
        readonly type: 'boolean';
        readonly default: false;
        readonly description: 'Optional : Shows the original response of the provider.<br>\n        When set to **true**, a new attribute *original_response* will appear in the response object.';
      };
      readonly text: {
        readonly type: 'string';
        readonly minLength: 1;
        readonly description: 'Text to analyze';
        readonly examples: readonly [
          "Ogni individuo ha diritto all'istruzione. L'istruzione deve essere gratuita almeno per quanto riguarda le classi elementari e fondamentali. L'istruzione elementare deve essere obbligatoria. L'istruzione tecnica e professionale deve essere messa alla portata di tutti e l'istruzione superiore deve essere egualmente accessibile a tutti sulla base del merito.\nL'istruzione deve essere indirizzata al pieno sviluppo della personalità umana ed al rafforzamento del rispetto dei diritti umani e delle libertà fondamentali. Essa deve promuovere la comprensione, la tolleranza, l'amicizia fra tutte le Nazioni, i gruppi razziali e religiosi, e deve favorire l'opera delle Nazioni Unite per il mantenimento della pace.\nI genitori hanno diritto di priorità nella scelta del genere di istruzione da impartire ai loro figli."
        ];
      };
    };
    readonly required: readonly ['providers', 'text'];
    readonly $schema: 'http://json-schema.org/draft-04/schema#';
  };
  readonly response: {
    readonly '200': {
      readonly properties: {
        readonly modernmt: {
          readonly required: readonly ['status'];
          readonly title: 'translationlanguage_detectionLanguageDetectionDataClass';
          readonly type: 'object';
          readonly properties: {
            readonly items: {
              readonly title: 'Items';
              readonly type: 'array';
              readonly items: {
                readonly required: readonly ['language', 'display_name', 'confidence'];
                readonly title: 'InfosLanguageDetectionDataClass';
                readonly type: 'object';
                readonly properties: {
                  readonly language: {
                    readonly title: 'Language';
                    readonly type: 'string';
                  };
                  readonly display_name: {
                    readonly title: 'Display Name';
                    readonly type: 'string';
                  };
                  readonly confidence: {
                    readonly title: 'Confidence';
                    readonly type: 'integer';
                  };
                };
              };
            };
            readonly original_response: {
              readonly default: any;
              readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
              readonly title: 'Original Response';
            };
            readonly status: {
              readonly title: 'Status';
              readonly enum: readonly ['sucess', 'fail'];
              readonly type: 'string';
              readonly description: '`sucess` `fail`';
            };
          };
        };
        readonly microsoft: {
          readonly required: readonly ['status'];
          readonly title: 'translationlanguage_detectionLanguageDetectionDataClass';
          readonly type: 'object';
          readonly properties: {
            readonly items: {
              readonly title: 'Items';
              readonly type: 'array';
              readonly items: {
                readonly required: readonly ['language', 'display_name', 'confidence'];
                readonly title: 'InfosLanguageDetectionDataClass';
                readonly type: 'object';
                readonly properties: {
                  readonly language: {
                    readonly title: 'Language';
                    readonly type: 'string';
                  };
                  readonly display_name: {
                    readonly title: 'Display Name';
                    readonly type: 'string';
                  };
                  readonly confidence: {
                    readonly title: 'Confidence';
                    readonly type: 'integer';
                  };
                };
              };
            };
            readonly original_response: {
              readonly default: any;
              readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
              readonly title: 'Original Response';
            };
            readonly status: {
              readonly title: 'Status';
              readonly enum: readonly ['sucess', 'fail'];
              readonly type: 'string';
              readonly description: '`sucess` `fail`';
            };
          };
        };
        readonly openai: {
          readonly required: readonly ['status'];
          readonly title: 'translationlanguage_detectionLanguageDetectionDataClass';
          readonly type: 'object';
          readonly properties: {
            readonly items: {
              readonly title: 'Items';
              readonly type: 'array';
              readonly items: {
                readonly required: readonly ['language', 'display_name', 'confidence'];
                readonly title: 'InfosLanguageDetectionDataClass';
                readonly type: 'object';
                readonly properties: {
                  readonly language: {
                    readonly title: 'Language';
                    readonly type: 'string';
                  };
                  readonly display_name: {
                    readonly title: 'Display Name';
                    readonly type: 'string';
                  };
                  readonly confidence: {
                    readonly title: 'Confidence';
                    readonly type: 'integer';
                  };
                };
              };
            };
            readonly original_response: {
              readonly default: any;
              readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
              readonly title: 'Original Response';
            };
            readonly status: {
              readonly title: 'Status';
              readonly enum: readonly ['sucess', 'fail'];
              readonly type: 'string';
              readonly description: '`sucess` `fail`';
            };
          };
        };
        readonly ibm: {
          readonly required: readonly ['status'];
          readonly title: 'translationlanguage_detectionLanguageDetectionDataClass';
          readonly type: 'object';
          readonly properties: {
            readonly items: {
              readonly title: 'Items';
              readonly type: 'array';
              readonly items: {
                readonly required: readonly ['language', 'display_name', 'confidence'];
                readonly title: 'InfosLanguageDetectionDataClass';
                readonly type: 'object';
                readonly properties: {
                  readonly language: {
                    readonly title: 'Language';
                    readonly type: 'string';
                  };
                  readonly display_name: {
                    readonly title: 'Display Name';
                    readonly type: 'string';
                  };
                  readonly confidence: {
                    readonly title: 'Confidence';
                    readonly type: 'integer';
                  };
                };
              };
            };
            readonly original_response: {
              readonly default: any;
              readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
              readonly title: 'Original Response';
            };
            readonly status: {
              readonly title: 'Status';
              readonly enum: readonly ['sucess', 'fail'];
              readonly type: 'string';
              readonly description: '`sucess` `fail`';
            };
          };
        };
        readonly oneai: {
          readonly required: readonly ['status'];
          readonly title: 'translationlanguage_detectionLanguageDetectionDataClass';
          readonly type: 'object';
          readonly properties: {
            readonly items: {
              readonly title: 'Items';
              readonly type: 'array';
              readonly items: {
                readonly required: readonly ['language', 'display_name', 'confidence'];
                readonly title: 'InfosLanguageDetectionDataClass';
                readonly type: 'object';
                readonly properties: {
                  readonly language: {
                    readonly title: 'Language';
                    readonly type: 'string';
                  };
                  readonly display_name: {
                    readonly title: 'Display Name';
                    readonly type: 'string';
                  };
                  readonly confidence: {
                    readonly title: 'Confidence';
                    readonly type: 'integer';
                  };
                };
              };
            };
            readonly original_response: {
              readonly default: any;
              readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
              readonly title: 'Original Response';
            };
            readonly status: {
              readonly title: 'Status';
              readonly enum: readonly ['sucess', 'fail'];
              readonly type: 'string';
              readonly description: '`sucess` `fail`';
            };
          };
        };
        readonly google: {
          readonly required: readonly ['status'];
          readonly title: 'translationlanguage_detectionLanguageDetectionDataClass';
          readonly type: 'object';
          readonly properties: {
            readonly items: {
              readonly title: 'Items';
              readonly type: 'array';
              readonly items: {
                readonly required: readonly ['language', 'display_name', 'confidence'];
                readonly title: 'InfosLanguageDetectionDataClass';
                readonly type: 'object';
                readonly properties: {
                  readonly language: {
                    readonly title: 'Language';
                    readonly type: 'string';
                  };
                  readonly display_name: {
                    readonly title: 'Display Name';
                    readonly type: 'string';
                  };
                  readonly confidence: {
                    readonly title: 'Confidence';
                    readonly type: 'integer';
                  };
                };
              };
            };
            readonly original_response: {
              readonly default: any;
              readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
              readonly title: 'Original Response';
            };
            readonly status: {
              readonly title: 'Status';
              readonly enum: readonly ['sucess', 'fail'];
              readonly type: 'string';
              readonly description: '`sucess` `fail`';
            };
          };
        };
        readonly neuralspace: {
          readonly required: readonly ['status'];
          readonly title: 'translationlanguage_detectionLanguageDetectionDataClass';
          readonly type: 'object';
          readonly properties: {
            readonly items: {
              readonly title: 'Items';
              readonly type: 'array';
              readonly items: {
                readonly required: readonly ['language', 'display_name', 'confidence'];
                readonly title: 'InfosLanguageDetectionDataClass';
                readonly type: 'object';
                readonly properties: {
                  readonly language: {
                    readonly title: 'Language';
                    readonly type: 'string';
                  };
                  readonly display_name: {
                    readonly title: 'Display Name';
                    readonly type: 'string';
                  };
                  readonly confidence: {
                    readonly title: 'Confidence';
                    readonly type: 'integer';
                  };
                };
              };
            };
            readonly original_response: {
              readonly default: any;
              readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
              readonly title: 'Original Response';
            };
            readonly status: {
              readonly title: 'Status';
              readonly enum: readonly ['sucess', 'fail'];
              readonly type: 'string';
              readonly description: '`sucess` `fail`';
            };
          };
        };
        readonly amazon: {
          readonly required: readonly ['status'];
          readonly title: 'translationlanguage_detectionLanguageDetectionDataClass';
          readonly type: 'object';
          readonly properties: {
            readonly items: {
              readonly title: 'Items';
              readonly type: 'array';
              readonly items: {
                readonly required: readonly ['language', 'display_name', 'confidence'];
                readonly title: 'InfosLanguageDetectionDataClass';
                readonly type: 'object';
                readonly properties: {
                  readonly language: {
                    readonly title: 'Language';
                    readonly type: 'string';
                  };
                  readonly display_name: {
                    readonly title: 'Display Name';
                    readonly type: 'string';
                  };
                  readonly confidence: {
                    readonly title: 'Confidence';
                    readonly type: 'integer';
                  };
                };
              };
            };
            readonly original_response: {
              readonly default: any;
              readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
              readonly title: 'Original Response';
            };
            readonly status: {
              readonly title: 'Status';
              readonly enum: readonly ['sucess', 'fail'];
              readonly type: 'string';
              readonly description: '`sucess` `fail`';
            };
          };
        };
        readonly 'eden-ai': {
          readonly required: readonly ['status'];
          readonly title: 'translationlanguage_detectionLanguageDetectionDataClass';
          readonly type: 'object';
          readonly properties: {
            readonly items: {
              readonly title: 'Items';
              readonly type: 'array';
              readonly items: {
                readonly required: readonly ['language', 'display_name', 'confidence'];
                readonly title: 'InfosLanguageDetectionDataClass';
                readonly type: 'object';
                readonly properties: {
                  readonly language: {
                    readonly title: 'Language';
                    readonly type: 'string';
                  };
                  readonly display_name: {
                    readonly title: 'Display Name';
                    readonly type: 'string';
                  };
                  readonly confidence: {
                    readonly title: 'Confidence';
                    readonly type: 'integer';
                  };
                };
              };
            };
            readonly original_response: {
              readonly default: any;
              readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
              readonly title: 'Original Response';
            };
            readonly status: {
              readonly title: 'Status';
              readonly enum: readonly ['sucess', 'fail'];
              readonly type: 'string';
              readonly description: '`sucess` `fail`';
            };
          };
        };
      };
      readonly title: 'translationlanguage_detectionResponseModel';
      readonly type: 'object';
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '400': {
      readonly type: 'object';
      readonly properties: {
        readonly error: {
          readonly type: 'object';
          readonly properties: {
            readonly type: {
              readonly type: 'string';
            };
            readonly message: {
              readonly type: 'object';
              readonly properties: {
                readonly '<parameter_name>': {
                  readonly type: 'array';
                  readonly items: {
                    readonly type: 'string';
                  };
                };
              };
              readonly required: readonly ['<parameter_name>'];
            };
          };
          readonly required: readonly ['message', 'type'];
        };
      };
      readonly required: readonly ['error'];
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '403': {
      readonly type: 'object';
      readonly properties: {
        readonly error: {
          readonly type: 'object';
          readonly properties: {
            readonly type: {
              readonly type: 'string';
            };
            readonly message: {
              readonly type: 'string';
            };
          };
          readonly required: readonly ['message', 'type'];
        };
      };
      readonly required: readonly ['error'];
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '404': {
      readonly type: 'object';
      readonly properties: {
        readonly details: {
          readonly type: 'string';
          readonly default: 'Not Found';
        };
      };
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '500': {
      readonly type: 'object';
      readonly properties: {
        readonly error: {
          readonly type: 'object';
          readonly properties: {
            readonly type: {
              readonly type: 'string';
            };
            readonly message: {
              readonly type: 'string';
            };
          };
          readonly required: readonly ['message', 'type'];
        };
      };
      readonly required: readonly ['error'];
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
  };
};
declare const VideoExplicitContentDetectionAsyncCreate: {
  readonly body: {
    readonly type: 'object';
    readonly properties: {
      readonly providers: {
        readonly type: 'string';
        readonly minLength: 1;
        readonly description: "It can be one (ex: **'amazon'** or **'google'**) or multiple provider(s) (ex: **'amazon,microsoft,google'**)             that the data will be redirected to in order to get the processed results.";
        readonly examples: readonly ['amazon,google'];
      };
      readonly fallback_providers: {
        readonly type: 'string';
        readonly minLength: 1;
        readonly description: "Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.\n    To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.\n\nThey will be tried in the same order they are input, and it will stop to the first provider who doesn't fail.\n\n\n*Doesn't work with async subfeatures.*\n    ";
      };
      readonly show_original_response: {
        readonly type: 'boolean';
        readonly default: false;
        readonly description: 'Optional : Shows the original response of the provider.<br>\n        When set to **true**, a new attribute *original_response* will appear in the response object.';
      };
      readonly webhook_receiver: {
        readonly type: 'string';
        readonly format: 'uri';
        readonly minLength: 1;
        readonly description: 'Webhook receiver should be a valid https URL (ex : https://your.listner.com/endpoint).             After the processing is done, the webhook endpoint will receive a POST request with the result.';
      };
      readonly users_webhook_parameters: {
        readonly type: 'object';
        readonly additionalProperties: true;
        readonly description: "Json data that contains of additional parameters that will be sent back to the webhook receiver             (ex: api key for security or client's data ID to link the result internally).             Will only be used when webhook_receiver is set.";
      };
      readonly file: {
        readonly type: 'string';
        readonly format: 'binary';
        readonly description: 'File to analyse in binary format to be used with *content-type*: **multipart/form-data** <br> **Does not work with application/json !**';
        readonly pattern: '(?:mov|mp4|avi)$';
      };
      readonly file_url: {
        readonly type: readonly ['string', 'null'];
        readonly format: 'uri';
        readonly description: 'File **URL** to analyse to be used with with *content-type*: **application/json**.';
        readonly examples: readonly ['http://edenai-resource-example.mp4'];
      };
    };
    readonly required: readonly ['providers'];
    readonly $schema: 'http://json-schema.org/draft-04/schema#';
  };
  readonly response: {
    readonly '200': {
      readonly type: 'object';
      readonly properties: {
        readonly public_id: {
          readonly type: 'string';
          readonly format: 'uuid';
        };
      };
      readonly required: readonly ['public_id'];
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
  };
};
declare const VideoExplicitContentDetectionAsyncRetrieve: {
  readonly response: {
    readonly '200': {
      readonly type: 'object';
      readonly properties: {
        readonly jobs: {
          readonly type: 'array';
          readonly items: {
            readonly type: 'object';
            readonly properties: {
              readonly providers: {
                readonly type: 'string';
              };
              readonly nb: {
                readonly type: 'integer';
              };
              readonly nb_ok: {
                readonly type: 'integer';
              };
              readonly public_id: {
                readonly type: 'string';
                readonly format: 'uuid';
              };
              readonly state: {
                readonly enum: readonly ['finished', 'failed', 'Timeout error', 'processing'];
                readonly type: 'string';
                readonly description: '* `finished` - finished\n* `failed` - failed\n* `Timeout error` - Timeout error\n* `processing` - processing\n\n`finished` `failed` `Timeout error` `processing`';
              };
              readonly created_at: {
                readonly type: 'string';
                readonly format: 'date-time';
              };
            };
            readonly required: readonly [
              'created_at',
              'nb',
              'nb_ok',
              'providers',
              'public_id',
              'state'
            ];
          };
        };
      };
      readonly required: readonly ['jobs'];
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
  };
};
declare const VideoExplicitContentDetectionAsyncRetrieve2: {
  readonly metadata: {
    readonly allOf: readonly [
      {
        readonly type: 'object';
        readonly properties: {
          readonly public_id: {
            readonly type: 'string';
            readonly $schema: 'http://json-schema.org/draft-04/schema#';
          };
        };
        readonly required: readonly ['public_id'];
      },
      {
        readonly type: 'object';
        readonly properties: {
          readonly response_as_dict: {
            readonly type: 'boolean';
            readonly default: true;
            readonly $schema: 'http://json-schema.org/draft-04/schema#';
          };
          readonly show_original_response: {
            readonly type: 'boolean';
            readonly default: false;
            readonly $schema: 'http://json-schema.org/draft-04/schema#';
          };
        };
        readonly required: readonly [];
      }
    ];
  };
  readonly response: {
    readonly '200': {
      readonly properties: {
        readonly results: {
          readonly properties: {
            readonly google: {
              readonly required: readonly ['id', 'final_status'];
              readonly title: 'videoexplicit_content_detection_asyncExplicitContentDetectionAsyncDataClass';
              readonly type: 'object';
              readonly properties: {
                readonly moderation: {
                  readonly title: 'Moderation';
                  readonly type: 'array';
                  readonly items: {
                    readonly required: readonly ['timestamp', 'confidence', 'category'];
                    readonly title: 'ContentNSFW';
                    readonly type: 'object';
                    readonly properties: {
                      readonly timestamp: {
                        readonly title: 'Timestamp';
                        readonly type: 'integer';
                      };
                      readonly confidence: {
                        readonly title: 'Confidence';
                        readonly type: 'integer';
                      };
                      readonly category: {
                        readonly title: 'Category';
                        readonly type: 'string';
                      };
                    };
                  };
                };
                readonly original_response: {
                  readonly default: any;
                  readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
                  readonly title: 'Original Response';
                };
                readonly id: {
                  readonly title: 'Id';
                  readonly type: 'string';
                };
                readonly final_status: {
                  readonly title: 'Final Status';
                  readonly enum: readonly ['sucess', 'fail'];
                  readonly type: 'string';
                  readonly description: '`sucess` `fail`';
                };
                readonly error: {
                  readonly title: 'Error';
                  readonly type: 'object';
                  readonly additionalProperties: true;
                };
              };
            };
            readonly amazon: {
              readonly required: readonly ['id', 'final_status'];
              readonly title: 'videoexplicit_content_detection_asyncExplicitContentDetectionAsyncDataClass';
              readonly type: 'object';
              readonly properties: {
                readonly moderation: {
                  readonly title: 'Moderation';
                  readonly type: 'array';
                  readonly items: {
                    readonly required: readonly ['timestamp', 'confidence', 'category'];
                    readonly title: 'ContentNSFW';
                    readonly type: 'object';
                    readonly properties: {
                      readonly timestamp: {
                        readonly title: 'Timestamp';
                        readonly type: 'integer';
                      };
                      readonly confidence: {
                        readonly title: 'Confidence';
                        readonly type: 'integer';
                      };
                      readonly category: {
                        readonly title: 'Category';
                        readonly type: 'string';
                      };
                    };
                  };
                };
                readonly original_response: {
                  readonly default: any;
                  readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
                  readonly title: 'Original Response';
                };
                readonly id: {
                  readonly title: 'Id';
                  readonly type: 'string';
                };
                readonly final_status: {
                  readonly title: 'Final Status';
                  readonly enum: readonly ['sucess', 'fail'];
                  readonly type: 'string';
                  readonly description: '`sucess` `fail`';
                };
                readonly error: {
                  readonly title: 'Error';
                  readonly type: 'object';
                  readonly additionalProperties: true;
                };
              };
            };
          };
          readonly title: 'videoexplicit_content_detection_asyncModel';
          readonly type: 'object';
        };
        readonly error: {
          readonly title: 'Error';
          readonly type: 'string';
        };
        readonly public_id: {
          readonly format: 'uuid';
          readonly title: 'Public Id';
          readonly type: 'string';
        };
        readonly status: {
          readonly title: 'Status';
          readonly type: 'string';
        };
      };
      readonly required: readonly ['results', 'error', 'public_id', 'status'];
      readonly title: 'asyncvideoexplicit_content_detection_asyncResponseModel';
      readonly type: 'object';
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '400': {
      readonly type: 'object';
      readonly properties: {
        readonly error: {
          readonly type: 'object';
          readonly properties: {
            readonly type: {
              readonly type: 'string';
            };
            readonly message: {
              readonly type: 'object';
              readonly properties: {
                readonly '<parameter_name>': {
                  readonly type: 'array';
                  readonly items: {
                    readonly type: 'string';
                  };
                };
              };
              readonly required: readonly ['<parameter_name>'];
            };
          };
          readonly required: readonly ['message', 'type'];
        };
      };
      readonly required: readonly ['error'];
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '403': {
      readonly type: 'object';
      readonly properties: {
        readonly error: {
          readonly type: 'object';
          readonly properties: {
            readonly type: {
              readonly type: 'string';
            };
            readonly message: {
              readonly type: 'string';
            };
          };
          readonly required: readonly ['message', 'type'];
        };
      };
      readonly required: readonly ['error'];
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '404': {
      readonly type: 'object';
      readonly properties: {
        readonly details: {
          readonly type: 'string';
          readonly default: 'Not Found';
        };
      };
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '500': {
      readonly type: 'object';
      readonly properties: {
        readonly error: {
          readonly type: 'object';
          readonly properties: {
            readonly type: {
              readonly type: 'string';
            };
            readonly message: {
              readonly type: 'string';
            };
          };
          readonly required: readonly ['message', 'type'];
        };
      };
      readonly required: readonly ['error'];
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
  };
};
declare const VideoFaceDetectionAsyncCreate: {
  readonly body: {
    readonly type: 'object';
    readonly properties: {
      readonly providers: {
        readonly type: 'string';
        readonly minLength: 1;
        readonly description: "It can be one (ex: **'amazon'** or **'google'**) or multiple provider(s) (ex: **'amazon,microsoft,google'**)             that the data will be redirected to in order to get the processed results.";
        readonly examples: readonly ['amazon,google'];
      };
      readonly fallback_providers: {
        readonly type: 'string';
        readonly minLength: 1;
        readonly description: "Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.\n    To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.\n\nThey will be tried in the same order they are input, and it will stop to the first provider who doesn't fail.\n\n\n*Doesn't work with async subfeatures.*\n    ";
      };
      readonly show_original_response: {
        readonly type: 'boolean';
        readonly default: false;
        readonly description: 'Optional : Shows the original response of the provider.<br>\n        When set to **true**, a new attribute *original_response* will appear in the response object.';
      };
      readonly webhook_receiver: {
        readonly type: 'string';
        readonly format: 'uri';
        readonly minLength: 1;
        readonly description: 'Webhook receiver should be a valid https URL (ex : https://your.listner.com/endpoint).             After the processing is done, the webhook endpoint will receive a POST request with the result.';
      };
      readonly users_webhook_parameters: {
        readonly type: 'object';
        readonly additionalProperties: true;
        readonly description: "Json data that contains of additional parameters that will be sent back to the webhook receiver             (ex: api key for security or client's data ID to link the result internally).             Will only be used when webhook_receiver is set.";
      };
      readonly file: {
        readonly type: 'string';
        readonly format: 'binary';
        readonly description: 'File to analyse in binary format to be used with *content-type*: **multipart/form-data** <br> **Does not work with application/json !**';
        readonly pattern: '(?:mov|mp4|avi)$';
      };
      readonly file_url: {
        readonly type: readonly ['string', 'null'];
        readonly format: 'uri';
        readonly description: 'File **URL** to analyse to be used with with *content-type*: **application/json**.';
        readonly examples: readonly ['http://edenai-resource-example.mp4'];
      };
    };
    readonly required: readonly ['providers'];
    readonly $schema: 'http://json-schema.org/draft-04/schema#';
  };
  readonly response: {
    readonly '200': {
      readonly type: 'object';
      readonly properties: {
        readonly public_id: {
          readonly type: 'string';
          readonly format: 'uuid';
        };
      };
      readonly required: readonly ['public_id'];
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
  };
};
declare const VideoFaceDetectionAsyncRetrieve: {
  readonly response: {
    readonly '200': {
      readonly type: 'object';
      readonly properties: {
        readonly jobs: {
          readonly type: 'array';
          readonly items: {
            readonly type: 'object';
            readonly properties: {
              readonly providers: {
                readonly type: 'string';
              };
              readonly nb: {
                readonly type: 'integer';
              };
              readonly nb_ok: {
                readonly type: 'integer';
              };
              readonly public_id: {
                readonly type: 'string';
                readonly format: 'uuid';
              };
              readonly state: {
                readonly enum: readonly ['finished', 'failed', 'Timeout error', 'processing'];
                readonly type: 'string';
                readonly description: '* `finished` - finished\n* `failed` - failed\n* `Timeout error` - Timeout error\n* `processing` - processing\n\n`finished` `failed` `Timeout error` `processing`';
              };
              readonly created_at: {
                readonly type: 'string';
                readonly format: 'date-time';
              };
            };
            readonly required: readonly [
              'created_at',
              'nb',
              'nb_ok',
              'providers',
              'public_id',
              'state'
            ];
          };
        };
      };
      readonly required: readonly ['jobs'];
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
  };
};
declare const VideoFaceDetectionAsyncRetrieve2: {
  readonly metadata: {
    readonly allOf: readonly [
      {
        readonly type: 'object';
        readonly properties: {
          readonly public_id: {
            readonly type: 'string';
            readonly $schema: 'http://json-schema.org/draft-04/schema#';
          };
        };
        readonly required: readonly ['public_id'];
      },
      {
        readonly type: 'object';
        readonly properties: {
          readonly response_as_dict: {
            readonly type: 'boolean';
            readonly default: true;
            readonly $schema: 'http://json-schema.org/draft-04/schema#';
          };
          readonly show_original_response: {
            readonly type: 'boolean';
            readonly default: false;
            readonly $schema: 'http://json-schema.org/draft-04/schema#';
          };
        };
        readonly required: readonly [];
      }
    ];
  };
  readonly response: {
    readonly '200': {
      readonly properties: {
        readonly results: {
          readonly properties: {
            readonly google: {
              readonly required: readonly ['id', 'final_status'];
              readonly title: 'videoface_detection_asyncFaceDetectionAsyncDataClass';
              readonly type: 'object';
              readonly properties: {
                readonly faces: {
                  readonly title: 'Faces';
                  readonly type: 'array';
                  readonly items: {
                    readonly required: readonly [
                      'offset',
                      'bounding_box',
                      'attributes',
                      'landmarks'
                    ];
                    readonly title: 'VideoFace';
                    readonly type: 'object';
                    readonly properties: {
                      readonly offset: {
                        readonly title: 'Offset';
                        readonly type: 'integer';
                      };
                      readonly bounding_box: {
                        readonly required: readonly ['top', 'left', 'height', 'width'];
                        readonly title: 'VideoBoundingBox';
                        readonly type: 'object';
                        readonly properties: {
                          readonly top: {
                            readonly title: 'Top';
                            readonly type: 'integer';
                          };
                          readonly left: {
                            readonly title: 'Left';
                            readonly type: 'integer';
                          };
                          readonly height: {
                            readonly title: 'Height';
                            readonly type: 'integer';
                          };
                          readonly width: {
                            readonly title: 'Width';
                            readonly type: 'integer';
                          };
                        };
                      };
                      readonly attributes: {
                        readonly required: readonly [
                          'headwear',
                          'frontal_gaze',
                          'eyes_visible',
                          'glasses',
                          'mouth_open',
                          'smiling',
                          'brightness',
                          'sharpness',
                          'pose'
                        ];
                        readonly title: 'FaceAttributes';
                        readonly type: 'object';
                        readonly properties: {
                          readonly headwear: {
                            readonly title: 'Headwear';
                            readonly type: 'integer';
                          };
                          readonly frontal_gaze: {
                            readonly title: 'Frontal Gaze';
                            readonly type: 'integer';
                          };
                          readonly eyes_visible: {
                            readonly title: 'Eyes Visible';
                            readonly type: 'integer';
                          };
                          readonly glasses: {
                            readonly title: 'Glasses';
                            readonly type: 'integer';
                          };
                          readonly mouth_open: {
                            readonly title: 'Mouth Open';
                            readonly type: 'integer';
                          };
                          readonly smiling: {
                            readonly title: 'Smiling';
                            readonly type: 'integer';
                          };
                          readonly brightness: {
                            readonly title: 'Brightness';
                            readonly type: 'integer';
                          };
                          readonly sharpness: {
                            readonly title: 'Sharpness';
                            readonly type: 'integer';
                          };
                          readonly pose: {
                            readonly required: readonly ['pitch', 'roll', 'yawn'];
                            readonly title: 'VideoFacePoses';
                            readonly type: 'object';
                            readonly properties: {
                              readonly pitch: {
                                readonly title: 'Pitch';
                                readonly type: 'integer';
                              };
                              readonly roll: {
                                readonly title: 'Roll';
                                readonly type: 'integer';
                              };
                              readonly yawn: {
                                readonly title: 'Yawn';
                                readonly type: 'integer';
                              };
                            };
                          };
                        };
                      };
                      readonly landmarks: {
                        readonly title: 'LandmarksVideo';
                        readonly type: 'object';
                        readonly properties: {
                          readonly eye_left: {
                            readonly title: 'Eye Left';
                            readonly type: 'array';
                            readonly items: {
                              readonly type: 'integer';
                            };
                          };
                          readonly eye_right: {
                            readonly title: 'Eye Right';
                            readonly type: 'array';
                            readonly items: {
                              readonly type: 'integer';
                            };
                          };
                          readonly nose: {
                            readonly title: 'Nose';
                            readonly type: 'array';
                            readonly items: {
                              readonly type: 'integer';
                            };
                          };
                          readonly mouth_left: {
                            readonly title: 'Mouth Left';
                            readonly type: 'array';
                            readonly items: {
                              readonly type: 'integer';
                            };
                          };
                          readonly mouth_right: {
                            readonly title: 'Mouth Right';
                            readonly type: 'array';
                            readonly items: {
                              readonly type: 'integer';
                            };
                          };
                        };
                      };
                    };
                  };
                };
                readonly original_response: {
                  readonly default: any;
                  readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
                  readonly title: 'Original Response';
                };
                readonly id: {
                  readonly title: 'Id';
                  readonly type: 'string';
                };
                readonly final_status: {
                  readonly title: 'Final Status';
                  readonly enum: readonly ['sucess', 'fail'];
                  readonly type: 'string';
                  readonly description: '`sucess` `fail`';
                };
                readonly error: {
                  readonly title: 'Error';
                  readonly type: 'object';
                  readonly additionalProperties: true;
                };
              };
            };
            readonly amazon: {
              readonly required: readonly ['id', 'final_status'];
              readonly title: 'videoface_detection_asyncFaceDetectionAsyncDataClass';
              readonly type: 'object';
              readonly properties: {
                readonly faces: {
                  readonly title: 'Faces';
                  readonly type: 'array';
                  readonly items: {
                    readonly required: readonly [
                      'offset',
                      'bounding_box',
                      'attributes',
                      'landmarks'
                    ];
                    readonly title: 'VideoFace';
                    readonly type: 'object';
                    readonly properties: {
                      readonly offset: {
                        readonly title: 'Offset';
                        readonly type: 'integer';
                      };
                      readonly bounding_box: {
                        readonly required: readonly ['top', 'left', 'height', 'width'];
                        readonly title: 'VideoBoundingBox';
                        readonly type: 'object';
                        readonly properties: {
                          readonly top: {
                            readonly title: 'Top';
                            readonly type: 'integer';
                          };
                          readonly left: {
                            readonly title: 'Left';
                            readonly type: 'integer';
                          };
                          readonly height: {
                            readonly title: 'Height';
                            readonly type: 'integer';
                          };
                          readonly width: {
                            readonly title: 'Width';
                            readonly type: 'integer';
                          };
                        };
                      };
                      readonly attributes: {
                        readonly required: readonly [
                          'headwear',
                          'frontal_gaze',
                          'eyes_visible',
                          'glasses',
                          'mouth_open',
                          'smiling',
                          'brightness',
                          'sharpness',
                          'pose'
                        ];
                        readonly title: 'FaceAttributes';
                        readonly type: 'object';
                        readonly properties: {
                          readonly headwear: {
                            readonly title: 'Headwear';
                            readonly type: 'integer';
                          };
                          readonly frontal_gaze: {
                            readonly title: 'Frontal Gaze';
                            readonly type: 'integer';
                          };
                          readonly eyes_visible: {
                            readonly title: 'Eyes Visible';
                            readonly type: 'integer';
                          };
                          readonly glasses: {
                            readonly title: 'Glasses';
                            readonly type: 'integer';
                          };
                          readonly mouth_open: {
                            readonly title: 'Mouth Open';
                            readonly type: 'integer';
                          };
                          readonly smiling: {
                            readonly title: 'Smiling';
                            readonly type: 'integer';
                          };
                          readonly brightness: {
                            readonly title: 'Brightness';
                            readonly type: 'integer';
                          };
                          readonly sharpness: {
                            readonly title: 'Sharpness';
                            readonly type: 'integer';
                          };
                          readonly pose: {
                            readonly required: readonly ['pitch', 'roll', 'yawn'];
                            readonly title: 'VideoFacePoses';
                            readonly type: 'object';
                            readonly properties: {
                              readonly pitch: {
                                readonly title: 'Pitch';
                                readonly type: 'integer';
                              };
                              readonly roll: {
                                readonly title: 'Roll';
                                readonly type: 'integer';
                              };
                              readonly yawn: {
                                readonly title: 'Yawn';
                                readonly type: 'integer';
                              };
                            };
                          };
                        };
                      };
                      readonly landmarks: {
                        readonly title: 'LandmarksVideo';
                        readonly type: 'object';
                        readonly properties: {
                          readonly eye_left: {
                            readonly title: 'Eye Left';
                            readonly type: 'array';
                            readonly items: {
                              readonly type: 'integer';
                            };
                          };
                          readonly eye_right: {
                            readonly title: 'Eye Right';
                            readonly type: 'array';
                            readonly items: {
                              readonly type: 'integer';
                            };
                          };
                          readonly nose: {
                            readonly title: 'Nose';
                            readonly type: 'array';
                            readonly items: {
                              readonly type: 'integer';
                            };
                          };
                          readonly mouth_left: {
                            readonly title: 'Mouth Left';
                            readonly type: 'array';
                            readonly items: {
                              readonly type: 'integer';
                            };
                          };
                          readonly mouth_right: {
                            readonly title: 'Mouth Right';
                            readonly type: 'array';
                            readonly items: {
                              readonly type: 'integer';
                            };
                          };
                        };
                      };
                    };
                  };
                };
                readonly original_response: {
                  readonly default: any;
                  readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
                  readonly title: 'Original Response';
                };
                readonly id: {
                  readonly title: 'Id';
                  readonly type: 'string';
                };
                readonly final_status: {
                  readonly title: 'Final Status';
                  readonly enum: readonly ['sucess', 'fail'];
                  readonly type: 'string';
                  readonly description: '`sucess` `fail`';
                };
                readonly error: {
                  readonly title: 'Error';
                  readonly type: 'object';
                  readonly additionalProperties: true;
                };
              };
            };
          };
          readonly title: 'videoface_detection_asyncModel';
          readonly type: 'object';
        };
        readonly error: {
          readonly title: 'Error';
          readonly type: 'string';
        };
        readonly public_id: {
          readonly format: 'uuid';
          readonly title: 'Public Id';
          readonly type: 'string';
        };
        readonly status: {
          readonly title: 'Status';
          readonly type: 'string';
        };
      };
      readonly required: readonly ['results', 'error', 'public_id', 'status'];
      readonly title: 'asyncvideoface_detection_asyncResponseModel';
      readonly type: 'object';
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '400': {
      readonly type: 'object';
      readonly properties: {
        readonly error: {
          readonly type: 'object';
          readonly properties: {
            readonly type: {
              readonly type: 'string';
            };
            readonly message: {
              readonly type: 'object';
              readonly properties: {
                readonly '<parameter_name>': {
                  readonly type: 'array';
                  readonly items: {
                    readonly type: 'string';
                  };
                };
              };
              readonly required: readonly ['<parameter_name>'];
            };
          };
          readonly required: readonly ['message', 'type'];
        };
      };
      readonly required: readonly ['error'];
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '403': {
      readonly type: 'object';
      readonly properties: {
        readonly error: {
          readonly type: 'object';
          readonly properties: {
            readonly type: {
              readonly type: 'string';
            };
            readonly message: {
              readonly type: 'string';
            };
          };
          readonly required: readonly ['message', 'type'];
        };
      };
      readonly required: readonly ['error'];
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '404': {
      readonly type: 'object';
      readonly properties: {
        readonly details: {
          readonly type: 'string';
          readonly default: 'Not Found';
        };
      };
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '500': {
      readonly type: 'object';
      readonly properties: {
        readonly error: {
          readonly type: 'object';
          readonly properties: {
            readonly type: {
              readonly type: 'string';
            };
            readonly message: {
              readonly type: 'string';
            };
          };
          readonly required: readonly ['message', 'type'];
        };
      };
      readonly required: readonly ['error'];
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
  };
};
declare const VideoLabelDetectionAsyncCreate: {
  readonly body: {
    readonly type: 'object';
    readonly properties: {
      readonly providers: {
        readonly type: 'string';
        readonly minLength: 1;
        readonly description: "It can be one (ex: **'amazon'** or **'google'**) or multiple provider(s) (ex: **'amazon,microsoft,google'**)             that the data will be redirected to in order to get the processed results.";
        readonly examples: readonly ['amazon,google'];
      };
      readonly fallback_providers: {
        readonly type: 'string';
        readonly minLength: 1;
        readonly description: "Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.\n    To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.\n\nThey will be tried in the same order they are input, and it will stop to the first provider who doesn't fail.\n\n\n*Doesn't work with async subfeatures.*\n    ";
      };
      readonly show_original_response: {
        readonly type: 'boolean';
        readonly default: false;
        readonly description: 'Optional : Shows the original response of the provider.<br>\n        When set to **true**, a new attribute *original_response* will appear in the response object.';
      };
      readonly webhook_receiver: {
        readonly type: 'string';
        readonly format: 'uri';
        readonly minLength: 1;
        readonly description: 'Webhook receiver should be a valid https URL (ex : https://your.listner.com/endpoint).             After the processing is done, the webhook endpoint will receive a POST request with the result.';
      };
      readonly users_webhook_parameters: {
        readonly type: 'object';
        readonly additionalProperties: true;
        readonly description: "Json data that contains of additional parameters that will be sent back to the webhook receiver             (ex: api key for security or client's data ID to link the result internally).             Will only be used when webhook_receiver is set.";
      };
      readonly file: {
        readonly type: 'string';
        readonly format: 'binary';
        readonly description: 'File to analyse in binary format to be used with *content-type*: **multipart/form-data** <br> **Does not work with application/json !**';
        readonly pattern: '(?:mov|mp4|avi)$';
      };
      readonly file_url: {
        readonly type: readonly ['string', 'null'];
        readonly format: 'uri';
        readonly description: 'File **URL** to analyse to be used with with *content-type*: **application/json**.';
        readonly examples: readonly ['http://edenai-resource-example.mp4'];
      };
    };
    readonly required: readonly ['providers'];
    readonly $schema: 'http://json-schema.org/draft-04/schema#';
  };
  readonly response: {
    readonly '200': {
      readonly type: 'object';
      readonly properties: {
        readonly public_id: {
          readonly type: 'string';
          readonly format: 'uuid';
        };
      };
      readonly required: readonly ['public_id'];
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
  };
};
declare const VideoLabelDetectionAsyncRetrieve: {
  readonly response: {
    readonly '200': {
      readonly type: 'object';
      readonly properties: {
        readonly jobs: {
          readonly type: 'array';
          readonly items: {
            readonly type: 'object';
            readonly properties: {
              readonly providers: {
                readonly type: 'string';
              };
              readonly nb: {
                readonly type: 'integer';
              };
              readonly nb_ok: {
                readonly type: 'integer';
              };
              readonly public_id: {
                readonly type: 'string';
                readonly format: 'uuid';
              };
              readonly state: {
                readonly enum: readonly ['finished', 'failed', 'Timeout error', 'processing'];
                readonly type: 'string';
                readonly description: '* `finished` - finished\n* `failed` - failed\n* `Timeout error` - Timeout error\n* `processing` - processing\n\n`finished` `failed` `Timeout error` `processing`';
              };
              readonly created_at: {
                readonly type: 'string';
                readonly format: 'date-time';
              };
            };
            readonly required: readonly [
              'created_at',
              'nb',
              'nb_ok',
              'providers',
              'public_id',
              'state'
            ];
          };
        };
      };
      readonly required: readonly ['jobs'];
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
  };
};
declare const VideoLabelDetectionAsyncRetrieve2: {
  readonly metadata: {
    readonly allOf: readonly [
      {
        readonly type: 'object';
        readonly properties: {
          readonly public_id: {
            readonly type: 'string';
            readonly $schema: 'http://json-schema.org/draft-04/schema#';
          };
        };
        readonly required: readonly ['public_id'];
      },
      {
        readonly type: 'object';
        readonly properties: {
          readonly response_as_dict: {
            readonly type: 'boolean';
            readonly default: true;
            readonly $schema: 'http://json-schema.org/draft-04/schema#';
          };
          readonly show_original_response: {
            readonly type: 'boolean';
            readonly default: false;
            readonly $schema: 'http://json-schema.org/draft-04/schema#';
          };
        };
        readonly required: readonly [];
      }
    ];
  };
  readonly response: {
    readonly '200': {
      readonly properties: {
        readonly results: {
          readonly properties: {
            readonly google: {
              readonly required: readonly ['id', 'final_status'];
              readonly title: 'videolabel_detection_asyncLabelDetectionAsyncDataClass';
              readonly type: 'object';
              readonly properties: {
                readonly labels: {
                  readonly title: 'Labels';
                  readonly type: 'array';
                  readonly items: {
                    readonly required: readonly ['name', 'confidence'];
                    readonly title: 'VideoLabel';
                    readonly type: 'object';
                    readonly properties: {
                      readonly name: {
                        readonly title: 'Name';
                        readonly type: 'string';
                      };
                      readonly confidence: {
                        readonly title: 'Confidence';
                        readonly type: 'integer';
                      };
                      readonly timestamp: {
                        readonly title: 'Timestamp';
                        readonly type: 'array';
                        readonly items: {
                          readonly required: readonly ['start', 'end'];
                          readonly title: 'VideoLabelTimeStamp';
                          readonly type: 'object';
                          readonly properties: {
                            readonly start: {
                              readonly title: 'Start';
                              readonly type: 'integer';
                            };
                            readonly end: {
                              readonly title: 'End';
                              readonly type: 'integer';
                            };
                          };
                        };
                      };
                      readonly category: {
                        readonly title: 'Category';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'string';
                        };
                      };
                      readonly bounding_box: {
                        readonly title: 'Bounding Box';
                        readonly type: 'array';
                        readonly items: {
                          readonly required: readonly ['top', 'left', 'height', 'width'];
                          readonly title: 'VideoLabelBoundingBox';
                          readonly type: 'object';
                          readonly properties: {
                            readonly top: {
                              readonly title: 'Top';
                              readonly type: 'integer';
                            };
                            readonly left: {
                              readonly title: 'Left';
                              readonly type: 'integer';
                            };
                            readonly height: {
                              readonly title: 'Height';
                              readonly type: 'integer';
                            };
                            readonly width: {
                              readonly title: 'Width';
                              readonly type: 'integer';
                            };
                          };
                        };
                      };
                    };
                  };
                };
                readonly original_response: {
                  readonly default: any;
                  readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
                  readonly title: 'Original Response';
                };
                readonly id: {
                  readonly title: 'Id';
                  readonly type: 'string';
                };
                readonly final_status: {
                  readonly title: 'Final Status';
                  readonly enum: readonly ['sucess', 'fail'];
                  readonly type: 'string';
                  readonly description: '`sucess` `fail`';
                };
                readonly error: {
                  readonly title: 'Error';
                  readonly type: 'object';
                  readonly additionalProperties: true;
                };
              };
            };
            readonly amazon: {
              readonly required: readonly ['id', 'final_status'];
              readonly title: 'videolabel_detection_asyncLabelDetectionAsyncDataClass';
              readonly type: 'object';
              readonly properties: {
                readonly labels: {
                  readonly title: 'Labels';
                  readonly type: 'array';
                  readonly items: {
                    readonly required: readonly ['name', 'confidence'];
                    readonly title: 'VideoLabel';
                    readonly type: 'object';
                    readonly properties: {
                      readonly name: {
                        readonly title: 'Name';
                        readonly type: 'string';
                      };
                      readonly confidence: {
                        readonly title: 'Confidence';
                        readonly type: 'integer';
                      };
                      readonly timestamp: {
                        readonly title: 'Timestamp';
                        readonly type: 'array';
                        readonly items: {
                          readonly required: readonly ['start', 'end'];
                          readonly title: 'VideoLabelTimeStamp';
                          readonly type: 'object';
                          readonly properties: {
                            readonly start: {
                              readonly title: 'Start';
                              readonly type: 'integer';
                            };
                            readonly end: {
                              readonly title: 'End';
                              readonly type: 'integer';
                            };
                          };
                        };
                      };
                      readonly category: {
                        readonly title: 'Category';
                        readonly type: 'array';
                        readonly items: {
                          readonly type: 'string';
                        };
                      };
                      readonly bounding_box: {
                        readonly title: 'Bounding Box';
                        readonly type: 'array';
                        readonly items: {
                          readonly required: readonly ['top', 'left', 'height', 'width'];
                          readonly title: 'VideoLabelBoundingBox';
                          readonly type: 'object';
                          readonly properties: {
                            readonly top: {
                              readonly title: 'Top';
                              readonly type: 'integer';
                            };
                            readonly left: {
                              readonly title: 'Left';
                              readonly type: 'integer';
                            };
                            readonly height: {
                              readonly title: 'Height';
                              readonly type: 'integer';
                            };
                            readonly width: {
                              readonly title: 'Width';
                              readonly type: 'integer';
                            };
                          };
                        };
                      };
                    };
                  };
                };
                readonly original_response: {
                  readonly default: any;
                  readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
                  readonly title: 'Original Response';
                };
                readonly id: {
                  readonly title: 'Id';
                  readonly type: 'string';
                };
                readonly final_status: {
                  readonly title: 'Final Status';
                  readonly enum: readonly ['sucess', 'fail'];
                  readonly type: 'string';
                  readonly description: '`sucess` `fail`';
                };
                readonly error: {
                  readonly title: 'Error';
                  readonly type: 'object';
                  readonly additionalProperties: true;
                };
              };
            };
          };
          readonly title: 'videolabel_detection_asyncModel';
          readonly type: 'object';
        };
        readonly error: {
          readonly title: 'Error';
          readonly type: 'string';
        };
        readonly public_id: {
          readonly format: 'uuid';
          readonly title: 'Public Id';
          readonly type: 'string';
        };
        readonly status: {
          readonly title: 'Status';
          readonly type: 'string';
        };
      };
      readonly required: readonly ['results', 'error', 'public_id', 'status'];
      readonly title: 'asyncvideolabel_detection_asyncResponseModel';
      readonly type: 'object';
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '400': {
      readonly type: 'object';
      readonly properties: {
        readonly error: {
          readonly type: 'object';
          readonly properties: {
            readonly type: {
              readonly type: 'string';
            };
            readonly message: {
              readonly type: 'object';
              readonly properties: {
                readonly '<parameter_name>': {
                  readonly type: 'array';
                  readonly items: {
                    readonly type: 'string';
                  };
                };
              };
              readonly required: readonly ['<parameter_name>'];
            };
          };
          readonly required: readonly ['message', 'type'];
        };
      };
      readonly required: readonly ['error'];
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '403': {
      readonly type: 'object';
      readonly properties: {
        readonly error: {
          readonly type: 'object';
          readonly properties: {
            readonly type: {
              readonly type: 'string';
            };
            readonly message: {
              readonly type: 'string';
            };
          };
          readonly required: readonly ['message', 'type'];
        };
      };
      readonly required: readonly ['error'];
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '404': {
      readonly type: 'object';
      readonly properties: {
        readonly details: {
          readonly type: 'string';
          readonly default: 'Not Found';
        };
      };
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '500': {
      readonly type: 'object';
      readonly properties: {
        readonly error: {
          readonly type: 'object';
          readonly properties: {
            readonly type: {
              readonly type: 'string';
            };
            readonly message: {
              readonly type: 'string';
            };
          };
          readonly required: readonly ['message', 'type'];
        };
      };
      readonly required: readonly ['error'];
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
  };
};
declare const VideoLogoDetectionAsyncCreate: {
  readonly body: {
    readonly type: 'object';
    readonly properties: {
      readonly providers: {
        readonly type: 'string';
        readonly minLength: 1;
        readonly description: "It can be one (ex: **'amazon'** or **'google'**) or multiple provider(s) (ex: **'amazon,microsoft,google'**)             that the data will be redirected to in order to get the processed results.";
        readonly examples: readonly ['google'];
      };
      readonly fallback_providers: {
        readonly type: 'string';
        readonly minLength: 1;
        readonly description: "Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.\n    To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.\n\nThey will be tried in the same order they are input, and it will stop to the first provider who doesn't fail.\n\n\n*Doesn't work with async subfeatures.*\n    ";
      };
      readonly show_original_response: {
        readonly type: 'boolean';
        readonly default: false;
        readonly description: 'Optional : Shows the original response of the provider.<br>\n        When set to **true**, a new attribute *original_response* will appear in the response object.';
      };
      readonly webhook_receiver: {
        readonly type: 'string';
        readonly format: 'uri';
        readonly minLength: 1;
        readonly description: 'Webhook receiver should be a valid https URL (ex : https://your.listner.com/endpoint).             After the processing is done, the webhook endpoint will receive a POST request with the result.';
      };
      readonly users_webhook_parameters: {
        readonly type: 'object';
        readonly additionalProperties: true;
        readonly description: "Json data that contains of additional parameters that will be sent back to the webhook receiver             (ex: api key for security or client's data ID to link the result internally).             Will only be used when webhook_receiver is set.";
      };
      readonly file: {
        readonly type: 'string';
        readonly format: 'binary';
        readonly description: 'File to analyse in binary format to be used with *content-type*: **multipart/form-data** <br> **Does not work with application/json !**';
        readonly pattern: '(?:mov|mp4|avi)$';
      };
      readonly file_url: {
        readonly type: readonly ['string', 'null'];
        readonly format: 'uri';
        readonly description: 'File **URL** to analyse to be used with with *content-type*: **application/json**.';
        readonly examples: readonly ['http://edenai-resource-example.mp4'];
      };
    };
    readonly required: readonly ['providers'];
    readonly $schema: 'http://json-schema.org/draft-04/schema#';
  };
  readonly response: {
    readonly '200': {
      readonly type: 'object';
      readonly properties: {
        readonly public_id: {
          readonly type: 'string';
          readonly format: 'uuid';
        };
      };
      readonly required: readonly ['public_id'];
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
  };
};
declare const VideoLogoDetectionAsyncRetrieve: {
  readonly response: {
    readonly '200': {
      readonly type: 'object';
      readonly properties: {
        readonly jobs: {
          readonly type: 'array';
          readonly items: {
            readonly type: 'object';
            readonly properties: {
              readonly providers: {
                readonly type: 'string';
              };
              readonly nb: {
                readonly type: 'integer';
              };
              readonly nb_ok: {
                readonly type: 'integer';
              };
              readonly public_id: {
                readonly type: 'string';
                readonly format: 'uuid';
              };
              readonly state: {
                readonly enum: readonly ['finished', 'failed', 'Timeout error', 'processing'];
                readonly type: 'string';
                readonly description: '* `finished` - finished\n* `failed` - failed\n* `Timeout error` - Timeout error\n* `processing` - processing\n\n`finished` `failed` `Timeout error` `processing`';
              };
              readonly created_at: {
                readonly type: 'string';
                readonly format: 'date-time';
              };
            };
            readonly required: readonly [
              'created_at',
              'nb',
              'nb_ok',
              'providers',
              'public_id',
              'state'
            ];
          };
        };
      };
      readonly required: readonly ['jobs'];
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
  };
};
declare const VideoLogoDetectionAsyncRetrieve2: {
  readonly metadata: {
    readonly allOf: readonly [
      {
        readonly type: 'object';
        readonly properties: {
          readonly public_id: {
            readonly type: 'string';
            readonly $schema: 'http://json-schema.org/draft-04/schema#';
          };
        };
        readonly required: readonly ['public_id'];
      },
      {
        readonly type: 'object';
        readonly properties: {
          readonly response_as_dict: {
            readonly type: 'boolean';
            readonly default: true;
            readonly $schema: 'http://json-schema.org/draft-04/schema#';
          };
          readonly show_original_response: {
            readonly type: 'boolean';
            readonly default: false;
            readonly $schema: 'http://json-schema.org/draft-04/schema#';
          };
        };
        readonly required: readonly [];
      }
    ];
  };
  readonly response: {
    readonly '200': {
      readonly properties: {
        readonly results: {
          readonly properties: {
            readonly google: {
              readonly required: readonly ['id', 'final_status'];
              readonly title: 'videologo_detection_asyncLogoDetectionAsyncDataClass';
              readonly type: 'object';
              readonly properties: {
                readonly logos: {
                  readonly title: 'Logos';
                  readonly type: 'array';
                  readonly items: {
                    readonly required: readonly ['description'];
                    readonly title: 'LogoTrack';
                    readonly type: 'object';
                    readonly properties: {
                      readonly description: {
                        readonly title: 'Description';
                        readonly type: 'string';
                      };
                      readonly tracking: {
                        readonly title: 'Tracking';
                        readonly type: 'array';
                        readonly items: {
                          readonly required: readonly ['timestamp', 'bounding_box', 'confidence'];
                          readonly title: 'VideoLogo';
                          readonly type: 'object';
                          readonly properties: {
                            readonly timestamp: {
                              readonly title: 'Timestamp';
                              readonly type: 'integer';
                            };
                            readonly bounding_box: {
                              readonly required: readonly ['top', 'left', 'height', 'width'];
                              readonly title: 'VideoLogoBoundingBox';
                              readonly type: 'object';
                              readonly properties: {
                                readonly top: {
                                  readonly title: 'Top';
                                  readonly type: 'integer';
                                };
                                readonly left: {
                                  readonly title: 'Left';
                                  readonly type: 'integer';
                                };
                                readonly height: {
                                  readonly title: 'Height';
                                  readonly type: 'integer';
                                };
                                readonly width: {
                                  readonly title: 'Width';
                                  readonly type: 'integer';
                                };
                              };
                            };
                            readonly confidence: {
                              readonly title: 'Confidence';
                              readonly type: 'integer';
                            };
                          };
                        };
                      };
                    };
                  };
                };
                readonly original_response: {
                  readonly default: any;
                  readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
                  readonly title: 'Original Response';
                };
                readonly id: {
                  readonly title: 'Id';
                  readonly type: 'string';
                };
                readonly final_status: {
                  readonly title: 'Final Status';
                  readonly enum: readonly ['sucess', 'fail'];
                  readonly type: 'string';
                  readonly description: '`sucess` `fail`';
                };
                readonly error: {
                  readonly title: 'Error';
                  readonly type: 'object';
                  readonly additionalProperties: true;
                };
              };
            };
          };
          readonly title: 'videologo_detection_asyncModel';
          readonly type: 'object';
        };
        readonly error: {
          readonly title: 'Error';
          readonly type: 'string';
        };
        readonly public_id: {
          readonly format: 'uuid';
          readonly title: 'Public Id';
          readonly type: 'string';
        };
        readonly status: {
          readonly title: 'Status';
          readonly type: 'string';
        };
      };
      readonly required: readonly ['results', 'error', 'public_id', 'status'];
      readonly title: 'asyncvideologo_detection_asyncResponseModel';
      readonly type: 'object';
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '400': {
      readonly type: 'object';
      readonly properties: {
        readonly error: {
          readonly type: 'object';
          readonly properties: {
            readonly type: {
              readonly type: 'string';
            };
            readonly message: {
              readonly type: 'object';
              readonly properties: {
                readonly '<parameter_name>': {
                  readonly type: 'array';
                  readonly items: {
                    readonly type: 'string';
                  };
                };
              };
              readonly required: readonly ['<parameter_name>'];
            };
          };
          readonly required: readonly ['message', 'type'];
        };
      };
      readonly required: readonly ['error'];
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '403': {
      readonly type: 'object';
      readonly properties: {
        readonly error: {
          readonly type: 'object';
          readonly properties: {
            readonly type: {
              readonly type: 'string';
            };
            readonly message: {
              readonly type: 'string';
            };
          };
          readonly required: readonly ['message', 'type'];
        };
      };
      readonly required: readonly ['error'];
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '404': {
      readonly type: 'object';
      readonly properties: {
        readonly details: {
          readonly type: 'string';
          readonly default: 'Not Found';
        };
      };
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '500': {
      readonly type: 'object';
      readonly properties: {
        readonly error: {
          readonly type: 'object';
          readonly properties: {
            readonly type: {
              readonly type: 'string';
            };
            readonly message: {
              readonly type: 'string';
            };
          };
          readonly required: readonly ['message', 'type'];
        };
      };
      readonly required: readonly ['error'];
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
  };
};
declare const VideoObjectTrackingAsyncCreate: {
  readonly body: {
    readonly type: 'object';
    readonly properties: {
      readonly providers: {
        readonly type: 'string';
        readonly minLength: 1;
        readonly description: "It can be one (ex: **'amazon'** or **'google'**) or multiple provider(s) (ex: **'amazon,microsoft,google'**)             that the data will be redirected to in order to get the processed results.";
        readonly examples: readonly ['google'];
      };
      readonly fallback_providers: {
        readonly type: 'string';
        readonly minLength: 1;
        readonly description: "Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.\n    To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.\n\nThey will be tried in the same order they are input, and it will stop to the first provider who doesn't fail.\n\n\n*Doesn't work with async subfeatures.*\n    ";
      };
      readonly show_original_response: {
        readonly type: 'boolean';
        readonly default: false;
        readonly description: 'Optional : Shows the original response of the provider.<br>\n        When set to **true**, a new attribute *original_response* will appear in the response object.';
      };
      readonly webhook_receiver: {
        readonly type: 'string';
        readonly format: 'uri';
        readonly minLength: 1;
        readonly description: 'Webhook receiver should be a valid https URL (ex : https://your.listner.com/endpoint).             After the processing is done, the webhook endpoint will receive a POST request with the result.';
      };
      readonly users_webhook_parameters: {
        readonly type: 'object';
        readonly additionalProperties: true;
        readonly description: "Json data that contains of additional parameters that will be sent back to the webhook receiver             (ex: api key for security or client's data ID to link the result internally).             Will only be used when webhook_receiver is set.";
      };
      readonly file: {
        readonly type: 'string';
        readonly format: 'binary';
        readonly description: 'File to analyse in binary format to be used with *content-type*: **multipart/form-data** <br> **Does not work with application/json !**';
        readonly pattern: '(?:mov|mp4|avi)$';
      };
      readonly file_url: {
        readonly type: readonly ['string', 'null'];
        readonly format: 'uri';
        readonly description: 'File **URL** to analyse to be used with with *content-type*: **application/json**.';
        readonly examples: readonly ['http://edenai-resource-example.mp4'];
      };
    };
    readonly required: readonly ['providers'];
    readonly $schema: 'http://json-schema.org/draft-04/schema#';
  };
  readonly response: {
    readonly '200': {
      readonly type: 'object';
      readonly properties: {
        readonly public_id: {
          readonly type: 'string';
          readonly format: 'uuid';
        };
      };
      readonly required: readonly ['public_id'];
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
  };
};
declare const VideoObjectTrackingAsyncRetrieve: {
  readonly response: {
    readonly '200': {
      readonly type: 'object';
      readonly properties: {
        readonly jobs: {
          readonly type: 'array';
          readonly items: {
            readonly type: 'object';
            readonly properties: {
              readonly providers: {
                readonly type: 'string';
              };
              readonly nb: {
                readonly type: 'integer';
              };
              readonly nb_ok: {
                readonly type: 'integer';
              };
              readonly public_id: {
                readonly type: 'string';
                readonly format: 'uuid';
              };
              readonly state: {
                readonly enum: readonly ['finished', 'failed', 'Timeout error', 'processing'];
                readonly type: 'string';
                readonly description: '* `finished` - finished\n* `failed` - failed\n* `Timeout error` - Timeout error\n* `processing` - processing\n\n`finished` `failed` `Timeout error` `processing`';
              };
              readonly created_at: {
                readonly type: 'string';
                readonly format: 'date-time';
              };
            };
            readonly required: readonly [
              'created_at',
              'nb',
              'nb_ok',
              'providers',
              'public_id',
              'state'
            ];
          };
        };
      };
      readonly required: readonly ['jobs'];
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
  };
};
declare const VideoObjectTrackingAsyncRetrieve2: {
  readonly metadata: {
    readonly allOf: readonly [
      {
        readonly type: 'object';
        readonly properties: {
          readonly public_id: {
            readonly type: 'string';
            readonly $schema: 'http://json-schema.org/draft-04/schema#';
          };
        };
        readonly required: readonly ['public_id'];
      },
      {
        readonly type: 'object';
        readonly properties: {
          readonly response_as_dict: {
            readonly type: 'boolean';
            readonly default: true;
            readonly $schema: 'http://json-schema.org/draft-04/schema#';
          };
          readonly show_original_response: {
            readonly type: 'boolean';
            readonly default: false;
            readonly $schema: 'http://json-schema.org/draft-04/schema#';
          };
        };
        readonly required: readonly [];
      }
    ];
  };
  readonly response: {
    readonly '200': {
      readonly properties: {
        readonly results: {
          readonly properties: {
            readonly google: {
              readonly required: readonly ['id', 'final_status'];
              readonly title: 'videoobject_tracking_asyncObjectTrackingAsyncDataClass';
              readonly type: 'object';
              readonly properties: {
                readonly objects: {
                  readonly title: 'Objects';
                  readonly type: 'array';
                  readonly items: {
                    readonly required: readonly ['description', 'confidence'];
                    readonly title: 'ObjectTrack';
                    readonly type: 'object';
                    readonly properties: {
                      readonly description: {
                        readonly title: 'Description';
                        readonly type: 'string';
                      };
                      readonly confidence: {
                        readonly title: 'Confidence';
                        readonly type: 'integer';
                      };
                      readonly frames: {
                        readonly title: 'Frames';
                        readonly type: 'array';
                        readonly items: {
                          readonly required: readonly ['timestamp', 'bounding_box'];
                          readonly title: 'ObjectFrame';
                          readonly type: 'object';
                          readonly properties: {
                            readonly timestamp: {
                              readonly title: 'Timestamp';
                              readonly type: 'integer';
                            };
                            readonly bounding_box: {
                              readonly required: readonly ['top', 'left', 'height', 'width'];
                              readonly title: 'VideoObjectBoundingBox';
                              readonly type: 'object';
                              readonly properties: {
                                readonly top: {
                                  readonly title: 'Top';
                                  readonly type: 'integer';
                                };
                                readonly left: {
                                  readonly title: 'Left';
                                  readonly type: 'integer';
                                };
                                readonly height: {
                                  readonly title: 'Height';
                                  readonly type: 'integer';
                                };
                                readonly width: {
                                  readonly title: 'Width';
                                  readonly type: 'integer';
                                };
                              };
                            };
                          };
                        };
                      };
                    };
                  };
                };
                readonly original_response: {
                  readonly default: any;
                  readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
                  readonly title: 'Original Response';
                };
                readonly id: {
                  readonly title: 'Id';
                  readonly type: 'string';
                };
                readonly final_status: {
                  readonly title: 'Final Status';
                  readonly enum: readonly ['sucess', 'fail'];
                  readonly type: 'string';
                  readonly description: '`sucess` `fail`';
                };
                readonly error: {
                  readonly title: 'Error';
                  readonly type: 'object';
                  readonly additionalProperties: true;
                };
              };
            };
          };
          readonly title: 'videoobject_tracking_asyncModel';
          readonly type: 'object';
        };
        readonly error: {
          readonly title: 'Error';
          readonly type: 'string';
        };
        readonly public_id: {
          readonly format: 'uuid';
          readonly title: 'Public Id';
          readonly type: 'string';
        };
        readonly status: {
          readonly title: 'Status';
          readonly type: 'string';
        };
      };
      readonly required: readonly ['results', 'error', 'public_id', 'status'];
      readonly title: 'asyncvideoobject_tracking_asyncResponseModel';
      readonly type: 'object';
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '400': {
      readonly type: 'object';
      readonly properties: {
        readonly error: {
          readonly type: 'object';
          readonly properties: {
            readonly type: {
              readonly type: 'string';
            };
            readonly message: {
              readonly type: 'object';
              readonly properties: {
                readonly '<parameter_name>': {
                  readonly type: 'array';
                  readonly items: {
                    readonly type: 'string';
                  };
                };
              };
              readonly required: readonly ['<parameter_name>'];
            };
          };
          readonly required: readonly ['message', 'type'];
        };
      };
      readonly required: readonly ['error'];
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '403': {
      readonly type: 'object';
      readonly properties: {
        readonly error: {
          readonly type: 'object';
          readonly properties: {
            readonly type: {
              readonly type: 'string';
            };
            readonly message: {
              readonly type: 'string';
            };
          };
          readonly required: readonly ['message', 'type'];
        };
      };
      readonly required: readonly ['error'];
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '404': {
      readonly type: 'object';
      readonly properties: {
        readonly details: {
          readonly type: 'string';
          readonly default: 'Not Found';
        };
      };
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '500': {
      readonly type: 'object';
      readonly properties: {
        readonly error: {
          readonly type: 'object';
          readonly properties: {
            readonly type: {
              readonly type: 'string';
            };
            readonly message: {
              readonly type: 'string';
            };
          };
          readonly required: readonly ['message', 'type'];
        };
      };
      readonly required: readonly ['error'];
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
  };
};
declare const VideoPersonTrackingAsyncCreate: {
  readonly body: {
    readonly type: 'object';
    readonly properties: {
      readonly providers: {
        readonly type: 'string';
        readonly minLength: 1;
        readonly description: "It can be one (ex: **'amazon'** or **'google'**) or multiple provider(s) (ex: **'amazon,microsoft,google'**)             that the data will be redirected to in order to get the processed results.";
        readonly examples: readonly ['google,amazon'];
      };
      readonly fallback_providers: {
        readonly type: 'string';
        readonly minLength: 1;
        readonly description: "Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.\n    To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.\n\nThey will be tried in the same order they are input, and it will stop to the first provider who doesn't fail.\n\n\n*Doesn't work with async subfeatures.*\n    ";
      };
      readonly show_original_response: {
        readonly type: 'boolean';
        readonly default: false;
        readonly description: 'Optional : Shows the original response of the provider.<br>\n        When set to **true**, a new attribute *original_response* will appear in the response object.';
      };
      readonly webhook_receiver: {
        readonly type: 'string';
        readonly format: 'uri';
        readonly minLength: 1;
        readonly description: 'Webhook receiver should be a valid https URL (ex : https://your.listner.com/endpoint).             After the processing is done, the webhook endpoint will receive a POST request with the result.';
      };
      readonly users_webhook_parameters: {
        readonly type: 'object';
        readonly additionalProperties: true;
        readonly description: "Json data that contains of additional parameters that will be sent back to the webhook receiver             (ex: api key for security or client's data ID to link the result internally).             Will only be used when webhook_receiver is set.";
      };
      readonly file: {
        readonly type: 'string';
        readonly format: 'binary';
        readonly description: 'File to analyse in binary format to be used with *content-type*: **multipart/form-data** <br> **Does not work with application/json !**';
        readonly pattern: '(?:mov|mp4|avi)$';
      };
      readonly file_url: {
        readonly type: readonly ['string', 'null'];
        readonly format: 'uri';
        readonly description: 'File **URL** to analyse to be used with with *content-type*: **application/json**.';
        readonly examples: readonly ['http://edenai-resource-example.mp4'];
      };
    };
    readonly required: readonly ['providers'];
    readonly $schema: 'http://json-schema.org/draft-04/schema#';
  };
  readonly response: {
    readonly '200': {
      readonly type: 'object';
      readonly properties: {
        readonly public_id: {
          readonly type: 'string';
          readonly format: 'uuid';
        };
      };
      readonly required: readonly ['public_id'];
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
  };
};
declare const VideoPersonTrackingAsyncRetrieve: {
  readonly response: {
    readonly '200': {
      readonly type: 'object';
      readonly properties: {
        readonly jobs: {
          readonly type: 'array';
          readonly items: {
            readonly type: 'object';
            readonly properties: {
              readonly providers: {
                readonly type: 'string';
              };
              readonly nb: {
                readonly type: 'integer';
              };
              readonly nb_ok: {
                readonly type: 'integer';
              };
              readonly public_id: {
                readonly type: 'string';
                readonly format: 'uuid';
              };
              readonly state: {
                readonly enum: readonly ['finished', 'failed', 'Timeout error', 'processing'];
                readonly type: 'string';
                readonly description: '* `finished` - finished\n* `failed` - failed\n* `Timeout error` - Timeout error\n* `processing` - processing\n\n`finished` `failed` `Timeout error` `processing`';
              };
              readonly created_at: {
                readonly type: 'string';
                readonly format: 'date-time';
              };
            };
            readonly required: readonly [
              'created_at',
              'nb',
              'nb_ok',
              'providers',
              'public_id',
              'state'
            ];
          };
        };
      };
      readonly required: readonly ['jobs'];
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
  };
};
declare const VideoPersonTrackingAsyncRetrieve2: {
  readonly metadata: {
    readonly allOf: readonly [
      {
        readonly type: 'object';
        readonly properties: {
          readonly public_id: {
            readonly type: 'string';
            readonly $schema: 'http://json-schema.org/draft-04/schema#';
          };
        };
        readonly required: readonly ['public_id'];
      },
      {
        readonly type: 'object';
        readonly properties: {
          readonly response_as_dict: {
            readonly type: 'boolean';
            readonly default: true;
            readonly $schema: 'http://json-schema.org/draft-04/schema#';
          };
          readonly show_original_response: {
            readonly type: 'boolean';
            readonly default: false;
            readonly $schema: 'http://json-schema.org/draft-04/schema#';
          };
        };
        readonly required: readonly [];
      }
    ];
  };
  readonly response: {
    readonly '200': {
      readonly properties: {
        readonly results: {
          readonly properties: {
            readonly google: {
              readonly required: readonly ['id', 'final_status'];
              readonly title: 'videoperson_tracking_asyncPersonTrackingAsyncDataClass';
              readonly type: 'object';
              readonly properties: {
                readonly persons: {
                  readonly title: 'Persons';
                  readonly type: 'array';
                  readonly items: {
                    readonly title: 'VideoTrackingPerson';
                    readonly type: 'object';
                    readonly properties: {
                      readonly tracked: {
                        readonly title: 'Tracked';
                        readonly type: 'array';
                        readonly items: {
                          readonly required: readonly ['offset', 'bounding_box'];
                          readonly title: 'PersonTracking';
                          readonly type: 'object';
                          readonly properties: {
                            readonly offset: {
                              readonly title: 'Offset';
                              readonly type: 'integer';
                            };
                            readonly attributes: {
                              readonly title: 'PersonAttributes';
                              readonly type: 'object';
                              readonly properties: {
                                readonly upper_cloths: {
                                  readonly title: 'Upper Cloths';
                                  readonly type: 'array';
                                  readonly items: {
                                    readonly required: readonly ['value', 'confidence'];
                                    readonly title: 'UpperCloth';
                                    readonly type: 'object';
                                    readonly properties: {
                                      readonly value: {
                                        readonly title: 'Value';
                                        readonly type: 'string';
                                      };
                                      readonly confidence: {
                                        readonly title: 'Confidence';
                                        readonly type: 'integer';
                                      };
                                    };
                                  };
                                };
                                readonly lower_cloths: {
                                  readonly title: 'Lower Cloths';
                                  readonly type: 'array';
                                  readonly items: {
                                    readonly required: readonly ['value', 'confidence'];
                                    readonly title: 'LowerCloth';
                                    readonly type: 'object';
                                    readonly properties: {
                                      readonly value: {
                                        readonly title: 'Value';
                                        readonly type: 'string';
                                      };
                                      readonly confidence: {
                                        readonly title: 'Confidence';
                                        readonly type: 'integer';
                                      };
                                    };
                                  };
                                };
                              };
                            };
                            readonly landmarks: {
                              readonly title: 'PersonLandmarks';
                              readonly type: 'object';
                              readonly properties: {
                                readonly eye_left: {
                                  readonly title: 'Eye Left';
                                  readonly type: 'array';
                                  readonly items: {
                                    readonly type: 'integer';
                                  };
                                };
                                readonly eye_right: {
                                  readonly title: 'Eye Right';
                                  readonly type: 'array';
                                  readonly items: {
                                    readonly type: 'integer';
                                  };
                                };
                                readonly nose: {
                                  readonly title: 'Nose';
                                  readonly type: 'array';
                                  readonly items: {
                                    readonly type: 'integer';
                                  };
                                };
                                readonly ear_left: {
                                  readonly title: 'Ear Left';
                                  readonly type: 'array';
                                  readonly items: {
                                    readonly type: 'integer';
                                  };
                                };
                                readonly ear_right: {
                                  readonly title: 'Ear Right';
                                  readonly type: 'array';
                                  readonly items: {
                                    readonly type: 'integer';
                                  };
                                };
                                readonly shoulder_left: {
                                  readonly title: 'Shoulder Left';
                                  readonly type: 'array';
                                  readonly items: {
                                    readonly type: 'integer';
                                  };
                                };
                                readonly shoulder_right: {
                                  readonly title: 'Shoulder Right';
                                  readonly type: 'array';
                                  readonly items: {
                                    readonly type: 'integer';
                                  };
                                };
                                readonly elbow_left: {
                                  readonly title: 'Elbow Left';
                                  readonly type: 'array';
                                  readonly items: {
                                    readonly type: 'integer';
                                  };
                                };
                                readonly elbow_right: {
                                  readonly title: 'Elbow Right';
                                  readonly type: 'array';
                                  readonly items: {
                                    readonly type: 'integer';
                                  };
                                };
                                readonly wrist_left: {
                                  readonly title: 'Wrist Left';
                                  readonly type: 'array';
                                  readonly items: {
                                    readonly type: 'integer';
                                  };
                                };
                                readonly wrist_right: {
                                  readonly title: 'Wrist Right';
                                  readonly type: 'array';
                                  readonly items: {
                                    readonly type: 'integer';
                                  };
                                };
                                readonly hip_left: {
                                  readonly title: 'Hip Left';
                                  readonly type: 'array';
                                  readonly items: {
                                    readonly type: 'integer';
                                  };
                                };
                                readonly hip_right: {
                                  readonly title: 'Hip Right';
                                  readonly type: 'array';
                                  readonly items: {
                                    readonly type: 'integer';
                                  };
                                };
                                readonly knee_left: {
                                  readonly title: 'Knee Left';
                                  readonly type: 'array';
                                  readonly items: {
                                    readonly type: 'integer';
                                  };
                                };
                                readonly knee_right: {
                                  readonly title: 'Knee Right';
                                  readonly type: 'array';
                                  readonly items: {
                                    readonly type: 'integer';
                                  };
                                };
                                readonly ankle_left: {
                                  readonly title: 'Ankle Left';
                                  readonly type: 'array';
                                  readonly items: {
                                    readonly type: 'integer';
                                  };
                                };
                                readonly ankle_right: {
                                  readonly title: 'Ankle Right';
                                  readonly type: 'array';
                                  readonly items: {
                                    readonly type: 'integer';
                                  };
                                };
                                readonly mouth_left: {
                                  readonly title: 'Mouth Left';
                                  readonly type: 'array';
                                  readonly items: {
                                    readonly type: 'integer';
                                  };
                                };
                                readonly mouth_right: {
                                  readonly title: 'Mouth Right';
                                  readonly type: 'array';
                                  readonly items: {
                                    readonly type: 'integer';
                                  };
                                };
                              };
                            };
                            readonly poses: {
                              readonly required: readonly ['pitch', 'roll', 'yaw'];
                              readonly title: 'VideoPersonPoses';
                              readonly type: 'object';
                              readonly properties: {
                                readonly pitch: {
                                  readonly title: 'Pitch';
                                  readonly type: 'integer';
                                };
                                readonly roll: {
                                  readonly title: 'Roll';
                                  readonly type: 'integer';
                                };
                                readonly yaw: {
                                  readonly title: 'Yaw';
                                  readonly type: 'integer';
                                };
                              };
                            };
                            readonly quality: {
                              readonly required: readonly ['brightness', 'sharpness'];
                              readonly title: 'VideoPersonQuality';
                              readonly type: 'object';
                              readonly properties: {
                                readonly brightness: {
                                  readonly title: 'Brightness';
                                  readonly type: 'integer';
                                };
                                readonly sharpness: {
                                  readonly title: 'Sharpness';
                                  readonly type: 'integer';
                                };
                              };
                            };
                            readonly bounding_box: {
                              readonly required: readonly ['top', 'left', 'height', 'width'];
                              readonly title: 'VideoTrackingBoundingBox';
                              readonly type: 'object';
                              readonly properties: {
                                readonly top: {
                                  readonly title: 'Top';
                                  readonly type: 'integer';
                                };
                                readonly left: {
                                  readonly title: 'Left';
                                  readonly type: 'integer';
                                };
                                readonly height: {
                                  readonly title: 'Height';
                                  readonly type: 'integer';
                                };
                                readonly width: {
                                  readonly title: 'Width';
                                  readonly type: 'integer';
                                };
                              };
                            };
                          };
                        };
                      };
                    };
                  };
                };
                readonly original_response: {
                  readonly default: any;
                  readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
                  readonly title: 'Original Response';
                };
                readonly id: {
                  readonly title: 'Id';
                  readonly type: 'string';
                };
                readonly final_status: {
                  readonly title: 'Final Status';
                  readonly enum: readonly ['sucess', 'fail'];
                  readonly type: 'string';
                  readonly description: '`sucess` `fail`';
                };
                readonly error: {
                  readonly title: 'Error';
                  readonly type: 'object';
                  readonly additionalProperties: true;
                };
              };
            };
            readonly amazon: {
              readonly required: readonly ['id', 'final_status'];
              readonly title: 'videoperson_tracking_asyncPersonTrackingAsyncDataClass';
              readonly type: 'object';
              readonly properties: {
                readonly persons: {
                  readonly title: 'Persons';
                  readonly type: 'array';
                  readonly items: {
                    readonly title: 'VideoTrackingPerson';
                    readonly type: 'object';
                    readonly properties: {
                      readonly tracked: {
                        readonly title: 'Tracked';
                        readonly type: 'array';
                        readonly items: {
                          readonly required: readonly ['offset', 'bounding_box'];
                          readonly title: 'PersonTracking';
                          readonly type: 'object';
                          readonly properties: {
                            readonly offset: {
                              readonly title: 'Offset';
                              readonly type: 'integer';
                            };
                            readonly attributes: {
                              readonly title: 'PersonAttributes';
                              readonly type: 'object';
                              readonly properties: {
                                readonly upper_cloths: {
                                  readonly title: 'Upper Cloths';
                                  readonly type: 'array';
                                  readonly items: {
                                    readonly required: readonly ['value', 'confidence'];
                                    readonly title: 'UpperCloth';
                                    readonly type: 'object';
                                    readonly properties: {
                                      readonly value: {
                                        readonly title: 'Value';
                                        readonly type: 'string';
                                      };
                                      readonly confidence: {
                                        readonly title: 'Confidence';
                                        readonly type: 'integer';
                                      };
                                    };
                                  };
                                };
                                readonly lower_cloths: {
                                  readonly title: 'Lower Cloths';
                                  readonly type: 'array';
                                  readonly items: {
                                    readonly required: readonly ['value', 'confidence'];
                                    readonly title: 'LowerCloth';
                                    readonly type: 'object';
                                    readonly properties: {
                                      readonly value: {
                                        readonly title: 'Value';
                                        readonly type: 'string';
                                      };
                                      readonly confidence: {
                                        readonly title: 'Confidence';
                                        readonly type: 'integer';
                                      };
                                    };
                                  };
                                };
                              };
                            };
                            readonly landmarks: {
                              readonly title: 'PersonLandmarks';
                              readonly type: 'object';
                              readonly properties: {
                                readonly eye_left: {
                                  readonly title: 'Eye Left';
                                  readonly type: 'array';
                                  readonly items: {
                                    readonly type: 'integer';
                                  };
                                };
                                readonly eye_right: {
                                  readonly title: 'Eye Right';
                                  readonly type: 'array';
                                  readonly items: {
                                    readonly type: 'integer';
                                  };
                                };
                                readonly nose: {
                                  readonly title: 'Nose';
                                  readonly type: 'array';
                                  readonly items: {
                                    readonly type: 'integer';
                                  };
                                };
                                readonly ear_left: {
                                  readonly title: 'Ear Left';
                                  readonly type: 'array';
                                  readonly items: {
                                    readonly type: 'integer';
                                  };
                                };
                                readonly ear_right: {
                                  readonly title: 'Ear Right';
                                  readonly type: 'array';
                                  readonly items: {
                                    readonly type: 'integer';
                                  };
                                };
                                readonly shoulder_left: {
                                  readonly title: 'Shoulder Left';
                                  readonly type: 'array';
                                  readonly items: {
                                    readonly type: 'integer';
                                  };
                                };
                                readonly shoulder_right: {
                                  readonly title: 'Shoulder Right';
                                  readonly type: 'array';
                                  readonly items: {
                                    readonly type: 'integer';
                                  };
                                };
                                readonly elbow_left: {
                                  readonly title: 'Elbow Left';
                                  readonly type: 'array';
                                  readonly items: {
                                    readonly type: 'integer';
                                  };
                                };
                                readonly elbow_right: {
                                  readonly title: 'Elbow Right';
                                  readonly type: 'array';
                                  readonly items: {
                                    readonly type: 'integer';
                                  };
                                };
                                readonly wrist_left: {
                                  readonly title: 'Wrist Left';
                                  readonly type: 'array';
                                  readonly items: {
                                    readonly type: 'integer';
                                  };
                                };
                                readonly wrist_right: {
                                  readonly title: 'Wrist Right';
                                  readonly type: 'array';
                                  readonly items: {
                                    readonly type: 'integer';
                                  };
                                };
                                readonly hip_left: {
                                  readonly title: 'Hip Left';
                                  readonly type: 'array';
                                  readonly items: {
                                    readonly type: 'integer';
                                  };
                                };
                                readonly hip_right: {
                                  readonly title: 'Hip Right';
                                  readonly type: 'array';
                                  readonly items: {
                                    readonly type: 'integer';
                                  };
                                };
                                readonly knee_left: {
                                  readonly title: 'Knee Left';
                                  readonly type: 'array';
                                  readonly items: {
                                    readonly type: 'integer';
                                  };
                                };
                                readonly knee_right: {
                                  readonly title: 'Knee Right';
                                  readonly type: 'array';
                                  readonly items: {
                                    readonly type: 'integer';
                                  };
                                };
                                readonly ankle_left: {
                                  readonly title: 'Ankle Left';
                                  readonly type: 'array';
                                  readonly items: {
                                    readonly type: 'integer';
                                  };
                                };
                                readonly ankle_right: {
                                  readonly title: 'Ankle Right';
                                  readonly type: 'array';
                                  readonly items: {
                                    readonly type: 'integer';
                                  };
                                };
                                readonly mouth_left: {
                                  readonly title: 'Mouth Left';
                                  readonly type: 'array';
                                  readonly items: {
                                    readonly type: 'integer';
                                  };
                                };
                                readonly mouth_right: {
                                  readonly title: 'Mouth Right';
                                  readonly type: 'array';
                                  readonly items: {
                                    readonly type: 'integer';
                                  };
                                };
                              };
                            };
                            readonly poses: {
                              readonly required: readonly ['pitch', 'roll', 'yaw'];
                              readonly title: 'VideoPersonPoses';
                              readonly type: 'object';
                              readonly properties: {
                                readonly pitch: {
                                  readonly title: 'Pitch';
                                  readonly type: 'integer';
                                };
                                readonly roll: {
                                  readonly title: 'Roll';
                                  readonly type: 'integer';
                                };
                                readonly yaw: {
                                  readonly title: 'Yaw';
                                  readonly type: 'integer';
                                };
                              };
                            };
                            readonly quality: {
                              readonly required: readonly ['brightness', 'sharpness'];
                              readonly title: 'VideoPersonQuality';
                              readonly type: 'object';
                              readonly properties: {
                                readonly brightness: {
                                  readonly title: 'Brightness';
                                  readonly type: 'integer';
                                };
                                readonly sharpness: {
                                  readonly title: 'Sharpness';
                                  readonly type: 'integer';
                                };
                              };
                            };
                            readonly bounding_box: {
                              readonly required: readonly ['top', 'left', 'height', 'width'];
                              readonly title: 'VideoTrackingBoundingBox';
                              readonly type: 'object';
                              readonly properties: {
                                readonly top: {
                                  readonly title: 'Top';
                                  readonly type: 'integer';
                                };
                                readonly left: {
                                  readonly title: 'Left';
                                  readonly type: 'integer';
                                };
                                readonly height: {
                                  readonly title: 'Height';
                                  readonly type: 'integer';
                                };
                                readonly width: {
                                  readonly title: 'Width';
                                  readonly type: 'integer';
                                };
                              };
                            };
                          };
                        };
                      };
                    };
                  };
                };
                readonly original_response: {
                  readonly default: any;
                  readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
                  readonly title: 'Original Response';
                };
                readonly id: {
                  readonly title: 'Id';
                  readonly type: 'string';
                };
                readonly final_status: {
                  readonly title: 'Final Status';
                  readonly enum: readonly ['sucess', 'fail'];
                  readonly type: 'string';
                  readonly description: '`sucess` `fail`';
                };
                readonly error: {
                  readonly title: 'Error';
                  readonly type: 'object';
                  readonly additionalProperties: true;
                };
              };
            };
          };
          readonly title: 'videoperson_tracking_asyncModel';
          readonly type: 'object';
        };
        readonly error: {
          readonly title: 'Error';
          readonly type: 'string';
        };
        readonly public_id: {
          readonly format: 'uuid';
          readonly title: 'Public Id';
          readonly type: 'string';
        };
        readonly status: {
          readonly title: 'Status';
          readonly type: 'string';
        };
      };
      readonly required: readonly ['results', 'error', 'public_id', 'status'];
      readonly title: 'asyncvideoperson_tracking_asyncResponseModel';
      readonly type: 'object';
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '400': {
      readonly type: 'object';
      readonly properties: {
        readonly error: {
          readonly type: 'object';
          readonly properties: {
            readonly type: {
              readonly type: 'string';
            };
            readonly message: {
              readonly type: 'object';
              readonly properties: {
                readonly '<parameter_name>': {
                  readonly type: 'array';
                  readonly items: {
                    readonly type: 'string';
                  };
                };
              };
              readonly required: readonly ['<parameter_name>'];
            };
          };
          readonly required: readonly ['message', 'type'];
        };
      };
      readonly required: readonly ['error'];
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '403': {
      readonly type: 'object';
      readonly properties: {
        readonly error: {
          readonly type: 'object';
          readonly properties: {
            readonly type: {
              readonly type: 'string';
            };
            readonly message: {
              readonly type: 'string';
            };
          };
          readonly required: readonly ['message', 'type'];
        };
      };
      readonly required: readonly ['error'];
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '404': {
      readonly type: 'object';
      readonly properties: {
        readonly details: {
          readonly type: 'string';
          readonly default: 'Not Found';
        };
      };
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '500': {
      readonly type: 'object';
      readonly properties: {
        readonly error: {
          readonly type: 'object';
          readonly properties: {
            readonly type: {
              readonly type: 'string';
            };
            readonly message: {
              readonly type: 'string';
            };
          };
          readonly required: readonly ['message', 'type'];
        };
      };
      readonly required: readonly ['error'];
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
  };
};
declare const VideoTextDetectionAsyncCreate: {
  readonly body: {
    readonly type: 'object';
    readonly properties: {
      readonly providers: {
        readonly type: 'string';
        readonly minLength: 1;
        readonly description: "It can be one (ex: **'amazon'** or **'google'**) or multiple provider(s) (ex: **'amazon,microsoft,google'**)             that the data will be redirected to in order to get the processed results.";
        readonly examples: readonly ['amazon,google'];
      };
      readonly fallback_providers: {
        readonly type: 'string';
        readonly minLength: 1;
        readonly description: "Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.\n    To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.\n\nThey will be tried in the same order they are input, and it will stop to the first provider who doesn't fail.\n\n\n*Doesn't work with async subfeatures.*\n    ";
      };
      readonly show_original_response: {
        readonly type: 'boolean';
        readonly default: false;
        readonly description: 'Optional : Shows the original response of the provider.<br>\n        When set to **true**, a new attribute *original_response* will appear in the response object.';
      };
      readonly webhook_receiver: {
        readonly type: 'string';
        readonly format: 'uri';
        readonly minLength: 1;
        readonly description: 'Webhook receiver should be a valid https URL (ex : https://your.listner.com/endpoint).             After the processing is done, the webhook endpoint will receive a POST request with the result.';
      };
      readonly users_webhook_parameters: {
        readonly type: 'object';
        readonly additionalProperties: true;
        readonly description: "Json data that contains of additional parameters that will be sent back to the webhook receiver             (ex: api key for security or client's data ID to link the result internally).             Will only be used when webhook_receiver is set.";
      };
      readonly file: {
        readonly type: 'string';
        readonly format: 'binary';
        readonly description: 'File to analyse in binary format to be used with *content-type*: **multipart/form-data** <br> **Does not work with application/json !**';
        readonly pattern: '(?:mov|mp4|avi)$';
      };
      readonly file_url: {
        readonly type: readonly ['string', 'null'];
        readonly format: 'uri';
        readonly description: 'File **URL** to analyse to be used with with *content-type*: **application/json**.';
        readonly examples: readonly ['http://edenai-resource-example.mp4'];
      };
    };
    readonly required: readonly ['providers'];
    readonly $schema: 'http://json-schema.org/draft-04/schema#';
  };
  readonly response: {
    readonly '200': {
      readonly type: 'object';
      readonly properties: {
        readonly public_id: {
          readonly type: 'string';
          readonly format: 'uuid';
        };
      };
      readonly required: readonly ['public_id'];
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
  };
};
declare const VideoTextDetectionAsyncRetrieve: {
  readonly response: {
    readonly '200': {
      readonly type: 'object';
      readonly properties: {
        readonly jobs: {
          readonly type: 'array';
          readonly items: {
            readonly type: 'object';
            readonly properties: {
              readonly providers: {
                readonly type: 'string';
              };
              readonly nb: {
                readonly type: 'integer';
              };
              readonly nb_ok: {
                readonly type: 'integer';
              };
              readonly public_id: {
                readonly type: 'string';
                readonly format: 'uuid';
              };
              readonly state: {
                readonly enum: readonly ['finished', 'failed', 'Timeout error', 'processing'];
                readonly type: 'string';
                readonly description: '* `finished` - finished\n* `failed` - failed\n* `Timeout error` - Timeout error\n* `processing` - processing\n\n`finished` `failed` `Timeout error` `processing`';
              };
              readonly created_at: {
                readonly type: 'string';
                readonly format: 'date-time';
              };
            };
            readonly required: readonly [
              'created_at',
              'nb',
              'nb_ok',
              'providers',
              'public_id',
              'state'
            ];
          };
        };
      };
      readonly required: readonly ['jobs'];
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
  };
};
declare const VideoTextDetectionAsyncRetrieve2: {
  readonly metadata: {
    readonly allOf: readonly [
      {
        readonly type: 'object';
        readonly properties: {
          readonly public_id: {
            readonly type: 'string';
            readonly $schema: 'http://json-schema.org/draft-04/schema#';
          };
        };
        readonly required: readonly ['public_id'];
      },
      {
        readonly type: 'object';
        readonly properties: {
          readonly response_as_dict: {
            readonly type: 'boolean';
            readonly default: true;
            readonly $schema: 'http://json-schema.org/draft-04/schema#';
          };
          readonly show_original_response: {
            readonly type: 'boolean';
            readonly default: false;
            readonly $schema: 'http://json-schema.org/draft-04/schema#';
          };
        };
        readonly required: readonly [];
      }
    ];
  };
  readonly response: {
    readonly '200': {
      readonly properties: {
        readonly results: {
          readonly properties: {
            readonly google: {
              readonly required: readonly ['id', 'final_status'];
              readonly title: 'videotext_detection_asyncTextDetectionAsyncDataClass';
              readonly type: 'object';
              readonly properties: {
                readonly texts: {
                  readonly title: 'Texts';
                  readonly type: 'array';
                  readonly items: {
                    readonly required: readonly ['text'];
                    readonly title: 'VideoText';
                    readonly type: 'object';
                    readonly properties: {
                      readonly text: {
                        readonly title: 'Text';
                        readonly type: 'string';
                      };
                      readonly frames: {
                        readonly title: 'Frames';
                        readonly type: 'array';
                        readonly items: {
                          readonly required: readonly ['confidence', 'timestamp', 'bounding_box'];
                          readonly title: 'VideoTextFrames';
                          readonly type: 'object';
                          readonly properties: {
                            readonly confidence: {
                              readonly title: 'Confidence';
                              readonly type: 'integer';
                            };
                            readonly timestamp: {
                              readonly title: 'Timestamp';
                              readonly type: 'integer';
                            };
                            readonly bounding_box: {
                              readonly required: readonly ['top', 'left', 'height', 'width'];
                              readonly title: 'VideoTextBoundingBox';
                              readonly type: 'object';
                              readonly properties: {
                                readonly top: {
                                  readonly title: 'Top';
                                  readonly type: 'integer';
                                };
                                readonly left: {
                                  readonly title: 'Left';
                                  readonly type: 'integer';
                                };
                                readonly height: {
                                  readonly title: 'Height';
                                  readonly type: 'integer';
                                };
                                readonly width: {
                                  readonly title: 'Width';
                                  readonly type: 'integer';
                                };
                              };
                            };
                          };
                        };
                      };
                    };
                  };
                };
                readonly original_response: {
                  readonly default: any;
                  readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
                  readonly title: 'Original Response';
                };
                readonly id: {
                  readonly title: 'Id';
                  readonly type: 'string';
                };
                readonly final_status: {
                  readonly title: 'Final Status';
                  readonly enum: readonly ['sucess', 'fail'];
                  readonly type: 'string';
                  readonly description: '`sucess` `fail`';
                };
                readonly error: {
                  readonly title: 'Error';
                  readonly type: 'object';
                  readonly additionalProperties: true;
                };
              };
            };
            readonly amazon: {
              readonly required: readonly ['id', 'final_status'];
              readonly title: 'videotext_detection_asyncTextDetectionAsyncDataClass';
              readonly type: 'object';
              readonly properties: {
                readonly texts: {
                  readonly title: 'Texts';
                  readonly type: 'array';
                  readonly items: {
                    readonly required: readonly ['text'];
                    readonly title: 'VideoText';
                    readonly type: 'object';
                    readonly properties: {
                      readonly text: {
                        readonly title: 'Text';
                        readonly type: 'string';
                      };
                      readonly frames: {
                        readonly title: 'Frames';
                        readonly type: 'array';
                        readonly items: {
                          readonly required: readonly ['confidence', 'timestamp', 'bounding_box'];
                          readonly title: 'VideoTextFrames';
                          readonly type: 'object';
                          readonly properties: {
                            readonly confidence: {
                              readonly title: 'Confidence';
                              readonly type: 'integer';
                            };
                            readonly timestamp: {
                              readonly title: 'Timestamp';
                              readonly type: 'integer';
                            };
                            readonly bounding_box: {
                              readonly required: readonly ['top', 'left', 'height', 'width'];
                              readonly title: 'VideoTextBoundingBox';
                              readonly type: 'object';
                              readonly properties: {
                                readonly top: {
                                  readonly title: 'Top';
                                  readonly type: 'integer';
                                };
                                readonly left: {
                                  readonly title: 'Left';
                                  readonly type: 'integer';
                                };
                                readonly height: {
                                  readonly title: 'Height';
                                  readonly type: 'integer';
                                };
                                readonly width: {
                                  readonly title: 'Width';
                                  readonly type: 'integer';
                                };
                              };
                            };
                          };
                        };
                      };
                    };
                  };
                };
                readonly original_response: {
                  readonly default: any;
                  readonly description: 'original response sent by the provider, hidden by default, show it by passing the `show_original_response` field to `true` in your request';
                  readonly title: 'Original Response';
                };
                readonly id: {
                  readonly title: 'Id';
                  readonly type: 'string';
                };
                readonly final_status: {
                  readonly title: 'Final Status';
                  readonly enum: readonly ['sucess', 'fail'];
                  readonly type: 'string';
                  readonly description: '`sucess` `fail`';
                };
                readonly error: {
                  readonly title: 'Error';
                  readonly type: 'object';
                  readonly additionalProperties: true;
                };
              };
            };
          };
          readonly title: 'videotext_detection_asyncModel';
          readonly type: 'object';
        };
        readonly error: {
          readonly title: 'Error';
          readonly type: 'string';
        };
        readonly public_id: {
          readonly format: 'uuid';
          readonly title: 'Public Id';
          readonly type: 'string';
        };
        readonly status: {
          readonly title: 'Status';
          readonly type: 'string';
        };
      };
      readonly required: readonly ['results', 'error', 'public_id', 'status'];
      readonly title: 'asyncvideotext_detection_asyncResponseModel';
      readonly type: 'object';
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '400': {
      readonly type: 'object';
      readonly properties: {
        readonly error: {
          readonly type: 'object';
          readonly properties: {
            readonly type: {
              readonly type: 'string';
            };
            readonly message: {
              readonly type: 'object';
              readonly properties: {
                readonly '<parameter_name>': {
                  readonly type: 'array';
                  readonly items: {
                    readonly type: 'string';
                  };
                };
              };
              readonly required: readonly ['<parameter_name>'];
            };
          };
          readonly required: readonly ['message', 'type'];
        };
      };
      readonly required: readonly ['error'];
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '403': {
      readonly type: 'object';
      readonly properties: {
        readonly error: {
          readonly type: 'object';
          readonly properties: {
            readonly type: {
              readonly type: 'string';
            };
            readonly message: {
              readonly type: 'string';
            };
          };
          readonly required: readonly ['message', 'type'];
        };
      };
      readonly required: readonly ['error'];
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '404': {
      readonly type: 'object';
      readonly properties: {
        readonly details: {
          readonly type: 'string';
          readonly default: 'Not Found';
        };
      };
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
    readonly '500': {
      readonly type: 'object';
      readonly properties: {
        readonly error: {
          readonly type: 'object';
          readonly properties: {
            readonly type: {
              readonly type: 'string';
            };
            readonly message: {
              readonly type: 'string';
            };
          };
          readonly required: readonly ['message', 'type'];
        };
      };
      readonly required: readonly ['error'];
      readonly $schema: 'http://json-schema.org/draft-04/schema#';
    };
  };
};
export {
  AudioSpeechToTextAsyncCreate,
  AudioSpeechToTextAsyncRetrieve,
  AudioSpeechToTextAsyncRetrieve2,
  AudioTextToSpeechAsyncCreate,
  AudioTextToSpeechAsyncRetrieve,
  AudioTextToSpeechAsyncRetrieve2,
  AudioTextToSpeechCreate,
  BatchCreate,
  BatchRetrieve,
  ImageAnonymizationCreate,
  ImageExplicitContentCreate,
  ImageFaceCompareCreate,
  ImageFaceDetectionCreate,
  ImageFaceRecognitionAddFaceCreate,
  ImageFaceRecognitionDeleteFaceCreate,
  ImageFaceRecognitionListFacesRetrieve,
  ImageFaceRecognitionRecognizeCreate,
  ImageGenerationCreate,
  ImageLandmarkDetectionCreate,
  ImageLogoDetectionCreate,
  ImageObjectDetectionCreate,
  ImageSearchDeleteImageCreate,
  ImageSearchGetImageRetrieve,
  ImageSearchGetImagesRetrieve,
  ImageSearchLaunchSimilarityCreate,
  ImageSearchUploadImageCreate,
  InfoProviderSubfeaturesList,
  OcrBankCheckParsingCreate,
  OcrCustomDocumentParsingAsyncCreate,
  OcrCustomDocumentParsingAsyncRetrieve,
  OcrCustomDocumentParsingAsyncRetrieve2,
  OcrDataExtractionCreate,
  OcrIdentityParserCreate,
  OcrInvoiceParserCreate,
  OcrOcrAsyncCreate,
  OcrOcrAsyncRetrieve,
  OcrOcrAsyncRetrieve2,
  OcrOcrCreate,
  OcrOcrTablesAsyncCreate,
  OcrOcrTablesAsyncRetrieve,
  OcrOcrTablesAsyncRetrieve2,
  OcrReceiptParserCreate,
  OcrResumeParserCreate,
  PipelineCreate,
  TextAiDetectionCreate,
  TextAnonymizationCreate,
  TextChatCreate,
  TextCodeGenerationCreate,
  TextCustomClassificationCreate,
  TextCustomNamedEntityRecognitionCreate,
  TextEmbeddingsCreate,
  TextEntitySentimentCreate,
  TextGenerationCreate,
  TextKeywordExtractionCreate,
  TextModerationCreate,
  TextNamedEntityRecognitionCreate,
  TextPlagiaDetectionCreate,
  TextPromptOptimizationCreate,
  TextQuestionAnswerCreate,
  TextSearchCreate,
  TextSentimentAnalysisCreate,
  TextSpellCheckCreate,
  TextSummarizeCreate,
  TextSyntaxAnalysisCreate,
  TextTopicExtractionCreate,
  TranslationAutomaticTranslationCreate,
  TranslationDocumentTranslationCreate,
  TranslationLanguageDetectionCreate,
  VideoExplicitContentDetectionAsyncCreate,
  VideoExplicitContentDetectionAsyncRetrieve,
  VideoExplicitContentDetectionAsyncRetrieve2,
  VideoFaceDetectionAsyncCreate,
  VideoFaceDetectionAsyncRetrieve,
  VideoFaceDetectionAsyncRetrieve2,
  VideoLabelDetectionAsyncCreate,
  VideoLabelDetectionAsyncRetrieve,
  VideoLabelDetectionAsyncRetrieve2,
  VideoLogoDetectionAsyncCreate,
  VideoLogoDetectionAsyncRetrieve,
  VideoLogoDetectionAsyncRetrieve2,
  VideoObjectTrackingAsyncCreate,
  VideoObjectTrackingAsyncRetrieve,
  VideoObjectTrackingAsyncRetrieve2,
  VideoPersonTrackingAsyncCreate,
  VideoPersonTrackingAsyncRetrieve,
  VideoPersonTrackingAsyncRetrieve2,
  VideoTextDetectionAsyncCreate,
  VideoTextDetectionAsyncRetrieve,
  VideoTextDetectionAsyncRetrieve2,
};
