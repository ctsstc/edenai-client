"use strict";
/**
 * This file was auto-generated by Fern from our API Definition.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AudiotextToSpeechTextToSpeechRequest = void 0;
const core = __importStar(require("../../../../../core"));
exports.AudiotextToSpeechTextToSpeechRequest = core.serialization.object({
    providers: core.serialization.string(),
    fallbackProviders: core.serialization.property("fallback_providers", core.serialization.string().optional()),
    responseAsDict: core.serialization.property("response_as_dict", core.serialization.boolean().optional()),
    attributesAsList: core.serialization.property("attributes_as_list", core.serialization.boolean().optional()),
    showOriginalResponse: core.serialization.property("show_original_response", core.serialization.boolean().optional()),
    settings: core.serialization.record(core.serialization.string(), core.serialization.string().optional()).optional(),
    text: core.serialization.string(),
    language: core.serialization.string().optional(),
    option: core.serialization
        .lazy(() => __awaiter(void 0, void 0, void 0, function* () { return (yield Promise.resolve().then(() => __importStar(require("../../../..")))).AudiotextToSpeechTextToSpeechRequestOption; }))
        .optional(),
    rate: core.serialization.number().optional(),
    pitch: core.serialization.number().optional(),
    volume: core.serialization.number().optional(),
    audioFormat: core.serialization.property("audio_format", core.serialization.string().optional()),
    samplingRate: core.serialization.property("sampling_rate", core.serialization.number().optional()),
});
