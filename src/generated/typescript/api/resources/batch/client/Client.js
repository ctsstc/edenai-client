"use strict";
/**
 * This file was auto-generated by Fern from our API Definition.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Batch = void 0;
const environments = __importStar(require("../../../../environments"));
const core = __importStar(require("../../../../core"));
const EdenAi = __importStar(require("../../.."));
const url_search_params_1 = __importDefault(require("@ungap/url-search-params"));
const url_join_1 = __importDefault(require("url-join"));
const serializers = __importStar(require("../../../../serialization"));
const errors = __importStar(require("../../../../errors"));
class Batch {
    constructor(_options) {
        this._options = _options;
    }
    /**
     * Return paginated response of requests with their status and their
     * responses if the request succeeded or errror if failed
     * @throws {@link EdenAi.BadRequestError}
     * @throws {@link EdenAi.ForbiddenError}
     * @throws {@link EdenAi.NotFoundError}
     * @throws {@link EdenAi.InternalServerError}
     */
    retrieve(feature, name, subfeature, request = {}, requestOptions) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const { name: name_, page, publicId, status } = request;
            const _queryParams = new url_search_params_1.default();
            if (name_ != null) {
                _queryParams.append("name", name_);
            }
            if (page != null) {
                _queryParams.append("page", page.toString());
            }
            if (publicId != null) {
                _queryParams.append("public_id", publicId.toString());
            }
            if (status != null) {
                _queryParams.append("status", status);
            }
            const _response = yield core.fetcher({
                url: (0, url_join_1.default)((_a = (yield core.Supplier.get(this._options.environment))) !== null && _a !== void 0 ? _a : environments.EdenAiEnvironment.Default, `${feature}/${subfeature}/batch/${name}`),
                method: "GET",
                headers: {
                    Authorization: yield this._getAuthorizationHeader(),
                    "X-Fern-Language": "JavaScript",
                },
                contentType: "application/json",
                queryParameters: _queryParams,
                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            });
            if (_response.ok) {
                return yield serializers.PaginatedBatchResponse.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    breadcrumbsPrefix: ["response"],
                });
            }
            if (_response.error.reason === "status-code") {
                switch (_response.error.statusCode) {
                    case 400:
                        throw new EdenAi.BadRequestError(yield serializers.BadRequest.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }));
                    case 403:
                        throw new EdenAi.ForbiddenError(yield serializers.Error_.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }));
                    case 404:
                        throw new EdenAi.NotFoundError(yield serializers.NotFoundResponse.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }));
                    case 500:
                        throw new EdenAi.InternalServerError(yield serializers.Error_.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }));
                    default:
                        throw new errors.EdenAiError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.body,
                        });
                }
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.EdenAiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                    });
                case "timeout":
                    throw new errors.EdenAiTimeoutError();
                case "unknown":
                    throw new errors.EdenAiError({
                        message: _response.error.errorMessage,
                    });
            }
        });
    }
    /**
     *
     * Launch a async Batch job, given a job name that will be used as its id.
     *
     * Each request should have the same parameters as you would normally pass to a feature.
     *
     *
     * You can also pass an optional paramater `name` to help better identify each requests you send.
     *
     *
     * Example with `text`/`sentiment_analysis`:
     *
     * ```json
     * "requests": [
     *     {
     *         "text": "It's -25 outside and I am so hot.",
     *         "language": "en",
     *         "providers": "google,amazon"
     *     },
     *     {
     *         "name": "mixed",
     *         "text": "Overall I am satisfied with my experience at Amazon, but two areas of major improvement needed.",
     *         "language": "en",
     *         "providers": "google"
     *     },
     *     ...
     * ]
     * ```
     *
     *
     * <details><summary><strong style='color: #0072a3; cursor: pointer'>Available Features</strong></summary>
     *
     *
     *
     * |Feature Name|Subfeature Name|
     * |------------|---------------|
     * |`text`|`generation`|
     * |`text`|`named_entity_recognition`|
     * |`text`|`moderation`|
     * |`text`|`embeddings`|
     * |`text`|`summarize`|
     * |`text`|`chat`|
     * |`text`|`sentiment_analysis`|
     * |`text`|`topic_extraction`|
     * |`image`|`object_detection`|
     * |`text`|`anonymization`|
     * |`text`|`custom_classification`|
     * |`text`|`spell_check`|
     * |`translation`|`automatic_translation`|
     * |`image`|`explicit_content`|
     * |`translation`|`language_detection`|
     * |`text`|`custom_named_entity_recognition`|
     * |`text`|`keyword_extraction`|
     * |`text`|`question_answer`|
     * |`audio`|`text_to_speech`|
     * |`text`|`search`|
     * |`translation`|`document_translation`|
     * |`text`|`code_generation`|
     * |`text`|`syntax_analysis`|
     * |`ocr`|`invoice_parser`|
     * |`ocr`|`resume_parser`|
     * |`ocr`|`receipt_parser`|
     * |`ocr`|`identity_parser`|
     * |`image`|`face_detection`|
     * |`image`|`landmark_detection`|
     * |`image`|`logo_detection`|
     * |`image`|`anonymization`|
     * |`image`|`generation`|
     * |`video`|`text_detection_async`|
     * |`audio`|`speech_to_text_async`|
     *
     * </details>
     *
     *
     * @throws {@link EdenAi.BadRequestError}
     * @throws {@link EdenAi.ForbiddenError}
     * @throws {@link EdenAi.NotFoundError}
     * @throws {@link EdenAi.InternalServerError}
     */
    create(feature, name, subfeature, requestOptions) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const _response = yield core.fetcher({
                url: (0, url_join_1.default)((_a = (yield core.Supplier.get(this._options.environment))) !== null && _a !== void 0 ? _a : environments.EdenAiEnvironment.Default, `${feature}/${subfeature}/batch/${name}`),
                method: "POST",
                headers: {
                    Authorization: yield this._getAuthorizationHeader(),
                    "X-Fern-Language": "JavaScript",
                },
                contentType: "application/json",
                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            });
            if (_response.ok) {
                return yield serializers.BatchLaunchResponse.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    breadcrumbsPrefix: ["response"],
                });
            }
            if (_response.error.reason === "status-code") {
                switch (_response.error.statusCode) {
                    case 400:
                        throw new EdenAi.BadRequestError(yield serializers.BadRequest.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }));
                    case 403:
                        throw new EdenAi.ForbiddenError(yield serializers.Error_.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }));
                    case 404:
                        throw new EdenAi.NotFoundError(yield serializers.NotFoundResponse.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }));
                    case 500:
                        throw new EdenAi.InternalServerError(yield serializers.Error_.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }));
                    default:
                        throw new errors.EdenAiError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.body,
                        });
                }
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.EdenAiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                    });
                case "timeout":
                    throw new errors.EdenAiTimeoutError();
                case "unknown":
                    throw new errors.EdenAiError({
                        message: _response.error.errorMessage,
                    });
            }
        });
    }
    _getAuthorizationHeader() {
        return __awaiter(this, void 0, void 0, function* () {
            const bearer = yield core.Supplier.get(this._options.token);
            if (bearer != null) {
                return `Bearer ${bearer}`;
            }
            return undefined;
        });
    }
}
exports.Batch = Batch;
