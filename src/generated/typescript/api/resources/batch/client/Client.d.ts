/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as EdenAi from "../../..";
export declare namespace Batch {
    interface Options {
        environment?: core.Supplier<environments.EdenAiEnvironment | string>;
        token?: core.Supplier<core.BearerToken | undefined>;
    }
    interface RequestOptions {
        timeoutInSeconds?: number;
    }
}
export declare class Batch {
    protected readonly _options: Batch.Options;
    constructor(_options: Batch.Options);
    /**
     * Return paginated response of requests with their status and their
     * responses if the request succeeded or errror if failed
     * @throws {@link EdenAi.BadRequestError}
     * @throws {@link EdenAi.ForbiddenError}
     * @throws {@link EdenAi.NotFoundError}
     * @throws {@link EdenAi.InternalServerError}
     */
    retrieve(feature: string, name: string, subfeature: string, request?: EdenAi.BatchRetrieveRequest, requestOptions?: Batch.RequestOptions): Promise<EdenAi.PaginatedBatchResponse>;
    /**
     *
     * Launch a async Batch job, given a job name that will be used as its id.
     *
     * Each request should have the same parameters as you would normally pass to a feature.
     *
     *
     * You can also pass an optional paramater `name` to help better identify each requests you send.
     *
     *
     * Example with `text`/`sentiment_analysis`:
     *
     * ```json
     * "requests": [
     *     {
     *         "text": "It's -25 outside and I am so hot.",
     *         "language": "en",
     *         "providers": "google,amazon"
     *     },
     *     {
     *         "name": "mixed",
     *         "text": "Overall I am satisfied with my experience at Amazon, but two areas of major improvement needed.",
     *         "language": "en",
     *         "providers": "google"
     *     },
     *     ...
     * ]
     * ```
     *
     *
     * <details><summary><strong style='color: #0072a3; cursor: pointer'>Available Features</strong></summary>
     *
     *
     *
     * |Feature Name|Subfeature Name|
     * |------------|---------------|
     * |`text`|`generation`|
     * |`text`|`named_entity_recognition`|
     * |`text`|`moderation`|
     * |`text`|`embeddings`|
     * |`text`|`summarize`|
     * |`text`|`chat`|
     * |`text`|`sentiment_analysis`|
     * |`text`|`topic_extraction`|
     * |`image`|`object_detection`|
     * |`text`|`anonymization`|
     * |`text`|`custom_classification`|
     * |`text`|`spell_check`|
     * |`translation`|`automatic_translation`|
     * |`image`|`explicit_content`|
     * |`translation`|`language_detection`|
     * |`text`|`custom_named_entity_recognition`|
     * |`text`|`keyword_extraction`|
     * |`text`|`question_answer`|
     * |`audio`|`text_to_speech`|
     * |`text`|`search`|
     * |`translation`|`document_translation`|
     * |`text`|`code_generation`|
     * |`text`|`syntax_analysis`|
     * |`ocr`|`invoice_parser`|
     * |`ocr`|`resume_parser`|
     * |`ocr`|`receipt_parser`|
     * |`ocr`|`identity_parser`|
     * |`image`|`face_detection`|
     * |`image`|`landmark_detection`|
     * |`image`|`logo_detection`|
     * |`image`|`anonymization`|
     * |`image`|`generation`|
     * |`video`|`text_detection_async`|
     * |`audio`|`speech_to_text_async`|
     *
     * </details>
     *
     *
     * @throws {@link EdenAi.BadRequestError}
     * @throws {@link EdenAi.ForbiddenError}
     * @throws {@link EdenAi.NotFoundError}
     * @throws {@link EdenAi.InternalServerError}
     */
    create(feature: string, name: string, subfeature: string, requestOptions?: Batch.RequestOptions): Promise<EdenAi.BatchLaunchResponse>;
    protected _getAuthorizationHeader(): Promise<string | undefined>;
}
