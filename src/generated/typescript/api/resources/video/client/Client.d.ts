/**
 * This file was auto-generated by Fern from our API Definition.
 */
/// <reference types="node" />
import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as EdenAi from "../../..";
import * as fs from "fs";
export declare namespace Video {
    interface Options {
        environment?: core.Supplier<environments.EdenAiEnvironment | string>;
        token?: core.Supplier<core.BearerToken | undefined>;
    }
    interface RequestOptions {
        timeoutInSeconds?: number;
    }
}
export declare class Video {
    protected readonly _options: Video.Options;
    constructor(_options: Video.Options);
    /**
     * Get a list of all jobs launched for this feature. You'll then be able to use the ID of each one to get its status and results.<br>
     *                         Please note that a **job status doesn't get updated until a get request** is sent.
     */
    explicitContentDetectionAsyncRetrieve(requestOptions?: Video.RequestOptions): Promise<EdenAi.ListAsyncJobResponse>;
    /**
     * <details><summary><strong style='color: #0072a3; cursor: pointer'>Available Providers</strong></summary>
     *
     *
     *
     * |Name|Version|Price|Billing unit|
     * |----|-------|-----|------------|
     * |**amazon**|`boto3`|0.1 (per 60 seconde)|60 seconde
     * |**google**|`Video intelligence v1`|0.1 (per 60 seconde)|1 seconde
     *
     *
     * </details>
     *
     *
     */
    explicitContentDetectionAsyncCreate(file: File | fs.ReadStream, request: EdenAi.VideoExplicitContentDetectionAsyncCreateRequest, requestOptions?: Video.RequestOptions): Promise<EdenAi.LaunchAsyncJobResponse>;
    /**
     * Get the status and results of an async job given its ID.
     * @throws {@link EdenAi.BadRequestError}
     * @throws {@link EdenAi.ForbiddenError}
     * @throws {@link EdenAi.NotFoundError}
     * @throws {@link EdenAi.InternalServerError}
     */
    explicitContentDetectionAsyncRetrieve2(publicId: string, request?: EdenAi.VideoExplicitContentDetectionAsyncRetrieve2Request, requestOptions?: Video.RequestOptions): Promise<EdenAi.AsyncvideoexplicitContentDetectionAsyncResponseModel>;
    /**
     * Get a list of all jobs launched for this feature. You'll then be able to use the ID of each one to get its status and results.<br>
     *                         Please note that a **job status doesn't get updated until a get request** is sent.
     */
    faceDetectionAsyncRetrieve(requestOptions?: Video.RequestOptions): Promise<EdenAi.ListAsyncJobResponse>;
    /**
     * <details><summary><strong style='color: #0072a3; cursor: pointer'>Available Providers</strong></summary>
     *
     *
     *
     * |Name|Version|Price|Billing unit|
     * |----|-------|-----|------------|
     * |**amazon**|`boto3`|0.1 (per 60 seconde)|60 seconde
     * |**google**|`Video intelligence v1`|0.1 (per 60 seconde)|1 seconde
     *
     *
     * </details>
     *
     *
     */
    faceDetectionAsyncCreate(file: File | fs.ReadStream, request: EdenAi.VideoFaceDetectionAsyncCreateRequest, requestOptions?: Video.RequestOptions): Promise<EdenAi.LaunchAsyncJobResponse>;
    /**
     * Get the status and results of an async job given its ID.
     * @throws {@link EdenAi.BadRequestError}
     * @throws {@link EdenAi.ForbiddenError}
     * @throws {@link EdenAi.NotFoundError}
     * @throws {@link EdenAi.InternalServerError}
     */
    faceDetectionAsyncRetrieve2(publicId: string, request?: EdenAi.VideoFaceDetectionAsyncRetrieve2Request, requestOptions?: Video.RequestOptions): Promise<EdenAi.AsyncvideofaceDetectionAsyncResponseModel>;
    /**
     * Get a list of all jobs launched for this feature. You'll then be able to use the ID of each one to get its status and results.<br>
     *                         Please note that a **job status doesn't get updated until a get request** is sent.
     */
    labelDetectionAsyncRetrieve(requestOptions?: Video.RequestOptions): Promise<EdenAi.ListAsyncJobResponse>;
    /**
     * <details><summary><strong style='color: #0072a3; cursor: pointer'>Available Providers</strong></summary>
     *
     *
     *
     * |Name|Version|Price|Billing unit|
     * |----|-------|-----|------------|
     * |**amazon**|`boto3`|0.1 (per 60 seconde)|60 seconde
     * |**google**|`Video intelligence v1`|0.1 (per 60 seconde)|1 seconde
     *
     *
     * </details>
     *
     *
     */
    labelDetectionAsyncCreate(file: File | fs.ReadStream, request: EdenAi.VideoLabelDetectionAsyncCreateRequest, requestOptions?: Video.RequestOptions): Promise<EdenAi.LaunchAsyncJobResponse>;
    /**
     * Get the status and results of an async job given its ID.
     * @throws {@link EdenAi.BadRequestError}
     * @throws {@link EdenAi.ForbiddenError}
     * @throws {@link EdenAi.NotFoundError}
     * @throws {@link EdenAi.InternalServerError}
     */
    labelDetectionAsyncRetrieve2(publicId: string, request?: EdenAi.VideoLabelDetectionAsyncRetrieve2Request, requestOptions?: Video.RequestOptions): Promise<EdenAi.AsyncvideolabelDetectionAsyncResponseModel>;
    /**
     * Get a list of all jobs launched for this feature. You'll then be able to use the ID of each one to get its status and results.<br>
     *                         Please note that a **job status doesn't get updated until a get request** is sent.
     */
    logoDetectionAsyncRetrieve(requestOptions?: Video.RequestOptions): Promise<EdenAi.ListAsyncJobResponse>;
    /**
     * <details><summary><strong style='color: #0072a3; cursor: pointer'>Available Providers</strong></summary>
     *
     *
     *
     * |Name|Version|Price|Billing unit|
     * |----|-------|-----|------------|
     * |**google**|`Video intelligence v1`|0.15 (per 60 seconde)|1 seconde
     *
     *
     * </details>
     *
     *
     */
    logoDetectionAsyncCreate(file: File | fs.ReadStream, request: EdenAi.VideoLogoDetectionAsyncCreateRequest, requestOptions?: Video.RequestOptions): Promise<EdenAi.LaunchAsyncJobResponse>;
    /**
     * Get the status and results of an async job given its ID.
     * @throws {@link EdenAi.BadRequestError}
     * @throws {@link EdenAi.ForbiddenError}
     * @throws {@link EdenAi.NotFoundError}
     * @throws {@link EdenAi.InternalServerError}
     */
    logoDetectionAsyncRetrieve2(publicId: string, request?: EdenAi.VideoLogoDetectionAsyncRetrieve2Request, requestOptions?: Video.RequestOptions): Promise<EdenAi.AsyncvideologoDetectionAsyncResponseModel>;
    /**
     * Get a list of all jobs launched for this feature. You'll then be able to use the ID of each one to get its status and results.<br>
     *                         Please note that a **job status doesn't get updated until a get request** is sent.
     */
    objectTrackingAsyncRetrieve(requestOptions?: Video.RequestOptions): Promise<EdenAi.ListAsyncJobResponse>;
    /**
     * <details><summary><strong style='color: #0072a3; cursor: pointer'>Available Providers</strong></summary>
     *
     *
     *
     * |Name|Version|Price|Billing unit|
     * |----|-------|-----|------------|
     * |**google**|`Video intelligence v1`|0.15 (per 60 seconde)|1 seconde
     *
     *
     * </details>
     *
     *
     */
    objectTrackingAsyncCreate(file: File | fs.ReadStream, request: EdenAi.VideoObjectTrackingAsyncCreateRequest, requestOptions?: Video.RequestOptions): Promise<EdenAi.LaunchAsyncJobResponse>;
    /**
     * Get the status and results of an async job given its ID.
     * @throws {@link EdenAi.BadRequestError}
     * @throws {@link EdenAi.ForbiddenError}
     * @throws {@link EdenAi.NotFoundError}
     * @throws {@link EdenAi.InternalServerError}
     */
    objectTrackingAsyncRetrieve2(publicId: string, request?: EdenAi.VideoObjectTrackingAsyncRetrieve2Request, requestOptions?: Video.RequestOptions): Promise<EdenAi.AsyncvideoobjectTrackingAsyncResponseModel>;
    /**
     * Get a list of all jobs launched for this feature. You'll then be able to use the ID of each one to get its status and results.<br>
     *                         Please note that a **job status doesn't get updated until a get request** is sent.
     */
    personTrackingAsyncRetrieve(requestOptions?: Video.RequestOptions): Promise<EdenAi.ListAsyncJobResponse>;
    /**
     * <details><summary><strong style='color: #0072a3; cursor: pointer'>Available Providers</strong></summary>
     *
     *
     *
     * |Name|Version|Price|Billing unit|
     * |----|-------|-----|------------|
     * |**amazon**|`boto3`|0.1 (per 60 seconde)|60 seconde
     * |**google**|`Video intelligence v1`|0.1 (per 60 seconde)|1 seconde
     *
     *
     * </details>
     *
     *
     */
    personTrackingAsyncCreate(file: File | fs.ReadStream, request: EdenAi.VideoPersonTrackingAsyncCreateRequest, requestOptions?: Video.RequestOptions): Promise<EdenAi.LaunchAsyncJobResponse>;
    /**
     * Get the status and results of an async job given its ID.
     * @throws {@link EdenAi.BadRequestError}
     * @throws {@link EdenAi.ForbiddenError}
     * @throws {@link EdenAi.NotFoundError}
     * @throws {@link EdenAi.InternalServerError}
     */
    personTrackingAsyncRetrieve2(publicId: string, request?: EdenAi.VideoPersonTrackingAsyncRetrieve2Request, requestOptions?: Video.RequestOptions): Promise<EdenAi.AsyncvideopersonTrackingAsyncResponseModel>;
    /**
     * Get a list of all jobs launched for this feature. You'll then be able to use the ID of each one to get its status and results.<br>
     *                         Please note that a **job status doesn't get updated until a get request** is sent.
     */
    textDetectionAsyncRetrieve(requestOptions?: Video.RequestOptions): Promise<EdenAi.ListAsyncJobResponse>;
    /**
     * <details><summary><strong style='color: #0072a3; cursor: pointer'>Available Providers</strong></summary>
     *
     *
     *
     * |Name|Version|Price|Billing unit|
     * |----|-------|-----|------------|
     * |**amazon**|`boto3`|0.1 (per 60 seconde)|60 seconde
     * |**google**|`Video intelligence v1`|0.15 (per 60 seconde)|1 seconde
     *
     *
     * </details>
     *
     *
     */
    textDetectionAsyncCreate(file: File | fs.ReadStream, request: EdenAi.VideoTextDetectionAsyncCreateRequest, requestOptions?: Video.RequestOptions): Promise<EdenAi.LaunchAsyncJobResponse>;
    /**
     * Get the status and results of an async job given its ID.
     * @throws {@link EdenAi.BadRequestError}
     * @throws {@link EdenAi.ForbiddenError}
     * @throws {@link EdenAi.NotFoundError}
     * @throws {@link EdenAi.InternalServerError}
     */
    textDetectionAsyncRetrieve2(publicId: string, request?: EdenAi.VideoTextDetectionAsyncRetrieve2Request, requestOptions?: Video.RequestOptions): Promise<EdenAi.AsyncvideotextDetectionAsyncResponseModel>;
    protected _getAuthorizationHeader(): Promise<string | undefined>;
}
