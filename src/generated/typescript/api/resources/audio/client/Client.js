"use strict";
/**
 * This file was auto-generated by Fern from our API Definition.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Audio = void 0;
const environments = __importStar(require("../../../../environments"));
const core = __importStar(require("../../../../core"));
const EdenAi = __importStar(require("../../.."));
const url_join_1 = __importDefault(require("url-join"));
const serializers = __importStar(require("../../../../serialization"));
const errors = __importStar(require("../../../../errors"));
const form_data_1 = __importDefault(require("form-data"));
const url_search_params_1 = __importDefault(require("@ungap/url-search-params"));
class Audio {
    constructor(_options) {
        this._options = _options;
    }
    /**
     * Get a list of all jobs launched for this feature. You'll then be able to use the ID of each one to get its status and results.<br>
     *                         Please note that a **job status doesn't get updated until a get request** is sent.
     */
    speechToTextAsyncRetrieve(requestOptions) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const _response = yield core.fetcher({
                url: (0, url_join_1.default)((_a = (yield core.Supplier.get(this._options.environment))) !== null && _a !== void 0 ? _a : environments.EdenAiEnvironment.Default, "audio/speech_to_text_async"),
                method: "GET",
                headers: {
                    Authorization: yield this._getAuthorizationHeader(),
                    "X-Fern-Language": "JavaScript",
                },
                contentType: "application/json",
                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            });
            if (_response.ok) {
                return yield serializers.ListAsyncJobResponse.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    breadcrumbsPrefix: ["response"],
                });
            }
            if (_response.error.reason === "status-code") {
                throw new errors.EdenAiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.body,
                });
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.EdenAiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                    });
                case "timeout":
                    throw new errors.EdenAiTimeoutError();
                case "unknown":
                    throw new errors.EdenAiError({
                        message: _response.error.errorMessage,
                    });
            }
        });
    }
    /**
     * <details><summary><strong style='color: #0072a3; cursor: pointer'>Available Providers</strong></summary>
     *
     *
     *
     * |Name|Version|Price|Billing unit|
     * |----|-------|-----|------------|
     * |**amazon**|`boto3 (v1.15.18)`|0.024 (per 60 seconde)|15 seconde
     * |**google**|`v1p1beta1`|0.024 (per 60 seconde)|1 seconde
     * |**ibm**|`v1`|0.02 (per 60 seconde)|1 seconde
     * |**microsoft**|`v1.0`|0.0168 (per 60 seconde)|1 seconde
     * |**revai**|`v1`|0.02 (per 60 seconde)|15 seconde
     * |**symbl**|`v1`|0.027 (per 60 seconde)|60 seconde
     * |**voci**|`v1`|0.0162 (per 60 seconde)|1 seconde
     * |**voxist**|`v1`|0.0042 (per 15 seconde)|1 seconde
     * |**neuralspace**|`v1`|0.024 (per 60 seconde)|60 seconde
     * |**oneai**|`v0`|0.0067 (per 60 seconde)|1 seconde
     * |**assembly**|`v2`|0.011 (per 60 seconde)|1 seconde
     * |**deepgram - base**|`v1`|0.0169 (per 60 seconde)|1 seconde
     * |**deepgram - enhanced**|`v1`|0.0189 (per 60 seconde)|1 seconde
     * |**deepgram**|`v1`|0.0169 (per 60 seconde)|1 seconde
     * |**openai**|`boto3 (v1.15.18)`|0.006 (per 60 seconde)|1 seconde
     * |**speechmatics - enhanced**|`v2`|0.0316 (per 60 seconde)|1 seconde
     * |**speechmatics - standard**|`v2`|0.0208 (per 60 seconde)|1 seconde
     * |**speechmatics**|`v2`|0.0316 (per 60 seconde)|1 seconde
     * |**gladia**|`v1`|0.0102 (per 60 seconde)|1 seconde
     *
     *
     * </details>
     *
     * <details><summary>Supported Languages</summary>
     *
     *
     *
     *
     *
     * |Name|Value|
     * |----|-----|
     * |**Afrikaans**|`af`|
     * |**Albanian**|`sq`|
     * |**Amharic**|`am`|
     * |**Arabic**|`ar`|
     * |**Armenian**|`hy`|
     * |**Assamese**|`as`|
     * |**Azerbaijani**|`az`|
     * |**Bashkir**|`ba`|
     * |**Basque**|`eu`|
     * |**Belarusian**|`be`|
     * |**Bengali**|`bn`|
     * |**Bosnian**|`bs`|
     * |**Breton**|`br`|
     * |**Bulgarian**|`bg`|
     * |**Burmese**|`my`|
     * |**Catalan**|`ca`|
     * |**Central Khmer**|`km`|
     * |**Chinese**|`zh`|
     * |**Croatian**|`hr`|
     * |**Czech**|`cs`|
     * |**Danish**|`da`|
     * |**Dutch**|`nl`|
     * |**English**|`en`|
     * |**Esperanto**|`eo`|
     * |**Estonian**|`et`|
     * |**Faroese**|`fo`|
     * |**Filipino**|`fil`|
     * |**Finnish**|`fi`|
     * |**French**|`fr`|
     * |**Galician**|`gl`|
     * |**Georgian**|`ka`|
     * |**German**|`de`|
     * |**Gujarati**|`gu`|
     * |**Haitian**|`ht`|
     * |**Hausa**|`ha`|
     * |**Hawaiian**|`haw`|
     * |**Hebrew**|`he`|
     * |**Hebrew**|`iw`|
     * |**Hindi**|`hi`|
     * |**Hungarian**|`hu`|
     * |**Icelandic**|`is`|
     * |**Indonesian**|`id`|
     * |**Interlingua (International Auxiliary Language Association)**|`ia`|
     * |**Irish**|`ga`|
     * |**Italian**|`it`|
     * |**Japanese**|`ja`|
     * |**Javanese**|`jv`|
     * |**Kannada**|`kn`|
     * |**Kazakh**|`kk`|
     * |**Korean**|`ko`|
     * |**Lao**|`lo`|
     * |**Latin**|`la`|
     * |**Latvian**|`lv`|
     * |**Lingala**|`ln`|
     * |**Lithuanian**|`lt`|
     * |**Luxembourgish**|`lb`|
     * |**Macedonian**|`mk`|
     * |**Malagasy**|`mg`|
     * |**Malay (macrolanguage)**|`ms`|
     * |**Malayalam**|`ml`|
     * |**Maltese**|`mt`|
     * |**Mandarin Chinese**|`cmn`|
     * |**Maori**|`mi`|
     * |**Marathi**|`mr`|
     * |**Modern Greek (1453-)**|`el`|
     * |**Mongolian**|`mn`|
     * |**Nepali (macrolanguage)**|`ne`|
     * |**Norwegian**|`no`|
     * |**Norwegian Bokm√•l**|`nb`|
     * |**Norwegian Nynorsk**|`nn`|
     * |**Occitan (post 1500)**|`oc`|
     * |**Panjabi**|`pa`|
     * |**Persian**|`fa`|
     * |**Polish**|`pl`|
     * |**Portuguese**|`pt`|
     * |**Pushto**|`ps`|
     * |**Romanian**|`ro`|
     * |**Russian**|`ru`|
     * |**Sanskrit**|`sa`|
     * |**Serbian**|`sr`|
     * |**Shona**|`sn`|
     * |**Sindhi**|`sd`|
     * |**Sinhala**|`si`|
     * |**Slovak**|`sk`|
     * |**Slovenian**|`sl`|
     * |**Somali**|`so`|
     * |**Spanish**|`es`|
     * |**Sundanese**|`su`|
     * |**Swahili (macrolanguage)**|`sw`|
     * |**Swedish**|`sv`|
     * |**Tagalog**|`tl`|
     * |**Tajik**|`tg`|
     * |**Tamil**|`ta`|
     * |**Tatar**|`tt`|
     * |**Telugu**|`te`|
     * |**Thai**|`th`|
     * |**Tibetan**|`bo`|
     * |**Turkish**|`tr`|
     * |**Turkmen**|`tk`|
     * |**Uighur**|`ug`|
     * |**Ukrainian**|`uk`|
     * |**Urdu**|`ur`|
     * |**Uzbek**|`uz`|
     * |**Vietnamese**|`vi`|
     * |**Welsh**|`cy`|
     * |**Wolof**|`wo`|
     * |**Wu Chinese**|`wuu`|
     * |**Yiddish**|`yi`|
     * |**Yoruba**|`yo`|
     * |**Yue Chinese**|`yue`|
     * |**Zulu**|`zu`|
     *
     * </details><details><summary>Supported Detailed Languages</summary>
     *
     *
     *
     *
     *
     * |Name|Value|
     * |----|-----|
     * |**Auto detection**|`auto-detect`|
     * |**Afrikaans (South Africa)**|`af-ZA`|
     * |**Albanian (Albania)**|`sq-AL`|
     * |**Amharic (Ethiopia)**|`am-ET`|
     * |**Arabic (Algeria)**|`ar-DZ`|
     * |**Arabic (Bahrain)**|`ar-BH`|
     * |**Arabic (Egypt)**|`ar-EG`|
     * |**Arabic (Iraq)**|`ar-IQ`|
     * |**Arabic (Israel)**|`ar-IL`|
     * |**Arabic (Jordan)**|`ar-JO`|
     * |**Arabic (Kuwait)**|`ar-KW`|
     * |**Arabic (Lebanon)**|`ar-LB`|
     * |**Arabic (Libya)**|`ar-LY`|
     * |**Arabic (Mauritania)**|`ar-MR`|
     * |**Arabic (Montserrat)**|`ar-MS`|
     * |**Arabic (Morocco)**|`ar-MA`|
     * |**Arabic (Oman)**|`ar-OM`|
     * |**Arabic (Palestinian Territories)**|`ar-PS`|
     * |**Arabic (Qatar)**|`ar-QA`|
     * |**Arabic (Saudi Arabia)**|`ar-SA`|
     * |**Arabic (Syria)**|`ar-SY`|
     * |**Arabic (Tunisia)**|`ar-TN`|
     * |**Arabic (United Arab Emirates)**|`ar-AE`|
     * |**Arabic (Yemen)**|`ar-YE`|
     * |**Armenian (Armenia)**|`hy-AM`|
     * |**Assamese (India)**|`as-IN`|
     * |**Azerbaijani (Azerbaijan)**|`az-AZ`|
     * |**Bangla (Bangladesh)**|`bn-BD`|
     * |**Bangla (India)**|`bn-IN`|
     * |**Bashkir (Russia)**|`ba-RU`|
     * |**Basque (Spain)**|`eu-ES`|
     * |**Belarusian (Belarus)**|`be-BY`|
     * |**Bosnian (Bosnia & Herzegovina)**|`bs-BA`|
     * |**Breton (France)**|`br-FR`|
     * |**Bulgarian (Bulgaria)**|`bg-BG`|
     * |**Burmese (Myanmar (Burma))**|`my-MM`|
     * |**Cantonese (China)**|`yue-CN`|
     * |**Cantonese (Traditional, Hong Kong SAR China)**|`yue-Hant-HK`|
     * |**Catalan (Spain)**|`ca-ES`|
     * |**Chinese (China)**|`zh-CN`|
     * |**Chinese (Hong Kong SAR China)**|`zh-HK`|
     * |**Chinese (Taiwan)**|`zh-TW`|
     * |**Croatian (Croatia)**|`hr-HR`|
     * |**Czech (Czechia)**|`cs-CZ`|
     * |**Danish (Denmark)**|`da-DK`|
     * |**Dutch (Belgium)**|`nl-BE`|
     * |**Dutch (Netherlands)**|`nl-NL`|
     * |**English (Australia)**|`en-AU`|
     * |**English (Canada)**|`en-CA`|
     * |**English (Ghana)**|`en-GH`|
     * |**English (Hong Kong SAR China)**|`en-HK`|
     * |**English (India)**|`en-IN`|
     * |**English (Ireland)**|`en-IE`|
     * |**English (Kenya)**|`en-KE`|
     * |**English (New Zealand)**|`en-NZ`|
     * |**English (Nigeria)**|`en-NG`|
     * |**English (Pakistan)**|`en-PK`|
     * |**English (Philippines)**|`en-PH`|
     * |**English (Singapore)**|`en-SG`|
     * |**English (South Africa)**|`en-ZA`|
     * |**English (Tanzania)**|`en-TZ`|
     * |**English (United Kingdom)**|`en-GB`|
     * |**English (United Kingdom)**|`en-UK`|
     * |**English (United States)**|`en-US`|
     * |**Estonian (Estonia)**|`et-EE`|
     * |**Faroese (Faroe Islands)**|`fo-FO`|
     * |**Filipino (Philippines)**|`fil-PH`|
     * |**Filipino (Philippines)**|`tl-PH`|
     * |**Finnish (Finland)**|`fi-FI`|
     * |**French (Belgium)**|`fr-BE`|
     * |**French (Canada)**|`fr-CA`|
     * |**French (France)**|`fr-FR`|
     * |**French (Switzerland)**|`fr-CH`|
     * |**Galician (Spain)**|`gl-ES`|
     * |**Georgian (Georgia)**|`ka-GE`|
     * |**German (Austria)**|`de-AT`|
     * |**German (Germany)**|`de-DE`|
     * |**German (Switzerland)**|`de-CH`|
     * |**Greek (Greece)**|`el-GR`|
     * |**Gujarati (India)**|`gu-IN`|
     * |**Haitian Creole (Haiti)**|`ht-HT`|
     * |**Hausa (Nigeria)**|`ha-NG`|
     * |**Hawaiian (United States)**|`haw-US`|
     * |**Hebrew (Israel)**|`he-IL`|
     * |**Hebrew (Israel)**|`iw-IL`|
     * |**Hindi (India)**|`hi-IN`|
     * |**Hindi (Latin)**|`hi-Latn`|
     * |**Hungarian (Hungary)**|`hu-HU`|
     * |**Icelandic (Iceland)**|`is-IS`|
     * |**Indonesian (Indonesia)**|`id-ID`|
     * |**Irish (Ireland)**|`ga-IE`|
     * |**Italian (Italy)**|`it-IT`|
     * |**Italian (Switzerland)**|`it-CH`|
     * |**Japanese (Japan)**|`ja-JP`|
     * |**Javanese (Indonesia)**|`jv-ID`|
     * |**Kannada (India)**|`kn-IN`|
     * |**Kazakh (Kazakhstan)**|`kk-KZ`|
     * |**Khmer (Cambodia)**|`km-KH`|
     * |**Korean (South Korea)**|`ko-KR`|
     * |**Lao (Laos)**|`lo-LA`|
     * |**Latvian (Latvia)**|`lv-LV`|
     * |**Lingala (Congo - Kinshasa)**|`ln-CD`|
     * |**Lithuanian (Lithuania)**|`lt-LT`|
     * |**Luxembourgish (Luxembourg)**|`lb-LU`|
     * |**Macedonian (North Macedonia)**|`mk-MK`|
     * |**Malagasy (Madagascar)**|`mg-MG`|
     * |**Malay (Malaysia)**|`ms-MY`|
     * |**Malayalam (India)**|`ml-IN`|
     * |**Maltese (Malta)**|`mt-MT`|
     * |**Marathi (India)**|`mr-IN`|
     * |**Mongolian (Mongolia)**|`mn-MN`|
     * |**MƒÅori (New Zealand)**|`mi-NZ`|
     * |**Nepali (Nepal)**|`ne-NP`|
     * |**Norwegian (Norway)**|`no-NO`|
     * |**Norwegian Bokm√•l (Norway)**|`nb-NO`|
     * |**Norwegian Nynorsk (Norway)**|`nn-NO`|
     * |**Occitan (France)**|`oc-FR`|
     * |**Pashto (Afghanistan)**|`ps-AF`|
     * |**Persian (Iran)**|`fa-IR`|
     * |**Polish (Poland)**|`pl-PL`|
     * |**Portuguese (Brazil)**|`pt-BR`|
     * |**Portuguese (Portugal)**|`pt-PT`|
     * |**Punjabi (India)**|`pa-Guru-IN`|
     * |**Romanian (Romania)**|`ro-RO`|
     * |**Russian (Russia)**|`ru-RU`|
     * |**Sanskrit (India)**|`sa-IN`|
     * |**Serbian (Serbia)**|`sr-RS`|
     * |**Shona (Zimbabwe)**|`sn-ZW`|
     * |**Sindhi (Pakistan)**|`sd-PK`|
     * |**Sinhala (Sri Lanka)**|`si-LK`|
     * |**Slovak (Slovakia)**|`sk-SK`|
     * |**Slovenian (Slovenia)**|`sl-SI`|
     * |**Somali (Somalia)**|`so-SO`|
     * |**Spanish (Argentina)**|`es-AR`|
     * |**Spanish (Bolivia)**|`es-BO`|
     * |**Spanish (Chile)**|`es-CL`|
     * |**Spanish (Colombia)**|`es-CO`|
     * |**Spanish (Costa Rica)**|`es-CR`|
     * |**Spanish (Cuba)**|`es-CU`|
     * |**Spanish (Dominican Republic)**|`es-DO`|
     * |**Spanish (Ecuador)**|`es-EC`|
     * |**Spanish (El Salvador)**|`es-SV`|
     * |**Spanish (Equatorial Guinea)**|`es-GQ`|
     * |**Spanish (Guatemala)**|`es-GT`|
     * |**Spanish (Honduras)**|`es-HN`|
     * |**Spanish (Laos)**|`es-LA`|
     * |**Spanish (Latin America)**|`es-419`|
     * |**Spanish (Mexico)**|`es-MX`|
     * |**Spanish (Nicaragua)**|`es-NI`|
     * |**Spanish (Panama)**|`es-PA`|
     * |**Spanish (Paraguay)**|`es-PY`|
     * |**Spanish (Peru)**|`es-PE`|
     * |**Spanish (Puerto Rico)**|`es-PR`|
     * |**Spanish (Spain)**|`es-ES`|
     * |**Spanish (United States)**|`es-US`|
     * |**Spanish (Uruguay)**|`es-UY`|
     * |**Spanish (Venezuela)**|`es-VE`|
     * |**Sundanese (Indonesia)**|`su-ID`|
     * |**Swahili (Kenya)**|`sw-KE`|
     * |**Swahili (Tanzania)**|`sw-TZ`|
     * |**Swedish (Sweden)**|`sv-SE`|
     * |**Tajik (Tajikistan)**|`tg-TJ`|
     * |**Tamil (India)**|`ta-IN`|
     * |**Tamil (Malaysia)**|`ta-MY`|
     * |**Tamil (Singapore)**|`ta-SG`|
     * |**Tamil (Sri Lanka)**|`ta-LK`|
     * |**Tatar (Russia)**|`tt-RU`|
     * |**Telugu (India)**|`te-IN`|
     * |**Thai (Thailand)**|`th-TH`|
     * |**Tibetan (China)**|`bo-CN`|
     * |**Turkish (Turkey)**|`tr-TR`|
     * |**Turkmen (Turkmenistan)**|`tk-TM`|
     * |**Ukrainian (Ukraine)**|`uk-UA`|
     * |**Urdu (India)**|`ur-IN`|
     * |**Urdu (Pakistan)**|`ur-PK`|
     * |**Uzbek (Uzbekistan)**|`uz-UZ`|
     * |**Vietnamese (Vietnam)**|`vi-VN`|
     * |**Welsh (United Kingdom)**|`cy-GB`|
     * |**Wolof (Senegal)**|`wo-SN`|
     * |**Wu Chinese (China)**|`wuu-CN`|
     * |**Yoruba (Nigeria)**|`yo-NG`|
     * |**Zulu (South Africa)**|`zu-ZA`|
     *
     * </details>
     */
    speechToTextAsyncCreate(file, request, requestOptions) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const _request = new form_data_1.default();
            _request.append("providers", request.providers);
            _request.append("fallback_providers", request.fallbackProviders);
            _request.append("show_original_response", request.showOriginalResponse.toString());
            _request.append("webhook_receiver", request.webhookReceiver);
            _request.append("users_webhook_parameters", JSON.stringify(request.usersWebhookParameters));
            if (request.settings != null) {
                _request.append("settings", JSON.stringify(request.settings));
            }
            _request.append("file", file);
            if (request.fileUrl != null) {
                _request.append("file_url", request.fileUrl);
            }
            if (request.language != null) {
                _request.append("language", request.language);
            }
            if (request.speakers != null) {
                _request.append("speakers", request.speakers.toString());
            }
            if (request.profanityFilter != null) {
                _request.append("profanity_filter", request.profanityFilter.toString());
            }
            _request.append("custom_vocabulary", request.customVocabulary);
            if (request.convertToWav != null) {
                _request.append("convert_to_wav", request.convertToWav.toString());
            }
            const _response = yield core.fetcher({
                url: (0, url_join_1.default)((_a = (yield core.Supplier.get(this._options.environment))) !== null && _a !== void 0 ? _a : environments.EdenAiEnvironment.Default, "audio/speech_to_text_async"),
                method: "POST",
                headers: {
                    Authorization: yield this._getAuthorizationHeader(),
                    "X-Fern-Language": "JavaScript",
                    "Content-Length": (yield core.getFormDataContentLength(_request)).toString(),
                },
                contentType: "multipart/form-data; boundary=" + _request.getBoundary(),
                body: _request,
                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            });
            if (_response.ok) {
                return yield serializers.LaunchAsyncJobResponse.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    breadcrumbsPrefix: ["response"],
                });
            }
            if (_response.error.reason === "status-code") {
                throw new errors.EdenAiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.body,
                });
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.EdenAiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                    });
                case "timeout":
                    throw new errors.EdenAiTimeoutError();
                case "unknown":
                    throw new errors.EdenAiError({
                        message: _response.error.errorMessage,
                    });
            }
        });
    }
    /**
     * Get the status and results of an async job given its ID.
     * @throws {@link EdenAi.BadRequestError}
     * @throws {@link EdenAi.ForbiddenError}
     * @throws {@link EdenAi.NotFoundError}
     * @throws {@link EdenAi.InternalServerError}
     */
    speechToTextAsyncRetrieve2(publicId, request = {}, requestOptions) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const { responseAsDict, showOriginalResponse } = request;
            const _queryParams = new url_search_params_1.default();
            if (responseAsDict != null) {
                _queryParams.append("response_as_dict", responseAsDict.toString());
            }
            if (showOriginalResponse != null) {
                _queryParams.append("show_original_response", showOriginalResponse.toString());
            }
            const _response = yield core.fetcher({
                url: (0, url_join_1.default)((_a = (yield core.Supplier.get(this._options.environment))) !== null && _a !== void 0 ? _a : environments.EdenAiEnvironment.Default, `audio/speech_to_text_async/${publicId}`),
                method: "GET",
                headers: {
                    Authorization: yield this._getAuthorizationHeader(),
                    "X-Fern-Language": "JavaScript",
                },
                contentType: "application/json",
                queryParameters: _queryParams,
                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            });
            if (_response.ok) {
                return yield serializers.AsyncaudiospeechToTextAsyncResponseModel.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    breadcrumbsPrefix: ["response"],
                });
            }
            if (_response.error.reason === "status-code") {
                switch (_response.error.statusCode) {
                    case 400:
                        throw new EdenAi.BadRequestError(yield serializers.BadRequest.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }));
                    case 403:
                        throw new EdenAi.ForbiddenError(yield serializers.Error_.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }));
                    case 404:
                        throw new EdenAi.NotFoundError(yield serializers.NotFoundResponse.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }));
                    case 500:
                        throw new EdenAi.InternalServerError(yield serializers.Error_.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }));
                    default:
                        throw new errors.EdenAiError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.body,
                        });
                }
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.EdenAiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                    });
                case "timeout":
                    throw new errors.EdenAiTimeoutError();
                case "unknown":
                    throw new errors.EdenAiError({
                        message: _response.error.errorMessage,
                    });
            }
        });
    }
    /**
     * <details><summary><strong style='color: #0072a3; cursor: pointer'>Available Providers</strong></summary>
     *
     *
     *
     * |Name|Version|Price|Billing unit|
     * |----|-------|-----|------------|
     * |**amazon**|`boto3 (v1.15.18)`|4.0 (per 1000000 char)|1 char
     * |**amazon - Neural**|`boto3 (v1.15.18)`|16.0 (per 1000000 char)|1 char
     * |**google**|`v1`|4.0 (per 1000000 char)|1 char
     * |**google - Standard**|`v1`|4.0 (per 1000000 char)|1 char
     * |**google - Neural**|`v1`|16.0 (per 1000000 char)|1 char
     * |**google - Wavenet**|`v1`|16.0 (per 1000000 char)|1 char
     * |**google - Studio**|`v1`|0.16 (per 1000 char)|1 char
     * |**ibm**|`v1`|20.0 (per 1000000 char)|1000 char
     * |**microsoft**|`v1.0`|16.0 (per 1000000 char)|1 char
     * |**lovoai**|`v1`|160.0 (per 1000000 char)|1000 char
     *
     *
     * </details>
     *
     * <details><summary>Supported Languages</summary>
     *
     *
     *
     *
     *
     * |Name|Value|
     * |----|-----|
     * |**Afrikaans**|`af`|
     * |**Albanian**|`sq`|
     * |**Amharic**|`am`|
     * |**Arabic**|`ar`|
     * |**Armenian**|`hy`|
     * |**Azerbaijani**|`az`|
     * |**Basque**|`eu`|
     * |**Bengali**|`bn`|
     * |**Bosnian**|`bs`|
     * |**Bulgarian**|`bg`|
     * |**Burmese**|`my`|
     * |**Catalan**|`ca`|
     * |**Central Khmer**|`km`|
     * |**Chinese**|`zh`|
     * |**Croatian**|`hr`|
     * |**Czech**|`cs`|
     * |**Danish**|`da`|
     * |**Dutch**|`nl`|
     * |**English**|`en`|
     * |**Estonian**|`et`|
     * |**Filipino**|`fil`|
     * |**Finnish**|`fi`|
     * |**French**|`fr`|
     * |**Galician**|`gl`|
     * |**Georgian**|`ka`|
     * |**German**|`de`|
     * |**Gujarati**|`gu`|
     * |**Hebrew**|`he`|
     * |**Hindi**|`hi`|
     * |**Hungarian**|`hu`|
     * |**Icelandic**|`is`|
     * |**Indonesian**|`id`|
     * |**Irish**|`ga`|
     * |**Italian**|`it`|
     * |**Japanese**|`ja`|
     * |**Javanese**|`jv`|
     * |**Kannada**|`kn`|
     * |**Kazakh**|`kk`|
     * |**Korean**|`ko`|
     * |**Lao**|`lo`|
     * |**Latvian**|`lv`|
     * |**Lithuanian**|`lt`|
     * |**Macedonian**|`mk`|
     * |**Malay (macrolanguage)**|`ms`|
     * |**Malayalam**|`ml`|
     * |**Maltese**|`mt`|
     * |**Mandarin Chinese**|`cmn`|
     * |**Marathi**|`mr`|
     * |**Modern Greek (1453-)**|`el`|
     * |**Mongolian**|`mn`|
     * |**Nepali (macrolanguage)**|`ne`|
     * |**Norwegian Bokm√•l**|`nb`|
     * |**Panjabi**|`pa`|
     * |**Persian**|`fa`|
     * |**Polish**|`pl`|
     * |**Portuguese**|`pt`|
     * |**Portuguese (Portugal)**|`pt_PT`|
     * |**Pushto**|`ps`|
     * |**Romanian**|`ro`|
     * |**Russian**|`ru`|
     * |**Serbian**|`sr`|
     * |**Sinhala**|`si`|
     * |**Slovak**|`sk`|
     * |**Slovenian**|`sl`|
     * |**Somali**|`so`|
     * |**Spanish**|`es`|
     * |**Standard Arabic**|`arb`|
     * |**Sundanese**|`su`|
     * |**Swahili (macrolanguage)**|`sw`|
     * |**Swedish**|`sv`|
     * |**Tamil**|`ta`|
     * |**Telugu**|`te`|
     * |**Thai**|`th`|
     * |**Turkish**|`tr`|
     * |**Ukrainian**|`uk`|
     * |**Urdu**|`ur`|
     * |**Uzbek**|`uz`|
     * |**Vietnamese**|`vi`|
     * |**Welsh**|`cy`|
     * |**Wu Chinese**|`wuu`|
     * |**Yue Chinese**|`yue`|
     * |**Zulu**|`zu`|
     *
     * </details><details><summary>Supported Detailed Languages</summary>
     *
     *
     *
     *
     *
     * |Name|Value|
     * |----|-----|
     * |**Afrikaans (South Africa)**|`af-ZA`|
     * |**Albanian (Albania)**|`sq-AL`|
     * |**Amharic (Ethiopia)**|`am-ET`|
     * |**Arabic (Algeria)**|`ar-DZ`|
     * |**Arabic (Bahrain)**|`ar-BH`|
     * |**Arabic (Egypt)**|`ar-EG`|
     * |**Arabic (Iraq)**|`ar-IQ`|
     * |**Arabic (Jordan)**|`ar-JO`|
     * |**Arabic (Kuwait)**|`ar-KW`|
     * |**Arabic (Lebanon)**|`ar-LB`|
     * |**Arabic (Libya)**|`ar-LY`|
     * |**Arabic (Morocco)**|`ar-MA`|
     * |**Arabic (Oman)**|`ar-OM`|
     * |**Arabic (Pseudo-Accents)**|`ar-XA`|
     * |**Arabic (Qatar)**|`ar-QA`|
     * |**Arabic (Saudi Arabia)**|`ar-SA`|
     * |**Arabic (Syria)**|`ar-SY`|
     * |**Arabic (Tunisia)**|`ar-TN`|
     * |**Arabic (United Arab Emirates)**|`ar-AE`|
     * |**Arabic (Yemen)**|`ar-YE`|
     * |**Armenian (Armenia)**|`hy-AM`|
     * |**Azerbaijani (Azerbaijan)**|`az-AZ`|
     * |**Bangla (Bangladesh)**|`bn-BD`|
     * |**Bangla (India)**|`bn-IN`|
     * |**Basque (Spain)**|`eu-ES`|
     * |**Bosnian (Bosnia & Herzegovina)**|`bs-BA`|
     * |**Bulgarian (Bulgaria)**|`bg-BG`|
     * |**Burmese (Myanmar (Burma))**|`my-MM`|
     * |**Cantonese (China)**|`yue-CN`|
     * |**Cantonese (Hong Kong SAR China)**|`yue-HK`|
     * |**Catalan (Spain)**|`ca-ES`|
     * |**Chinese (China)**|`zh-CN`|
     * |**Chinese (Hong Kong SAR China)**|`zh-HK`|
     * |**Chinese (Taiwan)**|`zh-TW`|
     * |**Croatian (Croatia)**|`hr-HR`|
     * |**Czech (Czechia)**|`cs-CZ`|
     * |**Danish (Denmark)**|`da-DK`|
     * |**Dutch (Belgium)**|`nl-BE`|
     * |**Dutch (Netherlands)**|`nl-NL`|
     * |**English (Australia)**|`en-AU`|
     * |**English (Canada)**|`en-CA`|
     * |**English (Hong Kong SAR China)**|`en-HK`|
     * |**English (India)**|`en-IN`|
     * |**English (Ireland)**|`en-IE`|
     * |**English (Kenya)**|`en-KE`|
     * |**English (New Zealand)**|`en-NZ`|
     * |**English (Nigeria)**|`en-NG`|
     * |**English (Philippines)**|`en-PH`|
     * |**English (Singapore)**|`en-SG`|
     * |**English (South Africa)**|`en-ZA`|
     * |**English (Tanzania)**|`en-TZ`|
     * |**English (United Kingdom)**|`en-GB`|
     * |**English (United States)**|`en-US`|
     * |**Estonian (Estonia)**|`et-EE`|
     * |**Filipino (Philippines)**|`fil-PH`|
     * |**Finnish (Finland)**|`fi-FI`|
     * |**French (Belgium)**|`fr-BE`|
     * |**French (Canada)**|`fr-CA`|
     * |**French (France)**|`fr-FR`|
     * |**French (Switzerland)**|`fr-CH`|
     * |**Galician (Spain)**|`gl-ES`|
     * |**Georgian (Georgia)**|`ka-GE`|
     * |**German (Austria)**|`de-AT`|
     * |**German (Germany)**|`de-DE`|
     * |**German (Switzerland)**|`de-CH`|
     * |**Greek (Greece)**|`el-GR`|
     * |**Gujarati (India)**|`gu-IN`|
     * |**Hebrew (Israel)**|`he-IL`|
     * |**Hindi (India)**|`hi-IN`|
     * |**Hungarian (Hungary)**|`hu-HU`|
     * |**Icelandic (Iceland)**|`is-IS`|
     * |**Indonesian (Indonesia)**|`id-ID`|
     * |**Irish (Ireland)**|`ga-IE`|
     * |**Italian (Italy)**|`it-IT`|
     * |**Japanese (Japan)**|`ja-JP`|
     * |**Javanese (Indonesia)**|`jv-ID`|
     * |**Kannada (India)**|`kn-IN`|
     * |**Kazakh (Kazakhstan)**|`kk-KZ`|
     * |**Khmer (Cambodia)**|`km-KH`|
     * |**Korean (South Korea)**|`ko-KR`|
     * |**Lao (Laos)**|`lo-LA`|
     * |**Latvian (Latvia)**|`lv-LV`|
     * |**Lithuanian (Lithuania)**|`lt-LT`|
     * |**Macedonian (North Macedonia)**|`mk-MK`|
     * |**Malay (Malaysia)**|`ms-MY`|
     * |**Malayalam (India)**|`ml-IN`|
     * |**Maltese (Malta)**|`mt-MT`|
     * |**Mandarin Chinese (China)**|`cmn-CN`|
     * |**Mandarin Chinese (Taiwan)**|`cmn-TW`|
     * |**Marathi (India)**|`mr-IN`|
     * |**Mongolian (Mongolia)**|`mn-MN`|
     * |**Nepali (Nepal)**|`ne-NP`|
     * |**Norwegian Bokm√•l (Norway)**|`nb-NO`|
     * |**Pashto (Afghanistan)**|`ps-AF`|
     * |**Persian (Iran)**|`fa-IR`|
     * |**Polish (Poland)**|`pl-PL`|
     * |**Portuguese (Brazil)**|`pt-BR`|
     * |**Portuguese (Portugal)**|`pt-PT`|
     * |**Punjabi (India)**|`pa-IN`|
     * |**Romanian (Romania)**|`ro-RO`|
     * |**Russian (Russia)**|`ru-RU`|
     * |**Serbian (Serbia)**|`sr-RS`|
     * |**Sinhala (Sri Lanka)**|`si-LK`|
     * |**Slovak (Slovakia)**|`sk-SK`|
     * |**Slovenian (Slovenia)**|`sl-SI`|
     * |**Somali (Somalia)**|`so-SO`|
     * |**Spanish (Argentina)**|`es-AR`|
     * |**Spanish (Bolivia)**|`es-BO`|
     * |**Spanish (Chile)**|`es-CL`|
     * |**Spanish (Colombia)**|`es-CO`|
     * |**Spanish (Costa Rica)**|`es-CR`|
     * |**Spanish (Cuba)**|`es-CU`|
     * |**Spanish (Dominican Republic)**|`es-DO`|
     * |**Spanish (Ecuador)**|`es-EC`|
     * |**Spanish (El Salvador)**|`es-SV`|
     * |**Spanish (Equatorial Guinea)**|`es-GQ`|
     * |**Spanish (Guatemala)**|`es-GT`|
     * |**Spanish (Honduras)**|`es-HN`|
     * |**Spanish (Laos)**|`es-LA`|
     * |**Spanish (Mexico)**|`es-MX`|
     * |**Spanish (Nicaragua)**|`es-NI`|
     * |**Spanish (Panama)**|`es-PA`|
     * |**Spanish (Paraguay)**|`es-PY`|
     * |**Spanish (Peru)**|`es-PE`|
     * |**Spanish (Puerto Rico)**|`es-PR`|
     * |**Spanish (Spain)**|`es-ES`|
     * |**Spanish (United States)**|`es-US`|
     * |**Spanish (Uruguay)**|`es-UY`|
     * |**Spanish (Venezuela)**|`es-VE`|
     * |**Sundanese (Indonesia)**|`su-ID`|
     * |**Swahili (Kenya)**|`sw-KE`|
     * |**Swahili (Tanzania)**|`sw-TZ`|
     * |**Swedish (Sweden)**|`sv-SE`|
     * |**Tamil (India)**|`ta-IN`|
     * |**Tamil (Malaysia)**|`ta-MY`|
     * |**Tamil (Singapore)**|`ta-SG`|
     * |**Tamil (Sri Lanka)**|`ta-LK`|
     * |**Telugu (India)**|`te-IN`|
     * |**Thai (Thailand)**|`th-TH`|
     * |**Turkish (Turkey)**|`tr-TR`|
     * |**Ukrainian (Ukraine)**|`uk-UA`|
     * |**Urdu (India)**|`ur-IN`|
     * |**Urdu (Pakistan)**|`ur-PK`|
     * |**Uzbek (Uzbekistan)**|`uz-UZ`|
     * |**Vietnamese (Vietnam)**|`vi-VN`|
     * |**Welsh (United Kingdom)**|`cy-GB`|
     * |**Wu Chinese (China)**|`wuu-CN`|
     * |**Zulu (South Africa)**|`zu-ZA`|
     *
     * </details>
     * @throws {@link EdenAi.BadRequestError}
     * @throws {@link EdenAi.ForbiddenError}
     * @throws {@link EdenAi.NotFoundError}
     * @throws {@link EdenAi.InternalServerError}
     */
    textToSpeechCreate(request, requestOptions) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const _response = yield core.fetcher({
                url: (0, url_join_1.default)((_a = (yield core.Supplier.get(this._options.environment))) !== null && _a !== void 0 ? _a : environments.EdenAiEnvironment.Default, "audio/text_to_speech"),
                method: "POST",
                headers: {
                    Authorization: yield this._getAuthorizationHeader(),
                    "X-Fern-Language": "JavaScript",
                },
                contentType: "application/json",
                body: yield serializers.AudiotextToSpeechTextToSpeechRequest.jsonOrThrow(request, {
                    unrecognizedObjectKeys: "strip",
                }),
                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            });
            if (_response.ok) {
                return yield serializers.AudiotextToSpeechResponseModel.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    breadcrumbsPrefix: ["response"],
                });
            }
            if (_response.error.reason === "status-code") {
                switch (_response.error.statusCode) {
                    case 400:
                        throw new EdenAi.BadRequestError(yield serializers.BadRequest.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }));
                    case 403:
                        throw new EdenAi.ForbiddenError(yield serializers.Error_.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }));
                    case 404:
                        throw new EdenAi.NotFoundError(yield serializers.NotFoundResponse.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }));
                    case 500:
                        throw new EdenAi.InternalServerError(yield serializers.Error_.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }));
                    default:
                        throw new errors.EdenAiError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.body,
                        });
                }
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.EdenAiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                    });
                case "timeout":
                    throw new errors.EdenAiTimeoutError();
                case "unknown":
                    throw new errors.EdenAiError({
                        message: _response.error.errorMessage,
                    });
            }
        });
    }
    /**
     * Get a list of all jobs launched for this feature. You'll then be able to use the ID of each one to get its status and results.<br>
     *                         Please note that a **job status doesn't get updated until a get request** is sent.
     */
    textToSpeechAsyncRetrieve(requestOptions) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const _response = yield core.fetcher({
                url: (0, url_join_1.default)((_a = (yield core.Supplier.get(this._options.environment))) !== null && _a !== void 0 ? _a : environments.EdenAiEnvironment.Default, "audio/text_to_speech_async"),
                method: "GET",
                headers: {
                    Authorization: yield this._getAuthorizationHeader(),
                    "X-Fern-Language": "JavaScript",
                },
                contentType: "application/json",
                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            });
            if (_response.ok) {
                return yield serializers.ListAsyncJobResponse.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    breadcrumbsPrefix: ["response"],
                });
            }
            if (_response.error.reason === "status-code") {
                throw new errors.EdenAiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.body,
                });
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.EdenAiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                    });
                case "timeout":
                    throw new errors.EdenAiTimeoutError();
                case "unknown":
                    throw new errors.EdenAiError({
                        message: _response.error.errorMessage,
                    });
            }
        });
    }
    /**
     * <strong style='color: #ac3737'>No Provider Available</strong>
     *
     *
     *
     * <details><summary>Supported Languages</summary>
     *
     *
     *
     *
     *
     * |Name|Value|
     * |----|-----|
     * |**Afrikaans**|`af`|
     * |**Albanian**|`sq`|
     * |**Amharic**|`am`|
     * |**Arabic**|`ar`|
     * |**Armenian**|`hy`|
     * |**Azerbaijani**|`az`|
     * |**Basque**|`eu`|
     * |**Bengali**|`bn`|
     * |**Bosnian**|`bs`|
     * |**Burmese**|`my`|
     * |**Catalan**|`ca`|
     * |**Central Khmer**|`km`|
     * |**Chinese**|`zh`|
     * |**Croatian**|`hr`|
     * |**Czech**|`cs`|
     * |**Danish**|`da`|
     * |**Dutch**|`nl`|
     * |**English**|`en`|
     * |**Estonian**|`et`|
     * |**Filipino**|`fil`|
     * |**Finnish**|`fi`|
     * |**French**|`fr`|
     * |**Galician**|`gl`|
     * |**Georgian**|`ka`|
     * |**German**|`de`|
     * |**Hebrew**|`he`|
     * |**Hindi**|`hi`|
     * |**Hungarian**|`hu`|
     * |**Icelandic**|`is`|
     * |**Indonesian**|`id`|
     * |**Irish**|`ga`|
     * |**Italian**|`it`|
     * |**Japanese**|`ja`|
     * |**Javanese**|`jv`|
     * |**Kazakh**|`kk`|
     * |**Korean**|`ko`|
     * |**Lao**|`lo`|
     * |**Latvian**|`lv`|
     * |**Lithuanian**|`lt`|
     * |**Macedonian**|`mk`|
     * |**Malay (macrolanguage)**|`ms`|
     * |**Malayalam**|`ml`|
     * |**Maltese**|`mt`|
     * |**Marathi**|`mr`|
     * |**Mongolian**|`mn`|
     * |**Nepali (macrolanguage)**|`ne`|
     * |**Norwegian Bokm√•l**|`nb`|
     * |**Persian**|`fa`|
     * |**Portuguese**|`pt`|
     * |**Pushto**|`ps`|
     * |**Romanian**|`ro`|
     * |**Russian**|`ru`|
     * |**Serbian**|`sr`|
     * |**Sinhala**|`si`|
     * |**Slovak**|`sk`|
     * |**Slovenian**|`sl`|
     * |**Somali**|`so`|
     * |**Spanish**|`es`|
     * |**Sundanese**|`su`|
     * |**Swahili (macrolanguage)**|`sw`|
     * |**Swedish**|`sv`|
     * |**Tamil**|`ta`|
     * |**Telugu**|`te`|
     * |**Thai**|`th`|
     * |**Turkish**|`tr`|
     * |**Ukrainian**|`uk`|
     * |**Urdu**|`ur`|
     * |**Uzbek**|`uz`|
     * |**Vietnamese**|`vi`|
     * |**Welsh**|`cy`|
     * |**Wu Chinese**|`wuu`|
     * |**Xhosa**|`xh`|
     * |**Yue Chinese**|`yue`|
     * |**Zulu**|`zu`|
     *
     * </details><details><summary>Supported Detailed Languages</summary>
     *
     *
     *
     *
     *
     * |Name|Value|
     * |----|-----|
     * |**Afrikaans (South Africa)**|`af-ZA`|
     * |**Albanian (Albania)**|`sq-AL`|
     * |**Amharic (Ethiopia)**|`am-ET`|
     * |**Arabic (Algeria)**|`ar-DZ`|
     * |**Arabic (Bahrain)**|`ar-BH`|
     * |**Arabic (Egypt)**|`ar-EG`|
     * |**Arabic (Iraq)**|`ar-IQ`|
     * |**Arabic (Jordan)**|`ar-JO`|
     * |**Arabic (Kuwait)**|`ar-KW`|
     * |**Arabic (Lebanon)**|`ar-LB`|
     * |**Arabic (Libya)**|`ar-LY`|
     * |**Arabic (Morocco)**|`ar-MA`|
     * |**Arabic (Oman)**|`ar-OM`|
     * |**Arabic (Qatar)**|`ar-QA`|
     * |**Arabic (Saudi Arabia)**|`ar-SA`|
     * |**Arabic (Tunisia)**|`ar-TN`|
     * |**Arabic (United Arab Emirates)**|`ar-AE`|
     * |**Armenian (Armenia)**|`hy-AM`|
     * |**Azerbaijani (Azerbaijan)**|`az-AZ`|
     * |**Bangla (India)**|`bn-IN`|
     * |**Basque (Spain)**|`eu-ES`|
     * |**Bosnian (Bosnia & Herzegovina)**|`bs-BA`|
     * |**Burmese (Myanmar (Burma))**|`my-MM`|
     * |**Cantonese (China)**|`yue-CN`|
     * |**Catalan (Spain)**|`ca-ES`|
     * |**Chinese (China)**|`zh-CN`|
     * |**Chinese (China)**|`zh-CN-henan`|
     * |**Chinese (China)**|`zh-CN-shandong`|
     * |**Chinese (China)**|`zh-CN-sichuan`|
     * |**Chinese (Hong Kong SAR China)**|`zh-HK`|
     * |**Chinese (Taiwan)**|`zh-TW`|
     * |**Croatian (Croatia)**|`hr-HR`|
     * |**Czech (Czechia)**|`cs-CZ`|
     * |**Danish (Denmark)**|`da-DK`|
     * |**Dutch (Belgium)**|`nl-BE`|
     * |**Dutch (Netherlands)**|`nl-NL`|
     * |**English (Australia)**|`en-AU`|
     * |**English (Canada)**|`en-CA`|
     * |**English (Cura√ßao)**|`en-AN`|
     * |**English (Hong Kong SAR China)**|`en-HK`|
     * |**English (India)**|`en-IN`|
     * |**English (Ireland)**|`en-IE`|
     * |**English (Kenya)**|`en-KE`|
     * |**English (New Zealand)**|`en-NZ`|
     * |**English (Nigeria)**|`en-NG`|
     * |**English (Philippines)**|`en-PH`|
     * |**English (Singapore)**|`en-SG`|
     * |**English (South Africa)**|`en-ZA`|
     * |**English (Tanzania)**|`en-TZ`|
     * |**English (United Kingdom)**|`en-GB`|
     * |**English (United States)**|`en-US`|
     * |**Estonian (Estonia)**|`et-EE`|
     * |**Filipino (Philippines)**|`fil-PH`|
     * |**Finnish (Finland)**|`fi-FI`|
     * |**French (Belgium)**|`fr-BE`|
     * |**French (Canada)**|`fr-CA`|
     * |**French (France)**|`fr-FR`|
     * |**French (Switzerland)**|`fr-CH`|
     * |**Galician (Spain)**|`gl-ES`|
     * |**Georgian (Georgia)**|`ka-GE`|
     * |**German (Austria)**|`de-AT`|
     * |**German (Germany)**|`de-DE`|
     * |**German (Switzerland)**|`de-CH`|
     * |**Hebrew (Israel)**|`he-IL`|
     * |**Hindi (India)**|`hi-IN`|
     * |**Hungarian (Hungary)**|`hu-HU`|
     * |**Icelandic (Iceland)**|`is-IS`|
     * |**Indonesian (Indonesia)**|`id-ID`|
     * |**Irish (Ireland)**|`ga-IE`|
     * |**Italian (Italy)**|`it-IT`|
     * |**Japanese (Japan)**|`ja-JP`|
     * |**Javanese (Indonesia)**|`jv-ID`|
     * |**Kazakh (Kazakhstan)**|`kk-KZ`|
     * |**Khmer (Cambodia)**|`km-KH`|
     * |**Korean (South Korea)**|`ko-KR`|
     * |**Lao (Laos)**|`lo-LA`|
     * |**Latvian (Latvia)**|`lv-LV`|
     * |**Lithuanian (Lithuania)**|`lt-LT`|
     * |**Macedonian (North Macedonia)**|`mk-MK`|
     * |**Malay (Malaysia)**|`ms-MY`|
     * |**Malayalam (India)**|`ml-IN`|
     * |**Maltese (Malta)**|`mt-MT`|
     * |**Marathi (India)**|`mr-IN`|
     * |**Mongolian (Mongolia)**|`mn-MN`|
     * |**Nepali (Nepal)**|`ne-NP`|
     * |**Norwegian Bokm√•l (Norway)**|`nb-NO`|
     * |**Pashto (Afghanistan)**|`ps-AF`|
     * |**Persian (Iran)**|`fa-IR`|
     * |**Portuguese (Brazil)**|`pt-BR`|
     * |**Portuguese (Portugal)**|`pt-PT`|
     * |**Romanian (Romania)**|`ro-RO`|
     * |**Russian (Russia)**|`ru-RU`|
     * |**Serbian (Serbia)**|`sr-RS`|
     * |**Sinhala (Sri Lanka)**|`si-LK`|
     * |**Slovak (Slovakia)**|`sk-SK`|
     * |**Slovenian (Slovenia)**|`sl-SI`|
     * |**Somali (Somalia)**|`so-SO`|
     * |**Spanish (Argentina)**|`es-AR`|
     * |**Spanish (Bolivia)**|`es-BO`|
     * |**Spanish (Chile)**|`es-CL`|
     * |**Spanish (Colombia)**|`es-CO`|
     * |**Spanish (Costa Rica)**|`es-CR`|
     * |**Spanish (Cuba)**|`es-CU`|
     * |**Spanish (Ecuador)**|`es-EC`|
     * |**Spanish (El Salvador)**|`es-SV`|
     * |**Spanish (Equatorial Guinea)**|`es-GQ`|
     * |**Spanish (Guatemala)**|`es-GT`|
     * |**Spanish (Mexico)**|`es-MX`|
     * |**Spanish (Nicaragua)**|`es-NI`|
     * |**Spanish (Panama)**|`es-PA`|
     * |**Spanish (Paraguay)**|`es-PY`|
     * |**Spanish (Puerto Rico)**|`es-PR`|
     * |**Spanish (Spain)**|`es-ES`|
     * |**Spanish (United States)**|`es-US`|
     * |**Spanish (Uruguay)**|`es-UY`|
     * |**Spanish (Venezuela)**|`es-VE`|
     * |**Sundanese (Indonesia)**|`su-ID`|
     * |**Swahili (Kenya)**|`sw-KE`|
     * |**Swahili (Tanzania)**|`sw-TZ`|
     * |**Swedish (Sweden)**|`sv-SE`|
     * |**Tamil (India)**|`ta-IN`|
     * |**Tamil (Malaysia)**|`ta-MY`|
     * |**Tamil (Singapore)**|`ta-SG`|
     * |**Telugu (India)**|`te-IN`|
     * |**Thai (Thailand)**|`th-TH`|
     * |**Turkish (Turkey)**|`tr-TR`|
     * |**Ukrainian (Ukraine)**|`uk-UA`|
     * |**Urdu (India)**|`ur-IN`|
     * |**Urdu (Pakistan)**|`ur-PK`|
     * |**Uzbek (United Kingdom)**|`uz-UK`|
     * |**Vietnamese (Vietnam)**|`vi-VN`|
     * |**Welsh (United Kingdom)**|`cy-GB`|
     * |**Wu Chinese (China)**|`wuu-CN`|
     * |**Xhosa (South Africa)**|`xh-ZA`|
     * |**Zulu (South Africa)**|`zu-ZA`|
     *
     * </details>
     */
    textToSpeechAsyncCreate(request, requestOptions) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const _response = yield core.fetcher({
                url: (0, url_join_1.default)((_a = (yield core.Supplier.get(this._options.environment))) !== null && _a !== void 0 ? _a : environments.EdenAiEnvironment.Default, "audio/text_to_speech_async"),
                method: "POST",
                headers: {
                    Authorization: yield this._getAuthorizationHeader(),
                    "X-Fern-Language": "JavaScript",
                },
                contentType: "application/json",
                body: yield serializers.TextToSpeechAsyncRequest.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            });
            if (_response.ok) {
                return yield serializers.LaunchAsyncJobResponse.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    breadcrumbsPrefix: ["response"],
                });
            }
            if (_response.error.reason === "status-code") {
                throw new errors.EdenAiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.body,
                });
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.EdenAiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                    });
                case "timeout":
                    throw new errors.EdenAiTimeoutError();
                case "unknown":
                    throw new errors.EdenAiError({
                        message: _response.error.errorMessage,
                    });
            }
        });
    }
    /**
     * Get the status and results of an async job given its ID.
     * @throws {@link EdenAi.BadRequestError}
     * @throws {@link EdenAi.ForbiddenError}
     * @throws {@link EdenAi.NotFoundError}
     * @throws {@link EdenAi.InternalServerError}
     */
    textToSpeechAsyncRetrieve2(publicId, request = {}, requestOptions) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const { responseAsDict, showOriginalResponse } = request;
            const _queryParams = new url_search_params_1.default();
            if (responseAsDict != null) {
                _queryParams.append("response_as_dict", responseAsDict.toString());
            }
            if (showOriginalResponse != null) {
                _queryParams.append("show_original_response", showOriginalResponse.toString());
            }
            const _response = yield core.fetcher({
                url: (0, url_join_1.default)((_a = (yield core.Supplier.get(this._options.environment))) !== null && _a !== void 0 ? _a : environments.EdenAiEnvironment.Default, `audio/text_to_speech_async/${publicId}`),
                method: "GET",
                headers: {
                    Authorization: yield this._getAuthorizationHeader(),
                    "X-Fern-Language": "JavaScript",
                },
                contentType: "application/json",
                queryParameters: _queryParams,
                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            });
            if (_response.ok) {
                return yield serializers.AsyncaudiotextToSpeechAsyncResponseModel.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    breadcrumbsPrefix: ["response"],
                });
            }
            if (_response.error.reason === "status-code") {
                switch (_response.error.statusCode) {
                    case 400:
                        throw new EdenAi.BadRequestError(yield serializers.BadRequest.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }));
                    case 403:
                        throw new EdenAi.ForbiddenError(yield serializers.Error_.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }));
                    case 404:
                        throw new EdenAi.NotFoundError(yield serializers.NotFoundResponse.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }));
                    case 500:
                        throw new EdenAi.InternalServerError(yield serializers.Error_.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }));
                    default:
                        throw new errors.EdenAiError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.body,
                        });
                }
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.EdenAiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                    });
                case "timeout":
                    throw new errors.EdenAiTimeoutError();
                case "unknown":
                    throw new errors.EdenAiError({
                        message: _response.error.errorMessage,
                    });
            }
        });
    }
    _getAuthorizationHeader() {
        return __awaiter(this, void 0, void 0, function* () {
            const bearer = yield core.Supplier.get(this._options.token);
            if (bearer != null) {
                return `Bearer ${bearer}`;
            }
            return undefined;
        });
    }
}
exports.Audio = Audio;
