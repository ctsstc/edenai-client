"use strict";
/**
 * This file was auto-generated by Fern from our API Definition.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Text = void 0;
const environments = __importStar(require("../../../../environments"));
const core = __importStar(require("../../../../core"));
const EdenAi = __importStar(require("../../.."));
const serializers = __importStar(require("../../../../serialization"));
const url_join_1 = __importDefault(require("url-join"));
const errors = __importStar(require("../../../../errors"));
class Text {
    constructor(_options) {
        this._options = _options;
    }
    /**
     * <details><summary><strong style='color: #0072a3; cursor: pointer'>Available Providers</strong></summary>
     *
     *
     *
     * |Name|Version|Price|Billing unit|
     * |----|-------|-----|------------|
     * |**originalityai**|`v1`|0.01 (per 400 char)|400 char
     * |**sapling**|`v1`|0.005 (per 1000 char)|1000 char
     *
     *
     * </details>
     *
     * <details><summary>Supported Detailed Languages</summary>
     *
     *
     *
     *
     *
     * |Name|Value|
     * |----|-----|
     * |**Auto detection**|`auto-detect`|
     *
     * </details>
     * @throws {@link EdenAi.BadRequestError}
     * @throws {@link EdenAi.ForbiddenError}
     * @throws {@link EdenAi.NotFoundError}
     * @throws {@link EdenAi.InternalServerError}
     */
    aiDetectionCreate(request, requestOptions) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const _response = yield core.fetcher({
                url: (0, url_join_1.default)((_a = (yield core.Supplier.get(this._options.environment))) !== null && _a !== void 0 ? _a : environments.EdenAiEnvironment.Default, "text/ai_detection"),
                method: "POST",
                headers: {
                    Authorization: yield this._getAuthorizationHeader(),
                    "X-Fern-Language": "JavaScript",
                },
                contentType: "application/json",
                body: yield serializers.TextaiDetectionAiDetectionRequest.jsonOrThrow(request, {
                    unrecognizedObjectKeys: "strip",
                }),
                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            });
            if (_response.ok) {
                return yield serializers.TextaiDetectionResponseModel.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    breadcrumbsPrefix: ["response"],
                });
            }
            if (_response.error.reason === "status-code") {
                switch (_response.error.statusCode) {
                    case 400:
                        throw new EdenAi.BadRequestError(yield serializers.BadRequest.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }));
                    case 403:
                        throw new EdenAi.ForbiddenError(yield serializers.Error_.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }));
                    case 404:
                        throw new EdenAi.NotFoundError(yield serializers.NotFoundResponse.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }));
                    case 500:
                        throw new EdenAi.InternalServerError(yield serializers.Error_.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }));
                    default:
                        throw new errors.EdenAiError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.body,
                        });
                }
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.EdenAiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                    });
                case "timeout":
                    throw new errors.EdenAiTimeoutError();
                case "unknown":
                    throw new errors.EdenAiError({
                        message: _response.error.errorMessage,
                    });
            }
        });
    }
    /**
     * <details><summary><strong style='color: #0072a3; cursor: pointer'>Available Providers</strong></summary>
     *
     *
     *
     * |Name|Version|Price|Billing unit|
     * |----|-------|-----|------------|
     * |**emvista**|`v1.0`|3.0 (per 1000000 char)|1 char
     * |**oneai**|`v0`|2.14 (per 1000000 char)|1 char
     * |**openai**|`v3.0.0`|20.0 (per 1000000 token)|1 token
     * |**amazon**|`boto3 (v1.15.18)`|1.0 (per 1000000 char)|300 char
     * |**microsoft**|`v3.1`|0.25 (per 1000000 char)|1000 char
     *
     *
     * </details>
     *
     * <details><summary>Supported Languages</summary>
     *
     *
     *
     *
     *
     * |Name|Value|
     * |----|-----|
     * |**Arabic**|`ar`|
     * |**Chinese**|`zh`|
     * |**Danish**|`da`|
     * |**Dutch**|`nl`|
     * |**English**|`en`|
     * |**Finnish**|`fi`|
     * |**French**|`fr`|
     * |**German**|`de`|
     * |**Hindi**|`hi`|
     * |**Italian**|`it`|
     * |**Japanese**|`ja`|
     * |**Korean**|`ko`|
     * |**Modern Greek (1453-)**|`el`|
     * |**Norwegian**|`no`|
     * |**Polish**|`pl`|
     * |**Portuguese**|`pt`|
     * |**Russian**|`ru`|
     * |**Spanish**|`es`|
     * |**Swedish**|`sv`|
     *
     * </details><details><summary>Supported Detailed Languages</summary>
     *
     *
     *
     *
     *
     * |Name|Value|
     * |----|-----|
     * |**Auto detection**|`auto-detect`|
     * |**Chinese (Simplified)**|`zh-Hans`|
     * |**Chinese (Traditional)**|`zh-Hant`|
     * |**Portuguese (Brazil)**|`pt-BR`|
     * |**Portuguese (Portugal)**|`pt-PT`|
     *
     * </details>
     * @throws {@link EdenAi.BadRequestError}
     * @throws {@link EdenAi.ForbiddenError}
     * @throws {@link EdenAi.NotFoundError}
     * @throws {@link EdenAi.InternalServerError}
     */
    anonymizationCreate(request, requestOptions) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const _response = yield core.fetcher({
                url: (0, url_join_1.default)((_a = (yield core.Supplier.get(this._options.environment))) !== null && _a !== void 0 ? _a : environments.EdenAiEnvironment.Default, "text/anonymization"),
                method: "POST",
                headers: {
                    Authorization: yield this._getAuthorizationHeader(),
                    "X-Fern-Language": "JavaScript",
                },
                contentType: "application/json",
                body: yield serializers.TexttopicExtractiontextanonymizationtextmoderationtextnamedEntityRecognitiontextkeywordExtractiontextsyntaxAnalysistextsentimentAnalysisTextAnalysisRequest.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            });
            if (_response.ok) {
                return yield serializers.TextanonymizationResponseModel.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    breadcrumbsPrefix: ["response"],
                });
            }
            if (_response.error.reason === "status-code") {
                switch (_response.error.statusCode) {
                    case 400:
                        throw new EdenAi.BadRequestError(yield serializers.BadRequest.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }));
                    case 403:
                        throw new EdenAi.ForbiddenError(yield serializers.Error_.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }));
                    case 404:
                        throw new EdenAi.NotFoundError(yield serializers.NotFoundResponse.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }));
                    case 500:
                        throw new EdenAi.InternalServerError(yield serializers.Error_.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }));
                    default:
                        throw new errors.EdenAiError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.body,
                        });
                }
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.EdenAiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                    });
                case "timeout":
                    throw new errors.EdenAiTimeoutError();
                case "unknown":
                    throw new errors.EdenAiError({
                        message: _response.error.errorMessage,
                    });
            }
        });
    }
    /**
     * <details><summary><strong style='color: #0072a3; cursor: pointer'>Available Providers</strong></summary>
     *
     *
     *
     * |Name|Version|Price|Billing unit|
     * |----|-------|-----|------------|
     * |**openai - gpt-3.5-turbo**|`v1Beta`|0.002 (per 1000 token)|1 token
     * |**openai - gpt-4-32k-0314**|`v1Beta`|0.12 (per 1000 token)|1 token
     * |**openai - gpt-4-0314**|`v1Beta`|0.06 (per 1000 token)|1 token
     * |**openai - gpt-4**|`v1Beta`|0.06 (per 1000 token)|1 token
     * |**openai - gpt-3.5-turbo-0301**|`v1Beta`|0.002 (per 1000 token)|1 token
     * |**openai - gpt-4-32k**|`v1Beta`|0.12 (per 1000 token)|1 token
     * |**openai**|`v1Beta`|0.12 (per 1000 token)|1 token
     * |**google**|`v1`|0.5 (per 1000000 char)|1 char
     *
     *
     * </details>
     *
     *
     * @throws {@link EdenAi.BadRequestError}
     * @throws {@link EdenAi.ForbiddenError}
     * @throws {@link EdenAi.NotFoundError}
     * @throws {@link EdenAi.InternalServerError}
     */
    chatCreate(request, requestOptions) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const _response = yield core.fetcher({
                url: (0, url_join_1.default)((_a = (yield core.Supplier.get(this._options.environment))) !== null && _a !== void 0 ? _a : environments.EdenAiEnvironment.Default, "text/chat"),
                method: "POST",
                headers: {
                    Authorization: yield this._getAuthorizationHeader(),
                    "X-Fern-Language": "JavaScript",
                },
                contentType: "application/json",
                body: yield serializers.TextchatChatRequest.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            });
            if (_response.ok) {
                return yield serializers.TextchatResponseModel.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    breadcrumbsPrefix: ["response"],
                });
            }
            if (_response.error.reason === "status-code") {
                switch (_response.error.statusCode) {
                    case 400:
                        throw new EdenAi.BadRequestError(yield serializers.BadRequest.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }));
                    case 403:
                        throw new EdenAi.ForbiddenError(yield serializers.Error_.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }));
                    case 404:
                        throw new EdenAi.NotFoundError(yield serializers.NotFoundResponse.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }));
                    case 500:
                        throw new EdenAi.InternalServerError(yield serializers.Error_.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }));
                    default:
                        throw new errors.EdenAiError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.body,
                        });
                }
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.EdenAiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                    });
                case "timeout":
                    throw new errors.EdenAiTimeoutError();
                case "unknown":
                    throw new errors.EdenAiError({
                        message: _response.error.errorMessage,
                    });
            }
        });
    }
    /**
     * <details><summary><strong style='color: #0072a3; cursor: pointer'>Available Providers</strong></summary>
     *
     *
     *
     * |Name|Version|Price|Billing unit|
     * |----|-------|-----|------------|
     * |**openai**|`v1`|2.0 (per 1000000 token)|1 token
     * |**google**|`v1`|0.5 (per 1000000 char)|1 char
     *
     *
     * </details>
     *
     *
     * @throws {@link EdenAi.BadRequestError}
     * @throws {@link EdenAi.ForbiddenError}
     * @throws {@link EdenAi.NotFoundError}
     * @throws {@link EdenAi.InternalServerError}
     */
    codeGenerationCreate(request, requestOptions) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const _response = yield core.fetcher({
                url: (0, url_join_1.default)((_a = (yield core.Supplier.get(this._options.environment))) !== null && _a !== void 0 ? _a : environments.EdenAiEnvironment.Default, "text/code_generation"),
                method: "POST",
                headers: {
                    Authorization: yield this._getAuthorizationHeader(),
                    "X-Fern-Language": "JavaScript",
                },
                contentType: "application/json",
                body: yield serializers.TextcodeGenerationCodeGenerationRequest.jsonOrThrow(request, {
                    unrecognizedObjectKeys: "strip",
                }),
                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            });
            if (_response.ok) {
                return yield serializers.TextcodeGenerationResponseModel.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    breadcrumbsPrefix: ["response"],
                });
            }
            if (_response.error.reason === "status-code") {
                switch (_response.error.statusCode) {
                    case 400:
                        throw new EdenAi.BadRequestError(yield serializers.BadRequest.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }));
                    case 403:
                        throw new EdenAi.ForbiddenError(yield serializers.Error_.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }));
                    case 404:
                        throw new EdenAi.NotFoundError(yield serializers.NotFoundResponse.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }));
                    case 500:
                        throw new EdenAi.InternalServerError(yield serializers.Error_.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }));
                    default:
                        throw new errors.EdenAiError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.body,
                        });
                }
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.EdenAiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                    });
                case "timeout":
                    throw new errors.EdenAiTimeoutError();
                case "unknown":
                    throw new errors.EdenAiError({
                        message: _response.error.errorMessage,
                    });
            }
        });
    }
    /**
     * <details><summary><strong style='color: #0072a3; cursor: pointer'>Available Providers</strong></summary>
     *
     *
     *
     * |Name|Version|Price|Billing unit|
     * |----|-------|-----|------------|
     * |**cohere**|`2022-12-06`|2.0 (per 1000 request)|1 request
     * |**openai**|`v3.0.0`|20.0 (per 1000000 token)|1 token
     *
     *
     * </details>
     *
     *
     * @throws {@link EdenAi.BadRequestError}
     * @throws {@link EdenAi.ForbiddenError}
     * @throws {@link EdenAi.NotFoundError}
     * @throws {@link EdenAi.InternalServerError}
     */
    customClassificationCreate(request, requestOptions) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const _response = yield core.fetcher({
                url: (0, url_join_1.default)((_a = (yield core.Supplier.get(this._options.environment))) !== null && _a !== void 0 ? _a : environments.EdenAiEnvironment.Default, "text/custom_classification"),
                method: "POST",
                headers: {
                    Authorization: yield this._getAuthorizationHeader(),
                    "X-Fern-Language": "JavaScript",
                },
                contentType: "application/json",
                body: yield serializers.TextcustomClassificationCustomClassificationRequest.jsonOrThrow(request, {
                    unrecognizedObjectKeys: "strip",
                }),
                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            });
            if (_response.ok) {
                return yield serializers.TextcustomClassificationResponseModel.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    breadcrumbsPrefix: ["response"],
                });
            }
            if (_response.error.reason === "status-code") {
                switch (_response.error.statusCode) {
                    case 400:
                        throw new EdenAi.BadRequestError(yield serializers.BadRequest.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }));
                    case 403:
                        throw new EdenAi.ForbiddenError(yield serializers.Error_.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }));
                    case 404:
                        throw new EdenAi.NotFoundError(yield serializers.NotFoundResponse.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }));
                    case 500:
                        throw new EdenAi.InternalServerError(yield serializers.Error_.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }));
                    default:
                        throw new errors.EdenAiError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.body,
                        });
                }
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.EdenAiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                    });
                case "timeout":
                    throw new errors.EdenAiTimeoutError();
                case "unknown":
                    throw new errors.EdenAiError({
                        message: _response.error.errorMessage,
                    });
            }
        });
    }
    /**
     * <details><summary><strong style='color: #0072a3; cursor: pointer'>Available Providers</strong></summary>
     *
     *
     *
     * |Name|Version|Price|Billing unit|
     * |----|-------|-----|------------|
     * |**openai**|`v3.0.0`|20.0 (per 1000000 token)|1 token
     * |**cohere**|`2022-12-06`|2.0 (per 1000 request)|1 request
     *
     *
     * </details>
     *
     *
     * @throws {@link EdenAi.BadRequestError}
     * @throws {@link EdenAi.ForbiddenError}
     * @throws {@link EdenAi.NotFoundError}
     * @throws {@link EdenAi.InternalServerError}
     */
    customNamedEntityRecognitionCreate(request, requestOptions) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const _response = yield core.fetcher({
                url: (0, url_join_1.default)((_a = (yield core.Supplier.get(this._options.environment))) !== null && _a !== void 0 ? _a : environments.EdenAiEnvironment.Default, "text/custom_named_entity_recognition"),
                method: "POST",
                headers: {
                    Authorization: yield this._getAuthorizationHeader(),
                    "X-Fern-Language": "JavaScript",
                },
                contentType: "application/json",
                body: yield serializers.TextcustomNamedEntityRecognitionCustomNamedEntityRecognitionRequest.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            });
            if (_response.ok) {
                return yield serializers.TextcustomNamedEntityRecognitionResponseModel.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    breadcrumbsPrefix: ["response"],
                });
            }
            if (_response.error.reason === "status-code") {
                switch (_response.error.statusCode) {
                    case 400:
                        throw new EdenAi.BadRequestError(yield serializers.BadRequest.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }));
                    case 403:
                        throw new EdenAi.ForbiddenError(yield serializers.Error_.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }));
                    case 404:
                        throw new EdenAi.NotFoundError(yield serializers.NotFoundResponse.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }));
                    case 500:
                        throw new EdenAi.InternalServerError(yield serializers.Error_.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }));
                    default:
                        throw new errors.EdenAiError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.body,
                        });
                }
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.EdenAiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                    });
                case "timeout":
                    throw new errors.EdenAiTimeoutError();
                case "unknown":
                    throw new errors.EdenAiError({
                        message: _response.error.errorMessage,
                    });
            }
        });
    }
    /**
     * <details><summary><strong style='color: #0072a3; cursor: pointer'>Available Providers</strong></summary>
     *
     *
     *
     * |Name|Version|Price|Billing unit|
     * |----|-------|-----|------------|
     * |**openai**|`v3.0.0`|20.0 (per 1000000 token)|1 token
     * |**google**|`v1`|0.1 (per 1000000 char)|1 char
     *
     *
     * </details>
     *
     *
     * @throws {@link EdenAi.BadRequestError}
     * @throws {@link EdenAi.ForbiddenError}
     * @throws {@link EdenAi.NotFoundError}
     * @throws {@link EdenAi.InternalServerError}
     */
    embeddingsCreate(request, requestOptions) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const _response = yield core.fetcher({
                url: (0, url_join_1.default)((_a = (yield core.Supplier.get(this._options.environment))) !== null && _a !== void 0 ? _a : environments.EdenAiEnvironment.Default, "text/embeddings"),
                method: "POST",
                headers: {
                    Authorization: yield this._getAuthorizationHeader(),
                    "X-Fern-Language": "JavaScript",
                },
                contentType: "application/json",
                body: yield serializers.TextembeddingsEmbeddingsRequest.jsonOrThrow(request, {
                    unrecognizedObjectKeys: "strip",
                }),
                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            });
            if (_response.ok) {
                return yield serializers.TextembeddingsResponseModel.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    breadcrumbsPrefix: ["response"],
                });
            }
            if (_response.error.reason === "status-code") {
                switch (_response.error.statusCode) {
                    case 400:
                        throw new EdenAi.BadRequestError(yield serializers.BadRequest.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }));
                    case 403:
                        throw new EdenAi.ForbiddenError(yield serializers.Error_.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }));
                    case 404:
                        throw new EdenAi.NotFoundError(yield serializers.NotFoundResponse.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }));
                    case 500:
                        throw new EdenAi.InternalServerError(yield serializers.Error_.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }));
                    default:
                        throw new errors.EdenAiError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.body,
                        });
                }
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.EdenAiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                    });
                case "timeout":
                    throw new errors.EdenAiTimeoutError();
                case "unknown":
                    throw new errors.EdenAiError({
                        message: _response.error.errorMessage,
                    });
            }
        });
    }
    /**
     * <details><summary><strong style='color: #0072a3; cursor: pointer'>Available Providers</strong></summary>
     *
     *
     *
     * |Name|Version|Price|Billing unit|
     * |----|-------|-----|------------|
     * |**amazon**|`boto3 1.26.8`|1.0 (per 1000000 char)|300 char
     * |**google**|`v1`|2.0 (per 1000000 char)|1000 char
     *
     *
     * </details>
     *
     * <details><summary>Supported Languages</summary>
     *
     *
     *
     *
     *
     * |Name|Value|
     * |----|-----|
     * |**English**|`en`|
     * |**Japanese**|`ja`|
     * |**Spanish**|`es`|
     *
     * </details>
     * @throws {@link EdenAi.BadRequestError}
     * @throws {@link EdenAi.ForbiddenError}
     * @throws {@link EdenAi.NotFoundError}
     * @throws {@link EdenAi.InternalServerError}
     */
    entitySentimentCreate(request, requestOptions) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const _response = yield core.fetcher({
                url: (0, url_join_1.default)((_a = (yield core.Supplier.get(this._options.environment))) !== null && _a !== void 0 ? _a : environments.EdenAiEnvironment.Default, "text/entity_sentiment"),
                method: "POST",
                headers: {
                    Authorization: yield this._getAuthorizationHeader(),
                    "X-Fern-Language": "JavaScript",
                },
                contentType: "application/json",
                body: yield serializers.TextentitySentimentEntitySentimentRequest.jsonOrThrow(request, {
                    unrecognizedObjectKeys: "strip",
                }),
                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            });
            if (_response.ok) {
                return yield serializers.TextentitySentimentResponseModel.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    breadcrumbsPrefix: ["response"],
                });
            }
            if (_response.error.reason === "status-code") {
                switch (_response.error.statusCode) {
                    case 400:
                        throw new EdenAi.BadRequestError(yield serializers.BadRequest.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }));
                    case 403:
                        throw new EdenAi.ForbiddenError(yield serializers.Error_.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }));
                    case 404:
                        throw new EdenAi.NotFoundError(yield serializers.NotFoundResponse.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }));
                    case 500:
                        throw new EdenAi.InternalServerError(yield serializers.Error_.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }));
                    default:
                        throw new errors.EdenAiError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.body,
                        });
                }
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.EdenAiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                    });
                case "timeout":
                    throw new errors.EdenAiTimeoutError();
                case "unknown":
                    throw new errors.EdenAiError({
                        message: _response.error.errorMessage,
                    });
            }
        });
    }
    /**
     * <details><summary><strong style='color: #0072a3; cursor: pointer'>Available Providers</strong></summary>
     *
     *
     *
     * |Name|Version|Price|Billing unit|
     * |----|-------|-----|------------|
     * |**cohere**|`2022-12-06`|2.5 (per 1000000 char)|1000 char
     * |**cohere - command**|`2022-12-06`|2.5 (per 1000000 char)|1000 char
     * |**cohere - command-light**|`2022-12-06`|2.5 (per 1000000 char)|1000 char
     * |**cohere - command-nightly**|`2022-12-06`|2.5 (per 1000000 char)|1000 char
     * |**cohere - command-light-nightly**|`2022-12-06`|2.5 (per 1000000 char)|1000 char
     * |**cohere - base**|`2022-12-06`|2.5 (per 1000000 char)|1000 char
     * |**cohere - base-light**|`2022-12-06`|2.5 (per 1000000 char)|1000 char
     * |**openai - text-ada-001**|`v1`|0.4 (per 1000000 token)|1 token
     * |**openai - text-curie-001**|`v1`|2.0 (per 1000000 token)|1 token
     * |**openai - text-davinci-002**|`v1`|20.0 (per 1000000 token)|1 token
     * |**openai - text-davinci-003**|`v1`|20.0 (per 1000000 token)|1 token
     * |**openai - text-babbage-001**|`v1`|0.5 (per 1000000 token)|1 token
     * |**openai**|`v1`|20.0 (per 1000000 token)|1 token
     * |**google**|`v1`|1.0 (per 1000000 char)|1 char
     *
     *
     * </details>
     *
     *
     * @throws {@link EdenAi.BadRequestError}
     * @throws {@link EdenAi.ForbiddenError}
     * @throws {@link EdenAi.NotFoundError}
     * @throws {@link EdenAi.InternalServerError}
     */
    generationCreate(request, requestOptions) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const _response = yield core.fetcher({
                url: (0, url_join_1.default)((_a = (yield core.Supplier.get(this._options.environment))) !== null && _a !== void 0 ? _a : environments.EdenAiEnvironment.Default, "text/generation"),
                method: "POST",
                headers: {
                    Authorization: yield this._getAuthorizationHeader(),
                    "X-Fern-Language": "JavaScript",
                },
                contentType: "application/json",
                body: yield serializers.TextgenerationGenerationRequest.jsonOrThrow(request, {
                    unrecognizedObjectKeys: "strip",
                }),
                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            });
            if (_response.ok) {
                return yield serializers.TextgenerationResponseModel.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    breadcrumbsPrefix: ["response"],
                });
            }
            if (_response.error.reason === "status-code") {
                switch (_response.error.statusCode) {
                    case 400:
                        throw new EdenAi.BadRequestError(yield serializers.BadRequest.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }));
                    case 403:
                        throw new EdenAi.ForbiddenError(yield serializers.Error_.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }));
                    case 404:
                        throw new EdenAi.NotFoundError(yield serializers.NotFoundResponse.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }));
                    case 500:
                        throw new EdenAi.InternalServerError(yield serializers.Error_.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }));
                    default:
                        throw new errors.EdenAiError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.body,
                        });
                }
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.EdenAiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                    });
                case "timeout":
                    throw new errors.EdenAiTimeoutError();
                case "unknown":
                    throw new errors.EdenAiError({
                        message: _response.error.errorMessage,
                    });
            }
        });
    }
    /**
     * <details><summary><strong style='color: #0072a3; cursor: pointer'>Available Providers</strong></summary>
     *
     *
     *
     * |Name|Version|Price|Billing unit|
     * |----|-------|-----|------------|
     * |**amazon**|`boto3 (v1.15.18)`|1.0 (per 1000000 char)|300 char
     * |**ibm**|`v1 (2021-08-01)`|0.3 (per 1000000 char)|10000 char
     * |**microsoft**|`v3.1`|1.0 (per 1000000 char)|1000 char
     * |**emvista**|`v1.0`|1.0 (per 1000000 char)|1000 char
     * |**oneai**|`v0`|2.14 (per 1000000 char)|1 char
     * |**openai**|`v3.0.0`|20.0 (per 1000000 token)|1 token
     * |**tenstorrent**|`v1.0.0`|0.7 (per 1000000 char)|1000 char
     *
     *
     * </details>
     *
     * <details><summary>Supported Languages</summary>
     *
     *
     *
     *
     *
     * |Name|Value|
     * |----|-----|
     * |**Afrikaans**|`af`|
     * |**Arabic**|`ar`|
     * |**Bulgarian**|`bg`|
     * |**Catalan**|`ca`|
     * |**Chinese**|`zh`|
     * |**Croatian**|`hr`|
     * |**Czech**|`cs`|
     * |**Danish**|`da`|
     * |**Dutch**|`nl`|
     * |**English**|`en`|
     * |**Estonian**|`et`|
     * |**Finnish**|`fi`|
     * |**French**|`fr`|
     * |**German**|`de`|
     * |**Hebrew**|`he`|
     * |**Hindi**|`hi`|
     * |**Hungarian**|`hu`|
     * |**Indonesian**|`id`|
     * |**Italian**|`it`|
     * |**Japanese**|`ja`|
     * |**Korean**|`ko`|
     * |**Latvian**|`lv`|
     * |**Modern Greek (1453-)**|`el`|
     * |**Norwegian**|`no`|
     * |**Norwegian Bokmål**|`nb`|
     * |**Polish**|`pl`|
     * |**Portuguese**|`pt`|
     * |**Romanian**|`ro`|
     * |**Russian**|`ru`|
     * |**Slovak**|`sk`|
     * |**Slovenian**|`sl`|
     * |**Spanish**|`es`|
     * |**Swedish**|`sv`|
     * |**Turkish**|`tr`|
     *
     * </details><details><summary>Supported Detailed Languages</summary>
     *
     *
     *
     *
     *
     * |Name|Value|
     * |----|-----|
     * |**Auto detection**|`auto-detect`|
     * |**Chinese (Simplified)**|`zh-Hans`|
     * |**Chinese (Taiwan)**|`zh-TW`|
     * |**Portuguese (Brazil)**|`pt-BR`|
     * |**Portuguese (Portugal)**|`pt-PT`|
     *
     * </details>
     * @throws {@link EdenAi.BadRequestError}
     * @throws {@link EdenAi.ForbiddenError}
     * @throws {@link EdenAi.NotFoundError}
     * @throws {@link EdenAi.InternalServerError}
     */
    keywordExtractionCreate(request, requestOptions) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const _response = yield core.fetcher({
                url: (0, url_join_1.default)((_a = (yield core.Supplier.get(this._options.environment))) !== null && _a !== void 0 ? _a : environments.EdenAiEnvironment.Default, "text/keyword_extraction"),
                method: "POST",
                headers: {
                    Authorization: yield this._getAuthorizationHeader(),
                    "X-Fern-Language": "JavaScript",
                },
                contentType: "application/json",
                body: yield serializers.TexttopicExtractiontextanonymizationtextmoderationtextnamedEntityRecognitiontextkeywordExtractiontextsyntaxAnalysistextsentimentAnalysisTextAnalysisRequest.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            });
            if (_response.ok) {
                return yield serializers.TextkeywordExtractionResponseModel.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    breadcrumbsPrefix: ["response"],
                });
            }
            if (_response.error.reason === "status-code") {
                switch (_response.error.statusCode) {
                    case 400:
                        throw new EdenAi.BadRequestError(yield serializers.BadRequest.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }));
                    case 403:
                        throw new EdenAi.ForbiddenError(yield serializers.Error_.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }));
                    case 404:
                        throw new EdenAi.NotFoundError(yield serializers.NotFoundResponse.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }));
                    case 500:
                        throw new EdenAi.InternalServerError(yield serializers.Error_.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }));
                    default:
                        throw new errors.EdenAiError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.body,
                        });
                }
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.EdenAiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                    });
                case "timeout":
                    throw new errors.EdenAiTimeoutError();
                case "unknown":
                    throw new errors.EdenAiError({
                        message: _response.error.errorMessage,
                    });
            }
        });
    }
    /**
     * <details><summary><strong style='color: #0072a3; cursor: pointer'>Available Providers</strong></summary>
     *
     *
     *
     * |Name|Version|Price|Billing unit|
     * |----|-------|-----|------------|
     * |**microsoft**|`v1.0`|1.0 (per 1000 request)|1 request
     * |**openai**|`v3.0.0`|20.0 (per 1000000 token)|1 token
     * |**clarifai**|`8.0.0`|1.2 (per 1000 request)|1 request
     * |**google**|`v1`|5.0 (per 1000000 char)|100 char
     *
     *
     * </details>
     *
     * <details><summary>Supported Languages</summary>
     *
     *
     *
     *
     *
     * |Name|Value|
     * |----|-----|
     * |**Afrikaans**|`af`|
     * |**Albanian**|`sq`|
     * |**Amharic**|`am`|
     * |**Arabic**|`ar`|
     * |**Aragonese**|`an`|
     * |**Armenian**|`hy`|
     * |**Assamese**|`as`|
     * |**Asturian**|`ast`|
     * |**Azerbaijani**|`az`|
     * |**Bashkir**|`ba`|
     * |**Basque**|`eu`|
     * |**Bavarian**|`bar`|
     * |**Belarusian**|`be`|
     * |**Bengali**|`bn`|
     * |**Bishnupriya**|`bpy`|
     * |**Bosnian**|`bs`|
     * |**Breton**|`br`|
     * |**Bulgarian**|`bg`|
     * |**Burmese**|`my`|
     * |**Catalan**|`ca`|
     * |**Cebuano**|`ceb`|
     * |**Central Khmer**|`km`|
     * |**Central Kurdish**|`ckb`|
     * |**Chechen**|`ce`|
     * |**Cherokee**|`chr`|
     * |**Chinese**|`zh`|
     * |**Chuvash**|`cv`|
     * |**Croatian**|`hr`|
     * |**Czech**|`cs`|
     * |**Danish**|`da`|
     * |**Dutch**|`nl`|
     * |**English**|`en`|
     * |**Estonian**|`et`|
     * |**Filipino**|`fil`|
     * |**Finnish**|`fi`|
     * |**French**|`fr`|
     * |**Fulah**|`ff`|
     * |**Galician**|`gl`|
     * |**Georgian**|`ka`|
     * |**German**|`de`|
     * |**Gujarati**|`gu`|
     * |**Haitian**|`ht`|
     * |**Hausa**|`ha`|
     * |**Hebrew**|`he`|
     * |**Hindi**|`hi`|
     * |**Hungarian**|`hu`|
     * |**Icelandic**|`is`|
     * |**Ido**|`io`|
     * |**Igbo**|`ig`|
     * |**Indonesian**|`id`|
     * |**Inuktitut**|`iu`|
     * |**Irish**|`ga`|
     * |**Italian**|`it`|
     * |**Japanese**|`ja`|
     * |**Javanese**|`jv`|
     * |**Kannada**|`kn`|
     * |**Kazakh**|`kk`|
     * |**Kinyarwanda**|`rw`|
     * |**Kirghiz**|`ky`|
     * |**Konkani (macrolanguage)**|`kok`|
     * |**Korean**|`ko`|
     * |**Lahnda**|`lah`|
     * |**Lao**|`lo`|
     * |**Latin**|`la`|
     * |**Latvian**|`lv`|
     * |**Lithuanian**|`lt`|
     * |**Lombard**|`lmo`|
     * |**Low German**|`nds`|
     * |**Luxembourgish**|`lb`|
     * |**Macedonian**|`mk`|
     * |**Malagasy**|`mg`|
     * |**Malay (macrolanguage)**|`ms`|
     * |**Malayalam**|`ml`|
     * |**Maltese**|`mt`|
     * |**Maori**|`mi`|
     * |**Marathi**|`mr`|
     * |**Minangkabau**|`min`|
     * |**Modern Greek (1453-)**|`el`|
     * |**Mongolian**|`mn`|
     * |**Nepali (macrolanguage)**|`ne`|
     * |**Norwegian**|`no`|
     * |**Norwegian Bokmål**|`nb`|
     * |**Norwegian Nynorsk**|`nn`|
     * |**Occitan (post 1500)**|`oc`|
     * |**Oriya (macrolanguage)**|`or`|
     * |**Panjabi**|`pa`|
     * |**Pedi**|`nso`|
     * |**Persian**|`fa`|
     * |**Piemontese**|`pms`|
     * |**Polish**|`pl`|
     * |**Portuguese**|`pt`|
     * |**Pushto**|`ps`|
     * |**Quechua**|`qu`|
     * |**Romanian**|`ro`|
     * |**Russian**|`ru`|
     * |**Scots**|`sco`|
     * |**Scottish Gaelic**|`gd`|
     * |**Serbian**|`sr`|
     * |**Serbo-Croatian**|`sh`|
     * |**Sicilian**|`scn`|
     * |**Sindhi**|`sd`|
     * |**Sinhala**|`si`|
     * |**Slovak**|`sk`|
     * |**Slovenian**|`sl`|
     * |**South Azerbaijani**|`azb`|
     * |**Southern Sotho**|`st`|
     * |**Spanish**|`es`|
     * |**Sundanese**|`su`|
     * |**Swahili (macrolanguage)**|`sw`|
     * |**Swedish**|`sv`|
     * |**Tagalog**|`tl`|
     * |**Tajik**|`tg`|
     * |**Tamil**|`ta`|
     * |**Tatar**|`tt`|
     * |**Telugu**|`te`|
     * |**Thai**|`th`|
     * |**Tigrinya**|`ti`|
     * |**Tswana**|`tn`|
     * |**Turkish**|`tr`|
     * |**Turkmen**|`tk`|
     * |**Uighur**|`ug`|
     * |**Ukrainian**|`uk`|
     * |**Urdu**|`ur`|
     * |**Uzbek**|`uz`|
     * |**Vietnamese**|`vi`|
     * |**Volapük**|`vo`|
     * |**Waray (Philippines)**|`war`|
     * |**Welsh**|`cy`|
     * |**Western Frisian**|`fy`|
     * |**Wolof**|`wo`|
     * |**Xhosa**|`xh`|
     * |**Yoruba**|`yo`|
     * |**Zulu**|`zu`|
     *
     * </details><details><summary>Supported Detailed Languages</summary>
     *
     *
     *
     *
     *
     * |Name|Value|
     * |----|-----|
     * |**Auto detection**|`auto-detect`|
     * |**Chinese (Traditional)**|`zh-Hant`|
     * |**Low German (Netherlands)**|`nds-NL`|
     *
     * </details>
     * @throws {@link EdenAi.BadRequestError}
     * @throws {@link EdenAi.ForbiddenError}
     * @throws {@link EdenAi.NotFoundError}
     * @throws {@link EdenAi.InternalServerError}
     */
    moderationCreate(request, requestOptions) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const _response = yield core.fetcher({
                url: (0, url_join_1.default)((_a = (yield core.Supplier.get(this._options.environment))) !== null && _a !== void 0 ? _a : environments.EdenAiEnvironment.Default, "text/moderation"),
                method: "POST",
                headers: {
                    Authorization: yield this._getAuthorizationHeader(),
                    "X-Fern-Language": "JavaScript",
                },
                contentType: "application/json",
                body: yield serializers.TexttopicExtractiontextanonymizationtextmoderationtextnamedEntityRecognitiontextkeywordExtractiontextsyntaxAnalysistextsentimentAnalysisTextAnalysisRequest.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            });
            if (_response.ok) {
                return yield serializers.TextmoderationResponseModel.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    breadcrumbsPrefix: ["response"],
                });
            }
            if (_response.error.reason === "status-code") {
                switch (_response.error.statusCode) {
                    case 400:
                        throw new EdenAi.BadRequestError(yield serializers.BadRequest.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }));
                    case 403:
                        throw new EdenAi.ForbiddenError(yield serializers.Error_.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }));
                    case 404:
                        throw new EdenAi.NotFoundError(yield serializers.NotFoundResponse.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }));
                    case 500:
                        throw new EdenAi.InternalServerError(yield serializers.Error_.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }));
                    default:
                        throw new errors.EdenAiError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.body,
                        });
                }
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.EdenAiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                    });
                case "timeout":
                    throw new errors.EdenAiTimeoutError();
                case "unknown":
                    throw new errors.EdenAiError({
                        message: _response.error.errorMessage,
                    });
            }
        });
    }
    /**
     * <details><summary><strong style='color: #0072a3; cursor: pointer'>Available Providers</strong></summary>
     *
     *
     *
     * |Name|Version|Price|Billing unit|
     * |----|-------|-----|------------|
     * |**amazon**|`boto3 (v1.15.18)`|1.0 (per 1000000 char)|300 char
     * |**google**|`v1`|1.0 (per 1000000 char)|1000 char
     * |**ibm**|`v1 (2021-08-01)`|0.3 (per 1000000 char)|10000 char
     * |**lettria**|`v5.5.2`|2.0 (per 1000000 char)|1000 char
     * |**microsoft**|`v3.1`|1.0 (per 1000000 char)|1000 char
     * |**neuralspace**|`v1`|0.007 (per 1 request)|1 request
     * |**oneai**|`v0`|2.14 (per 1000000 char)|1 char
     * |**openai**|`v3.0.0`|20.0 (per 1000000 token)|1 token
     * |**tenstorrent**|`v1.0.0`|1.0 (per 1000000 char)|1000 char
     *
     *
     * </details>
     *
     * <details><summary>Supported Languages</summary>
     *
     *
     *
     *
     *
     * |Name|Value|
     * |----|-----|
     * |**Afrikaans**|`af`|
     * |**Albanian**|`sq`|
     * |**Arabic**|`ar`|
     * |**Aragonese**|`an`|
     * |**Armenian**|`hy`|
     * |**Assamese**|`as`|
     * |**Azerbaijani**|`az`|
     * |**Bashkir**|`ba`|
     * |**Basque**|`eu`|
     * |**Belarusian**|`be`|
     * |**Bengali**|`bn`|
     * |**Bosnian**|`bs`|
     * |**Breton**|`br`|
     * |**Bulgarian**|`bg`|
     * |**Burmese**|`my`|
     * |**Catalan**|`ca`|
     * |**Chechen**|`ce`|
     * |**Chinese**|`zh`|
     * |**Chuvash**|`cv`|
     * |**Croatian**|`hr`|
     * |**Czech**|`cs`|
     * |**Danish**|`da`|
     * |**Dutch**|`nl`|
     * |**English**|`en`|
     * |**Estonian**|`et`|
     * |**Finnish**|`fi`|
     * |**French**|`fr`|
     * |**Galician**|`gl`|
     * |**Georgian**|`ka`|
     * |**German**|`de`|
     * |**Gujarati**|`gu`|
     * |**Haitian**|`ht`|
     * |**Hebrew**|`he`|
     * |**Hindi**|`hi`|
     * |**Hungarian**|`hu`|
     * |**Icelandic**|`is`|
     * |**Indonesian**|`id`|
     * |**Irish**|`ga`|
     * |**Italian**|`it`|
     * |**Japanese**|`ja`|
     * |**Javanese**|`jv`|
     * |**Kannada**|`kn`|
     * |**Kazakh**|`kk`|
     * |**Kirghiz**|`ky`|
     * |**Korean**|`ko`|
     * |**Latin**|`la`|
     * |**Latvian**|`lv`|
     * |**Lithuanian**|`lt`|
     * |**Luxembourgish**|`lb`|
     * |**Macedonian**|`mk`|
     * |**Malagasy**|`mg`|
     * |**Malay (macrolanguage)**|`ms`|
     * |**Malayalam**|`ml`|
     * |**Maltese**|`mt`|
     * |**Marathi**|`mr`|
     * |**Modern Greek (1453-)**|`el`|
     * |**Nepali (macrolanguage)**|`ne`|
     * |**Norwegian**|`no`|
     * |**Norwegian Bokmål**|`nb`|
     * |**Occitan (post 1500)**|`oc`|
     * |**Panjabi**|`pa`|
     * |**Persian**|`fa`|
     * |**Polish**|`pl`|
     * |**Portuguese**|`pt`|
     * |**Romanian**|`ro`|
     * |**Russian**|`ru`|
     * |**Serbian**|`sr`|
     * |**Slovak**|`sk`|
     * |**Slovenian**|`sl`|
     * |**Spanish**|`es`|
     * |**Sundanese**|`su`|
     * |**Swahili (macrolanguage)**|`sw`|
     * |**Swedish**|`sv`|
     * |**Tagalog**|`tl`|
     * |**Tajik**|`tg`|
     * |**Tamil**|`ta`|
     * |**Tatar**|`tt`|
     * |**Telugu**|`te`|
     * |**Turkish**|`tr`|
     * |**Uighur**|`ug`|
     * |**Ukrainian**|`uk`|
     * |**Urdu**|`ur`|
     * |**Uzbek**|`uz`|
     * |**Vietnamese**|`vi`|
     * |**Welsh**|`cy`|
     * |**Yoruba**|`yo`|
     *
     * </details><details><summary>Supported Detailed Languages</summary>
     *
     *
     *
     *
     *
     * |Name|Value|
     * |----|-----|
     * |**Auto detection**|`auto-detect`|
     * |**Chinese (Simplified)**|`zh-Hans`|
     * |**Chinese (Taiwan)**|`zh-TW`|
     * |**Chinese (Traditional)**|`zh-Hant`|
     * |**English (United States)**|`en-US`|
     * |**French (France)**|`fr-FR`|
     * |**Portuguese (Brazil)**|`pt-BR`|
     * |**Portuguese (Portugal)**|`pt-PT`|
     *
     * </details>
     * @throws {@link EdenAi.BadRequestError}
     * @throws {@link EdenAi.ForbiddenError}
     * @throws {@link EdenAi.NotFoundError}
     * @throws {@link EdenAi.InternalServerError}
     */
    namedEntityRecognitionCreate(request, requestOptions) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const _response = yield core.fetcher({
                url: (0, url_join_1.default)((_a = (yield core.Supplier.get(this._options.environment))) !== null && _a !== void 0 ? _a : environments.EdenAiEnvironment.Default, "text/named_entity_recognition"),
                method: "POST",
                headers: {
                    Authorization: yield this._getAuthorizationHeader(),
                    "X-Fern-Language": "JavaScript",
                },
                contentType: "application/json",
                body: yield serializers.TexttopicExtractiontextanonymizationtextmoderationtextnamedEntityRecognitiontextkeywordExtractiontextsyntaxAnalysistextsentimentAnalysisTextAnalysisRequest.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            });
            if (_response.ok) {
                return yield serializers.TextnamedEntityRecognitionResponseModel.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    breadcrumbsPrefix: ["response"],
                });
            }
            if (_response.error.reason === "status-code") {
                switch (_response.error.statusCode) {
                    case 400:
                        throw new EdenAi.BadRequestError(yield serializers.BadRequest.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }));
                    case 403:
                        throw new EdenAi.ForbiddenError(yield serializers.Error_.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }));
                    case 404:
                        throw new EdenAi.NotFoundError(yield serializers.NotFoundResponse.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }));
                    case 500:
                        throw new EdenAi.InternalServerError(yield serializers.Error_.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }));
                    default:
                        throw new errors.EdenAiError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.body,
                        });
                }
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.EdenAiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                    });
                case "timeout":
                    throw new errors.EdenAiTimeoutError();
                case "unknown":
                    throw new errors.EdenAiError({
                        message: _response.error.errorMessage,
                    });
            }
        });
    }
    /**
     * <details><summary><strong style='color: #0072a3; cursor: pointer'>Available Providers</strong></summary>
     *
     *
     *
     * |Name|Version|Price|Billing unit|
     * |----|-------|-----|------------|
     * |**originalityai**|`v1`|0.01 (per 400 char)|400 char
     *
     *
     * </details>
     *
     *
     * @throws {@link EdenAi.BadRequestError}
     * @throws {@link EdenAi.ForbiddenError}
     * @throws {@link EdenAi.NotFoundError}
     * @throws {@link EdenAi.InternalServerError}
     */
    plagiaDetectionCreate(request, requestOptions) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const _response = yield core.fetcher({
                url: (0, url_join_1.default)((_a = (yield core.Supplier.get(this._options.environment))) !== null && _a !== void 0 ? _a : environments.EdenAiEnvironment.Default, "text/plagia_detection"),
                method: "POST",
                headers: {
                    Authorization: yield this._getAuthorizationHeader(),
                    "X-Fern-Language": "JavaScript",
                },
                contentType: "application/json",
                body: yield serializers.TextplagiaDetectionPlagiaDetectionRequest.jsonOrThrow(request, {
                    unrecognizedObjectKeys: "strip",
                }),
                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            });
            if (_response.ok) {
                return yield serializers.TextplagiaDetectionResponseModel.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    breadcrumbsPrefix: ["response"],
                });
            }
            if (_response.error.reason === "status-code") {
                switch (_response.error.statusCode) {
                    case 400:
                        throw new EdenAi.BadRequestError(yield serializers.BadRequest.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }));
                    case 403:
                        throw new EdenAi.ForbiddenError(yield serializers.Error_.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }));
                    case 404:
                        throw new EdenAi.NotFoundError(yield serializers.NotFoundResponse.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }));
                    case 500:
                        throw new EdenAi.InternalServerError(yield serializers.Error_.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }));
                    default:
                        throw new errors.EdenAiError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.body,
                        });
                }
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.EdenAiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                    });
                case "timeout":
                    throw new errors.EdenAiTimeoutError();
                case "unknown":
                    throw new errors.EdenAiError({
                        message: _response.error.errorMessage,
                    });
            }
        });
    }
    /**
     * <details><summary><strong style='color: #0072a3; cursor: pointer'>Available Providers</strong></summary>
     *
     *
     *
     * |Name|Version|Price|Billing unit|
     * |----|-------|-----|------------|
     * |**openai**|`v3.0.0`|0.24 (per 1000 token)|1 token
     *
     *
     * </details>
     *
     *
     * @throws {@link EdenAi.BadRequestError}
     * @throws {@link EdenAi.ForbiddenError}
     * @throws {@link EdenAi.NotFoundError}
     * @throws {@link EdenAi.InternalServerError}
     */
    promptOptimizationCreate(request, requestOptions) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const _response = yield core.fetcher({
                url: (0, url_join_1.default)((_a = (yield core.Supplier.get(this._options.environment))) !== null && _a !== void 0 ? _a : environments.EdenAiEnvironment.Default, "text/prompt_optimization"),
                method: "POST",
                headers: {
                    Authorization: yield this._getAuthorizationHeader(),
                    "X-Fern-Language": "JavaScript",
                },
                contentType: "application/json",
                body: yield serializers.TextpromptOptimizationPromptOptimizationRequest.jsonOrThrow(request, {
                    unrecognizedObjectKeys: "strip",
                }),
                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            });
            if (_response.ok) {
                return yield serializers.TextpromptOptimizationResponseModel.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    breadcrumbsPrefix: ["response"],
                });
            }
            if (_response.error.reason === "status-code") {
                switch (_response.error.statusCode) {
                    case 400:
                        throw new EdenAi.BadRequestError(yield serializers.BadRequest.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }));
                    case 403:
                        throw new EdenAi.ForbiddenError(yield serializers.Error_.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }));
                    case 404:
                        throw new EdenAi.NotFoundError(yield serializers.NotFoundResponse.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }));
                    case 500:
                        throw new EdenAi.InternalServerError(yield serializers.Error_.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }));
                    default:
                        throw new errors.EdenAiError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.body,
                        });
                }
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.EdenAiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                    });
                case "timeout":
                    throw new errors.EdenAiTimeoutError();
                case "unknown":
                    throw new errors.EdenAiError({
                        message: _response.error.errorMessage,
                    });
            }
        });
    }
    /**
     * <details><summary><strong style='color: #0072a3; cursor: pointer'>Available Providers</strong></summary>
     *
     *
     *
     * |Name|Version|Price|Billing unit|
     * |----|-------|-----|------------|
     * |**huggingface**|`v1`|0.02 (per 1000 char)|1 char
     * |**openai**|`v3.0.0`|20.0 (per 1000000 token)|1 token
     * |**tenstorrent**|`v1.0.0`|10.0 (per 1000000 char)|1000 char
     *
     *
     * </details>
     *
     *
     * @throws {@link EdenAi.BadRequestError}
     * @throws {@link EdenAi.ForbiddenError}
     * @throws {@link EdenAi.NotFoundError}
     * @throws {@link EdenAi.InternalServerError}
     */
    questionAnswerCreate(request, requestOptions) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const _response = yield core.fetcher({
                url: (0, url_join_1.default)((_a = (yield core.Supplier.get(this._options.environment))) !== null && _a !== void 0 ? _a : environments.EdenAiEnvironment.Default, "text/question_answer"),
                method: "POST",
                headers: {
                    Authorization: yield this._getAuthorizationHeader(),
                    "X-Fern-Language": "JavaScript",
                },
                contentType: "application/json",
                body: yield serializers.TextquestionAnswerQuestionAnswerRequest.jsonOrThrow(request, {
                    unrecognizedObjectKeys: "strip",
                }),
                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            });
            if (_response.ok) {
                return yield serializers.TextquestionAnswerResponseModel.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    breadcrumbsPrefix: ["response"],
                });
            }
            if (_response.error.reason === "status-code") {
                switch (_response.error.statusCode) {
                    case 400:
                        throw new EdenAi.BadRequestError(yield serializers.BadRequest.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }));
                    case 403:
                        throw new EdenAi.ForbiddenError(yield serializers.Error_.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }));
                    case 404:
                        throw new EdenAi.NotFoundError(yield serializers.NotFoundResponse.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }));
                    case 500:
                        throw new EdenAi.InternalServerError(yield serializers.Error_.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }));
                    default:
                        throw new errors.EdenAiError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.body,
                        });
                }
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.EdenAiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                    });
                case "timeout":
                    throw new errors.EdenAiTimeoutError();
                case "unknown":
                    throw new errors.EdenAiError({
                        message: _response.error.errorMessage,
                    });
            }
        });
    }
    /**
     * <details><summary><strong style='color: #0072a3; cursor: pointer'>Available Providers</strong></summary>
     *
     *
     *
     * |Name|Version|Price|Billing unit|
     * |----|-------|-----|------------|
     * |**openai**|`v3.0.0`|20.0 (per 1000000 token)|1 token
     *
     *
     * </details>
     *
     *
     * @throws {@link EdenAi.BadRequestError}
     * @throws {@link EdenAi.ForbiddenError}
     * @throws {@link EdenAi.NotFoundError}
     * @throws {@link EdenAi.InternalServerError}
     */
    searchCreate(request, requestOptions) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const _response = yield core.fetcher({
                url: (0, url_join_1.default)((_a = (yield core.Supplier.get(this._options.environment))) !== null && _a !== void 0 ? _a : environments.EdenAiEnvironment.Default, "text/search"),
                method: "POST",
                headers: {
                    Authorization: yield this._getAuthorizationHeader(),
                    "X-Fern-Language": "JavaScript",
                },
                contentType: "application/json",
                body: yield serializers.TextsearchSearchRequest.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            });
            if (_response.ok) {
                return yield serializers.TextsearchResponseModel.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    breadcrumbsPrefix: ["response"],
                });
            }
            if (_response.error.reason === "status-code") {
                switch (_response.error.statusCode) {
                    case 400:
                        throw new EdenAi.BadRequestError(yield serializers.BadRequest.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }));
                    case 403:
                        throw new EdenAi.ForbiddenError(yield serializers.Error_.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }));
                    case 404:
                        throw new EdenAi.NotFoundError(yield serializers.NotFoundResponse.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }));
                    case 500:
                        throw new EdenAi.InternalServerError(yield serializers.Error_.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }));
                    default:
                        throw new errors.EdenAiError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.body,
                        });
                }
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.EdenAiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                    });
                case "timeout":
                    throw new errors.EdenAiTimeoutError();
                case "unknown":
                    throw new errors.EdenAiError({
                        message: _response.error.errorMessage,
                    });
            }
        });
    }
    /**
     * <details><summary><strong style='color: #0072a3; cursor: pointer'>Available Providers</strong></summary>
     *
     *
     *
     * |Name|Version|Price|Billing unit|
     * |----|-------|-----|------------|
     * |**amazon**|`boto3 (v1.15.18)`|1.0 (per 1000000 char)|300 char
     * |**connexun**|`v1.0`|2.0 (per 1000 request)|1 request
     * |**google**|`v1`|1.0 (per 1000000 char)|1000 char
     * |**ibm**|`v1 (2021-08-01)`|0.3 (per 1000000 char)|10000 char
     * |**lettria**|`v5.5.2`|2.0 (per 1000000 char)|1000 char
     * |**microsoft**|`v3.1`|1.0 (per 1000000 char)|1000 char
     * |**emvista**|`v1.0`|3.0 (per 1000000 char)|1000 char
     * |**oneai**|`v0`|2.14 (per 1000000 char)|1 char
     * |**openai**|`v3.0.0`|20.0 (per 1000000 token)|1 token
     * |**tenstorrent**|`v1.1.0`|0.7 (per 1000000 char)|1000 char
     * |**sapling**|`v1`|20.0 (per 1000000 char)|1000 char
     *
     *
     * </details>
     *
     * <details><summary>Supported Languages</summary>
     *
     *
     *
     *
     *
     * |Name|Value|
     * |----|-----|
     * |**Arabic**|`ar`|
     * |**Bengali**|`bn`|
     * |**Chinese**|`zh`|
     * |**Danish**|`da`|
     * |**Dutch**|`nl`|
     * |**English**|`en`|
     * |**Finnish**|`fi`|
     * |**French**|`fr`|
     * |**German**|`de`|
     * |**Hindi**|`hi`|
     * |**Indonesian**|`id`|
     * |**Italian**|`it`|
     * |**Japanese**|`ja`|
     * |**Korean**|`ko`|
     * |**Modern Greek (1453-)**|`el`|
     * |**Norwegian**|`no`|
     * |**Panjabi**|`pa`|
     * |**Polish**|`pl`|
     * |**Portuguese**|`pt`|
     * |**Romanian**|`ro`|
     * |**Russian**|`ru`|
     * |**Spanish**|`es`|
     * |**Swedish**|`sv`|
     * |**Tamil**|`ta`|
     * |**Thai**|`th`|
     * |**Turkish**|`tr`|
     * |**Ukrainian**|`uk`|
     * |**Vietnamese**|`vi`|
     *
     * </details><details><summary>Supported Detailed Languages</summary>
     *
     *
     *
     *
     *
     * |Name|Value|
     * |----|-----|
     * |**Auto detection**|`auto-detect`|
     * |**Chinese (Simplified)**|`zh-Hans`|
     * |**Chinese (Taiwan)**|`zh-TW`|
     * |**Chinese (Traditional)**|`zh-Hant`|
     * |**English (United States)**|`en-US`|
     * |**French (France)**|`fr-FR`|
     * |**Portuguese (Brazil)**|`pt-BR`|
     * |**Portuguese (Portugal)**|`pt-PT`|
     *
     * </details>
     * @throws {@link EdenAi.BadRequestError}
     * @throws {@link EdenAi.ForbiddenError}
     * @throws {@link EdenAi.NotFoundError}
     * @throws {@link EdenAi.InternalServerError}
     */
    sentimentAnalysisCreate(request, requestOptions) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const _response = yield core.fetcher({
                url: (0, url_join_1.default)((_a = (yield core.Supplier.get(this._options.environment))) !== null && _a !== void 0 ? _a : environments.EdenAiEnvironment.Default, "text/sentiment_analysis"),
                method: "POST",
                headers: {
                    Authorization: yield this._getAuthorizationHeader(),
                    "X-Fern-Language": "JavaScript",
                },
                contentType: "application/json",
                body: yield serializers.TexttopicExtractiontextanonymizationtextmoderationtextnamedEntityRecognitiontextkeywordExtractiontextsyntaxAnalysistextsentimentAnalysisTextAnalysisRequest.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            });
            if (_response.ok) {
                return yield serializers.TextsentimentAnalysisResponseModel.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    breadcrumbsPrefix: ["response"],
                });
            }
            if (_response.error.reason === "status-code") {
                switch (_response.error.statusCode) {
                    case 400:
                        throw new EdenAi.BadRequestError(yield serializers.BadRequest.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }));
                    case 403:
                        throw new EdenAi.ForbiddenError(yield serializers.Error_.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }));
                    case 404:
                        throw new EdenAi.NotFoundError(yield serializers.NotFoundResponse.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }));
                    case 500:
                        throw new EdenAi.InternalServerError(yield serializers.Error_.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }));
                    default:
                        throw new errors.EdenAiError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.body,
                        });
                }
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.EdenAiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                    });
                case "timeout":
                    throw new errors.EdenAiTimeoutError();
                case "unknown":
                    throw new errors.EdenAiError({
                        message: _response.error.errorMessage,
                    });
            }
        });
    }
    /**
     * <details><summary><strong style='color: #0072a3; cursor: pointer'>Available Providers</strong></summary>
     *
     *
     *
     * |Name|Version|Price|Billing unit|
     * |----|-------|-----|------------|
     * |**microsoft**|`v7`|0.3 (per 1000 request)|1 request
     * |**openai**|`v3.0.0`|20.0 (per 1000000 token)|1 token
     * |**prowritingaid**|`v1.0`|10.0 (per 1000 request)|1 request
     * |**cohere**|`2022-12-06`|2.5 (per 1000000 char)|1000 char
     * |**sapling**|`v1`|2.0 (per 1000000 char)|1 char
     *
     *
     * </details>
     *
     * <details><summary>Supported Languages</summary>
     *
     *
     *
     *
     *
     * |Name|Value|
     * |----|-----|
     * |**Afrikaans**|`af`|
     * |**Albanian**|`sq`|
     * |**Amharic**|`am`|
     * |**Arabic**|`ar`|
     * |**Armenian**|`hy`|
     * |**Azerbaijani**|`az`|
     * |**Basque**|`eu`|
     * |**Belarusian**|`be`|
     * |**Bengali**|`bn`|
     * |**Bosnian**|`bs`|
     * |**Bulgarian**|`bg`|
     * |**Burmese**|`my`|
     * |**Catalan**|`ca`|
     * |**Cebuano**|`ceb`|
     * |**Central Khmer**|`km`|
     * |**Chinese**|`zh`|
     * |**Corsican**|`co`|
     * |**Croatian**|`hr`|
     * |**Czech**|`cs`|
     * |**Danish**|`da`|
     * |**Dutch**|`nl`|
     * |**English**|`en`|
     * |**Esperanto**|`eo`|
     * |**Estonian**|`et`|
     * |**Finnish**|`fi`|
     * |**French**|`fr`|
     * |**Galician**|`gl`|
     * |**Georgian**|`ka`|
     * |**German**|`de`|
     * |**Gujarati**|`gu`|
     * |**Haitian**|`ht`|
     * |**Hausa**|`ha`|
     * |**Hawaiian**|`haw`|
     * |**Hebrew**|`he`|
     * |**Hindi**|`hi`|
     * |**Hmong**|`hmn`|
     * |**Hungarian**|`hu`|
     * |**Icelandic**|`is`|
     * |**Igbo**|`ig`|
     * |**Indonesian**|`id`|
     * |**Irish**|`ga`|
     * |**Italian**|`it`|
     * |**Japanese**|`ja`|
     * |**Javanese**|`jv`|
     * |**Kannada**|`kn`|
     * |**Kazakh**|`kk`|
     * |**Kinyarwanda**|`rw`|
     * |**Kirghiz**|`ky`|
     * |**Korean**|`ko`|
     * |**Kurdish**|`ku`|
     * |**Lao**|`lo`|
     * |**Latin**|`la`|
     * |**Latvian**|`lv`|
     * |**Lithuanian**|`lt`|
     * |**Luxembourgish**|`lb`|
     * |**Macedonian**|`mk`|
     * |**Malagasy**|`mg`|
     * |**Malay (macrolanguage)**|`ms`|
     * |**Malayalam**|`ml`|
     * |**Maltese**|`mt`|
     * |**Maori**|`mi`|
     * |**Marathi**|`mr`|
     * |**Modern Greek (1453-)**|`el`|
     * |**Mongolian**|`mn`|
     * |**Nepali (macrolanguage)**|`ne`|
     * |**Norwegian**|`no`|
     * |**Norwegian Bokmål**|`nb`|
     * |**Nyanja**|`ny`|
     * |**Oriya (macrolanguage)**|`or`|
     * |**Panjabi**|`pa`|
     * |**Persian**|`fa`|
     * |**Polish**|`pl`|
     * |**Portuguese**|`pt`|
     * |**Pushto**|`ps`|
     * |**Romanian**|`ro`|
     * |**Russian**|`ru`|
     * |**Samoan**|`sm`|
     * |**Scottish Gaelic**|`gd`|
     * |**Serbian**|`sr`|
     * |**Shona**|`sn`|
     * |**Sindhi**|`sd`|
     * |**Sinhala**|`si`|
     * |**Slovak**|`sk`|
     * |**Slovenian**|`sl`|
     * |**Somali**|`so`|
     * |**Southern Sotho**|`st`|
     * |**Spanish**|`es`|
     * |**Sundanese**|`su`|
     * |**Swahili (macrolanguage)**|`sw`|
     * |**Swedish**|`sv`|
     * |**Tagalog**|`tl`|
     * |**Tajik**|`tg`|
     * |**Tamil**|`ta`|
     * |**Tatar**|`tt`|
     * |**Telugu**|`te`|
     * |**Thai**|`th`|
     * |**Turkish**|`tr`|
     * |**Turkmen**|`tk`|
     * |**Uighur**|`ug`|
     * |**Ukrainian**|`uk`|
     * |**Urdu**|`ur`|
     * |**Uzbek**|`uz`|
     * |**Vietnamese**|`vi`|
     * |**Welsh**|`cy`|
     * |**Western Frisian**|`fy`|
     * |**Xhosa**|`xh`|
     * |**Yiddish**|`yi`|
     * |**Yoruba**|`yo`|
     * |**Zulu**|`zu`|
     * |**jp**|`jp`|
     *
     * </details><details><summary>Supported Detailed Languages</summary>
     *
     *
     *
     *
     *
     * |Name|Value|
     * |----|-----|
     * |**Auto detection**|`auto-detect`|
     * |**Chinese (China)**|`zh-CN`|
     * |**Chinese (Simplified)**|`zh-hans`|
     * |**Chinese (Taiwan)**|`zh-TW`|
     * |**Chinese (Traditional)**|`zh-hant`|
     * |**English (United Kingdom)**|`en-gb`|
     * |**Portuguese (Brazil)**|`pt-br`|
     * |**Portuguese (Portugal)**|`pt-pt`|
     *
     * </details>
     * @throws {@link EdenAi.BadRequestError}
     * @throws {@link EdenAi.ForbiddenError}
     * @throws {@link EdenAi.NotFoundError}
     * @throws {@link EdenAi.InternalServerError}
     */
    spellCheckCreate(request, requestOptions) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const _response = yield core.fetcher({
                url: (0, url_join_1.default)((_a = (yield core.Supplier.get(this._options.environment))) !== null && _a !== void 0 ? _a : environments.EdenAiEnvironment.Default, "text/spell_check"),
                method: "POST",
                headers: {
                    Authorization: yield this._getAuthorizationHeader(),
                    "X-Fern-Language": "JavaScript",
                },
                contentType: "application/json",
                body: yield serializers.TextspellCheckSpellCheckRequest.jsonOrThrow(request, {
                    unrecognizedObjectKeys: "strip",
                }),
                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            });
            if (_response.ok) {
                return yield serializers.TextspellCheckResponseModel.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    breadcrumbsPrefix: ["response"],
                });
            }
            if (_response.error.reason === "status-code") {
                switch (_response.error.statusCode) {
                    case 400:
                        throw new EdenAi.BadRequestError(yield serializers.BadRequest.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }));
                    case 403:
                        throw new EdenAi.ForbiddenError(yield serializers.Error_.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }));
                    case 404:
                        throw new EdenAi.NotFoundError(yield serializers.NotFoundResponse.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }));
                    case 500:
                        throw new EdenAi.InternalServerError(yield serializers.Error_.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }));
                    default:
                        throw new errors.EdenAiError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.body,
                        });
                }
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.EdenAiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                    });
                case "timeout":
                    throw new errors.EdenAiTimeoutError();
                case "unknown":
                    throw new errors.EdenAiError({
                        message: _response.error.errorMessage,
                    });
            }
        });
    }
    /**
     * <details><summary><strong style='color: #0072a3; cursor: pointer'>Available Providers</strong></summary>
     *
     *
     *
     * |Name|Version|Price|Billing unit|
     * |----|-------|-----|------------|
     * |**connexun**|`v1.0`|2.0 (per 1000 request)|1 request
     * |**microsoft**|`v3.1`|2.0 (per 1000000 char)|1000 char
     * |**openai**|`v3.0.0`|20.0 (per 1000000 token)|1 token
     * |**openai - text-ada-001**|`v3.0.0`|0.4 (per 1000000 token)|1 token
     * |**openai - text-babbage-001**|`v3.0.0`|0.5 (per 1000000 token)|1 token
     * |**openai - text-curie-001**|`v3.0.0`|2.0 (per 1000000 token)|1 token
     * |**openai - text-davinci-002**|`v3.0.0`|20.0 (per 1000000 token)|1 token
     * |**openai - text-davinci-003**|`v3.0.0`|20.0 (per 1000000 token)|1 token
     * |**emvista**|`v1.0`|1.0 (per 1000000 char)|1000 char
     * |**oneai**|`v0`|2.14 (per 1000000 char)|1 char
     * |**cohere**|`2022-12-06`|5.0 (per 2000000 char)|2000 char
     *
     *
     * </details>
     *
     * <details><summary>Supported Languages</summary>
     *
     *
     *
     *
     *
     * |Name|Value|
     * |----|-----|
     * |**Abkhazian**|`ab`|
     * |**Acoli**|`ach`|
     * |**Afar**|`aa`|
     * |**Afrikaans**|`af`|
     * |**Akan**|`ak`|
     * |**Albanian**|`sq`|
     * |**American Sign Language**|`ase`|
     * |**Amharic**|`am`|
     * |**Arabic**|`ar`|
     * |**Aragonese**|`an`|
     * |**Argentine Sign Language**|`aed`|
     * |**Armenian**|`hy`|
     * |**Assamese**|`as`|
     * |**Avaric**|`av`|
     * |**Avestan**|`ae`|
     * |**Aymara**|`ay`|
     * |**Azerbaijani**|`az`|
     * |**Bambara**|`bm`|
     * |**Bashkir**|`ba`|
     * |**Basque**|`eu`|
     * |**Belarusian**|`be`|
     * |**Bemba (Zambia)**|`bem`|
     * |**Bengali**|`bn`|
     * |**Berber languages**|`ber`|
     * |**Bihari languages**|`bh`|
     * |**Bislama**|`bi`|
     * |**Bosnian**|`bs`|
     * |**Brazilian Sign Language**|`bzs`|
     * |**Breton**|`br`|
     * |**Bulgarian**|`bg`|
     * |**Burmese**|`my`|
     * |**Catalan**|`ca`|
     * |**Cebuano**|`ceb`|
     * |**Celtic languages**|`cel`|
     * |**Central Bikol**|`bcl`|
     * |**Central Khmer**|`km`|
     * |**Chamorro**|`ch`|
     * |**Chechen**|`ce`|
     * |**Chilean Sign Language**|`csg`|
     * |**Chinese**|`zh`|
     * |**Church Slavic**|`cu`|
     * |**Chuukese**|`chk`|
     * |**Chuvash**|`cv`|
     * |**Colombian Sign Language**|`csn`|
     * |**Congo Swahili**|`swc`|
     * |**Cornish**|`kw`|
     * |**Corsican**|`co`|
     * |**Cree**|`cr`|
     * |**Croatian**|`hr`|
     * |**Czech**|`cs`|
     * |**Danish**|`da`|
     * |**Dhivehi**|`dv`|
     * |**Dutch**|`nl`|
     * |**Dzongkha**|`dz`|
     * |**Efik**|`efi`|
     * |**English**|`en`|
     * |**Esperanto**|`eo`|
     * |**Estonian**|`et`|
     * |**Ewe**|`ee`|
     * |**Faroese**|`fo`|
     * |**Fijian**|`fj`|
     * |**Finnish**|`fi`|
     * |**Finnish Sign Language**|`fse`|
     * |**Fon**|`fon`|
     * |**French**|`fr`|
     * |**Fulah**|`ff`|
     * |**Ga**|`gaa`|
     * |**Galician**|`gl`|
     * |**Ganda**|`lg`|
     * |**Georgian**|`ka`|
     * |**German**|`de`|
     * |**Gilbertese**|`gil`|
     * |**Guarani**|`gn`|
     * |**Gujarati**|`gu`|
     * |**Gun**|`guw`|
     * |**Haitian**|`ht`|
     * |**Hausa**|`ha`|
     * |**Hebrew**|`he`|
     * |**Herero**|`hz`|
     * |**Hiligaynon**|`hil`|
     * |**Hindi**|`hi`|
     * |**Hiri Motu**|`ho`|
     * |**Hungarian**|`hu`|
     * |**Icelandic**|`is`|
     * |**Ido**|`io`|
     * |**Igbo**|`ig`|
     * |**Iloko**|`ilo`|
     * |**Indonesian**|`id`|
     * |**Interlingua (International Auxiliary Language Association)**|`ia`|
     * |**Interlingue**|`ie`|
     * |**Inuktitut**|`iu`|
     * |**Inupiaq**|`ik`|
     * |**Irish**|`ga`|
     * |**Isoko**|`iso`|
     * |**Isthmus Zapotec**|`zai`|
     * |**Italian**|`it`|
     * |**Japanese**|`ja`|
     * |**Javanese**|`jv`|
     * |**Kabyle**|`kab`|
     * |**Kalaallisut**|`kl`|
     * |**Kannada**|`kn`|
     * |**Kanuri**|`kr`|
     * |**Kaonde**|`kqn`|
     * |**Kashmiri**|`ks`|
     * |**Kazakh**|`kk`|
     * |**Kikuyu**|`ki`|
     * |**Kinyarwanda**|`rw`|
     * |**Kirghiz**|`ky`|
     * |**Komi**|`kv`|
     * |**Kongo**|`kg`|
     * |**Korean**|`ko`|
     * |**Kuanyama**|`kj`|
     * |**Kurdish**|`ku`|
     * |**Kwangali**|`kwn`|
     * |**Lao**|`lo`|
     * |**Latin**|`la`|
     * |**Latvian**|`lv`|
     * |**Limburgan**|`li`|
     * |**Lingala**|`ln`|
     * |**Lithuanian**|`lt`|
     * |**Lozi**|`loz`|
     * |**Luba-Katanga**|`lu`|
     * |**Luba-Lulua**|`lua`|
     * |**Lunda**|`lun`|
     * |**Luo (Kenya and Tanzania)**|`luo`|
     * |**Lushai**|`lus`|
     * |**Luvale**|`lue`|
     * |**Luxembourgish**|`lb`|
     * |**Macedonian**|`mk`|
     * |**Malagasy**|`mg`|
     * |**Malay (macrolanguage)**|`ms`|
     * |**Malayalam**|`ml`|
     * |**Maltese**|`mt`|
     * |**Manx**|`gv`|
     * |**Maori**|`mi`|
     * |**Marathi**|`mr`|
     * |**Marshallese**|`mh`|
     * |**Mexican Sign Language**|`mfs`|
     * |**Modern Greek (1453-)**|`el`|
     * |**Mongolian**|`mn`|
     * |**Morisyen**|`mfe`|
     * |**Mossi**|`mos`|
     * |**Nauru**|`na`|
     * |**Navajo**|`nv`|
     * |**Ndonga**|`ng`|
     * |**Nepali (macrolanguage)**|`ne`|
     * |**Niuean**|`niu`|
     * |**North Ndebele**|`nd`|
     * |**Northern Sami**|`se`|
     * |**Norwegian**|`no`|
     * |**Norwegian Bokmål**|`nb`|
     * |**Norwegian Nynorsk**|`nn`|
     * |**Nyaneka**|`nyk`|
     * |**Nyanja**|`ny`|
     * |**Occitan (post 1500)**|`oc`|
     * |**Ojibwa**|`oj`|
     * |**Oriya (macrolanguage)**|`or`|
     * |**Oromo**|`om`|
     * |**Ossetian**|`os`|
     * |**Pali**|`pi`|
     * |**Pangasinan**|`pag`|
     * |**Panjabi**|`pa`|
     * |**Papiamento**|`pap`|
     * |**Pedi**|`nso`|
     * |**Persian**|`fa`|
     * |**Peruvian Sign Language**|`prl`|
     * |**Pijin**|`pis`|
     * |**Pohnpeian**|`pon`|
     * |**Polish**|`pl`|
     * |**Portuguese**|`pt`|
     * |**Pushto**|`ps`|
     * |**Quechua**|`qu`|
     * |**Romance languages**|`roa`|
     * |**Romanian**|`ro`|
     * |**Romansh**|`rm`|
     * |**Rundi**|`rn`|
     * |**Russian**|`ru`|
     * |**Ruund**|`rnd`|
     * |**Samoan**|`sm`|
     * |**San Salvador Kongo**|`kwy`|
     * |**Sango**|`sg`|
     * |**Sanskrit**|`sa`|
     * |**Sardinian**|`sc`|
     * |**Scottish Gaelic**|`gd`|
     * |**Serbian**|`sr`|
     * |**Seselwa Creole French**|`crs`|
     * |**Shona**|`sn`|
     * |**Sichuan Yi**|`ii`|
     * |**Sindhi**|`sd`|
     * |**Sinhala**|`si`|
     * |**Slovak**|`sk`|
     * |**Slovenian**|`sl`|
     * |**Somali**|`so`|
     * |**South Ndebele**|`nr`|
     * |**Southern Sotho**|`st`|
     * |**Spanish**|`es`|
     * |**Spanish Sign Language**|`ssp`|
     * |**Sranan Tongo**|`srn`|
     * |**Sundanese**|`su`|
     * |**Swahili (macrolanguage)**|`sw`|
     * |**Swati**|`ss`|
     * |**Swedish**|`sv`|
     * |**Tagalog**|`tl`|
     * |**Tahitian**|`ty`|
     * |**Tajik**|`tg`|
     * |**Tamil**|`ta`|
     * |**Tatar**|`tt`|
     * |**Telugu**|`te`|
     * |**Tetela**|`tll`|
     * |**Tetun Dili**|`tdt`|
     * |**Thai**|`th`|
     * |**Tibetan**|`bo`|
     * |**Tigrinya**|`ti`|
     * |**Tiv**|`tiv`|
     * |**Tok Pisin**|`tpi`|
     * |**Tonga (Tonga Islands)**|`to`|
     * |**Tonga (Zambia)**|`toi`|
     * |**Tsonga**|`ts`|
     * |**Tswana**|`tn`|
     * |**Tumbuka**|`tum`|
     * |**Turkish**|`tr`|
     * |**Turkmen**|`tk`|
     * |**Tuvalu**|`tvl`|
     * |**Twi**|`tw`|
     * |**Tzotzil**|`tzo`|
     * |**Uighur**|`ug`|
     * |**Ukrainian**|`uk`|
     * |**Umbundu**|`umb`|
     * |**Urdu**|`ur`|
     * |**Uzbek**|`uz`|
     * |**Venda**|`ve`|
     * |**Venezuelan Sign Language**|`vsl`|
     * |**Vietnamese**|`vi`|
     * |**Volapük**|`vo`|
     * |**Wallisian**|`wls`|
     * |**Walloon**|`wa`|
     * |**Waray (Philippines)**|`war`|
     * |**Welsh**|`cy`|
     * |**Western Frisian**|`fy`|
     * |**Wolaytta**|`wal`|
     * |**Wolof**|`wo`|
     * |**Xhosa**|`xh`|
     * |**Yapese**|`yap`|
     * |**Yiddish**|`yi`|
     * |**Yoruba**|`yo`|
     * |**Yucateco**|`yua`|
     * |**Yue Chinese**|`yue`|
     * |**Zande (individual language)**|`zne`|
     * |**Zhuang**|`za`|
     * |**Zulu**|`zu`|
     *
     * </details><details><summary>Supported Detailed Languages</summary>
     *
     *
     *
     *
     *
     * |Name|Value|
     * |----|-----|
     * |**Auto detection**|`auto-detect`|
     * |**Chinese (Simplified)**|`zh-Hans`|
     * |**Portuguese (Brazil)**|`pt-BR`|
     * |**Portuguese (Brazil)**|`pt-br`|
     * |**Portuguese (Portugal)**|`pt-PT`|
     * |**Portuguese (Portugal)**|`pt-pt`|
     *
     * </details>
     * @throws {@link EdenAi.BadRequestError}
     * @throws {@link EdenAi.ForbiddenError}
     * @throws {@link EdenAi.NotFoundError}
     * @throws {@link EdenAi.InternalServerError}
     */
    summarizeCreate(request, requestOptions) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const _response = yield core.fetcher({
                url: (0, url_join_1.default)((_a = (yield core.Supplier.get(this._options.environment))) !== null && _a !== void 0 ? _a : environments.EdenAiEnvironment.Default, "text/summarize"),
                method: "POST",
                headers: {
                    Authorization: yield this._getAuthorizationHeader(),
                    "X-Fern-Language": "JavaScript",
                },
                contentType: "application/json",
                body: yield serializers.TextsummarizeSummarizeRequest.jsonOrThrow(request, {
                    unrecognizedObjectKeys: "strip",
                }),
                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            });
            if (_response.ok) {
                return yield serializers.TextsummarizeResponseModel.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    breadcrumbsPrefix: ["response"],
                });
            }
            if (_response.error.reason === "status-code") {
                switch (_response.error.statusCode) {
                    case 400:
                        throw new EdenAi.BadRequestError(yield serializers.BadRequest.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }));
                    case 403:
                        throw new EdenAi.ForbiddenError(yield serializers.Error_.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }));
                    case 404:
                        throw new EdenAi.NotFoundError(yield serializers.NotFoundResponse.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }));
                    case 500:
                        throw new EdenAi.InternalServerError(yield serializers.Error_.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }));
                    default:
                        throw new errors.EdenAiError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.body,
                        });
                }
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.EdenAiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                    });
                case "timeout":
                    throw new errors.EdenAiTimeoutError();
                case "unknown":
                    throw new errors.EdenAiError({
                        message: _response.error.errorMessage,
                    });
            }
        });
    }
    /**
     * <details><summary><strong style='color: #0072a3; cursor: pointer'>Available Providers</strong></summary>
     *
     *
     *
     * |Name|Version|Price|Billing unit|
     * |----|-------|-----|------------|
     * |**amazon**|`boto3 (v1.15.18)`|0.5 (per 1000000 char)|300 char
     * |**google**|`v1`|0.5 (per 1000000 char)|1000 char
     * |**ibm**|`v1 (2021-08-01)`|0.3 (per 1000000 char)|10000 char
     * |**lettria**|`v5.5.2`|2.0 (per 1000000 char)|1000 char
     * |**emvista**|`v1.0`|1.0 (per 1000000 char)|1 char
     *
     *
     * </details>
     *
     * <details><summary>Supported Languages</summary>
     *
     *
     *
     *
     *
     * |Name|Value|
     * |----|-----|
     * |**Arabic**|`ar`|
     * |**Chinese**|`zh`|
     * |**Czech**|`cs`|
     * |**Danish**|`da`|
     * |**Dutch**|`nl`|
     * |**English**|`en`|
     * |**Finnish**|`fi`|
     * |**French**|`fr`|
     * |**German**|`de`|
     * |**Hebrew**|`he`|
     * |**Hindi**|`hi`|
     * |**Italian**|`it`|
     * |**Japanese**|`ja`|
     * |**Korean**|`ko`|
     * |**Norwegian**|`no`|
     * |**Polish**|`pl`|
     * |**Portuguese**|`pt`|
     * |**Romanian**|`ro`|
     * |**Russian**|`ru`|
     * |**Slovak**|`sk`|
     * |**Spanish**|`es`|
     * |**Swedish**|`sv`|
     * |**Turkish**|`tr`|
     *
     * </details><details><summary>Supported Detailed Languages</summary>
     *
     *
     *
     *
     *
     * |Name|Value|
     * |----|-----|
     * |**Auto detection**|`auto-detect`|
     * |**Chinese (Taiwan)**|`zh-TW`|
     * |**Chinese (Traditional)**|`zh-Hant`|
     * |**English (United States)**|`en-US`|
     * |**French (France)**|`fr-FR`|
     *
     * </details>
     * @throws {@link EdenAi.BadRequestError}
     * @throws {@link EdenAi.ForbiddenError}
     * @throws {@link EdenAi.NotFoundError}
     * @throws {@link EdenAi.InternalServerError}
     */
    syntaxAnalysisCreate(request, requestOptions) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const _response = yield core.fetcher({
                url: (0, url_join_1.default)((_a = (yield core.Supplier.get(this._options.environment))) !== null && _a !== void 0 ? _a : environments.EdenAiEnvironment.Default, "text/syntax_analysis"),
                method: "POST",
                headers: {
                    Authorization: yield this._getAuthorizationHeader(),
                    "X-Fern-Language": "JavaScript",
                },
                contentType: "application/json",
                body: yield serializers.TexttopicExtractiontextanonymizationtextmoderationtextnamedEntityRecognitiontextkeywordExtractiontextsyntaxAnalysistextsentimentAnalysisTextAnalysisRequest.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            });
            if (_response.ok) {
                return yield serializers.TextsyntaxAnalysisResponseModel.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    breadcrumbsPrefix: ["response"],
                });
            }
            if (_response.error.reason === "status-code") {
                switch (_response.error.statusCode) {
                    case 400:
                        throw new EdenAi.BadRequestError(yield serializers.BadRequest.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }));
                    case 403:
                        throw new EdenAi.ForbiddenError(yield serializers.Error_.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }));
                    case 404:
                        throw new EdenAi.NotFoundError(yield serializers.NotFoundResponse.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }));
                    case 500:
                        throw new EdenAi.InternalServerError(yield serializers.Error_.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }));
                    default:
                        throw new errors.EdenAiError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.body,
                        });
                }
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.EdenAiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                    });
                case "timeout":
                    throw new errors.EdenAiTimeoutError();
                case "unknown":
                    throw new errors.EdenAiError({
                        message: _response.error.errorMessage,
                    });
            }
        });
    }
    /**
     * <details><summary><strong style='color: #0072a3; cursor: pointer'>Available Providers</strong></summary>
     *
     *
     *
     * |Name|Version|Price|Billing unit|
     * |----|-------|-----|------------|
     * |**google**|`v1`|2.0 (per 1000000 char)|1000 char
     * |**ibm**|`v1 (2021-08-01)`|0.3 (per 1000000 char)|10000 char
     * |**openai**|`v1`|20.0 (per 1000000 token)|1 token
     * |**tenstorrent**|`v1.0.0`|2.0 (per 1000000 char)|1000 char
     *
     *
     * </details>
     *
     * <details><summary>Supported Languages</summary>
     *
     *
     *
     *
     *
     * |Name|Value|
     * |----|-----|
     * |**Arabic**|`ar`|
     * |**Chinese**|`zh`|
     * |**Dutch**|`nl`|
     * |**English**|`en`|
     * |**French**|`fr`|
     * |**German**|`de`|
     * |**Italian**|`it`|
     * |**Japanese**|`ja`|
     * |**Korean**|`ko`|
     * |**Portuguese**|`pt`|
     * |**Russian**|`ru`|
     * |**Spanish**|`es`|
     *
     * </details><details><summary>Supported Detailed Languages</summary>
     *
     *
     *
     *
     *
     * |Name|Value|
     * |----|-----|
     * |**Auto detection**|`auto-detect`|
     *
     * </details>
     * @throws {@link EdenAi.BadRequestError}
     * @throws {@link EdenAi.ForbiddenError}
     * @throws {@link EdenAi.NotFoundError}
     * @throws {@link EdenAi.InternalServerError}
     */
    topicExtractionCreate(request, requestOptions) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const _response = yield core.fetcher({
                url: (0, url_join_1.default)((_a = (yield core.Supplier.get(this._options.environment))) !== null && _a !== void 0 ? _a : environments.EdenAiEnvironment.Default, "text/topic_extraction"),
                method: "POST",
                headers: {
                    Authorization: yield this._getAuthorizationHeader(),
                    "X-Fern-Language": "JavaScript",
                },
                contentType: "application/json",
                body: yield serializers.TexttopicExtractiontextanonymizationtextmoderationtextnamedEntityRecognitiontextkeywordExtractiontextsyntaxAnalysistextsentimentAnalysisTextAnalysisRequest.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            });
            if (_response.ok) {
                return yield serializers.TexttopicExtractionResponseModel.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    breadcrumbsPrefix: ["response"],
                });
            }
            if (_response.error.reason === "status-code") {
                switch (_response.error.statusCode) {
                    case 400:
                        throw new EdenAi.BadRequestError(yield serializers.BadRequest.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }));
                    case 403:
                        throw new EdenAi.ForbiddenError(yield serializers.Error_.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }));
                    case 404:
                        throw new EdenAi.NotFoundError(yield serializers.NotFoundResponse.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }));
                    case 500:
                        throw new EdenAi.InternalServerError(yield serializers.Error_.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }));
                    default:
                        throw new errors.EdenAiError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.body,
                        });
                }
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.EdenAiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                    });
                case "timeout":
                    throw new errors.EdenAiTimeoutError();
                case "unknown":
                    throw new errors.EdenAiError({
                        message: _response.error.errorMessage,
                    });
            }
        });
    }
    _getAuthorizationHeader() {
        return __awaiter(this, void 0, void 0, function* () {
            const bearer = yield core.Supplier.get(this._options.token);
            if (bearer != null) {
                return `Bearer ${bearer}`;
            }
            return undefined;
        });
    }
}
exports.Text = Text;
