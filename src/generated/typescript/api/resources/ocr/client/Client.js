"use strict";
/**
 * This file was auto-generated by Fern from our API Definition.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Ocr = void 0;
const environments = __importStar(require("../../../../environments"));
const core = __importStar(require("../../../../core"));
const EdenAi = __importStar(require("../../.."));
const form_data_1 = __importDefault(require("form-data"));
const url_join_1 = __importDefault(require("url-join"));
const serializers = __importStar(require("../../../../serialization"));
const errors = __importStar(require("../../../../errors"));
const url_search_params_1 = __importDefault(require("@ungap/url-search-params"));
class Ocr {
    constructor(_options) {
        this._options = _options;
    }
    /**
     * <details><summary><strong style='color: #0072a3; cursor: pointer'>Available Providers</strong></summary>
     *
     *
     *
     * |Name|Version|Price|Billing unit|
     * |----|-------|-----|------------|
     * |**base64**|`latest`|0.25 (per 1 page)|1 page
     * |**veryfi**|`v8`|0.16 (per 1 request)|1 request
     *
     *
     * </details>
     *
     *
     * @throws {@link EdenAi.BadRequestError}
     * @throws {@link EdenAi.ForbiddenError}
     * @throws {@link EdenAi.NotFoundError}
     * @throws {@link EdenAi.InternalServerError}
     */
    bankCheckParsingCreate(file, request, requestOptions) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const _request = new form_data_1.default();
            _request.append("providers", request.providers);
            _request.append("fallback_providers", request.fallbackProviders);
            _request.append("response_as_dict", request.responseAsDict.toString());
            _request.append("attributes_as_list", request.attributesAsList.toString());
            _request.append("show_original_response", request.showOriginalResponse.toString());
            _request.append("file", file);
            if (request.fileUrl != null) {
                _request.append("file_url", request.fileUrl);
            }
            const _response = yield core.fetcher({
                url: (0, url_join_1.default)((_a = (yield core.Supplier.get(this._options.environment))) !== null && _a !== void 0 ? _a : environments.EdenAiEnvironment.Default, "ocr/bank_check_parsing"),
                method: "POST",
                headers: {
                    Authorization: yield this._getAuthorizationHeader(),
                    "X-Fern-Language": "JavaScript",
                    "Content-Length": (yield core.getFormDataContentLength(_request)).toString(),
                },
                contentType: "multipart/form-data; boundary=" + _request.getBoundary(),
                body: _request,
                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            });
            if (_response.ok) {
                return yield serializers.OcrbankCheckParsingResponseModel.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    breadcrumbsPrefix: ["response"],
                });
            }
            if (_response.error.reason === "status-code") {
                switch (_response.error.statusCode) {
                    case 400:
                        throw new EdenAi.BadRequestError(yield serializers.BadRequest.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }));
                    case 403:
                        throw new EdenAi.ForbiddenError(yield serializers.Error_.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }));
                    case 404:
                        throw new EdenAi.NotFoundError(yield serializers.NotFoundResponse.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }));
                    case 500:
                        throw new EdenAi.InternalServerError(yield serializers.Error_.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }));
                    default:
                        throw new errors.EdenAiError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.body,
                        });
                }
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.EdenAiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                    });
                case "timeout":
                    throw new errors.EdenAiTimeoutError();
                case "unknown":
                    throw new errors.EdenAiError({
                        message: _response.error.errorMessage,
                    });
            }
        });
    }
    /**
     * Get a list of all jobs launched for this feature. You'll then be able to use the ID of each one to get its status and results.<br>
     *                         Please note that a **job status doesn't get updated until a get request** is sent.
     */
    customDocumentParsingAsyncRetrieve(requestOptions) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const _response = yield core.fetcher({
                url: (0, url_join_1.default)((_a = (yield core.Supplier.get(this._options.environment))) !== null && _a !== void 0 ? _a : environments.EdenAiEnvironment.Default, "ocr/custom_document_parsing_async"),
                method: "GET",
                headers: {
                    Authorization: yield this._getAuthorizationHeader(),
                    "X-Fern-Language": "JavaScript",
                },
                contentType: "application/json",
                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            });
            if (_response.ok) {
                return yield serializers.ListAsyncJobResponse.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    breadcrumbsPrefix: ["response"],
                });
            }
            if (_response.error.reason === "status-code") {
                throw new errors.EdenAiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.body,
                });
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.EdenAiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                    });
                case "timeout":
                    throw new errors.EdenAiTimeoutError();
                case "unknown":
                    throw new errors.EdenAiError({
                        message: _response.error.errorMessage,
                    });
            }
        });
    }
    /**
     * <details><summary><strong style='color: #0072a3; cursor: pointer'>Available Providers</strong></summary>
     *
     *
     *
     * |Name|Version|Price|Billing unit|
     * |----|-------|-----|------------|
     * |**amazon**|`boto3 1.26.8`|15.0 (per 1000 page)|1 page
     *
     *
     * </details>
     *
     * <details><summary>Supported Languages</summary>
     *
     *
     *
     *
     *
     * |Name|Value|
     * |----|-----|
     * |**English**|`en`|
     * |**French**|`fr`|
     * |**German**|`de`|
     * |**Italian**|`it`|
     * |**Portuguese**|`pt`|
     * |**Spanish**|`es`|
     *
     * </details>
     */
    customDocumentParsingAsyncCreate(file, request, requestOptions) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const _request = new form_data_1.default();
            _request.append("providers", request.providers);
            _request.append("fallback_providers", request.fallbackProviders);
            _request.append("show_original_response", request.showOriginalResponse.toString());
            _request.append("webhook_receiver", request.webhookReceiver);
            _request.append("users_webhook_parameters", JSON.stringify(request.usersWebhookParameters));
            _request.append("file", file);
            if (request.fileUrl != null) {
                _request.append("file_url", request.fileUrl);
            }
            _request.append("queries", request.queries);
            const _response = yield core.fetcher({
                url: (0, url_join_1.default)((_a = (yield core.Supplier.get(this._options.environment))) !== null && _a !== void 0 ? _a : environments.EdenAiEnvironment.Default, "ocr/custom_document_parsing_async"),
                method: "POST",
                headers: {
                    Authorization: yield this._getAuthorizationHeader(),
                    "X-Fern-Language": "JavaScript",
                    "Content-Length": (yield core.getFormDataContentLength(_request)).toString(),
                },
                contentType: "multipart/form-data; boundary=" + _request.getBoundary(),
                body: _request,
                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            });
            if (_response.ok) {
                return yield serializers.LaunchAsyncJobResponse.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    breadcrumbsPrefix: ["response"],
                });
            }
            if (_response.error.reason === "status-code") {
                throw new errors.EdenAiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.body,
                });
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.EdenAiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                    });
                case "timeout":
                    throw new errors.EdenAiTimeoutError();
                case "unknown":
                    throw new errors.EdenAiError({
                        message: _response.error.errorMessage,
                    });
            }
        });
    }
    /**
     * Get the status and results of an async job given its ID.
     * @throws {@link EdenAi.BadRequestError}
     * @throws {@link EdenAi.ForbiddenError}
     * @throws {@link EdenAi.NotFoundError}
     * @throws {@link EdenAi.InternalServerError}
     */
    customDocumentParsingAsyncRetrieve2(publicId, request = {}, requestOptions) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const { responseAsDict, showOriginalResponse } = request;
            const _queryParams = new url_search_params_1.default();
            if (responseAsDict != null) {
                _queryParams.append("response_as_dict", responseAsDict.toString());
            }
            if (showOriginalResponse != null) {
                _queryParams.append("show_original_response", showOriginalResponse.toString());
            }
            const _response = yield core.fetcher({
                url: (0, url_join_1.default)((_a = (yield core.Supplier.get(this._options.environment))) !== null && _a !== void 0 ? _a : environments.EdenAiEnvironment.Default, `ocr/custom_document_parsing_async/${publicId}`),
                method: "GET",
                headers: {
                    Authorization: yield this._getAuthorizationHeader(),
                    "X-Fern-Language": "JavaScript",
                },
                contentType: "application/json",
                queryParameters: _queryParams,
                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            });
            if (_response.ok) {
                return yield serializers.AsyncocrcustomDocumentParsingAsyncResponseModel.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    breadcrumbsPrefix: ["response"],
                });
            }
            if (_response.error.reason === "status-code") {
                switch (_response.error.statusCode) {
                    case 400:
                        throw new EdenAi.BadRequestError(yield serializers.BadRequest.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }));
                    case 403:
                        throw new EdenAi.ForbiddenError(yield serializers.Error_.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }));
                    case 404:
                        throw new EdenAi.NotFoundError(yield serializers.NotFoundResponse.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }));
                    case 500:
                        throw new EdenAi.InternalServerError(yield serializers.Error_.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }));
                    default:
                        throw new errors.EdenAiError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.body,
                        });
                }
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.EdenAiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                    });
                case "timeout":
                    throw new errors.EdenAiTimeoutError();
                case "unknown":
                    throw new errors.EdenAiError({
                        message: _response.error.errorMessage,
                    });
            }
        });
    }
    /**
     * <details><summary><strong style='color: #0072a3; cursor: pointer'>Available Providers</strong></summary>
     *
     *
     *
     * |Name|Version|Price|Billing unit|
     * |----|-------|-----|------------|
     * |**amazon**|`boto3 (v1.15.18)`|0.05 (per 1 page)|1 page
     * |**base64**|`latest`|0.25 (per 1 page)|1 page
     *
     *
     * </details>
     *
     *
     * @throws {@link EdenAi.BadRequestError}
     * @throws {@link EdenAi.ForbiddenError}
     * @throws {@link EdenAi.NotFoundError}
     * @throws {@link EdenAi.InternalServerError}
     */
    dataExtractionCreate(file, request, requestOptions) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const _request = new form_data_1.default();
            _request.append("providers", request.providers);
            _request.append("fallback_providers", request.fallbackProviders);
            _request.append("response_as_dict", request.responseAsDict.toString());
            _request.append("attributes_as_list", request.attributesAsList.toString());
            _request.append("show_original_response", request.showOriginalResponse.toString());
            _request.append("file", file);
            if (request.fileUrl != null) {
                _request.append("file_url", request.fileUrl);
            }
            const _response = yield core.fetcher({
                url: (0, url_join_1.default)((_a = (yield core.Supplier.get(this._options.environment))) !== null && _a !== void 0 ? _a : environments.EdenAiEnvironment.Default, "ocr/data_extraction"),
                method: "POST",
                headers: {
                    Authorization: yield this._getAuthorizationHeader(),
                    "X-Fern-Language": "JavaScript",
                    "Content-Length": (yield core.getFormDataContentLength(_request)).toString(),
                },
                contentType: "multipart/form-data; boundary=" + _request.getBoundary(),
                body: _request,
                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            });
            if (_response.ok) {
                return yield serializers.OcrdataExtractionResponseModel.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    breadcrumbsPrefix: ["response"],
                });
            }
            if (_response.error.reason === "status-code") {
                switch (_response.error.statusCode) {
                    case 400:
                        throw new EdenAi.BadRequestError(yield serializers.BadRequest.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }));
                    case 403:
                        throw new EdenAi.ForbiddenError(yield serializers.Error_.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }));
                    case 404:
                        throw new EdenAi.NotFoundError(yield serializers.NotFoundResponse.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }));
                    case 500:
                        throw new EdenAi.InternalServerError(yield serializers.Error_.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }));
                    default:
                        throw new errors.EdenAiError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.body,
                        });
                }
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.EdenAiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                    });
                case "timeout":
                    throw new errors.EdenAiTimeoutError();
                case "unknown":
                    throw new errors.EdenAiError({
                        message: _response.error.errorMessage,
                    });
            }
        });
    }
    /**
     * <details><summary><strong style='color: #0072a3; cursor: pointer'>Available Providers</strong></summary>
     *
     *
     *
     * |Name|Version|Price|Billing unit|
     * |----|-------|-----|------------|
     * |**amazon**|`boto3 (v1.15.18)`|0.025 (per 1 page)|1 page
     * |**base64**|`latest`|0.2 (per 1 page)|1 page
     * |**microsoft**|`rest API 3.0`|0.05 (per 1 page)|1 page
     * |**mindee**|`v2`|0.1 (per 1 page)|1 page
     * |**klippa**|`v1`|0.1 (per 1 file)|1 file
     *
     *
     * </details>
     *
     * <details><summary>Supported Languages</summary>
     *
     *
     *
     *
     *
     * |Name|Value|
     * |----|-----|
     * |**English**|`en`|
     * |**French**|`fr`|
     * |**German**|`de`|
     * |**Italian**|`it`|
     * |**Portuguese**|`pt`|
     * |**Spanish**|`es`|
     *
     * </details><details><summary>Supported Detailed Languages</summary>
     *
     *
     *
     *
     *
     * |Name|Value|
     * |----|-----|
     * |**English (United States)**|`en-US`|
     * |**French (France)**|`fr-FR`|
     * |**German (Germany)**|`de-DE`|
     * |**Italian (Italy)**|`it-IT`|
     * |**Portuguese (Portugal)**|`pt-PT`|
     * |**Spanish (Spain)**|`es-ES`|
     *
     * </details>
     * @throws {@link EdenAi.BadRequestError}
     * @throws {@link EdenAi.ForbiddenError}
     * @throws {@link EdenAi.NotFoundError}
     * @throws {@link EdenAi.InternalServerError}
     */
    identityParserCreate(file, request, requestOptions) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const _request = new form_data_1.default();
            _request.append("providers", request.providers);
            _request.append("fallback_providers", request.fallbackProviders);
            _request.append("response_as_dict", request.responseAsDict.toString());
            _request.append("attributes_as_list", request.attributesAsList.toString());
            _request.append("show_original_response", request.showOriginalResponse.toString());
            _request.append("file", file);
            if (request.fileUrl != null) {
                _request.append("file_url", request.fileUrl);
            }
            const _response = yield core.fetcher({
                url: (0, url_join_1.default)((_a = (yield core.Supplier.get(this._options.environment))) !== null && _a !== void 0 ? _a : environments.EdenAiEnvironment.Default, "ocr/identity_parser"),
                method: "POST",
                headers: {
                    Authorization: yield this._getAuthorizationHeader(),
                    "X-Fern-Language": "JavaScript",
                    "Content-Length": (yield core.getFormDataContentLength(_request)).toString(),
                },
                contentType: "multipart/form-data; boundary=" + _request.getBoundary(),
                body: _request,
                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            });
            if (_response.ok) {
                return yield serializers.OcridentityParserResponseModel.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    breadcrumbsPrefix: ["response"],
                });
            }
            if (_response.error.reason === "status-code") {
                switch (_response.error.statusCode) {
                    case 400:
                        throw new EdenAi.BadRequestError(yield serializers.BadRequest.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }));
                    case 403:
                        throw new EdenAi.ForbiddenError(yield serializers.Error_.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }));
                    case 404:
                        throw new EdenAi.NotFoundError(yield serializers.NotFoundResponse.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }));
                    case 500:
                        throw new EdenAi.InternalServerError(yield serializers.Error_.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }));
                    default:
                        throw new errors.EdenAiError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.body,
                        });
                }
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.EdenAiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                    });
                case "timeout":
                    throw new errors.EdenAiTimeoutError();
                case "unknown":
                    throw new errors.EdenAiError({
                        message: _response.error.errorMessage,
                    });
            }
        });
    }
    /**
     * <details><summary><strong style='color: #0072a3; cursor: pointer'>Available Providers</strong></summary>
     *
     *
     *
     * |Name|Version|Price|Billing unit|
     * |----|-------|-----|------------|
     * |**affinda**|`affinda 1.0.2`|0.08 (per 1 page)|1 page
     * |**base64**|`latest`|0.25 (per 1 page)|1 page
     * |**dataleon**|`v3.1.0`|0.05 (per 1 page)|1 page
     * |**microsoft**|`v2.1-preview.3`|0.05 (per 1 page)|1 page
     * |**mindee**|`v2`|0.1 (per 1 page)|1 page
     * |**amazon**|`boto3 1.26.8`|0.01 (per 1 page)|1 page
     * |**google**|`DocumentAI v1 beta3`|0.01 (per 1 page)|10 page
     * |**klippa**|`v1`|0.1 (per 1 file)|1 file
     * |**veryfi**|`v8`|0.16 (per 1 file)|1 file
     *
     *
     * </details>
     *
     * <details><summary>Supported Languages</summary>
     *
     *
     *
     *
     *
     * |Name|Value|
     * |----|-----|
     * |**Catalan**|`ca`|
     * |**Danish**|`da`|
     * |**Dutch**|`nl`|
     * |**English**|`en`|
     * |**Estonian**|`et`|
     * |**French**|`fr`|
     * |**German**|`de`|
     * |**Italian**|`it`|
     * |**Latvian**|`lv`|
     * |**Lithuanian**|`lt`|
     * |**Portuguese**|`pt`|
     * |**Romanian**|`ro`|
     * |**Spanish**|`es`|
     * |**Swedish**|`sv`|
     *
     * </details><details><summary>Supported Detailed Languages</summary>
     *
     *
     *
     *
     *
     * |Name|Value|
     * |----|-----|
     * |**Auto detection**|`auto-detect`|
     * |**Danish (Denmark)**|`da-DK`|
     * |**English (United States)**|`en-US`|
     * |**French (France)**|`fr-FR`|
     * |**German (Germany)**|`de-DE`|
     * |**Italian (Italy)**|`it-IT`|
     * |**Portuguese (Portugal)**|`pt-PT`|
     * |**Spanish (Spain)**|`es-ES`|
     *
     * </details>
     * @throws {@link EdenAi.BadRequestError}
     * @throws {@link EdenAi.ForbiddenError}
     * @throws {@link EdenAi.NotFoundError}
     * @throws {@link EdenAi.InternalServerError}
     */
    invoiceParserCreate(file, request, requestOptions) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const _request = new form_data_1.default();
            _request.append("providers", request.providers);
            _request.append("fallback_providers", request.fallbackProviders);
            _request.append("response_as_dict", request.responseAsDict.toString());
            _request.append("attributes_as_list", request.attributesAsList.toString());
            _request.append("show_original_response", request.showOriginalResponse.toString());
            _request.append("file", file);
            if (request.fileUrl != null) {
                _request.append("file_url", request.fileUrl);
            }
            if (request.language != null) {
                _request.append("language", request.language);
            }
            const _response = yield core.fetcher({
                url: (0, url_join_1.default)((_a = (yield core.Supplier.get(this._options.environment))) !== null && _a !== void 0 ? _a : environments.EdenAiEnvironment.Default, "ocr/invoice_parser"),
                method: "POST",
                headers: {
                    Authorization: yield this._getAuthorizationHeader(),
                    "X-Fern-Language": "JavaScript",
                    "Content-Length": (yield core.getFormDataContentLength(_request)).toString(),
                },
                contentType: "multipart/form-data; boundary=" + _request.getBoundary(),
                body: _request,
                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            });
            if (_response.ok) {
                return yield serializers.OcrinvoiceParserResponseModel.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    breadcrumbsPrefix: ["response"],
                });
            }
            if (_response.error.reason === "status-code") {
                switch (_response.error.statusCode) {
                    case 400:
                        throw new EdenAi.BadRequestError(yield serializers.BadRequest.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }));
                    case 403:
                        throw new EdenAi.ForbiddenError(yield serializers.Error_.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }));
                    case 404:
                        throw new EdenAi.NotFoundError(yield serializers.NotFoundResponse.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }));
                    case 500:
                        throw new EdenAi.InternalServerError(yield serializers.Error_.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }));
                    default:
                        throw new errors.EdenAiError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.body,
                        });
                }
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.EdenAiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                    });
                case "timeout":
                    throw new errors.EdenAiTimeoutError();
                case "unknown":
                    throw new errors.EdenAiError({
                        message: _response.error.errorMessage,
                    });
            }
        });
    }
    /**
     * <details><summary><strong style='color: #0072a3; cursor: pointer'>Available Providers</strong></summary>
     *
     *
     *
     * |Name|Version|Price|Billing unit|
     * |----|-------|-----|------------|
     * |**amazon**|`boto3 (v1.15.18)`|1.5 (per 1000 page)|1 page
     * |**clarifai**|`8.0.0`|2.0 (per 1000 page)|1 page
     * |**google**|`v1`|1.5 (per 1000 page)|1 page
     * |**microsoft**|`v3.2`|1.0 (per 1000 page)|1 page
     * |**sentisight**|`v3.3.1`|1.0 (per 1000 file)|1 file
     * |**api4ai**|`v1.0.0`|3.0 (per 1000 request)|1 request
     *
     *
     * </details>
     *
     * <details><summary>Supported Languages</summary>
     *
     *
     *
     *
     *
     * |Name|Value|
     * |----|-----|
     * |**Abaza**|`abq`|
     * |**Adyghe**|`ady`|
     * |**Afrikaans**|`af`|
     * |**Albanian**|`sq`|
     * |**Angika**|`anp`|
     * |**Arabic**|`ar`|
     * |**Assamese**|`as`|
     * |**Asturian**|`ast`|
     * |**Avaric**|`av`|
     * |**Awadhi**|`awa`|
     * |**Azerbaijani**|`az`|
     * |**Bagheli**|`bfy`|
     * |**Basque**|`eu`|
     * |**Belarusian**|`be`|
     * |**Bengali**|`bn`|
     * |**Bhojpuri**|`bho`|
     * |**Bihari languages**|`bh`|
     * |**Bislama**|`bi`|
     * |**Bodo (India)**|`brx`|
     * |**Bosnian**|`bs`|
     * |**Braj**|`bra`|
     * |**Breton**|`br`|
     * |**Bulgarian**|`bg`|
     * |**Bundeli**|`bns`|
     * |**Buriat**|`bua`|
     * |**Camling**|`rab`|
     * |**Catalan**|`ca`|
     * |**Cebuano**|`ceb`|
     * |**Chamorro**|`ch`|
     * |**Chechen**|`ce`|
     * |**Chhattisgarhi**|`hne`|
     * |**Chinese**|`zh`|
     * |**Cornish**|`kw`|
     * |**Corsican**|`co`|
     * |**Crimean Tatar**|`crh`|
     * |**Croatian**|`hr`|
     * |**Czech**|`cs`|
     * |**Danish**|`da`|
     * |**Dargwa**|`dar`|
     * |**Dari**|`prs`|
     * |**Dhimal**|`dhi`|
     * |**Dogri (macrolanguage)**|`doi`|
     * |**Dutch**|`nl`|
     * |**English**|`en`|
     * |**Erzya**|`myv`|
     * |**Estonian**|`et`|
     * |**Faroese**|`fo`|
     * |**Fijian**|`fj`|
     * |**Filipino**|`fil`|
     * |**Finnish**|`fi`|
     * |**French**|`fr`|
     * |**Friulian**|`fur`|
     * |**Gagauz**|`gag`|
     * |**Galician**|`gl`|
     * |**German**|`de`|
     * |**Gilbertese**|`gil`|
     * |**Goan Konkani**|`gom`|
     * |**Gondi**|`gon`|
     * |**Gurung**|`gvr`|
     * |**Haitian**|`ht`|
     * |**Halbi**|`hlb`|
     * |**Hani**|`hni`|
     * |**Haryanvi**|`bgc`|
     * |**Hawaiian**|`haw`|
     * |**Hindi**|`hi`|
     * |**Hmong Daw**|`mww`|
     * |**Ho**|`hoc`|
     * |**Hungarian**|`hu`|
     * |**Icelandic**|`is`|
     * |**Inari Sami**|`smn`|
     * |**Indonesian**|`id`|
     * |**Ingush**|`inh`|
     * |**Interlingua (International Auxiliary Language Association)**|`ia`|
     * |**Inuktitut**|`iu`|
     * |**Irish**|`ga`|
     * |**Italian**|`it`|
     * |**Japanese**|`ja`|
     * |**Jaunsari**|`jns`|
     * |**Javanese**|`jv`|
     * |**K'iche'**|`quc`|
     * |**Kabardian**|`kbd`|
     * |**Kabuverdianu**|`kea`|
     * |**Kachin**|`kac`|
     * |**Kalaallisut**|`kl`|
     * |**Kangri**|`xnr`|
     * |**Kara-Kalpak**|`kaa`|
     * |**Karachay-Balkar**|`krc`|
     * |**Kashubian**|`csb`|
     * |**Kazakh**|`kk`|
     * |**Khaling**|`klr`|
     * |**Khasi**|`kha`|
     * |**Kirghiz**|`ky`|
     * |**Korean**|`ko`|
     * |**Korku**|`kfq`|
     * |**Koryak**|`kpy`|
     * |**Kosraean**|`kos`|
     * |**Kumarbhag Paharia**|`kmj`|
     * |**Kumyk**|`kum`|
     * |**Kurdish**|`ku`|
     * |**Kurukh**|`kru`|
     * |**Kölsch**|`ksh`|
     * |**Lak**|`lbe`|
     * |**Lakota**|`lkt`|
     * |**Latin**|`la`|
     * |**Latvian**|`lv`|
     * |**Lezghian**|`lez`|
     * |**Lithuanian**|`lt`|
     * |**Lower Sorbian**|`dsb`|
     * |**Lule Sami**|`smj`|
     * |**Luxembourgish**|`lb`|
     * |**Mahasu Pahari**|`bfz`|
     * |**Maithili**|`mai`|
     * |**Malay (macrolanguage)**|`ms`|
     * |**Maltese**|`mt`|
     * |**Manx**|`gv`|
     * |**Maori**|`mi`|
     * |**Marathi**|`mr`|
     * |**Marshallese**|`mh`|
     * |**Mongolian**|`mn`|
     * |**Neapolitan**|`nap`|
     * |**Nepali (macrolanguage)**|`ne`|
     * |**Newari**|`new`|
     * |**Niuean**|`niu`|
     * |**Nogai**|`nog`|
     * |**Northern Sami**|`se`|
     * |**Norwegian**|`no`|
     * |**Occitan (post 1500)**|`oc`|
     * |**Old English (ca. 450-1100)**|`ang`|
     * |**Ossetian**|`os`|
     * |**Pali**|`pi`|
     * |**Panjabi**|`pa`|
     * |**Persian**|`fa`|
     * |**Polish**|`pl`|
     * |**Portuguese**|`pt`|
     * |**Pushto**|`ps`|
     * |**Romanian**|`ro`|
     * |**Romansh**|`rm`|
     * |**Russian**|`ru`|
     * |**Sadri**|`sck`|
     * |**Samoan**|`sm`|
     * |**Sanskrit**|`sa`|
     * |**Santali**|`sat`|
     * |**Scots**|`sco`|
     * |**Scottish Gaelic**|`gd`|
     * |**Serbian**|`sr`|
     * |**Sherpa**|`xsr`|
     * |**Sirmauri**|`srx`|
     * |**Skolt Sami**|`sms`|
     * |**Slovak**|`sk`|
     * |**Slovenian**|`sl`|
     * |**Somali**|`so`|
     * |**Southern Sami**|`sma`|
     * |**Spanish**|`es`|
     * |**Swahili (macrolanguage)**|`sw`|
     * |**Swedish**|`sv`|
     * |**Tabassaran**|`tab`|
     * |**Tagalog**|`tl`|
     * |**Tajik**|`tg`|
     * |**Tatar**|`tt`|
     * |**Tetum**|`tet`|
     * |**Thangmi**|`thf`|
     * |**Tonga (Tonga Islands)**|`to`|
     * |**Turkish**|`tr`|
     * |**Turkmen**|`tk`|
     * |**Tuvinian**|`tyv`|
     * |**Uighur**|`ug`|
     * |**Ukrainian**|`uk`|
     * |**Upper Sorbian**|`hsb`|
     * |**Urdu**|`ur`|
     * |**Uzbek**|`uz`|
     * |**Vietnamese**|`vi`|
     * |**Volapük**|`vo`|
     * |**Walser**|`wae`|
     * |**Welsh**|`cy`|
     * |**Western Frisian**|`fy`|
     * |**Yucateco**|`yua`|
     * |**Zhuang**|`za`|
     * |**Zulu**|`zu`|
     *
     * </details><details><summary>Supported Detailed Languages</summary>
     *
     *
     *
     *
     *
     * |Name|Value|
     * |----|-----|
     * |**Auto detection**|`auto-detect`|
     * |**Arabic (Pseudo-Accents)**|`ar-XA`|
     * |**Belarusian**|`be-cyrl`|
     * |**Belarusian (Latin)**|`be-latn`|
     * |**Chinese (China)**|`zh-CN`|
     * |**Chinese (Simplified)**|`zh-Hans`|
     * |**Chinese (Taiwan)**|`zh-TW`|
     * |**Chinese (Traditional)**|`zh-Hant`|
     * |**Danish (Denmark)**|`da-DK`|
     * |**Dutch (Netherlands)**|`nl-NL`|
     * |**English (United States)**|`en-US`|
     * |**Finnish (Finland)**|`fi-FI`|
     * |**French (France)**|`fr-FR`|
     * |**German (Germany)**|`de-DE`|
     * |**Hungarian (Hungary)**|`hu-HU`|
     * |**Italian (Italy)**|`it-IT`|
     * |**Japanese (Japan)**|`ja-JP`|
     * |**Kara-Kalpak (Cyrillic)**|`kaa-Cyrl`|
     * |**Kazakh**|`kk-cyrl`|
     * |**Kazakh (Latin)**|`kk-latn`|
     * |**Korean (South Korea)**|`ko-KR`|
     * |**Kurdish (Arabic)**|`ku-arab`|
     * |**Kurdish (Latin)**|`ku-latn`|
     * |**Polish**|`pl-PO`|
     * |**Portuguese (Portugal)**|`pt-PT`|
     * |**Region: Czechia**|`cz-CZ`|
     * |**Region: Greece**|`gr-GR`|
     * |**Russian (Russia)**|`ru-RU`|
     * |**Serbian (Cyrillic, Montenegro)**|`sr-Cyrl-ME`|
     * |**Serbian (Latin)**|`sr-latn`|
     * |**Serbian (Latin, Montenegro)**|`sr-Latn-ME`|
     * |**Serbian (Montenegro)**|`sr-ME`|
     * |**Spanish (Spain)**|`es-ES`|
     * |**Swedish (Sweden)**|`sv-SE`|
     * |**Turkish (Turkey)**|`tr-TR`|
     * |**Uzbek (Arabic)**|`uz-arab`|
     * |**Uzbek (Cyrillic)**|`uz-cyrl`|
     *
     * </details>
     * @throws {@link EdenAi.BadRequestError}
     * @throws {@link EdenAi.ForbiddenError}
     * @throws {@link EdenAi.NotFoundError}
     * @throws {@link EdenAi.InternalServerError}
     */
    ocrCreate(file, request, requestOptions) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const _request = new form_data_1.default();
            _request.append("providers", request.providers);
            _request.append("fallback_providers", request.fallbackProviders);
            _request.append("response_as_dict", request.responseAsDict.toString());
            _request.append("attributes_as_list", request.attributesAsList.toString());
            _request.append("show_original_response", request.showOriginalResponse.toString());
            _request.append("file", file);
            if (request.fileUrl != null) {
                _request.append("file_url", request.fileUrl);
            }
            if (request.language != null) {
                _request.append("language", request.language);
            }
            const _response = yield core.fetcher({
                url: (0, url_join_1.default)((_a = (yield core.Supplier.get(this._options.environment))) !== null && _a !== void 0 ? _a : environments.EdenAiEnvironment.Default, "ocr/ocr"),
                method: "POST",
                headers: {
                    Authorization: yield this._getAuthorizationHeader(),
                    "X-Fern-Language": "JavaScript",
                    "Content-Length": (yield core.getFormDataContentLength(_request)).toString(),
                },
                contentType: "multipart/form-data; boundary=" + _request.getBoundary(),
                body: _request,
                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            });
            if (_response.ok) {
                return yield serializers.OcrocrResponseModel.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    breadcrumbsPrefix: ["response"],
                });
            }
            if (_response.error.reason === "status-code") {
                switch (_response.error.statusCode) {
                    case 400:
                        throw new EdenAi.BadRequestError(yield serializers.BadRequest.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }));
                    case 403:
                        throw new EdenAi.ForbiddenError(yield serializers.Error_.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }));
                    case 404:
                        throw new EdenAi.NotFoundError(yield serializers.NotFoundResponse.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }));
                    case 500:
                        throw new EdenAi.InternalServerError(yield serializers.Error_.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }));
                    default:
                        throw new errors.EdenAiError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.body,
                        });
                }
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.EdenAiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                    });
                case "timeout":
                    throw new errors.EdenAiTimeoutError();
                case "unknown":
                    throw new errors.EdenAiError({
                        message: _response.error.errorMessage,
                    });
            }
        });
    }
    /**
     * Get a list of all jobs launched for this feature. You'll then be able to use the ID of each one to get its status and results.<br>
     *                         Please note that a **job status doesn't get updated until a get request** is sent.
     */
    ocrAsyncRetrieve(requestOptions) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const _response = yield core.fetcher({
                url: (0, url_join_1.default)((_a = (yield core.Supplier.get(this._options.environment))) !== null && _a !== void 0 ? _a : environments.EdenAiEnvironment.Default, "ocr/ocr_async"),
                method: "GET",
                headers: {
                    Authorization: yield this._getAuthorizationHeader(),
                    "X-Fern-Language": "JavaScript",
                },
                contentType: "application/json",
                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            });
            if (_response.ok) {
                return yield serializers.ListAsyncJobResponse.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    breadcrumbsPrefix: ["response"],
                });
            }
            if (_response.error.reason === "status-code") {
                throw new errors.EdenAiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.body,
                });
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.EdenAiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                    });
                case "timeout":
                    throw new errors.EdenAiTimeoutError();
                case "unknown":
                    throw new errors.EdenAiError({
                        message: _response.error.errorMessage,
                    });
            }
        });
    }
    /**
     * <details><summary><strong style='color: #0072a3; cursor: pointer'>Available Providers</strong></summary>
     *
     *
     *
     * |Name|Version|Price|Billing unit|
     * |----|-------|-----|------------|
     * |**amazon**|`boto3 (v1.15.18)`|1.5 (per 1000 page)|1 page
     *
     *
     * </details>
     *
     *
     */
    ocrAsyncCreate(file, request, requestOptions) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const _request = new form_data_1.default();
            _request.append("providers", request.providers);
            _request.append("fallback_providers", request.fallbackProviders);
            _request.append("show_original_response", request.showOriginalResponse.toString());
            _request.append("webhook_receiver", request.webhookReceiver);
            _request.append("users_webhook_parameters", JSON.stringify(request.usersWebhookParameters));
            _request.append("file", file);
            if (request.fileUrl != null) {
                _request.append("file_url", request.fileUrl);
            }
            const _response = yield core.fetcher({
                url: (0, url_join_1.default)((_a = (yield core.Supplier.get(this._options.environment))) !== null && _a !== void 0 ? _a : environments.EdenAiEnvironment.Default, "ocr/ocr_async"),
                method: "POST",
                headers: {
                    Authorization: yield this._getAuthorizationHeader(),
                    "X-Fern-Language": "JavaScript",
                    "Content-Length": (yield core.getFormDataContentLength(_request)).toString(),
                },
                contentType: "multipart/form-data; boundary=" + _request.getBoundary(),
                body: _request,
                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            });
            if (_response.ok) {
                return yield serializers.LaunchAsyncJobResponse.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    breadcrumbsPrefix: ["response"],
                });
            }
            if (_response.error.reason === "status-code") {
                throw new errors.EdenAiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.body,
                });
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.EdenAiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                    });
                case "timeout":
                    throw new errors.EdenAiTimeoutError();
                case "unknown":
                    throw new errors.EdenAiError({
                        message: _response.error.errorMessage,
                    });
            }
        });
    }
    /**
     * Get the status and results of an async job given its ID.
     * @throws {@link EdenAi.BadRequestError}
     * @throws {@link EdenAi.ForbiddenError}
     * @throws {@link EdenAi.NotFoundError}
     * @throws {@link EdenAi.InternalServerError}
     */
    ocrAsyncRetrieve2(publicId, request = {}, requestOptions) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const { responseAsDict, showOriginalResponse } = request;
            const _queryParams = new url_search_params_1.default();
            if (responseAsDict != null) {
                _queryParams.append("response_as_dict", responseAsDict.toString());
            }
            if (showOriginalResponse != null) {
                _queryParams.append("show_original_response", showOriginalResponse.toString());
            }
            const _response = yield core.fetcher({
                url: (0, url_join_1.default)((_a = (yield core.Supplier.get(this._options.environment))) !== null && _a !== void 0 ? _a : environments.EdenAiEnvironment.Default, `ocr/ocr_async/${publicId}`),
                method: "GET",
                headers: {
                    Authorization: yield this._getAuthorizationHeader(),
                    "X-Fern-Language": "JavaScript",
                },
                contentType: "application/json",
                queryParameters: _queryParams,
                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            });
            if (_response.ok) {
                return yield serializers.AsyncocrocrAsyncResponseModel.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    breadcrumbsPrefix: ["response"],
                });
            }
            if (_response.error.reason === "status-code") {
                switch (_response.error.statusCode) {
                    case 400:
                        throw new EdenAi.BadRequestError(yield serializers.BadRequest.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }));
                    case 403:
                        throw new EdenAi.ForbiddenError(yield serializers.Error_.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }));
                    case 404:
                        throw new EdenAi.NotFoundError(yield serializers.NotFoundResponse.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }));
                    case 500:
                        throw new EdenAi.InternalServerError(yield serializers.Error_.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }));
                    default:
                        throw new errors.EdenAiError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.body,
                        });
                }
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.EdenAiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                    });
                case "timeout":
                    throw new errors.EdenAiTimeoutError();
                case "unknown":
                    throw new errors.EdenAiError({
                        message: _response.error.errorMessage,
                    });
            }
        });
    }
    /**
     * Get a list of all jobs launched for this feature. You'll then be able to use the ID of each one to get its status and results.<br>
     *                         Please note that a **job status doesn't get updated until a get request** is sent.
     */
    ocrTablesAsyncRetrieve(requestOptions) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const _response = yield core.fetcher({
                url: (0, url_join_1.default)((_a = (yield core.Supplier.get(this._options.environment))) !== null && _a !== void 0 ? _a : environments.EdenAiEnvironment.Default, "ocr/ocr_tables_async"),
                method: "GET",
                headers: {
                    Authorization: yield this._getAuthorizationHeader(),
                    "X-Fern-Language": "JavaScript",
                },
                contentType: "application/json",
                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            });
            if (_response.ok) {
                return yield serializers.ListAsyncJobResponse.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    breadcrumbsPrefix: ["response"],
                });
            }
            if (_response.error.reason === "status-code") {
                throw new errors.EdenAiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.body,
                });
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.EdenAiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                    });
                case "timeout":
                    throw new errors.EdenAiTimeoutError();
                case "unknown":
                    throw new errors.EdenAiError({
                        message: _response.error.errorMessage,
                    });
            }
        });
    }
    /**
     * <details><summary><strong style='color: #0072a3; cursor: pointer'>Available Providers</strong></summary>
     *
     *
     *
     * |Name|Version|Price|Billing unit|
     * |----|-------|-----|------------|
     * |**amazon**|`boto3 (v1.15.18)`|15.0 (per 1000 page)|1 page
     * |**google**|`DocumentAI v1 beta3`|65.0 (per 1000 page)|1 page
     * |**microsoft**|`rest API 3.0`|50.0 (per 1000 page)|1 page
     *
     *
     * </details>
     *
     * <details><summary>Supported Languages</summary>
     *
     *
     *
     *
     *
     * |Name|Value|
     * |----|-----|
     * |**Afrikaans**|`af`|
     * |**Albanian**|`sq`|
     * |**Angika**|`anp`|
     * |**Arabic**|`ar`|
     * |**Asturian**|`ast`|
     * |**Awadhi**|`awa`|
     * |**Azerbaijani**|`az`|
     * |**Bagheli**|`bfy`|
     * |**Basque**|`eu`|
     * |**Belarusian**|`be`|
     * |**Bhojpuri**|`bho`|
     * |**Bislama**|`bi`|
     * |**Bodo (India)**|`brx`|
     * |**Bosnian**|`bs`|
     * |**Braj**|`bra`|
     * |**Breton**|`br`|
     * |**Bulgarian**|`bg`|
     * |**Bundeli**|`bns`|
     * |**Buriat**|`bua`|
     * |**Camling**|`rab`|
     * |**Catalan**|`ca`|
     * |**Cebuano**|`ceb`|
     * |**Chamorro**|`ch`|
     * |**Chhattisgarhi**|`hne`|
     * |**Chinese**|`zh`|
     * |**Cornish**|`kw`|
     * |**Corsican**|`co`|
     * |**Crimean Tatar**|`crh`|
     * |**Croatian**|`hr`|
     * |**Czech**|`cs`|
     * |**Danish**|`da`|
     * |**Dari**|`prs`|
     * |**Dhimal**|`dhi`|
     * |**Dogri (macrolanguage)**|`doi`|
     * |**Dutch**|`nl`|
     * |**English**|`en`|
     * |**Erzya**|`myv`|
     * |**Estonian**|`et`|
     * |**Faroese**|`fo`|
     * |**Fijian**|`fj`|
     * |**Filipino**|`fil`|
     * |**Finnish**|`fi`|
     * |**French**|`fr`|
     * |**Friulian**|`fur`|
     * |**Gagauz**|`gag`|
     * |**Galician**|`gl`|
     * |**German**|`de`|
     * |**Gilbertese**|`gil`|
     * |**Gondi**|`gon`|
     * |**Gurung**|`gvr`|
     * |**Haitian**|`ht`|
     * |**Halbi**|`hlb`|
     * |**Hani**|`hni`|
     * |**Haryanvi**|`bgc`|
     * |**Hawaiian**|`haw`|
     * |**Hindi**|`hi`|
     * |**Hmong Daw**|`mww`|
     * |**Ho**|`hoc`|
     * |**Hungarian**|`hu`|
     * |**Icelandic**|`is`|
     * |**Inari Sami**|`smn`|
     * |**Indonesian**|`id`|
     * |**Interlingua (International Auxiliary Language Association)**|`ia`|
     * |**Inuktitut**|`iu`|
     * |**Irish**|`ga`|
     * |**Italian**|`it`|
     * |**Japanese**|`ja`|
     * |**Jaunsari**|`jns`|
     * |**Javanese**|`jv`|
     * |**K'iche'**|`quc`|
     * |**Kabuverdianu**|`kea`|
     * |**Kachin**|`kac`|
     * |**Kalaallisut**|`kl`|
     * |**Kangri**|`xnr`|
     * |**Kara-Kalpak**|`kaa`|
     * |**Karachay-Balkar**|`krc`|
     * |**Kashubian**|`csb`|
     * |**Kazakh**|`kk`|
     * |**Khaling**|`klr`|
     * |**Khasi**|`kha`|
     * |**Kirghiz**|`ky`|
     * |**Korean**|`ko`|
     * |**Korku**|`kfq`|
     * |**Koryak**|`kpy`|
     * |**Kosraean**|`kos`|
     * |**Kumarbhag Paharia**|`kmj`|
     * |**Kumyk**|`kum`|
     * |**Kurdish**|`ku`|
     * |**Kurukh**|`kru`|
     * |**Kölsch**|`ksh`|
     * |**Lakota**|`lkt`|
     * |**Latin**|`la`|
     * |**Latvian**|`lv`|
     * |**Lithuanian**|`lt`|
     * |**Lower Sorbian**|`dsb`|
     * |**Lule Sami**|`smj`|
     * |**Luxembourgish**|`lb`|
     * |**Mahasu Pahari**|`bfz`|
     * |**Malay (macrolanguage)**|`ms`|
     * |**Maltese**|`mt`|
     * |**Manx**|`gv`|
     * |**Maori**|`mi`|
     * |**Marathi**|`mr`|
     * |**Mongolian**|`mn`|
     * |**Neapolitan**|`nap`|
     * |**Nepali (macrolanguage)**|`ne`|
     * |**Niuean**|`niu`|
     * |**Nogai**|`nog`|
     * |**Northern Sami**|`se`|
     * |**Norwegian**|`no`|
     * |**Occitan (post 1500)**|`oc`|
     * |**Ossetian**|`os`|
     * |**Panjabi**|`pa`|
     * |**Persian**|`fa`|
     * |**Polish**|`pl`|
     * |**Portuguese**|`pt`|
     * |**Pushto**|`ps`|
     * |**Romanian**|`ro`|
     * |**Romansh**|`rm`|
     * |**Russian**|`ru`|
     * |**Sadri**|`sck`|
     * |**Samoan**|`sm`|
     * |**Sanskrit**|`sa`|
     * |**Santali**|`sat`|
     * |**Scots**|`sco`|
     * |**Scottish Gaelic**|`gd`|
     * |**Serbian**|`sr`|
     * |**Sherpa**|`xsr`|
     * |**Sirmauri**|`srx`|
     * |**Skolt Sami**|`sms`|
     * |**Slovak**|`sk`|
     * |**Slovenian**|`sl`|
     * |**Somali**|`so`|
     * |**Southern Sami**|`sma`|
     * |**Spanish**|`es`|
     * |**Swahili (macrolanguage)**|`sw`|
     * |**Swedish**|`sv`|
     * |**Tagalog**|`tl`|
     * |**Tajik**|`tg`|
     * |**Tatar**|`tt`|
     * |**Tetum**|`tet`|
     * |**Thangmi**|`thf`|
     * |**Tonga (Tonga Islands)**|`to`|
     * |**Turkish**|`tr`|
     * |**Turkmen**|`tk`|
     * |**Tuvinian**|`tyv`|
     * |**Uighur**|`ug`|
     * |**Upper Sorbian**|`hsb`|
     * |**Urdu**|`ur`|
     * |**Uzbek**|`uz`|
     * |**Vietnamese**|`vi`|
     * |**Volapük**|`vo`|
     * |**Walser**|`wae`|
     * |**Welsh**|`cy`|
     * |**Western Frisian**|`fy`|
     * |**Yucateco**|`yua`|
     * |**Zhuang**|`za`|
     * |**Zulu**|`zu`|
     *
     * </details><details><summary>Supported Detailed Languages</summary>
     *
     *
     *
     *
     *
     * |Name|Value|
     * |----|-----|
     * |**Auto detection**|`auto-detect`|
     * |**Belarusian**|`be-Cyrl`|
     * |**Belarusian (Latin)**|`be-Latn`|
     * |**Chinese (Simplified)**|`zh-Hans`|
     * |**Chinese (Traditional)**|`zh-Hant`|
     * |**Kara-Kalpak (Cyrillic)**|`kaa-Cyrl`|
     * |**Kazakh**|`kk-Cyrl`|
     * |**Kazakh (Latin)**|`kk-Latn`|
     * |**Kurdish (Arabic)**|`ku-Arab`|
     * |**Kurdish (Latin)**|`ku-Latn`|
     * |**Serbian (Cyrillic)**|`sr-Cyrl`|
     * |**Serbian (Cyrillic, Montenegro)**|`sr-Cyrl-ME`|
     * |**Serbian (Latin)**|`sr-Latn`|
     * |**Serbian (Latin, Montenegro)**|`sr-Latn-ME`|
     * |**Serbian (Montenegro)**|`sr-ME`|
     * |**Uzbek (Arabic)**|`uz-Arab`|
     * |**Uzbek (Cyrillic)**|`uz-cyrl`|
     *
     * </details>
     */
    ocrTablesAsyncCreate(file, request, requestOptions) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const _request = new form_data_1.default();
            _request.append("providers", request.providers);
            _request.append("fallback_providers", request.fallbackProviders);
            _request.append("show_original_response", request.showOriginalResponse.toString());
            _request.append("webhook_receiver", request.webhookReceiver);
            _request.append("users_webhook_parameters", JSON.stringify(request.usersWebhookParameters));
            _request.append("file", file);
            if (request.fileUrl != null) {
                _request.append("file_url", request.fileUrl);
            }
            if (request.language != null) {
                _request.append("language", request.language);
            }
            const _response = yield core.fetcher({
                url: (0, url_join_1.default)((_a = (yield core.Supplier.get(this._options.environment))) !== null && _a !== void 0 ? _a : environments.EdenAiEnvironment.Default, "ocr/ocr_tables_async"),
                method: "POST",
                headers: {
                    Authorization: yield this._getAuthorizationHeader(),
                    "X-Fern-Language": "JavaScript",
                    "Content-Length": (yield core.getFormDataContentLength(_request)).toString(),
                },
                contentType: "multipart/form-data; boundary=" + _request.getBoundary(),
                body: _request,
                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            });
            if (_response.ok) {
                return yield serializers.LaunchAsyncJobResponse.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    breadcrumbsPrefix: ["response"],
                });
            }
            if (_response.error.reason === "status-code") {
                throw new errors.EdenAiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.body,
                });
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.EdenAiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                    });
                case "timeout":
                    throw new errors.EdenAiTimeoutError();
                case "unknown":
                    throw new errors.EdenAiError({
                        message: _response.error.errorMessage,
                    });
            }
        });
    }
    /**
     * Get the status and results of an async job given its ID.
     * @throws {@link EdenAi.BadRequestError}
     * @throws {@link EdenAi.ForbiddenError}
     * @throws {@link EdenAi.NotFoundError}
     * @throws {@link EdenAi.InternalServerError}
     */
    ocrTablesAsyncRetrieve2(publicId, request = {}, requestOptions) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const { responseAsDict, showOriginalResponse } = request;
            const _queryParams = new url_search_params_1.default();
            if (responseAsDict != null) {
                _queryParams.append("response_as_dict", responseAsDict.toString());
            }
            if (showOriginalResponse != null) {
                _queryParams.append("show_original_response", showOriginalResponse.toString());
            }
            const _response = yield core.fetcher({
                url: (0, url_join_1.default)((_a = (yield core.Supplier.get(this._options.environment))) !== null && _a !== void 0 ? _a : environments.EdenAiEnvironment.Default, `ocr/ocr_tables_async/${publicId}`),
                method: "GET",
                headers: {
                    Authorization: yield this._getAuthorizationHeader(),
                    "X-Fern-Language": "JavaScript",
                },
                contentType: "application/json",
                queryParameters: _queryParams,
                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            });
            if (_response.ok) {
                return yield serializers.AsyncocrocrTablesAsyncResponseModel.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    breadcrumbsPrefix: ["response"],
                });
            }
            if (_response.error.reason === "status-code") {
                switch (_response.error.statusCode) {
                    case 400:
                        throw new EdenAi.BadRequestError(yield serializers.BadRequest.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }));
                    case 403:
                        throw new EdenAi.ForbiddenError(yield serializers.Error_.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }));
                    case 404:
                        throw new EdenAi.NotFoundError(yield serializers.NotFoundResponse.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }));
                    case 500:
                        throw new EdenAi.InternalServerError(yield serializers.Error_.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }));
                    default:
                        throw new errors.EdenAiError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.body,
                        });
                }
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.EdenAiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                    });
                case "timeout":
                    throw new errors.EdenAiTimeoutError();
                case "unknown":
                    throw new errors.EdenAiError({
                        message: _response.error.errorMessage,
                    });
            }
        });
    }
    /**
     * <details><summary><strong style='color: #0072a3; cursor: pointer'>Available Providers</strong></summary>
     *
     *
     *
     * |Name|Version|Price|Billing unit|
     * |----|-------|-----|------------|
     * |**base64**|`latest`|0.25 (per 1 page)|1 page
     * |**dataleon**|`v3.1.0`|0.025 (per 1 page)|1 page
     * |**microsoft**|`rest API 3.0`|0.05 (per 1 page)|1 page
     * |**mindee**|`v2`|0.1 (per 1 page)|1 page
     * |**tabscanner**|`latest`|0.08 (per 1 page)|1 page
     * |**google**|`DocumentAI v1 beta3`|0.01 (per 1 page)|10 page
     * |**klippa**|`v1`|0.1 (per 1 file)|1 file
     * |**veryfi**|`v8`|0.08 (per 1 file)|1 file
     * |**amazon**|`boto3 1.26.8`|0.01 (per 1 page)|1 page
     *
     *
     * </details>
     *
     * <details><summary>Supported Languages</summary>
     *
     *
     *
     *
     *
     * |Name|Value|
     * |----|-----|
     * |**Catalan**|`ca`|
     * |**Danish**|`da`|
     * |**Dutch**|`nl`|
     * |**English**|`en`|
     * |**Estonian**|`et`|
     * |**French**|`fr`|
     * |**German**|`de`|
     * |**Italian**|`it`|
     * |**Latvian**|`lv`|
     * |**Lithuanian**|`lt`|
     * |**Portuguese**|`pt`|
     * |**Romanian**|`ro`|
     * |**Spanish**|`es`|
     * |**Swedish**|`sv`|
     * |**Turkish**|`tr`|
     *
     * </details><details><summary>Supported Detailed Languages</summary>
     *
     *
     *
     *
     *
     * |Name|Value|
     * |----|-----|
     * |**Auto detection**|`auto-detect`|
     * |**Catalan (Spain)**|`ca-ES`|
     * |**Danish (Denmark)**|`da-DK`|
     * |**Dutch (Netherlands)**|`nl-NL`|
     * |**English (United Kingdom)**|`en-GB`|
     * |**English (United States)**|`en-US`|
     * |**French (Canada)**|`fr-CA`|
     * |**French (France)**|`fr-FR`|
     * |**French (Switzerland)**|`fr-CH`|
     * |**German (Germany)**|`de-DE`|
     * |**German (Switzerland)**|`de-CH`|
     * |**Italian (Italy)**|`it-IT`|
     * |**Italian (Switzerland)**|`it-CH`|
     * |**Portuguese (Portugal)**|`pt-PT`|
     * |**Spanish (Spain)**|`es-ES`|
     *
     * </details>
     * @throws {@link EdenAi.BadRequestError}
     * @throws {@link EdenAi.ForbiddenError}
     * @throws {@link EdenAi.NotFoundError}
     * @throws {@link EdenAi.InternalServerError}
     */
    receiptParserCreate(file, request, requestOptions) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const _request = new form_data_1.default();
            _request.append("providers", request.providers);
            _request.append("fallback_providers", request.fallbackProviders);
            _request.append("response_as_dict", request.responseAsDict.toString());
            _request.append("attributes_as_list", request.attributesAsList.toString());
            _request.append("show_original_response", request.showOriginalResponse.toString());
            _request.append("file", file);
            if (request.fileUrl != null) {
                _request.append("file_url", request.fileUrl);
            }
            if (request.language != null) {
                _request.append("language", request.language);
            }
            const _response = yield core.fetcher({
                url: (0, url_join_1.default)((_a = (yield core.Supplier.get(this._options.environment))) !== null && _a !== void 0 ? _a : environments.EdenAiEnvironment.Default, "ocr/receipt_parser"),
                method: "POST",
                headers: {
                    Authorization: yield this._getAuthorizationHeader(),
                    "X-Fern-Language": "JavaScript",
                    "Content-Length": (yield core.getFormDataContentLength(_request)).toString(),
                },
                contentType: "multipart/form-data; boundary=" + _request.getBoundary(),
                body: _request,
                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            });
            if (_response.ok) {
                return yield serializers.OcrreceiptParserResponseModel.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    breadcrumbsPrefix: ["response"],
                });
            }
            if (_response.error.reason === "status-code") {
                switch (_response.error.statusCode) {
                    case 400:
                        throw new EdenAi.BadRequestError(yield serializers.BadRequest.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }));
                    case 403:
                        throw new EdenAi.ForbiddenError(yield serializers.Error_.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }));
                    case 404:
                        throw new EdenAi.NotFoundError(yield serializers.NotFoundResponse.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }));
                    case 500:
                        throw new EdenAi.InternalServerError(yield serializers.Error_.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }));
                    default:
                        throw new errors.EdenAiError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.body,
                        });
                }
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.EdenAiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                    });
                case "timeout":
                    throw new errors.EdenAiTimeoutError();
                case "unknown":
                    throw new errors.EdenAiError({
                        message: _response.error.errorMessage,
                    });
            }
        });
    }
    /**
     * <details><summary><strong style='color: #0072a3; cursor: pointer'>Available Providers</strong></summary>
     *
     *
     *
     * |Name|Version|Price|Billing unit|
     * |----|-------|-----|------------|
     * |**affinda**|`affinda 1.0.2`|0.07 (per 1 file)|1 file
     * |**hireability**|`hireability 1.0.0`|0.05 (per 1 file)|1 file
     *
     *
     * </details>
     *
     * <details><summary>Supported Languages</summary>
     *
     *
     *
     *
     *
     * |Name|Value|
     * |----|-----|
     * |**Arabic**|`ar`|
     * |**English**|`en`|
     * |**French**|`fr`|
     *
     * </details><details><summary>Supported Detailed Languages</summary>
     *
     *
     *
     *
     *
     * |Name|Value|
     * |----|-----|
     * |**Auto detection**|`auto-detect`|
     *
     * </details>
     * @throws {@link EdenAi.BadRequestError}
     * @throws {@link EdenAi.ForbiddenError}
     * @throws {@link EdenAi.NotFoundError}
     * @throws {@link EdenAi.InternalServerError}
     */
    resumeParserCreate(file, request, requestOptions) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const _request = new form_data_1.default();
            _request.append("providers", request.providers);
            _request.append("fallback_providers", request.fallbackProviders);
            _request.append("response_as_dict", request.responseAsDict.toString());
            _request.append("attributes_as_list", request.attributesAsList.toString());
            _request.append("show_original_response", request.showOriginalResponse.toString());
            _request.append("file", file);
            if (request.fileUrl != null) {
                _request.append("file_url", request.fileUrl);
            }
            const _response = yield core.fetcher({
                url: (0, url_join_1.default)((_a = (yield core.Supplier.get(this._options.environment))) !== null && _a !== void 0 ? _a : environments.EdenAiEnvironment.Default, "ocr/resume_parser"),
                method: "POST",
                headers: {
                    Authorization: yield this._getAuthorizationHeader(),
                    "X-Fern-Language": "JavaScript",
                    "Content-Length": (yield core.getFormDataContentLength(_request)).toString(),
                },
                contentType: "multipart/form-data; boundary=" + _request.getBoundary(),
                body: _request,
                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            });
            if (_response.ok) {
                return yield serializers.OcrresumeParserResponseModel.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    breadcrumbsPrefix: ["response"],
                });
            }
            if (_response.error.reason === "status-code") {
                switch (_response.error.statusCode) {
                    case 400:
                        throw new EdenAi.BadRequestError(yield serializers.BadRequest.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }));
                    case 403:
                        throw new EdenAi.ForbiddenError(yield serializers.Error_.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }));
                    case 404:
                        throw new EdenAi.NotFoundError(yield serializers.NotFoundResponse.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }));
                    case 500:
                        throw new EdenAi.InternalServerError(yield serializers.Error_.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }));
                    default:
                        throw new errors.EdenAiError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.body,
                        });
                }
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.EdenAiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                    });
                case "timeout":
                    throw new errors.EdenAiTimeoutError();
                case "unknown":
                    throw new errors.EdenAiError({
                        message: _response.error.errorMessage,
                    });
            }
        });
    }
    _getAuthorizationHeader() {
        return __awaiter(this, void 0, void 0, function* () {
            const bearer = yield core.Supplier.get(this._options.token);
            if (bearer != null) {
                return `Bearer ${bearer}`;
            }
            return undefined;
        });
    }
}
exports.Ocr = Ocr;
